#if NET6_0_OR_GREATER
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace ShopifySharp.GraphQL
{
    public static class Serializer
    {
        public static readonly JsonSerializerOptions Options = new JsonSerializerOptions
        {
            NumberHandling = JsonNumberHandling.AllowReadingFromString,
            Converters =
            {
                new JsonStringEnumConverter()
            },
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };
        public static string Serialize(object obj)
        {
            return JsonSerializer.Serialize(obj, obj.GetType(), Options);
        }

        public static object? Deserialize(string json, Type type)
        {
            return JsonSerializer.Deserialize(json, type, Options);
        }

        public static T? Deserialize<T>(string json)
            where T : class
        {
            return JsonSerializer.Deserialize<T>(json, Options);
        }
    }

    public interface IGraphQLObject
    {
    }

    public abstract class GraphQLObject<TSelf> : IGraphQLObject where TSelf : GraphQLObject<TSelf>
    {
        public static TSelf? FromJson(string json) => Serializer.Deserialize<TSelf>(json);
    }

    public static class GraphQLObjectExtensions
    {
        public static string ToJson(this IGraphQLObject o) => Serializer.Serialize(o);
    }

    public interface IConnectionWithEdges<TEdge, TNode> : IConnectionWithEdges<TNode> where TEdge : IEdge<TNode>
    {
        IEnumerable<IEdge<TNode>>? IConnectionWithEdges<TNode>.edges => this.edges?.Cast<IEdge<TNode>>();
        new IEnumerable<TEdge>? edges { get; }
    }

    public interface IConnectionWithEdges<TNode>
    {
        PageInfo? pageInfo { get; }

        IEnumerable<IEdge<TNode>>? edges { get; }
    }

    public interface IConnectionWithNodes<TNode>
    {
        PageInfo? pageInfo { get; }

        IEnumerable<TNode>? nodes { get; }
    }

    public interface IConnectionWithNodesAndEdges<TEdge, TNode> : IConnectionWithEdges<TEdge, TNode>, IConnectionWithNodes<TNode> where TEdge : IEdge<TNode>
    {
    }

    public interface IEdge<TNode>
    {
        string? cursor { get; }

        TNode? node { get; }
    }

    ///<summary>
    ///A checkout that was abandoned by the customer.
    ///</summary>
    public class AbandonedCheckout : GraphQLObject<AbandonedCheckout>, INavigable, INode
    {
        ///<summary>
        ///The URL for the buyer to recover their checkout.
        ///</summary>
        public string? abandonedCheckoutUrl { get; set; }
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///A list of the line items in this checkout.
        ///</summary>
        public AbandonedCheckoutLineItemConnection? lineItems { get; set; }
        ///<summary>
        ///The number of products in the checkout.
        ///</summary>
        public int? lineItemsQuantity { get; set; }
        ///<summary>
        ///The sum of all items in the checkout, including discounts, shipping, taxes, and tips.
        ///</summary>
        public MoneyBag? totalPriceSet { get; set; }
    }

    ///<summary>
    ///A single line item in an abandoned checkout.
    ///</summary>
    public class AbandonedCheckoutLineItem : GraphQLObject<AbandonedCheckoutLineItem>, INode
    {
        ///<summary>
        ///A list of extra information that has been added to the line item.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///Final total price for the entire quantity of this line item, including discounts.
        ///</summary>
        public MoneyBag? discountedTotalPriceSet { get; set; }
        ///<summary>
        ///The total price for the entire quantity of this line item, after all discounts are applied, at both the line item and code-based line item level.
        ///</summary>
        public MoneyBag? discountedTotalPriceWithCodeDiscount { get; set; }
        ///<summary>
        ///The price of a single variant unit after discounts are applied at the line item level, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? discountedUnitPriceSet { get; set; }
        ///<summary>
        ///The price of a single variant unit after all discounts are applied, at both the line item and code-based line item level.
        ///</summary>
        public MoneyBag? discountedUnitPriceWithCodeDiscount { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image associated with the line item's variant or product.
        ///NULL if the line item has no product, or if neither the variant nor the product have an image.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///Original total price for the entire quantity of this line item, before discounts.
        ///</summary>
        public MoneyBag? originalTotalPriceSet { get; set; }
        ///<summary>
        ///Original price for a single unit of this line item, before discounts.
        ///</summary>
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///Product for this line item.
        ///NULL for custom line items and products that were deleted after checkout began.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The quantity of the line item.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///SKU for the inventory item associated with the variant, if any.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///Title of the line item. Defaults to the product's title.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///Product variant for this line item.
        ///NULL for custom line items and variants that were deleted after checkout began.
        ///</summary>
        public ProductVariant? variant { get; set; }
        ///<summary>
        ///Title of the variant for this line item.
        ///NULL for custom line items and products that don't have distinct variants.
        ///</summary>
        public string? variantTitle { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple AbandonedCheckoutLineItems.
    ///</summary>
    public class AbandonedCheckoutLineItemConnection : GraphQLObject<AbandonedCheckoutLineItemConnection>, IConnectionWithNodesAndEdges<AbandonedCheckoutLineItemEdge, AbandonedCheckoutLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<AbandonedCheckoutLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in AbandonedCheckoutLineItemEdge.
        ///</summary>
        public IEnumerable<AbandonedCheckoutLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination.
    ///</summary>
    public class AbandonedCheckoutLineItemEdge : GraphQLObject<AbandonedCheckoutLineItemEdge>, IEdge<AbandonedCheckoutLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of AbandonedCheckoutLineItemEdge.
        ///</summary>
        public AbandonedCheckoutLineItem? node { get; set; }
    }

    ///<summary>
    ///A browse, cart, or checkout that was abandoned by a customer.
    ///</summary>
    public class Abandonment : GraphQLObject<Abandonment>, INode
    {
        ///<summary>
        ///The abandonment payload for the abandoned checkout.
        ///</summary>
        public AbandonedCheckout? abandonedCheckoutPayload { get; set; }
        ///<summary>
        ///The abandonment type.
        ///</summary>
        public AbandonmentAbandonmentType? abandonmentType { get; set; }
        ///<summary>
        ///The app associated with an abandoned checkout.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///Permalink to the cart page.
        ///</summary>
        public string? cartUrl { get; set; }
        ///<summary>
        ///The date and time when the abandonment was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The customer who abandoned this event.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///Whether the customer has a draft order since this abandonment has been abandoned.
        ///</summary>
        public bool? customerHasNoDraftOrderSinceAbandonment { get; set; }
        ///<summary>
        ///Whether the customer has completed an order since this checkout has been abandoned.
        ///</summary>
        public bool? customerHasNoOrderSinceAbandonment { get; set; }
        ///<summary>
        ///The number of days since the last abandonment email was sent to the customer.
        ///</summary>
        public int? daysSinceLastAbandonmentEmail { get; set; }
        ///<summary>
        ///When the email was sent, if that's the case.
        ///</summary>
        public DateTime? emailSentAt { get; set; }
        ///<summary>
        ///The email state (e.g., sent or not sent).
        ///</summary>
        public AbandonmentEmailState? emailState { get; set; }
        ///<summary>
        ///The number of hours since the customer has last abandoned a checkout.
        ///</summary>
        public float? hoursSinceLastAbandonedCheckout { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether the products in abandonment are available.
        ///</summary>
        public bool? inventoryAvailable { get; set; }
        ///<summary>
        ///Whether the abandonment event comes from the Online Store sales channel.
        ///</summary>
        public bool? isFromOnlineStore { get; set; }
        ///<summary>
        ///Whether the abandonment event comes from the Shop app sales channel.
        ///</summary>
        public bool? isFromShopApp { get; set; }
        ///<summary>
        ///Whether the abandonment event comes from Shop Pay.
        ///</summary>
        public bool? isFromShopPay { get; set; }
        ///<summary>
        ///Whether the customer didn't complete another most significant step since this abandonment.
        ///</summary>
        public bool? isMostSignificantAbandonment { get; set; }
        ///<summary>
        ///The date for the latest browse abandonment.
        ///</summary>
        public DateTime? lastBrowseAbandonmentDate { get; set; }
        ///<summary>
        ///The date for the latest cart abandonment.
        ///</summary>
        public DateTime? lastCartAbandonmentDate { get; set; }
        ///<summary>
        ///The date for the latest checkout abandonment.
        ///</summary>
        public DateTime? lastCheckoutAbandonmentDate { get; set; }
        ///<summary>
        ///The most recent step type.
        ///</summary>
        public AbandonmentAbandonmentType? mostRecentStep { get; set; }
        ///<summary>
        ///The products added to the cart during the customer abandoned visit.
        ///</summary>
        public CustomerVisitProductInfoConnection? productsAddedToCart { get; set; }
        ///<summary>
        ///The products viewed during the customer abandoned visit.
        ///</summary>
        public CustomerVisitProductInfoConnection? productsViewed { get; set; }
        ///<summary>
        ///The date and time when the visit started.
        ///</summary>
        public DateTime? visitStartedAt { get; set; }
    }

    ///<summary>
    ///Specifies the abandonment type.
    ///</summary>
    public enum AbandonmentAbandonmentType
    {
        ///<summary>
        ///The abandonment event is an abandoned browse.
        ///</summary>
        BROWSE,
        ///<summary>
        ///The abandonment event is an abandoned cart.
        ///</summary>
        CART,
        ///<summary>
        ///The abandonment event is an abandoned checkout.
        ///</summary>
        CHECKOUT,
    }

    ///<summary>
    ///Specifies the delivery state of a marketing activity.
    ///</summary>
    public enum AbandonmentDeliveryState
    {
        ///<summary>
        ///The marketing activity action has not yet been sent.
        ///</summary>
        NOT_SENT,
        ///<summary>
        ///The marketing activity action has been sent.
        ///</summary>
        SENT,
        ///<summary>
        ///The marketing activity action has been scheduled for later delivery.
        ///</summary>
        SCHEDULED,
    }

    ///<summary>
    ///Specifies the email state.
    ///</summary>
    public enum AbandonmentEmailState
    {
        ///<summary>
        ///The email has not yet been sent.
        ///</summary>
        NOT_SENT,
        ///<summary>
        ///The email has been sent.
        ///</summary>
        SENT,
        ///<summary>
        ///The email has been scheduled for later delivery.
        ///</summary>
        SCHEDULED,
    }

    ///<summary>
    ///Return type for `abandonmentEmailStateUpdate` mutation.
    ///</summary>
    public class AbandonmentEmailStateUpdatePayload : GraphQLObject<AbandonmentEmailStateUpdatePayload>
    {
        ///<summary>
        ///The updated abandonment.
        ///</summary>
        public Abandonment? abandonment { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<AbandonmentEmailStateUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `AbandonmentEmailStateUpdate`.
    ///</summary>
    public class AbandonmentEmailStateUpdateUserError : GraphQLObject<AbandonmentEmailStateUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public AbandonmentEmailStateUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `AbandonmentEmailStateUpdateUserError`.
    ///</summary>
    public enum AbandonmentEmailStateUpdateUserErrorCode
    {
        ///<summary>
        ///Unable to find an Abandonment for the provided ID.
        ///</summary>
        ABANDONMENT_NOT_FOUND,
    }

    ///<summary>
    ///Return type for `abandonmentUpdateActivitiesDeliveryStatuses` mutation.
    ///</summary>
    public class AbandonmentUpdateActivitiesDeliveryStatusesPayload : GraphQLObject<AbandonmentUpdateActivitiesDeliveryStatusesPayload>
    {
        ///<summary>
        ///The updated abandonment.
        ///</summary>
        public Abandonment? abandonment { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<AbandonmentUpdateActivitiesDeliveryStatusesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `AbandonmentUpdateActivitiesDeliveryStatuses`.
    ///</summary>
    public class AbandonmentUpdateActivitiesDeliveryStatusesUserError : GraphQLObject<AbandonmentUpdateActivitiesDeliveryStatusesUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `AbandonmentUpdateActivitiesDeliveryStatusesUserError`.
    ///</summary>
    public enum AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode
    {
        ///<summary>
        ///Unable to find an Abandonment for the provided ID.
        ///</summary>
        ABANDONMENT_NOT_FOUND,
        ///<summary>
        ///Unable to find a marketing activity for the provided ID.
        ///</summary>
        MARKETING_ACTIVITY_NOT_FOUND,
        ///<summary>
        ///Unable to find delivery status info for the provided ID.
        ///</summary>
        DELIVERY_STATUS_INFO_NOT_FOUND,
    }

    ///<summary>
    ///The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.
    ///</summary>
    public class AccessScope : GraphQLObject<AccessScope>
    {
        ///<summary>
        ///A description of the actions that the access scope allows an app to perform.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`.
        ///</summary>
        public string? handle { get; set; }
    }

    ///<summary>
    ///Represents an operation publishing all products to a publication.
    ///</summary>
    public class AddAllProductsOperation : GraphQLObject<AddAllProductsOperation>, INode, IResourceOperation, IPublicationOperation
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The count of processed rows, summing imported, failed, and skipped rows.
        ///</summary>
        public int? processedRowCount { get; set; }
        ///<summary>
        ///Represents a rows objects within this background operation.
        ///</summary>
        public RowCount? rowCount { get; set; }
        ///<summary>
        ///The status of this operation.
        ///</summary>
        public ResourceOperationStatus? status { get; set; }
    }

    ///<summary>
    ///The additional fees that have been applied to the order.
    ///</summary>
    public class AdditionalFee : GraphQLObject<AdditionalFee>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the additional fee.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The price of the additional fee.
        ///</summary>
        public MoneyBag? price { get; set; }
        ///<summary>
        ///A list of taxes charged on the additional fee.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
    }

    ///<summary>
    ///A sale associated with an additional fee charge.
    ///</summary>
    public class AdditionalFeeSale : GraphQLObject<AdditionalFeeSale>, ISale
    {
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; set; }
        ///<summary>
        ///The additional fees for the associated sale.
        ///</summary>
        public SaleAdditionalFee? additionalFee { get; set; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; set; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; set; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; set; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; set; }
    }

    ///<summary>
    ///A sale associated with an order price adjustment.
    ///</summary>
    public class AdjustmentSale : GraphQLObject<AdjustmentSale>, ISale
    {
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; set; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; set; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; set; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; set; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; set; }
    }

    ///<summary>
    ///Targets all items the cart for a specified discount.
    ///</summary>
    public class AllDiscountItems : GraphQLObject<AllDiscountItems>, IDiscountItems
    {
        ///<summary>
        ///Whether all items are eligible for the discount. This value always returns `true`.
        ///</summary>
        public bool? allItems { get; set; }
    }

    ///<summary>
    ///A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
    ///Versions are commonly referred to by their handle (for example, `2021-10`).
    ///</summary>
    public class ApiVersion : GraphQLObject<ApiVersion>
    {
        ///<summary>
        ///The human-readable name of the version.
        ///</summary>
        public string? displayName { get; set; }
        ///<summary>
        ///The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning).
        ///</summary>
        public bool? supported { get; set; }
    }

    ///<summary>
    ///A Shopify application.
    ///</summary>
    public class App : GraphQLObject<App>, INode
    {
        ///<summary>
        ///A unique application API identifier.
        ///</summary>
        public string? apiKey { get; set; }
        ///<summary>
        ///App store page URL of the app.
        ///</summary>
        public string? appStoreAppUrl { get; set; }
        ///<summary>
        ///App store page URL of the developer who created the app.
        ///</summary>
        public string? appStoreDeveloperUrl { get; set; }
        ///<summary>
        ///The access scopes available to the app.
        ///</summary>
        public IEnumerable<AccessScope>? availableAccessScopes { get; set; }
        ///<summary>
        ///Banner image for the app.
        ///</summary>
        public Image? banner { get; set; }
        ///<summary>
        ///Description of the app.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The name of the app developer.
        ///</summary>
        public string? developerName { get; set; }
        ///<summary>
        ///The type of app developer.
        ///</summary>
        public AppDeveloperType? developerType { get; set; }

        ///<summary>
        ///Website of the developer who created the app.
        ///</summary>
        [Obsolete("Use `appStoreDeveloperUrl` instead.")]
        public string? developerUrl { get; set; }
        ///<summary>
        ///Whether the app uses the Embedded App SDK.
        ///</summary>
        public bool? embedded { get; set; }
        ///<summary>
        ///Requirements that must be met before the app can be installed.
        ///</summary>
        public IEnumerable<FailedRequirement>? failedRequirements { get; set; }
        ///<summary>
        ///A list of app features that are shown in the Shopify App Store listing.
        ///</summary>
        public IEnumerable<string>? features { get; set; }
        ///<summary>
        ///Feedback from this app about the store.
        ///</summary>
        public AppFeedback? feedback { get; set; }
        ///<summary>
        ///Handle of the app.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///Icon that represents the app.
        ///</summary>
        public Image? icon { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Webpage where you can install the app.
        ///</summary>
        public string? installUrl { get; set; }
        ///<summary>
        ///Corresponding AppInstallation for this shop and App.
        ///Returns null if the App is not installed.
        ///</summary>
        public AppInstallation? installation { get; set; }
        ///<summary>
        ///Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
        ///</summary>
        public bool? isPostPurchaseAppInUse { get; set; }

        ///<summary>
        ///Webpage that the app starts in.
        ///</summary>
        [Obsolete("Use AppInstallation.launchUrl instead")]
        public string? launchUrl { get; set; }

        ///<summary>
        ///Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
        ///</summary>
        [Obsolete("Use AppInstallation.navigationItems instead")]
        public IEnumerable<NavigationItem>? navigationItems { get; set; }
        ///<summary>
        ///Whether the app was previously installed on the current shop.
        ///</summary>
        public bool? previouslyInstalled { get; set; }
        ///<summary>
        ///Detailed information about the app pricing.
        ///</summary>
        public string? pricingDetails { get; set; }
        ///<summary>
        ///Summary of the app pricing details.
        ///</summary>
        public string? pricingDetailsSummary { get; set; }
        ///<summary>
        ///Link to app privacy policy.
        ///</summary>
        public string? privacyPolicyUrl { get; set; }
        ///<summary>
        ///The public category for the app.
        ///</summary>
        public AppPublicCategory? publicCategory { get; set; }
        ///<summary>
        ///Whether the app is published to the Shopify App Store.
        ///</summary>
        public bool? published { get; set; }
        ///<summary>
        ///The access scopes requested by the app.
        ///</summary>
        public IEnumerable<AccessScope>? requestedAccessScopes { get; set; }
        ///<summary>
        ///Screenshots of the app.
        ///</summary>
        public IEnumerable<Image>? screenshots { get; set; }
        ///<summary>
        ///Whether the app was developed by Shopify.
        ///</summary>
        public bool? shopifyDeveloped { get; set; }
        ///<summary>
        ///Name of the app.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///Message that appears when the app is uninstalled. For example:
        ///By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
        ///</summary>
        public string? uninstallMessage { get; set; }

        ///<summary>
        ///Webpage where you can uninstall the app.
        ///</summary>
        [Obsolete("Use AppInstallation.uninstallUrl instead")]
        public string? uninstallUrl { get; set; }
        ///<summary>
        ///The webhook API version for the app.
        ///</summary>
        public string? webhookApiVersion { get; set; }
    }

    ///<summary>
    ///A catalog that defines the publication associated with an app.
    ///</summary>
    public class AppCatalog : GraphQLObject<AppCatalog>, ICatalog, INode
    {
        ///<summary>
        ///The apps associated with the catalog.
        ///</summary>
        public AppConnection? apps { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Most recent catalog operations.
        ///</summary>
        public IEnumerable<IResourceOperation>? operations { get; set; }
        ///<summary>
        ///The price list associated with the catalog.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///A group of products and collections that's published to a catalog.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The status of the catalog.
        ///</summary>
        public CatalogStatus? status { get; set; }
        ///<summary>
        ///The name of the catalog.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Apps.
    ///</summary>
    public class AppConnection : GraphQLObject<AppConnection>, IConnectionWithNodesAndEdges<AppEdge, App>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<AppEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in AppEdge.
        ///</summary>
        public IEnumerable<App>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
    ///</summary>
    public class AppCredit : GraphQLObject<AppCredit>, INode
    {
        ///<summary>
        ///The amount that can be used towards future app purchases in Shopify.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///The date and time when the app credit was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The description of the app credit.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether the app credit is a test transaction.
        ///</summary>
        public bool? test { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple AppCredits.
    ///</summary>
    public class AppCreditConnection : GraphQLObject<AppCreditConnection>, IConnectionWithNodesAndEdges<AppCreditEdge, AppCredit>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<AppCreditEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in AppCreditEdge.
        ///</summary>
        public IEnumerable<AppCredit>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one AppCredit and a cursor during pagination.
    ///</summary>
    public class AppCreditEdge : GraphQLObject<AppCreditEdge>, IEdge<AppCredit>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of AppCreditEdge.
        ///</summary>
        public AppCredit? node { get; set; }
    }

    ///<summary>
    ///Possible types of app developer.
    ///</summary>
    public enum AppDeveloperType
    {
        ///<summary>
        ///Indicates the app developer is Shopify.
        ///</summary>
        SHOPIFY,
        ///<summary>
        ///Indicates the app developer is a Partner.
        ///</summary>
        PARTNER,
        ///<summary>
        ///Indicates the app developer works directly for a Merchant.
        ///</summary>
        MERCHANT,
        ///<summary>
        ///Indicates the app developer is unknown. It is not categorized as any of the other developer types.
        ///</summary>
        UNKNOWN,
    }

    ///<summary>
    ///A script that defines a discount type.
    ///</summary>
    public class AppDiscountType : GraphQLObject<AppDiscountType>
    {
        ///<summary>
        ///The app providing the app discount type.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The App Bridge details for discount type configuration.
        ///</summary>
        public FunctionsAppBridge? appBridge { get; set; }
        ///<summary>
        ///The client ID of the app providing the app discount type.
        ///</summary>
        public string? appKey { get; set; }
        ///<summary>
        ///A description of the app discount type.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The class of the app discount type.
        ///</summary>
        public DiscountClass? discountClass { get; set; }
        ///<summary>
        ///The ID of the function providing the app discount type.
        ///</summary>
        public string? functionId { get; set; }
        ///<summary>
        ///The target type of the app discount type. Possible values: `SHIPPING_LINE` and `LINE_ITEM`.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The title of the app discount type.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one App and a cursor during pagination.
    ///</summary>
    public class AppEdge : GraphQLObject<AppEdge>, IEdge<App>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of AppEdge.
        ///</summary>
        public App? node { get; set; }
    }

    ///<summary>
    ///Reports the status of shops and their resources and displays this information
    ///within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
    ///to set up an app on their store.
    ///</summary>
    public class AppFeedback : GraphQLObject<AppFeedback>
    {
        ///<summary>
        ///The application associated to the feedback.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///A link to where merchants can resolve errors.
        ///</summary>
        public Link? link { get; set; }
        ///<summary>
        ///The feedback message presented to the merchant.
        ///</summary>
        public IEnumerable<UserError>? messages { get; set; }
    }

    ///<summary>
    ///Represents an installed application on a shop.
    ///</summary>
    public class AppInstallation : GraphQLObject<AppInstallation>, IHasMetafields, INode, IMetafieldReferencer
    {
        ///<summary>
        ///The access scopes granted to the application by a merchant during installation.
        ///</summary>
        public IEnumerable<AccessScope>? accessScopes { get; set; }
        ///<summary>
        ///The active application subscriptions billed to the shop on a recurring basis.
        ///</summary>
        public IEnumerable<AppSubscription>? activeSubscriptions { get; set; }
        ///<summary>
        ///All subscriptions created for a shop.
        ///</summary>
        public AppSubscriptionConnection? allSubscriptions { get; set; }
        ///<summary>
        ///Application which is installed.
        ///</summary>
        public App? app { get; set; }

        ///<summary>
        ///Channel associated with the installed application.
        ///</summary>
        [Obsolete("Use `publication` instead.")]
        public Channel? channel { get; set; }
        ///<summary>
        ///Credits that can be used towards future app purchases.
        ///</summary>
        public AppCreditConnection? credits { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The URL to launch the application.
        ///</summary>
        public string? launchUrl { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///One-time purchases to a shop.
        ///</summary>
        public AppPurchaseOneTimeConnection? oneTimePurchases { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The publication associated with the installed application.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
        ///</summary>
        public AppRevenueAttributionRecordConnection? revenueAttributionRecords { get; set; }

        ///<summary>
        ///Subscriptions charge to a shop on a recurring basis.
        ///</summary>
        [Obsolete("Use `activeSubscriptions` instead.")]
        public IEnumerable<AppSubscription>? subscriptions { get; set; }
        ///<summary>
        ///The URL to uninstall the application.
        ///</summary>
        public string? uninstallUrl { get; set; }
    }

    ///<summary>
    ///The possible categories of an app installation, based on their purpose
    ///or the environment they can run in.
    ///</summary>
    public enum AppInstallationCategory
    {
        ///<summary>
        ///Apps that serve as channels through which sales are made, such as the online store.
        ///</summary>
        CHANNEL,
        ///<summary>
        ///Apps that can be used in the POS mobile client.
        ///</summary>
        POS_EMBEDDED,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple AppInstallations.
    ///</summary>
    public class AppInstallationConnection : GraphQLObject<AppInstallationConnection>, IConnectionWithNodesAndEdges<AppInstallationEdge, AppInstallation>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<AppInstallationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in AppInstallationEdge.
        ///</summary>
        public IEnumerable<AppInstallation>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one AppInstallation and a cursor during pagination.
    ///</summary>
    public class AppInstallationEdge : GraphQLObject<AppInstallationEdge>, IEdge<AppInstallation>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of AppInstallationEdge.
        ///</summary>
        public AppInstallation? node { get; set; }
    }

    ///<summary>
    ///The levels of privacy of an app installation.
    ///</summary>
    public enum AppInstallationPrivacy
    {
        PUBLIC,
        PRIVATE,
    }

    ///<summary>
    ///The set of valid sort keys for the AppInstallation query.
    ///</summary>
    public enum AppInstallationSortKeys
    {
        ///<summary>
        ///Sort by the `installed_at` value.
        ///</summary>
        INSTALLED_AT,
        ///<summary>
        ///Sort by the `app_title` value.
        ///</summary>
        APP_TITLE,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The app plan that the merchant is subscribed to.
    ///</summary>
    public class AppPlanV2 : GraphQLObject<AppPlanV2>
    {
        ///<summary>
        ///The plan billed to a shop on a recurring basis.
        ///</summary>
        public IAppPricingDetails? pricingDetails { get; set; }
    }

    ///<summary>
    ///The information about the price that's charged to a shop every plan period.
    ///The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AppRecurringPricing), typeDiscriminator: "AppRecurringPricing")]
    [JsonDerivedType(typeof(AppUsagePricing), typeDiscriminator: "AppUsagePricing")]
    public interface IAppPricingDetails : IGraphQLObject
    {
        public AppRecurringPricing? AsAppRecurringPricing() => this as AppRecurringPricing;
        public AppUsagePricing? AsAppUsagePricing() => this as AppUsagePricing;
        ///<summary>
        ///The frequency at which the subscribing shop is billed for an app subscription.
        ///</summary>
        public AppPricingInterval? interval { get; set; }
    }

    ///<summary>
    ///The frequency at which the shop is billed for an app subscription.
    ///</summary>
    public enum AppPricingInterval
    {
        ///<summary>
        ///The app subscription bills the shop annually.
        ///</summary>
        ANNUAL,
        ///<summary>
        ///The app subscription bills the shop every 30 days.
        ///</summary>
        EVERY_30_DAYS,
    }

    ///<summary>
    ///The public-facing category for an app.
    ///</summary>
    public enum AppPublicCategory
    {
        ///<summary>
        ///The app's public category is [private](https://shopify.dev/apps/distribution#deprecated-app-types).
        ///</summary>
        PRIVATE,
        ///<summary>
        ///The app's public category is [public](https://shopify.dev/apps/distribution#capabilities-and-requirements).
        ///</summary>
        PUBLIC,
        ///<summary>
        ///The app's public category is [custom](https://shopify.dev/apps/distribution#capabilities-and-requirements).
        ///</summary>
        CUSTOM,
        ///<summary>
        ///The app's public category is other. An app is in this category if it's not classified under any of the other app types (private, public, or custom).
        ///</summary>
        OTHER,
    }

    ///<summary>
    ///Services and features purchased once by the store.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AppPurchaseOneTime), typeDiscriminator: "AppPurchaseOneTime")]
    public interface IAppPurchase : IGraphQLObject
    {
        public AppPurchaseOneTime? AsAppPurchaseOneTime() => this as AppPurchaseOneTime;
        ///<summary>
        ///The date and time when the app purchase occurred.
        ///</summary>
        public DateTime? createdAt { get; }
        ///<summary>
        ///The name of the app purchase.
        ///</summary>
        public string? name { get; }
        ///<summary>
        ///The amount to be charged to the store for the app purchase.
        ///</summary>
        public MoneyV2? price { get; }
        ///<summary>
        ///The status of the app purchase.
        ///</summary>
        public AppPurchaseStatus? status { get; }
        ///<summary>
        ///Whether the app purchase is a test transaction.
        ///</summary>
        public bool? test { get; }
    }

    ///<summary>
    ///Services and features purchased once by a store.
    ///</summary>
    public class AppPurchaseOneTime : GraphQLObject<AppPurchaseOneTime>, IAppPurchase, INode
    {
        ///<summary>
        ///The date and time when the app purchase occurred.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the app purchase.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The amount to be charged to the store for the app purchase.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///The status of the app purchase.
        ///</summary>
        public AppPurchaseStatus? status { get; set; }
        ///<summary>
        ///Whether the app purchase is a test transaction.
        ///</summary>
        public bool? test { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple AppPurchaseOneTimes.
    ///</summary>
    public class AppPurchaseOneTimeConnection : GraphQLObject<AppPurchaseOneTimeConnection>, IConnectionWithNodesAndEdges<AppPurchaseOneTimeEdge, AppPurchaseOneTime>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<AppPurchaseOneTimeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in AppPurchaseOneTimeEdge.
        ///</summary>
        public IEnumerable<AppPurchaseOneTime>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `appPurchaseOneTimeCreate` mutation.
    ///</summary>
    public class AppPurchaseOneTimeCreatePayload : GraphQLObject<AppPurchaseOneTimeCreatePayload>
    {
        ///<summary>
        ///The newly created app one-time purchase.
        ///</summary>
        public AppPurchaseOneTime? appPurchaseOneTime { get; set; }
        ///<summary>
        ///The URL that the merchant can access to approve or decline the newly created app one-time purchase.
        ///
        ///If the merchant declines, then the merchant is redirected to the app and receives a notification message stating that the charge was declined.
        ///If the merchant approves and they're successfully invoiced, then the state of the charge changes from `pending` to `active`.
        ///
        ///You get paid after the charge is activated.
        ///</summary>
        public string? confirmationUrl { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
    ///</summary>
    public class AppPurchaseOneTimeEdge : GraphQLObject<AppPurchaseOneTimeEdge>, IEdge<AppPurchaseOneTime>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of AppPurchaseOneTimeEdge.
        ///</summary>
        public AppPurchaseOneTime? node { get; set; }
    }

    ///<summary>
    ///The approval status of the app purchase.
    ///
    ///The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
    ///If the payment fails, then the app purchase remains `pending`.
    ///
    ///Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
    ///remains in that final state.
    ///</summary>
    public enum AppPurchaseStatus
    {
        ///<summary>
        ///The app purchase has been approved by the merchant and is ready to be activated by the app. App purchases created through the GraphQL Admin API are activated upon approval.
        ///</summary>
        [Obsolete("As of API version 2021-01, when a merchant accepts an app purchase, the status immediately changes from `pending` to `active`.")]
        ACCEPTED,
        ///<summary>
        ///The app purchase was approved by the merchant and has been activated by the app. Active app purchases are charged to the merchant and are paid out to the partner.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The app purchase was declined by the merchant.
        ///</summary>
        DECLINED,
        ///<summary>
        ///The app purchase was not accepted within two days of being created.
        ///</summary>
        EXPIRED,
        ///<summary>
        ///The app purchase is pending approval by the merchant.
        ///</summary>
        PENDING,
    }

    ///<summary>
    ///The pricing information about a subscription app.
    ///The object contains an interval (the frequency at which the shop is billed for an app subscription) and
    ///a price (the amount to be charged to the subscribing shop at each interval).
    ///</summary>
    public class AppRecurringPricing : GraphQLObject<AppRecurringPricing>, IAppPricingDetails
    {
        ///<summary>
        ///The discount applied to the subscription for a given number of billing intervals.
        ///</summary>
        public AppSubscriptionDiscount? discount { get; set; }
        ///<summary>
        ///The frequency at which the subscribing shop is billed for an app subscription.
        ///</summary>
        public AppPricingInterval? interval { get; set; }
        ///<summary>
        ///The amount and currency to be charged to the subscribing shop every billing interval.
        ///</summary>
        public MoneyV2? price { get; set; }
    }

    ///<summary>
    ///Represents app revenue that was captured externally by the partner.
    ///</summary>
    public class AppRevenueAttributionRecord : GraphQLObject<AppRevenueAttributionRecord>, INode
    {
        ///<summary>
        ///The financial amount captured in this attribution.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///The timestamp when the financial amount was captured.
        ///</summary>
        public DateTime? capturedAt { get; set; }
        ///<summary>
        ///The timestamp at which this revenue attribution was issued.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The unique value submitted during the creation of the app revenue attribution record.
        ///For more information, refer to
        ///[Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
        ///</summary>
        public string? idempotencyKey { get; set; }
        ///<summary>
        ///Indicates whether this is a test submission.
        ///</summary>
        public bool? test { get; set; }
        ///<summary>
        ///The type of revenue attribution.
        ///</summary>
        public AppRevenueAttributionType? type { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
    ///</summary>
    public class AppRevenueAttributionRecordConnection : GraphQLObject<AppRevenueAttributionRecordConnection>, IConnectionWithNodesAndEdges<AppRevenueAttributionRecordEdge, AppRevenueAttributionRecord>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<AppRevenueAttributionRecordEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in AppRevenueAttributionRecordEdge.
        ///</summary>
        public IEnumerable<AppRevenueAttributionRecord>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
    ///</summary>
    public class AppRevenueAttributionRecordEdge : GraphQLObject<AppRevenueAttributionRecordEdge>, IEdge<AppRevenueAttributionRecord>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of AppRevenueAttributionRecordEdge.
        ///</summary>
        public AppRevenueAttributionRecord? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the AppRevenueAttributionRecord query.
    ///</summary>
    public enum AppRevenueAttributionRecordSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Represents the billing types of revenue attribution.
    ///</summary>
    public enum AppRevenueAttributionType
    {
        ///<summary>
        ///App purchase related revenue collection.
        ///</summary>
        APPLICATION_PURCHASE,
        ///<summary>
        ///App subscription revenue collection.
        ///</summary>
        APPLICATION_SUBSCRIPTION,
        ///<summary>
        ///App usage-based revenue collection.
        ///</summary>
        APPLICATION_USAGE,
        ///<summary>
        ///Other app revenue collection type.
        ///</summary>
        OTHER,
    }

    ///<summary>
    ///Provides users access to services and/or features for a duration of time.
    ///</summary>
    public class AppSubscription : GraphQLObject<AppSubscription>, INode
    {
        ///<summary>
        ///The date and time when the app subscription was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active.
        ///</summary>
        public DateTime? currentPeriodEnd { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The plans attached to the app subscription.
        ///</summary>
        public IEnumerable<AppSubscriptionLineItem>? lineItems { get; set; }
        ///<summary>
        ///The name of the app subscription.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The URL that the merchant is redirected to after approving the app subscription.
        ///</summary>
        public string? returnUrl { get; set; }
        ///<summary>
        ///The status of the app subscription.
        ///</summary>
        public AppSubscriptionStatus? status { get; set; }
        ///<summary>
        ///Specifies whether the app subscription is a test transaction.
        ///</summary>
        public bool? test { get; set; }
        ///<summary>
        ///The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
        ///</summary>
        public int? trialDays { get; set; }
    }

    ///<summary>
    ///Return type for `appSubscriptionCancel` mutation.
    ///</summary>
    public class AppSubscriptionCancelPayload : GraphQLObject<AppSubscriptionCancelPayload>
    {
        ///<summary>
        ///The cancelled app subscription.
        ///</summary>
        public AppSubscription? appSubscription { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple AppSubscriptions.
    ///</summary>
    public class AppSubscriptionConnection : GraphQLObject<AppSubscriptionConnection>, IConnectionWithNodesAndEdges<AppSubscriptionEdge, AppSubscription>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<AppSubscriptionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in AppSubscriptionEdge.
        ///</summary>
        public IEnumerable<AppSubscription>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `appSubscriptionCreate` mutation.
    ///</summary>
    public class AppSubscriptionCreatePayload : GraphQLObject<AppSubscriptionCreatePayload>
    {
        ///<summary>
        ///The newly-created app subscription.
        ///</summary>
        public AppSubscription? appSubscription { get; set; }
        ///<summary>
        ///The URL pointing to the page where the merchant approves or declines the charges for an app subscription.
        ///</summary>
        public string? confirmationUrl { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Discount applied to the recurring pricing portion of a subscription.
    ///</summary>
    public class AppSubscriptionDiscount : GraphQLObject<AppSubscriptionDiscount>
    {
        ///<summary>
        ///The total number of billing intervals to which the discount will be applied.
        ///The discount will be applied to an indefinite number of billing intervals if this value is blank.
        ///</summary>
        public int? durationLimitInIntervals { get; set; }
        ///<summary>
        ///The price of the subscription after the discount is applied.
        ///</summary>
        public MoneyV2? priceAfterDiscount { get; set; }
        ///<summary>
        ///The remaining number of billing intervals to which the discount will be applied.
        ///</summary>
        public int? remainingDurationInIntervals { get; set; }
        ///<summary>
        ///The value of the discount applied every billing interval.
        ///</summary>
        public IAppSubscriptionDiscountValue? value { get; set; }
    }

    ///<summary>
    ///The fixed amount value of a discount.
    ///</summary>
    public class AppSubscriptionDiscountAmount : GraphQLObject<AppSubscriptionDiscountAmount>, IAppSubscriptionDiscountValue
    {
        ///<summary>
        ///The fixed amount value of a discount.
        ///</summary>
        public MoneyV2? amount { get; set; }
    }

    ///<summary>
    ///The percentage value of a discount.
    ///</summary>
    public class AppSubscriptionDiscountPercentage : GraphQLObject<AppSubscriptionDiscountPercentage>, IAppSubscriptionDiscountValue
    {
        ///<summary>
        ///The percentage value of a discount.
        ///</summary>
        public float? percentage { get; set; }
    }

    ///<summary>
    ///The value of the discount.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AppSubscriptionDiscountAmount), typeDiscriminator: "AppSubscriptionDiscountAmount")]
    [JsonDerivedType(typeof(AppSubscriptionDiscountPercentage), typeDiscriminator: "AppSubscriptionDiscountPercentage")]
    public interface IAppSubscriptionDiscountValue : IGraphQLObject
    {
        public AppSubscriptionDiscountAmount? AsAppSubscriptionDiscountAmount() => this as AppSubscriptionDiscountAmount;
        public AppSubscriptionDiscountPercentage? AsAppSubscriptionDiscountPercentage() => this as AppSubscriptionDiscountPercentage;
    }

    ///<summary>
    ///An auto-generated type which holds one AppSubscription and a cursor during pagination.
    ///</summary>
    public class AppSubscriptionEdge : GraphQLObject<AppSubscriptionEdge>, IEdge<AppSubscription>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of AppSubscriptionEdge.
        ///</summary>
        public AppSubscription? node { get; set; }
    }

    ///<summary>
    ///The plan attached to an app subscription.
    ///</summary>
    public class AppSubscriptionLineItem : GraphQLObject<AppSubscriptionLineItem>
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The pricing model for the app subscription.
        ///</summary>
        public AppPlanV2? plan { get; set; }
        ///<summary>
        ///A list of the store's usage records for a usage pricing plan.
        ///</summary>
        public AppUsageRecordConnection? usageRecords { get; set; }
    }

    ///<summary>
    ///Return type for `appSubscriptionLineItemUpdate` mutation.
    ///</summary>
    public class AppSubscriptionLineItemUpdatePayload : GraphQLObject<AppSubscriptionLineItemUpdatePayload>
    {
        ///<summary>
        ///The updated app subscription.
        ///</summary>
        public AppSubscription? appSubscription { get; set; }
        ///<summary>
        ///The URL where the merchant approves or declines the updated app subscription line item.
        ///</summary>
        public string? confirmationUrl { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The replacement behavior when creating an app subscription for a merchant with an already existing app subscription.
    ///</summary>
    public enum AppSubscriptionReplacementBehavior
    {
        ///<summary>
        ///Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription.
        ///</summary>
        APPLY_IMMEDIATELY,
        ///<summary>
        ///Defers canceling the merchant's current app subscription and applying the newly created app subscription until the start of the next billing cycle. This value is ignored if the new app subscription is using a different currency than the current app subscription, in which case the new app subscription is applied immediately.
        ///</summary>
        APPLY_ON_NEXT_BILLING_CYCLE,
        ///<summary>
        ///Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription, with the exception of
        ///the following scenarios where replacing the current app subscription will be deferred until the start of the next billing cycle.
        ///1) The current app subscription is annual and the newly created app subscription is annual, using the same currency, but is of a lesser value.
        ///2) The current app subscription is annual and the newly created app subscription is monthly and using the same currency.
        ///3) The current app subscription and the newly created app subscription are identical except for the `discount` value.
        ///</summary>
        STANDARD,
    }

    ///<summary>
    ///The set of valid sort keys for the AppSubscription query.
    ///</summary>
    public enum AppSubscriptionSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The status of the app subscription.
    ///</summary>
    public enum AppSubscriptionStatus
    {
        ///<summary>
        ///The app subscription is pending approval by the merchant.
        ///</summary>
        PENDING,
        ///<summary>
        ///The app subscription has been approved by the merchant and is ready to be activated by the app.
        ///</summary>
        [Obsolete("As of API version 2021-01, when a merchant approves an app subscription, the status immediately transitions from `pending` to `active`.")]
        ACCEPTED,
        ///<summary>
        ///The app subscription has been approved by the merchant. Active app subscriptions are billed to the shop. After payment, partners receive payouts.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The app subscription was declined by the merchant. This is a terminal state.
        ///</summary>
        DECLINED,
        ///<summary>
        ///The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state.
        ///</summary>
        EXPIRED,
        ///<summary>
        ///The app subscription is on hold due to non-payment. The subscription re-activates after payments resume.
        ///</summary>
        FROZEN,
        ///<summary>
        ///The app subscription was cancelled by the app. This could be caused by the app being uninstalled, a new app subscription being activated, or a direct cancellation by the app. This is a terminal state.
        ///</summary>
        CANCELLED,
    }

    ///<summary>
    ///Return type for `appSubscriptionTrialExtend` mutation.
    ///</summary>
    public class AppSubscriptionTrialExtendPayload : GraphQLObject<AppSubscriptionTrialExtendPayload>
    {
        ///<summary>
        ///The app subscription that had its trial extended.
        ///</summary>
        public AppSubscription? appSubscription { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<AppSubscriptionTrialExtendUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `AppSubscriptionTrialExtend`.
    ///</summary>
    public class AppSubscriptionTrialExtendUserError : GraphQLObject<AppSubscriptionTrialExtendUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public AppSubscriptionTrialExtendUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `AppSubscriptionTrialExtendUserError`.
    ///</summary>
    public enum AppSubscriptionTrialExtendUserErrorCode
    {
        ///<summary>
        ///The app subscription wasn't found.
        ///</summary>
        SUBSCRIPTION_NOT_FOUND,
        ///<summary>
        ///The trial isn't active.
        ///</summary>
        TRIAL_NOT_ACTIVE,
        ///<summary>
        ///The app subscription isn't active.
        ///</summary>
        SUBSCRIPTION_NOT_ACTIVE,
    }

    ///<summary>
    ///The set of valid sort keys for the AppTransaction query.
    ///</summary>
    public enum AppTransactionSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Defines a usage pricing model for the app subscription.
    ///These charges are variable based on how much the merchant uses the app.
    ///</summary>
    public class AppUsagePricing : GraphQLObject<AppUsagePricing>, IAppPricingDetails
    {
        ///<summary>
        ///The total usage records for interval.
        ///</summary>
        public MoneyV2? balanceUsed { get; set; }
        ///<summary>
        ///The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
        ///This prevents billing from exceeding a maximum threshold over the duration of the billing period.
        ///For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
        ///</summary>
        public MoneyV2? cappedAmount { get; set; }
        ///<summary>
        ///The frequency with which the app usage records are billed.
        ///</summary>
        public AppPricingInterval? interval { get; set; }
        ///<summary>
        ///The terms and conditions for app usage pricing.
        ///Must be present in order to create usage charges.
        ///The terms are presented to the merchant when they approve an app's usage charges.
        ///</summary>
        public string? terms { get; set; }
    }

    ///<summary>
    ///Store usage for app subscriptions with usage pricing.
    ///</summary>
    public class AppUsageRecord : GraphQLObject<AppUsageRecord>, INode
    {
        ///<summary>
        ///The date and time when the usage record was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The description of the app usage record.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///A unique key generated by the client to avoid duplicate charges.
        ///</summary>
        public string? idempotencyKey { get; set; }
        ///<summary>
        ///The price of the usage record.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///Defines the usage pricing plan the merchant is subscribed to.
        ///</summary>
        public AppSubscriptionLineItem? subscriptionLineItem { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple AppUsageRecords.
    ///</summary>
    public class AppUsageRecordConnection : GraphQLObject<AppUsageRecordConnection>, IConnectionWithNodesAndEdges<AppUsageRecordEdge, AppUsageRecord>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<AppUsageRecordEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in AppUsageRecordEdge.
        ///</summary>
        public IEnumerable<AppUsageRecord>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `appUsageRecordCreate` mutation.
    ///</summary>
    public class AppUsageRecordCreatePayload : GraphQLObject<AppUsageRecordCreatePayload>
    {
        ///<summary>
        ///The newly created app usage record.
        ///</summary>
        public AppUsageRecord? appUsageRecord { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
    ///</summary>
    public class AppUsageRecordEdge : GraphQLObject<AppUsageRecordEdge>, IEdge<AppUsageRecord>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of AppUsageRecordEdge.
        ///</summary>
        public AppUsageRecord? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the AppUsageRecord query.
    ///</summary>
    public enum AppUsageRecordSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Represents a generic custom attribute.
    ///</summary>
    public class Attribute : GraphQLObject<Attribute>
    {
        ///<summary>
        ///Key or name of the attribute.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///Value of the attribute.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Automatic discount applications capture the intentions of a discount that was automatically applied.
    ///</summary>
    public class AutomaticDiscountApplication : GraphQLObject<AutomaticDiscountApplication>, IDiscountApplication
    {
        ///<summary>
        ///The method by which the discount's value is applied to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///An ordered index that can be used to identify the discount application and indicate the precedence
        ///of the discount application for calculations.
        ///</summary>
        public int? index { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The title of the discount application.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the AutomaticDiscount query.
    ///</summary>
    public enum AutomaticDiscountSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Represents an object containing all information for channels available to a shop.
    ///</summary>
    public class AvailableChannelDefinitionsByChannel : GraphQLObject<AvailableChannelDefinitionsByChannel>
    {
        ///<summary>
        ///The channel definitions for channels installed on a shop.
        ///</summary>
        public IEnumerable<ChannelDefinition>? channelDefinitions { get; set; }
        ///<summary>
        ///The name of the channel.
        ///</summary>
        public string? channelName { get; set; }
    }

    ///<summary>
    ///The possible types for a badge.
    ///</summary>
    public enum BadgeType
    {
        ///<summary>
        ///This badge has type `default`.
        ///</summary>
        DEFAULT,
        ///<summary>
        ///This badge has type `success`.
        ///</summary>
        SUCCESS,
        ///<summary>
        ///This badge has type `attention`.
        ///</summary>
        ATTENTION,
        ///<summary>
        ///This badge has type `warning`.
        ///</summary>
        WARNING,
        ///<summary>
        ///This badge has type `info`.
        ///</summary>
        INFO,
    }

    ///<summary>
    ///The set of valid sort keys for the BalanceTransaction query.
    ///</summary>
    public enum BalanceTransactionSortKeys
    {
        ///<summary>
        ///Sort by the `payout_date` value.
        ///</summary>
        PAYOUT_DATE,
        ///<summary>
        ///Sort by the `payout_status` value.
        ///</summary>
        PAYOUT_STATUS,
        ///<summary>
        ///Sort by the `processed_at` value.
        ///</summary>
        PROCESSED_AT,
        ///<summary>
        ///Sort by the `amount` value.
        ///</summary>
        AMOUNT,
        ///<summary>
        ///Sort by the `fee` value.
        ///</summary>
        FEE,
        ///<summary>
        ///Sort by the `net` value.
        ///</summary>
        NET,
        ///<summary>
        ///Sort by the `transaction_type` value.
        ///</summary>
        TRANSACTION_TYPE,
        ///<summary>
        ///Sort by the `order_name` value.
        ///</summary>
        ORDER_NAME,
        ///<summary>
        ///Sort by the `payment_method_name` value.
        ///</summary>
        PAYMENT_METHOD_NAME,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Generic payment details that are related to a transaction.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CardPaymentDetails), typeDiscriminator: "CardPaymentDetails")]
    [JsonDerivedType(typeof(ShopPayInstallmentsPaymentDetails), typeDiscriminator: "ShopPayInstallmentsPaymentDetails")]
    public interface IBasePaymentDetails : IGraphQLObject
    {
        public CardPaymentDetails? AsCardPaymentDetails() => this as CardPaymentDetails;
        public ShopPayInstallmentsPaymentDetails? AsShopPayInstallmentsPaymentDetails() => this as ShopPayInstallmentsPaymentDetails;
        ///<summary>
        ///The name of payment method used by the buyer.
        ///</summary>
        public string? paymentMethodName { get; }
    }

    ///<summary>
    ///Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
    ///the addition of a product.
    ///</summary>
    public class BasicEvent : GraphQLObject<BasicEvent>, IEvent, INode
    {
        ///<summary>
        ///The name of the app that created the event.
        ///</summary>
        public string? appTitle { get; set; }
        ///<summary>
        ///Whether the event was created by an app.
        ///</summary>
        public bool? attributeToApp { get; set; }
        ///<summary>
        ///Whether the event was caused by an admin user.
        ///</summary>
        public bool? attributeToUser { get; set; }
        ///<summary>
        ///The date and time when the event was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///Whether the event is critical.
        ///</summary>
        public bool? criticalAlert { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Human readable text that describes the event.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Represents an error that happens during the execution of a billing attempt mutation.
    ///</summary>
    public class BillingAttemptUserError : GraphQLObject<BillingAttemptUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public BillingAttemptUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `BillingAttemptUserError`.
    ///</summary>
    public enum BillingAttemptUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///Subscription contract does not exist.
        ///</summary>
        CONTRACT_NOT_FOUND,
        ///<summary>
        ///Origin time cannot be before the contract creation time.
        ///</summary>
        ORIGIN_TIME_BEFORE_CONTRACT_CREATION,
        ///<summary>
        ///Billing cycle selector cannot select upcoming billing cycle past limit.
        ///</summary>
        UPCOMING_CYCLE_LIMIT_EXCEEDED,
        ///<summary>
        ///Billing cycle selector cannot select billing cycle outside of index range.
        ///</summary>
        CYCLE_INDEX_OUT_OF_RANGE,
        ///<summary>
        ///Billing cycle selector cannot select billing cycle outside of start date range.
        ///</summary>
        CYCLE_START_DATE_OUT_OF_RANGE,
        ///<summary>
        ///Origin time needs to be within the selected billing cycle's start and end at date.
        ///</summary>
        ORIGIN_TIME_OUT_OF_RANGE,
        ///<summary>
        ///Subscription contract is under review.
        ///</summary>
        CONTRACT_UNDER_REVIEW,
        ///<summary>
        ///Subscription contract cannot be billed once terminated.
        ///</summary>
        CONTRACT_TERMINATED,
    }

    ///<summary>
    ///Possible error codes that can be returned by `BulkMutationUserError`.
    ///</summary>
    public enum BulkMutationErrorCode
    {
        ///<summary>
        ///The operation did not run because another bulk mutation is already running. [Wait for the operation to finish](https://shopify.dev/api/usage/bulk-operations/imports#wait-for-the-operation-to-finish) before retrying this operation.
        ///</summary>
        OPERATION_IN_PROGRESS,
        ///<summary>
        ///The operation did not run because the mutation is invalid. Check your mutation syntax and try again.
        ///</summary>
        INVALID_MUTATION,
        ///<summary>
        ///The JSONL file submitted via the `stagedUploadsCreate` mutation is invalid. Update the file and try again.
        ///</summary>
        INVALID_STAGED_UPLOAD_FILE,
        ///<summary>
        ///The JSONL file could not be found. Try [uploading the file](https://shopify.dev/api/usage/bulk-operations/imports#generate-the-uploaded-url-and-parameters) again, and check that you've entered the URL correctly for the `stagedUploadPath` mutation argument.
        ///</summary>
        NO_SUCH_FILE,
        ///<summary>
        ///There was a problem reading the JSONL file. This error might be intermittent, so you can try performing the same query again.
        ///</summary>
        INTERNAL_FILE_SERVER_ERROR,
    }

    ///<summary>
    ///Represents an error that happens during execution of a bulk mutation.
    ///</summary>
    public class BulkMutationUserError : GraphQLObject<BulkMutationUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public BulkMutationErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///An asynchronous long-running operation to fetch data in bulk or to bulk import data.
    ///
    ///Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
    ///they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
    ///a link to the data in [JSONL](http://jsonlines.org/) format.
    ///
    ///Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
    ///</summary>
    public class BulkOperation : GraphQLObject<BulkOperation>, INode
    {
        ///<summary>
        ///When the bulk operation was successfully completed.
        ///</summary>
        public DateTime? completedAt { get; set; }
        ///<summary>
        ///When the bulk operation was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///Error code for failed operations.
        ///</summary>
        public BulkOperationErrorCode? errorCode { get; set; }
        ///<summary>
        ///File size in bytes of the file in the `url` field.
        ///</summary>
        public ulong? fileSize { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///A running count of all the objects processed.
        ///For example, when fetching all the products and their variants, this field counts both products and variants.
        ///This field can be used to track operation progress.
        ///</summary>
        public ulong? objectCount { get; set; }
        ///<summary>
        ///The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
        ///The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
        ///</summary>
        public string? partialDataUrl { get; set; }
        ///<summary>
        ///GraphQL query document specified in `bulkOperationRunQuery`.
        ///</summary>
        public string? query { get; set; }
        ///<summary>
        ///A running count of all the objects that are processed at the root of the query.
        ///For example, when fetching all the products and their variants, this field only counts products.
        ///This field can be used to track operation progress.
        ///</summary>
        public ulong? rootObjectCount { get; set; }
        ///<summary>
        ///Status of the bulk operation.
        ///</summary>
        public BulkOperationStatus? status { get; set; }
        ///<summary>
        ///The bulk operation's type.
        ///</summary>
        public BulkOperationType? type { get; set; }
        ///<summary>
        ///The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
        ///The URL expires 7 days after the operation completes.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///Return type for `bulkOperationCancel` mutation.
    ///</summary>
    public class BulkOperationCancelPayload : GraphQLObject<BulkOperationCancelPayload>
    {
        ///<summary>
        ///The bulk operation to be canceled.
        ///</summary>
        public BulkOperation? bulkOperation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed bulk operations.
    ///</summary>
    public enum BulkOperationErrorCode
    {
        ///<summary>
        ///The provided operation `query` returned access denied due to missing
        ///[access scopes](https://shopify.dev/api/usage/access-scopes).
        ///Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
        ///</summary>
        ACCESS_DENIED,
        ///<summary>
        ///The operation resulted in partial or incomplete data due to internal server errors during execution.
        ///These errors might be intermittent, so you can try performing the same query again.
        ///</summary>
        INTERNAL_SERVER_ERROR,
        ///<summary>
        ///The operation resulted in partial or incomplete data due to query timeouts during execution.
        ///In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
        ///</summary>
        TIMEOUT,
    }

    ///<summary>
    ///Return type for `bulkOperationRunMutation` mutation.
    ///</summary>
    public class BulkOperationRunMutationPayload : GraphQLObject<BulkOperationRunMutationPayload>
    {
        ///<summary>
        ///The newly created bulk operation.
        ///</summary>
        public BulkOperation? bulkOperation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BulkMutationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `bulkOperationRunQuery` mutation.
    ///</summary>
    public class BulkOperationRunQueryPayload : GraphQLObject<BulkOperationRunQueryPayload>
    {
        ///<summary>
        ///The newly created bulk operation.
        ///</summary>
        public BulkOperation? bulkOperation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The valid values for the status of a bulk operation.
    ///</summary>
    public enum BulkOperationStatus
    {
        ///<summary>
        ///The bulk operation has been canceled.
        ///</summary>
        CANCELED,
        ///<summary>
        ///Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
        ///starts until the operation is actually canceled.
        ///</summary>
        CANCELING,
        ///<summary>
        ///The bulk operation has successfully completed.
        ///</summary>
        COMPLETED,
        ///<summary>
        ///The bulk operation has been created.
        ///</summary>
        CREATED,
        ///<summary>
        ///The bulk operation URL has expired.
        ///</summary>
        EXPIRED,
        ///<summary>
        ///The bulk operation has failed. For information on why the operation failed, use
        ///[BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
        ///</summary>
        FAILED,
        ///<summary>
        ///The bulk operation is runnning.
        ///</summary>
        RUNNING,
    }

    ///<summary>
    ///The valid values for the bulk operation's type.
    ///</summary>
    public enum BulkOperationType
    {
        ///<summary>
        ///The bulk operation is a query.
        ///</summary>
        QUERY,
        ///<summary>
        ///The bulk operation is a mutation.
        ///</summary>
        MUTATION,
    }

    ///<summary>
    ///Return type for `bulkProductResourceFeedbackCreate` mutation.
    ///</summary>
    public class BulkProductResourceFeedbackCreatePayload : GraphQLObject<BulkProductResourceFeedbackCreatePayload>
    {
        ///<summary>
        ///The feedback that's created.
        ///</summary>
        public IEnumerable<ProductResourceFeedback>? feedback { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BulkProductResourceFeedbackCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `BulkProductResourceFeedbackCreate`.
    ///</summary>
    public class BulkProductResourceFeedbackCreateUserError : GraphQLObject<BulkProductResourceFeedbackCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public BulkProductResourceFeedbackCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `BulkProductResourceFeedbackCreateUserError`.
    ///</summary>
    public enum BulkProductResourceFeedbackCreateUserErrorCode
    {
        ///<summary>
        ///The operation was attempted on too many feedback objects. The maximum number of feedback objects that you can operate on is 50.
        ///</summary>
        MAXIMUM_FEEDBACK_LIMIT_EXCEEDED,
        ///<summary>
        ///The feedback for a later version of this resource was already accepted.
        ///</summary>
        OUTDATED_FEEDBACK,
        ///<summary>
        ///The product wasn't found or isn't available to the channel.
        ///</summary>
        PRODUCT_NOT_FOUND,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value should be less than or equal to the maximum value allowed.
        ///</summary>
        LESS_THAN_OR_EQUAL_TO,
    }

    ///<summary>
    ///Represents the Bundles feature configuration for the shop.
    ///</summary>
    public class BundlesFeature : GraphQLObject<BundlesFeature>
    {
        ///<summary>
        ///Whether a shop is configured properly to sell bundles.
        ///</summary>
        public bool? eligibleForBundles { get; set; }
        ///<summary>
        ///The reason why a shop is not eligible for bundles.
        ///</summary>
        public string? ineligibilityReason { get; set; }
        ///<summary>
        ///Whether a shop has any fixed bundle products or has a cartTransform function installed.
        ///</summary>
        public bool? sellsBundles { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `BusinessCustomerUserError`.
    ///</summary>
    public enum BusinessCustomerErrorCode
    {
        ///<summary>
        ///An internal error occurred.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///The resource wasn't found.
        ///</summary>
        RESOURCE_NOT_FOUND,
        ///<summary>
        ///Deleting the resource failed.
        ///</summary>
        FAILED_TO_DELETE,
        ///<summary>
        ///Missing a required field.
        ///</summary>
        REQUIRED,
        ///<summary>
        ///The input is empty.
        ///</summary>
        NO_INPUT,
        ///<summary>
        ///The input is invalid.
        ///</summary>
        INVALID_INPUT,
        ///<summary>
        ///Unexpected type.
        ///</summary>
        UNEXPECTED_TYPE,
        ///<summary>
        ///The field value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The number of resources exceeded the limit.
        ///</summary>
        LIMIT_REACHED,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
    }

    ///<summary>
    ///An error that happens during the execution of a business customer mutation.
    ///</summary>
    public class BusinessCustomerUserError : GraphQLObject<BusinessCustomerUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public BusinessCustomerErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Settings describing the behavior of checkout for a B2B buyer.
    ///</summary>
    public class BuyerExperienceConfiguration : GraphQLObject<BuyerExperienceConfiguration>
    {
        ///<summary>
        ///Whether to checkout to draft order for merchant review.
        ///</summary>
        public bool? checkoutToDraft { get; set; }
        ///<summary>
        ///Whether to allow customers to use editable shipping addresses.
        ///</summary>
        public bool? editableShippingAddress { get; set; }
        ///<summary>
        ///Whether a buyer must pay at checkout or they can also choose to pay
        ///later using net terms.
        ///</summary>
        public bool? payNowOnly { get; set; }
        ///<summary>
        ///Represents the merchant configured payment terms.
        ///</summary>
        public PaymentTermsTemplate? paymentTermsTemplate { get; set; }
    }

    ///<summary>
    ///A discount that is automatically applied to an order that is being edited.
    ///</summary>
    public class CalculatedAutomaticDiscountApplication : GraphQLObject<CalculatedAutomaticDiscountApplication>, ICalculatedDiscountApplication
    {
        ///<summary>
        ///The method by which the discount's value is allocated to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///The level at which the discount was applied.
        ///</summary>
        public DiscountApplicationLevel? appliedTo { get; set; }
        ///<summary>
        ///The description of discount application. Indicates the reason why the discount was applied.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///An amount discounting the line that has been allocated by an associated discount application.
    ///</summary>
    public class CalculatedDiscountAllocation : GraphQLObject<CalculatedDiscountAllocation>
    {
        ///<summary>
        ///The money amount that's allocated by the discount application in shop and presentment currencies.
        ///</summary>
        public MoneyBag? allocatedAmountSet { get; set; }
        ///<summary>
        ///The discount that the allocated amount originated from.
        ///</summary>
        public ICalculatedDiscountApplication? discountApplication { get; set; }
    }

    ///<summary>
    ///A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CalculatedAutomaticDiscountApplication), typeDiscriminator: "CalculatedAutomaticDiscountApplication")]
    [JsonDerivedType(typeof(CalculatedDiscountCodeApplication), typeDiscriminator: "CalculatedDiscountCodeApplication")]
    [JsonDerivedType(typeof(CalculatedManualDiscountApplication), typeDiscriminator: "CalculatedManualDiscountApplication")]
    [JsonDerivedType(typeof(CalculatedScriptDiscountApplication), typeDiscriminator: "CalculatedScriptDiscountApplication")]
    public interface ICalculatedDiscountApplication : IGraphQLObject
    {
        public CalculatedAutomaticDiscountApplication? AsCalculatedAutomaticDiscountApplication() => this as CalculatedAutomaticDiscountApplication;
        public CalculatedDiscountCodeApplication? AsCalculatedDiscountCodeApplication() => this as CalculatedDiscountCodeApplication;
        public CalculatedManualDiscountApplication? AsCalculatedManualDiscountApplication() => this as CalculatedManualDiscountApplication;
        public CalculatedScriptDiscountApplication? AsCalculatedScriptDiscountApplication() => this as CalculatedScriptDiscountApplication;
        ///<summary>
        ///The method by which the discount's value is allocated to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; }
        ///<summary>
        ///The level at which the discount was applied.
        ///</summary>
        public DiscountApplicationLevel? appliedTo { get; }
        ///<summary>
        ///The description of discount application. Indicates the reason why the discount was applied.
        ///</summary>
        public string? description { get; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CalculatedDiscountApplications.
    ///</summary>
    public class CalculatedDiscountApplicationConnection : GraphQLObject<CalculatedDiscountApplicationConnection>, IConnectionWithNodesAndEdges<CalculatedDiscountApplicationEdge, ICalculatedDiscountApplication>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CalculatedDiscountApplicationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CalculatedDiscountApplicationEdge.
        ///</summary>
        public IEnumerable<ICalculatedDiscountApplication>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
    ///</summary>
    public class CalculatedDiscountApplicationEdge : GraphQLObject<CalculatedDiscountApplicationEdge>, IEdge<ICalculatedDiscountApplication>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CalculatedDiscountApplicationEdge.
        ///</summary>
        public ICalculatedDiscountApplication? node { get; set; }
    }

    ///<summary>
    ///A discount code that is applied to an order that is being edited.
    ///</summary>
    public class CalculatedDiscountCodeApplication : GraphQLObject<CalculatedDiscountCodeApplication>, ICalculatedDiscountApplication
    {
        ///<summary>
        ///The method by which the discount's value is allocated to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///The level at which the discount was applied.
        ///</summary>
        public DiscountApplicationLevel? appliedTo { get; set; }
        ///<summary>
        ///The string identifying the discount code that was used at the time of application.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The description of discount application. Indicates the reason why the discount was applied.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///The computed properties for a draft order.
    ///</summary>
    public class CalculatedDraftOrder : GraphQLObject<CalculatedDraftOrder>
    {
        ///<summary>
        ///Order-level discount applied to the draft order.
        ///</summary>
        public DraftOrderAppliedDiscount? appliedDiscount { get; set; }
        ///<summary>
        ///The available shipping rates for the draft order. Requires a customer with a valid shipping address and at least one line item.
        ///</summary>
        public IEnumerable<ShippingRate>? availableShippingRates { get; set; }
        ///<summary>
        ///Whether the billing address matches the shipping address.
        ///</summary>
        public bool? billingAddressMatchesShippingAddress { get; set; }
        ///<summary>
        ///The currency of the store for this draft order.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
        ///<summary>
        ///Customer who will be sent an invoice for the draft order, if there's one.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///Line items in the draft order with their computed properties.
        ///</summary>
        public IEnumerable<CalculatedDraftOrderLineItem>? lineItems { get; set; }
        ///<summary>
        ///A subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, taxes, or order discounts.
        ///</summary>
        public MoneyBag? lineItemsSubtotalPrice { get; set; }
        ///<summary>
        ///The name of the selected market.
        ///</summary>
        public string? marketName { get; set; }
        ///<summary>
        ///The selected country code that determines the pricing of the draft order.
        ///</summary>
        public CountryCode? marketRegionCountryCode { get; set; }
        ///<summary>
        ///Phone number assigned to draft order.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The payment currency of the customer for this draft order.
        ///</summary>
        public CurrencyCode? presentmentCurrencyCode { get; set; }
        ///<summary>
        ///The purchasing entity for the draft order.
        ///</summary>
        public IPurchasingEntity? purchasingEntity { get; set; }
        ///<summary>
        ///Line item that contains the shipping costs.
        ///</summary>
        public ShippingLine? shippingLine { get; set; }
        ///<summary>
        ///Subtotal of the line items and their discounts (doesn't contain shipping charges or shipping discounts, or taxes).
        ///</summary>
        public decimal? subtotalPrice { get; set; }
        ///<summary>
        ///Subtotal of the line items and their discounts (doesn't contain shipping charges or shipping discounts, or taxes).
        ///</summary>
        public MoneyBag? subtotalPriceSet { get; set; }
        ///<summary>
        ///Total amount of taxes charged for each line item and shipping line.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Total discounts for this draft order.
        ///</summary>
        public MoneyBag? totalDiscountsSet { get; set; }
        ///<summary>
        ///Total price of line items for this draft order.
        ///</summary>
        public MoneyBag? totalLineItemsPriceSet { get; set; }
        ///<summary>
        ///Total amount of the draft order (includes taxes, shipping charges, and discounts).
        ///</summary>
        public decimal? totalPrice { get; set; }
        ///<summary>
        ///Total amount of the draft order(includes taxes, shipping charges, and discounts).
        ///</summary>
        public MoneyBag? totalPriceSet { get; set; }
        ///<summary>
        ///Total shipping charge for the draft order.
        ///</summary>
        public decimal? totalShippingPrice { get; set; }
        ///<summary>
        ///Total shipping charge for the draft order.
        ///</summary>
        public MoneyBag? totalShippingPriceSet { get; set; }
        ///<summary>
        ///Total amount of taxes for the draft order.
        ///</summary>
        public decimal? totalTax { get; set; }
        ///<summary>
        ///Total amount of taxes for the draft order.
        ///</summary>
        public MoneyBag? totalTaxSet { get; set; }
    }

    ///<summary>
    ///The computed line items for a draft order.
    ///</summary>
    public class CalculatedDraftOrderLineItem : GraphQLObject<CalculatedDraftOrderLineItem>
    {
        ///<summary>
        ///The discount applied to the line item.
        ///</summary>
        public DraftOrderAppliedDiscount? appliedDiscount { get; set; }
        ///<summary>
        ///Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
        ///</summary>
        public bool? custom { get; set; }
        ///<summary>
        ///A list of attributes that represent custom features or special requests.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///Additional information (metafields) about the line item with the associated types.
        ///</summary>
        public IEnumerable<TypedAttribute>? customAttributesV2 { get; set; }
        ///<summary>
        ///Total price with discounts applied.
        ///</summary>
        public MoneyV2? discountedTotal { get; set; }
        ///<summary>
        ///The total price with discounts applied.
        ///</summary>
        public MoneyBag? discountedTotalSet { get; set; }
        ///<summary>
        ///The unit price with discounts applied.
        ///</summary>
        public MoneyV2? discountedUnitPrice { get; set; }
        ///<summary>
        ///Unit price with discounts applied.
        ///</summary>
        public MoneyBag? discountedUnitPriceSet { get; set; }
        ///<summary>
        ///Name of the service provider who fulfilled the order.
        ///
        ///Valid values are either **manual** or the name of the provider.
        ///For example, **amazon**, **shipwire**.
        ///
        ///Deleted fulfillment services will return null.
        ///</summary>
        public FulfillmentService? fulfillmentService { get; set; }
        ///<summary>
        ///The image associated with the draft order line item.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///Whether the line item represents the purchase of a gift card.
        ///</summary>
        public bool? isGiftCard { get; set; }
        ///<summary>
        ///The name of the product.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
        ///</summary>
        public MoneyV2? originalTotal { get; set; }
        ///<summary>
        ///The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
        ///</summary>
        public MoneyBag? originalTotalSet { get; set; }
        ///<summary>
        ///The variant price without any discounts applied.
        ///</summary>
        public MoneyV2? originalUnitPrice { get; set; }
        ///<summary>
        ///The variant price without any discounts applied.
        ///</summary>
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///The product associated with the draft order line item.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The number of variant items requested in the draft order.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///Whether physical shipping is required for the variant.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///The SKU number of the product variant.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///Whether the variant is taxable.
        ///</summary>
        public bool? taxable { get; set; }
        ///<summary>
        ///The title of the product or variant. This field only applies to custom line items.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total value of the discount.
        ///</summary>
        public MoneyV2? totalDiscount { get; set; }
        ///<summary>
        ///The total value of the discount.
        ///</summary>
        public MoneyBag? totalDiscountSet { get; set; }
        ///<summary>
        ///The variant associated with the draft order line item.
        ///</summary>
        public ProductVariant? variant { get; set; }
        ///<summary>
        ///The name of the variant.
        ///</summary>
        public string? variantTitle { get; set; }
        ///<summary>
        ///The name of the vendor who created the product variant.
        ///</summary>
        public string? vendor { get; set; }
        ///<summary>
        ///The weight unit and value for a draft order line item.
        ///</summary>
        public Weight? weight { get; set; }
    }

    ///<summary>
    ///A line item involved in order editing that may be newly added or have new changes applied.
    ///</summary>
    public class CalculatedLineItem : GraphQLObject<CalculatedLineItem>
    {
        ///<summary>
        ///The discounts that have been allocated onto the line item by discount applications.
        ///</summary>
        public IEnumerable<CalculatedDiscountAllocation>? calculatedDiscountAllocations { get; set; }
        ///<summary>
        ///A list of attributes that represent custom features or special requests.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }

        ///<summary>
        ///The discounts that have been allocated onto the line item by discount applications.
        ///</summary>
        [Obsolete("Use `calculatedDiscountAllocations` instead.")]
        public IEnumerable<DiscountAllocation>? discountAllocations { get; set; }
        ///<summary>
        ///The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price.
        ///</summary>
        public MoneyBag? discountedUnitPriceSet { get; set; }
        ///<summary>
        ///The total number of items that can be edited.
        ///</summary>
        public int? editableQuantity { get; set; }
        ///<summary>
        ///The editable quantity prior to any changes made in the current edit.
        ///</summary>
        public int? editableQuantityBeforeChanges { get; set; }
        ///<summary>
        ///The total price of editable lines in shop and presentment currencies.
        ///</summary>
        public MoneyBag? editableSubtotalSet { get; set; }
        ///<summary>
        ///Whether the calculated line item has a staged discount.
        ///</summary>
        public bool? hasStagedLineItemDiscount { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image object associated to the line item's variant.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The variant unit price in shop and presentment currencies, without any discounts applied.
        ///</summary>
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///The total number of items.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///Whether the line item can be restocked or not.
        ///</summary>
        public bool? restockable { get; set; }
        ///<summary>
        ///Whether the changes on the line item will result in a restock.
        ///</summary>
        public bool? restocking { get; set; }
        ///<summary>
        ///The variant SKU number.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///A list of changes that affect this line item.
        ///</summary>
        public IEnumerable<IOrderStagedChange>? stagedChanges { get; set; }
        ///<summary>
        ///The title of the product.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total price of uneditable lines in shop and presentment currencies.
        ///</summary>
        public MoneyBag? uneditableSubtotalSet { get; set; }
        ///<summary>
        ///The product variant associated with this line item. The value is null for custom line items and items where
        ///the variant has been deleted.
        ///</summary>
        public ProductVariant? variant { get; set; }
        ///<summary>
        ///The title of the variant.
        ///</summary>
        public string? variantTitle { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CalculatedLineItems.
    ///</summary>
    public class CalculatedLineItemConnection : GraphQLObject<CalculatedLineItemConnection>, IConnectionWithNodesAndEdges<CalculatedLineItemEdge, CalculatedLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CalculatedLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CalculatedLineItemEdge.
        ///</summary>
        public IEnumerable<CalculatedLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
    ///</summary>
    public class CalculatedLineItemEdge : GraphQLObject<CalculatedLineItemEdge>, IEdge<CalculatedLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CalculatedLineItemEdge.
        ///</summary>
        public CalculatedLineItem? node { get; set; }
    }

    ///<summary>
    ///Represents a discount that was manually created for an order that is being edited.
    ///</summary>
    public class CalculatedManualDiscountApplication : GraphQLObject<CalculatedManualDiscountApplication>, ICalculatedDiscountApplication
    {
        ///<summary>
        ///The method by which the discount's value is allocated to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///The level at which the discount was applied.
        ///</summary>
        public DiscountApplicationLevel? appliedTo { get; set; }
        ///<summary>
        ///The description of discount application. Indicates the reason why the discount was applied.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///An order with edits applied but not saved.
    ///</summary>
    public class CalculatedOrder : GraphQLObject<CalculatedOrder>, INode
    {
        ///<summary>
        ///Returns only the new discount applications being added to the order in the current edit.
        ///</summary>
        public CalculatedDiscountApplicationConnection? addedDiscountApplications { get; set; }
        ///<summary>
        ///Returns only the new line items being added to the order during the current edit.
        ///</summary>
        public CalculatedLineItemConnection? addedLineItems { get; set; }
        ///<summary>
        ///Amount of the order-level discount (doesn't contain any line item discounts) in shop and presentment currencies.
        ///</summary>
        public MoneyBag? cartDiscountAmountSet { get; set; }
        ///<summary>
        ///Whether the changes have been applied and saved to the order.
        ///</summary>
        public bool? committed { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns all items on the order that existed before starting the edit.
        ///Will include any changes that have been made.
        ///Will not include line items added during the current edit.
        ///</summary>
        public CalculatedLineItemConnection? lineItems { get; set; }
        ///<summary>
        ///The HTML of the customer notification for the order edit.
        ///</summary>
        public string? notificationPreviewHtml { get; set; }
        ///<summary>
        ///The customer notification title.
        ///</summary>
        public string? notificationPreviewTitle { get; set; }

        ///<summary>
        ///The order without any changes applied.
        ///</summary>
        [Obsolete("Use `originalOrder` instead.")]
        public Order? order { get; set; }
        ///<summary>
        ///The order without any changes applied.
        ///</summary>
        public Order? originalOrder { get; set; }
        ///<summary>
        ///List of changes made to the order during the current edit.
        ///</summary>
        public OrderStagedChangeConnection? stagedChanges { get; set; }
        ///<summary>
        ///The sum of the quantities for the line items that contribute to the order's subtotal.
        ///</summary>
        public int? subtotalLineItemsQuantity { get; set; }
        ///<summary>
        ///The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal doesn't include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders.
        ///</summary>
        public MoneyBag? subtotalPriceSet { get; set; }
        ///<summary>
        ///Taxes charged for the line item.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Total price of the order less the total amount received from the customer in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalOutstandingSet { get; set; }
        ///<summary>
        ///Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalPriceSet { get; set; }
    }

    ///<summary>
    ///A discount created by a Shopify script for an order that is being edited.
    ///</summary>
    public class CalculatedScriptDiscountApplication : GraphQLObject<CalculatedScriptDiscountApplication>, ICalculatedDiscountApplication
    {
        ///<summary>
        ///The method by which the discount's value is allocated to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///The level at which the discount was applied.
        ///</summary>
        public DiscountApplicationLevel? appliedTo { get; set; }
        ///<summary>
        ///The description of discount application. Indicates the reason why the discount was applied.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///Card payment details related to a transaction.
    ///</summary>
    public class CardPaymentDetails : GraphQLObject<CardPaymentDetails>, IBasePaymentDetails, IPaymentDetails
    {
        ///<summary>
        ///The response code from the address verification system (AVS). The code is always a single letter.
        ///</summary>
        public string? avsResultCode { get; set; }
        ///<summary>
        ///The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card. This is made up of the first few digits of the credit card number.
        ///</summary>
        public string? bin { get; set; }
        ///<summary>
        ///The name of the company that issued the customer's credit card.
        ///</summary>
        public string? company { get; set; }
        ///<summary>
        ///The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly. The code is a single letter or empty string.
        ///</summary>
        public string? cvvResultCode { get; set; }
        ///<summary>
        ///The month in which the used credit card expires.
        ///</summary>
        public int? expirationMonth { get; set; }
        ///<summary>
        ///The year in which the used credit card expires.
        ///</summary>
        public int? expirationYear { get; set; }
        ///<summary>
        ///The holder of the credit card.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The customer's credit card number, with most of the leading digits redacted.
        ///</summary>
        public string? number { get; set; }
        ///<summary>
        ///The name of payment method used by the buyer.
        ///</summary>
        public string? paymentMethodName { get; set; }
        ///<summary>
        ///Digital wallet used for the payment.
        ///</summary>
        public DigitalWallet? wallet { get; set; }
    }

    ///<summary>
    ///A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle).
    ///</summary>
    public class CartTransform : GraphQLObject<CartTransform>, IHasMetafields, INode
    {
        ///<summary>
        ///Whether a run failure will block cart and checkout operations.
        ///</summary>
        public bool? blockOnFailure { get; set; }
        ///<summary>
        ///The ID for the Cart Transform function.
        ///</summary>
        public string? functionId { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CartTransforms.
    ///</summary>
    public class CartTransformConnection : GraphQLObject<CartTransformConnection>, IConnectionWithNodesAndEdges<CartTransformEdge, CartTransform>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CartTransformEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CartTransformEdge.
        ///</summary>
        public IEnumerable<CartTransform>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `cartTransformCreate` mutation.
    ///</summary>
    public class CartTransformCreatePayload : GraphQLObject<CartTransformCreatePayload>
    {
        ///<summary>
        ///The newly created cart transform function.
        ///</summary>
        public CartTransform? cartTransform { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CartTransformCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `CartTransformCreate`.
    ///</summary>
    public class CartTransformCreateUserError : GraphQLObject<CartTransformCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CartTransformCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CartTransformCreateUserError`.
    ///</summary>
    public enum CartTransformCreateUserErrorCode
    {
        ///<summary>
        ///Failed to create cart transform due to invalid input.
        ///</summary>
        INPUT_INVALID,
        ///<summary>
        ///No Shopify Function found for provided function_id.
        ///</summary>
        FUNCTION_NOT_FOUND,
        ///<summary>
        ///A cart transform function already exists for the provided function_id.
        ///</summary>
        FUNCTION_ALREADY_REGISTERED,
        ///<summary>
        ///Function does not implement the required interface for this cart_transform function.
        ///</summary>
        FUNCTION_DOES_NOT_IMPLEMENT,
    }

    ///<summary>
    ///Return type for `cartTransformDelete` mutation.
    ///</summary>
    public class CartTransformDeletePayload : GraphQLObject<CartTransformDeletePayload>
    {
        ///<summary>
        ///The globally-unique ID for the deleted cart transform.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CartTransformDeleteUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `CartTransformDelete`.
    ///</summary>
    public class CartTransformDeleteUserError : GraphQLObject<CartTransformDeleteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CartTransformDeleteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CartTransformDeleteUserError`.
    ///</summary>
    public enum CartTransformDeleteUserErrorCode
    {
        ///<summary>
        ///Could not find cart transform for provided id.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///Unauthorized app scope.
        ///</summary>
        UNAUTHORIZED_APP_SCOPE,
    }

    ///<summary>
    ///An auto-generated type which holds one CartTransform and a cursor during pagination.
    ///</summary>
    public class CartTransformEdge : GraphQLObject<CartTransformEdge>, IEdge<CartTransform>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CartTransformEdge.
        ///</summary>
        public CartTransform? node { get; set; }
    }

    ///<summary>
    ///Represents the cart transform feature configuration for the shop.
    ///</summary>
    public class CartTransformEligibleOperations : GraphQLObject<CartTransformEligibleOperations>
    {
        ///<summary>
        ///The shop is eligible for expand operations.
        ///</summary>
        public bool? expandOperation { get; set; }
        ///<summary>
        ///The shop is eligible for merge operations.
        ///</summary>
        public bool? mergeOperation { get; set; }
        ///<summary>
        ///The shop is eligible for update operations.
        ///</summary>
        public bool? updateOperation { get; set; }
    }

    ///<summary>
    ///Represents the cart transform feature configuration for the shop.
    ///</summary>
    public class CartTransformFeature : GraphQLObject<CartTransformFeature>
    {
        ///<summary>
        ///The cart transform operations eligible for the shop.
        ///</summary>
        public CartTransformEligibleOperations? eligibleOperations { get; set; }
    }

    ///<summary>
    ///A list of products with publishing and pricing information.
    ///A catalog can be associated with a specific context, such as a [`Market`](https://shopify.dev/api/admin-graphql/current/objects/market), [`CompanyLocation`](https://shopify.dev/api/admin-graphql/current/objects/companylocation), or [`App`](https://shopify.dev/api/admin-graphql/current/objects/app).
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AppCatalog), typeDiscriminator: "AppCatalog")]
    [JsonDerivedType(typeof(CompanyLocationCatalog), typeDiscriminator: "CompanyLocationCatalog")]
    [JsonDerivedType(typeof(MarketCatalog), typeDiscriminator: "MarketCatalog")]
    public interface ICatalog : IGraphQLObject, INode
    {
        ///<summary>
        ///Most recent catalog operations.
        ///</summary>
        public IEnumerable<IResourceOperation>? operations { get; }
        ///<summary>
        ///The price list associated with the catalog.
        ///</summary>
        public PriceList? priceList { get; }
        ///<summary>
        ///A group of products and collections that's published to a catalog.
        ///</summary>
        public Publication? publication { get; }
        ///<summary>
        ///The status of the catalog.
        ///</summary>
        public CatalogStatus? status { get; }
        ///<summary>
        ///The name of the catalog.
        ///</summary>
        public string? title { get; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Catalogs.
    ///</summary>
    public class CatalogConnection : GraphQLObject<CatalogConnection>, IConnectionWithNodesAndEdges<CatalogEdge, ICatalog>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CatalogEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CatalogEdge.
        ///</summary>
        public IEnumerable<ICatalog>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
        ///<summary>
        ///The total count of Catalogs.
        ///</summary>
        public ulong? totalCount { get; set; }
    }

    ///<summary>
    ///Return type for `catalogContextUpdate` mutation.
    ///</summary>
    public class CatalogContextUpdatePayload : GraphQLObject<CatalogContextUpdatePayload>
    {
        ///<summary>
        ///The updated catalog.
        ///</summary>
        public ICatalog? catalog { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CatalogUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `catalogCreate` mutation.
    ///</summary>
    public class CatalogCreatePayload : GraphQLObject<CatalogCreatePayload>
    {
        ///<summary>
        ///The newly created catalog.
        ///</summary>
        public ICatalog? catalog { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CatalogUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A catalog csv operation represents a CSV file import.
    ///</summary>
    public class CatalogCsvOperation : GraphQLObject<CatalogCsvOperation>, INode, IResourceOperation, IPublicationOperation
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The count of processed rows, summing imported, failed, and skipped rows.
        ///</summary>
        public int? processedRowCount { get; set; }
        ///<summary>
        ///Represents a rows objects within this background operation.
        ///</summary>
        public RowCount? rowCount { get; set; }
        ///<summary>
        ///The status of this operation.
        ///</summary>
        public ResourceOperationStatus? status { get; set; }
    }

    ///<summary>
    ///Return type for `catalogDelete` mutation.
    ///</summary>
    public class CatalogDeletePayload : GraphQLObject<CatalogDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted catalog.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CatalogUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Catalog and a cursor during pagination.
    ///</summary>
    public class CatalogEdge : GraphQLObject<CatalogEdge>, IEdge<ICatalog>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CatalogEdge.
        ///</summary>
        public ICatalog? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the Catalog query.
    ///</summary>
    public enum CatalogSortKeys
    {
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The state of a catalog.
    ///</summary>
    public enum CatalogStatus
    {
        ///<summary>
        ///The catalog is active.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The catalog is archived.
        ///</summary>
        ARCHIVED,
        ///<summary>
        ///The catalog is in draft.
        ///</summary>
        DRAFT,
    }

    ///<summary>
    ///The associated catalog's type.
    ///</summary>
    public enum CatalogType
    {
        ///<summary>
        ///Not associated to a catalog.
        ///</summary>
        NONE,
        ///<summary>
        ///Catalogs belonging to apps.
        ///</summary>
        APP,
        ///<summary>
        ///Catalogs belonging to company locations.
        ///</summary>
        COMPANY_LOCATION,
        ///<summary>
        ///Catalogs belonging to markets.
        ///</summary>
        MARKET,
    }

    ///<summary>
    ///Return type for `catalogUpdate` mutation.
    ///</summary>
    public class CatalogUpdatePayload : GraphQLObject<CatalogUpdatePayload>
    {
        ///<summary>
        ///The updated catalog.
        ///</summary>
        public ICatalog? catalog { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CatalogUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Defines errors encountered while managing a catalog.
    ///</summary>
    public class CatalogUserError : GraphQLObject<CatalogUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CatalogUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CatalogUserError`.
    ///</summary>
    public enum CatalogUserErrorCode
    {
        ///<summary>
        ///An app catalog cannot be assigned to a price list.
        ///</summary>
        APP_CATALOG_PRICE_LIST_ASSIGNMENT,
        ///<summary>
        ///Catalog failed to save.
        ///</summary>
        CATALOG_FAILED_TO_SAVE,
        ///<summary>
        ///The catalog wasn't found.
        ///</summary>
        CATALOG_NOT_FOUND,
        ///<summary>
        ///A price list cannot be assigned to the primary market.
        ///</summary>
        PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET,
        ///<summary>
        ///Quantity rules can be associated only with company location catalogs.
        ///</summary>
        CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES,
        ///<summary>
        ///Quantity price breaks can be associated only with company location catalogs.
        ///</summary>
        CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS,
        ///<summary>
        ///The catalog can't be associated with more than one market.
        ///</summary>
        CANNOT_ADD_MORE_THAN_ONE_MARKET,
        ///<summary>
        ///A company location catalog outside of a supported plan can only have an archived status.
        ///</summary>
        COMPANY_LOCATION_CATALOG_STATUS_PLAN,
        ///<summary>
        ///Context driver already assigned to this catalog.
        ///</summary>
        CONTEXT_ALREADY_ASSIGNED_TO_CATALOG,
        ///<summary>
        ///Cannot save the catalog because the catalog limit for the context was reached.
        ///</summary>
        CONTEXT_CATALOG_LIMIT_REACHED,
        ///<summary>
        ///The company location could not be found.
        ///</summary>
        COMPANY_LOCATION_NOT_FOUND,
        ///<summary>
        ///The arguments `contextsToAdd` and `contextsToRemove` must match existing catalog context type.
        ///</summary>
        CONTEXT_DRIVER_MISMATCH,
        ///<summary>
        ///A country price list cannot be assigned to a catalog.
        ///</summary>
        COUNTRY_PRICE_LIST_ASSIGNMENT,
        ///<summary>
        ///The catalog context type is invalid.
        ///</summary>
        INVALID_CATALOG_CONTEXT_TYPE,
        ///<summary>
        ///A market catalog must have an active status.
        ///</summary>
        MARKET_CATALOG_STATUS,
        ///<summary>
        ///Market not found.
        ///</summary>
        MARKET_NOT_FOUND,
        ///<summary>
        ///The catalog's market and price list currencies do not match.
        ///</summary>
        MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH,
        ///<summary>
        ///Market already belongs to another catalog.
        ///</summary>
        MARKET_TAKEN,
        ///<summary>
        ///Must provide exactly one context type.
        ///</summary>
        MUST_PROVIDE_EXACTLY_ONE_CONTEXT_TYPE,
        ///<summary>
        ///Price list failed to save.
        ///</summary>
        PRICE_LIST_FAILED_TO_SAVE,
        ///<summary>
        ///Price list not found.
        ///</summary>
        PRICE_LIST_NOT_FOUND,
        ///<summary>
        ///The price list is currently being modified. Please try again later.
        ///</summary>
        PRICE_LIST_LOCKED,
        ///<summary>
        ///Publication not found.
        ///</summary>
        PUBLICATION_NOT_FOUND,
        ///<summary>
        ///Must have `contexts_to_add` or `contexts_to_remove` argument.
        ///</summary>
        REQUIRES_CONTEXTS_TO_ADD_OR_REMOVE,
        ///<summary>
        ///Can't perform this action on a catalog of this type.
        ///</summary>
        UNSUPPORTED_CATALOG_ACTION,
        ///<summary>
        ///Cannot create a catalog for an app.
        ///</summary>
        CANNOT_CREATE_APP_CATALOG,
        ///<summary>
        ///Cannot modify a catalog for an app.
        ///</summary>
        CANNOT_MODIFY_APP_CATALOG,
        ///<summary>
        ///Cannot delete a catalog for an app.
        ///</summary>
        CANNOT_DELETE_APP_CATALOG,
        ///<summary>
        ///Cannot create a catalog for a market.
        ///</summary>
        CANNOT_CREATE_MARKET_CATALOG,
        ///<summary>
        ///Cannot modify a catalog for a market.
        ///</summary>
        CANNOT_MODIFY_MARKET_CATALOG,
        ///<summary>
        ///Cannot delete a catalog for a market.
        ///</summary>
        CANNOT_DELETE_MARKET_CATALOG,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
    }

    ///<summary>
    ///A channel represents an app where you sell a group of products and collections.
    ///A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
    ///</summary>
    public class Channel : GraphQLObject<Channel>, INode
    {
        ///<summary>
        ///The underlying app used by the channel.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The collection publications for the list of collections published to the channel.
        ///</summary>
        public ResourcePublicationConnection? collectionPublicationsV3 { get; set; }
        ///<summary>
        ///The list of collections published to the channel.
        ///</summary>
        public CollectionConnection? collections { get; set; }

        ///<summary>
        ///The unique identifier for the channel.
        ///</summary>
        [Obsolete("Use `id` instead.")]
        public string? handle { get; set; }
        ///<summary>
        ///Whether the collection is available to the channel.
        ///</summary>
        public bool? hasCollection { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the channel.
        ///</summary>
        public string? name { get; set; }

        ///<summary>
        ///The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
        ///</summary>
        [Obsolete("Use [AppInstallation.navigationItems](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-navigationitems) instead.")]
        public IEnumerable<NavigationItem>? navigationItems { get; set; }

        ///<summary>
        ///Home page for the channel.
        ///</summary>
        [Obsolete("Use [AppInstallation.launchUrl](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-launchurl) instead.")]
        public string? overviewPath { get; set; }

        ///<summary>
        ///The product publications for the products published to the channel.
        ///</summary>
        [Obsolete("Use `productPublicationsV3` instead.")]
        public ProductPublicationConnection? productPublications { get; set; }
        ///<summary>
        ///The product publications for the list of products published to the channel.
        ///</summary>
        public ResourcePublicationConnection? productPublicationsV3 { get; set; }
        ///<summary>
        ///The list of products published to the channel.
        ///</summary>
        public ProductConnection? products { get; set; }
        ///<summary>
        ///Whether the channel supports future publishing.
        ///</summary>
        public bool? supportsFuturePublishing { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Channels.
    ///</summary>
    public class ChannelConnection : GraphQLObject<ChannelConnection>, IConnectionWithNodesAndEdges<ChannelEdge, Channel>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ChannelEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ChannelEdge.
        ///</summary>
        public IEnumerable<Channel>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///A channel definition represents channels surfaces on the platform.
    ///A channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.
    ///</summary>
    public class ChannelDefinition : GraphQLObject<ChannelDefinition>, INode
    {
        ///<summary>
        ///Name of the channel that this sub channel belongs to.
        ///</summary>
        public string? channelName { get; set; }
        ///<summary>
        ///Unique string used as a public identifier for the channel definition.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///The unique ID for the channel definition.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether this channel definition represents a marketplace.
        ///</summary>
        public bool? isMarketplace { get; set; }
        ///<summary>
        ///Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
        ///</summary>
        public string? subChannelName { get; set; }
        ///<summary>
        ///Icon displayed when showing the channel in admin.
        ///</summary>
        public string? svgIcon { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Channel and a cursor during pagination.
    ///</summary>
    public class ChannelEdge : GraphQLObject<ChannelEdge>, IEdge<Channel>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ChannelEdge.
        ///</summary>
        public Channel? node { get; set; }
    }

    ///<summary>
    ///Contains the information for a given sales channel.
    ///</summary>
    public class ChannelInformation : GraphQLObject<ChannelInformation>, INode
    {
        ///<summary>
        ///The app associated with the channel.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The channel definition associated with the channel.
        ///</summary>
        public ChannelDefinition? channelDefinition { get; set; }
        ///<summary>
        ///The unique ID for the channel.
        ///</summary>
        public string? channelId { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
    }

    ///<summary>
    ///The settings of checkout visual customizations.
    ///
    ///To learn more about updating checkout branding settings, refer to the
    ///[checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert) mutation.
    ///</summary>
    public class CheckoutBranding : GraphQLObject<CheckoutBranding>
    {
        ///<summary>
        ///The customizations that apply to specific components or areas of the user interface.
        ///</summary>
        public CheckoutBrandingCustomizations? customizations { get; set; }
        ///<summary>
        ///The design system allows you to set values that represent specific attributes
        ///of your brand like color and font. These attributes are used throughout the user
        ///interface. This brings consistency and allows you to easily make broad design changes.
        ///</summary>
        public CheckoutBrandingDesignSystem? designSystem { get; set; }
    }

    ///<summary>
    ///Possible values for the background style.
    ///</summary>
    public enum CheckoutBrandingBackgroundStyle
    {
        ///<summary>
        ///The Solid background style.
        ///</summary>
        SOLID,
        ///<summary>
        ///The None background style.
        ///</summary>
        NONE,
    }

    ///<summary>
    ///Possible values for the border.
    ///</summary>
    public enum CheckoutBrandingBorder
    {
        ///<summary>
        ///The None border.
        ///</summary>
        NONE,
        ///<summary>
        ///The Block End border.
        ///</summary>
        BLOCK_END,
        ///<summary>
        ///The Full border.
        ///</summary>
        FULL,
    }

    ///<summary>
    ///The buttons customizations.
    ///</summary>
    public class CheckoutBrandingButton : GraphQLObject<CheckoutBrandingButton>
    {
        ///<summary>
        ///The background style used for buttons.
        ///</summary>
        public CheckoutBrandingBackgroundStyle? background { get; set; }
        ///<summary>
        ///The block padding used for buttons.
        ///</summary>
        public CheckoutBrandingSpacing? blockPadding { get; set; }
        ///<summary>
        ///The border used for buttons.
        ///</summary>
        public CheckoutBrandingSimpleBorder? border { get; set; }
        ///<summary>
        ///The corner radius used for buttons.
        ///</summary>
        public CheckoutBrandingCornerRadius? cornerRadius { get; set; }
        ///<summary>
        ///The inline padding used for buttons.
        ///</summary>
        public CheckoutBrandingSpacing? inlinePadding { get; set; }
        ///<summary>
        ///The typography used for buttons.
        ///</summary>
        public CheckoutBrandingTypographyStyle? typography { get; set; }
    }

    ///<summary>
    ///Colors for buttons.
    ///</summary>
    public class CheckoutBrandingButtonColorRoles : GraphQLObject<CheckoutBrandingButtonColorRoles>
    {
        ///<summary>
        ///The color of accented objects (links and focused state).
        ///</summary>
        public string? accent { get; set; }
        ///<summary>
        ///The color of the background.
        ///</summary>
        public string? background { get; set; }
        ///<summary>
        ///The color of borders.
        ///</summary>
        public string? border { get; set; }
        ///<summary>
        ///The decorative color for highlighting specific parts of the user interface.
        ///</summary>
        public string? decorative { get; set; }
        ///<summary>
        ///The colors of the button on hover.
        ///</summary>
        public CheckoutBrandingColorRoles? hover { get; set; }
        ///<summary>
        ///The color of icons.
        ///</summary>
        public string? icon { get; set; }
        ///<summary>
        ///The color of text.
        ///</summary>
        public string? text { get; set; }
    }

    ///<summary>
    ///The checkboxes customizations.
    ///</summary>
    public class CheckoutBrandingCheckbox : GraphQLObject<CheckoutBrandingCheckbox>
    {
        ///<summary>
        ///The corner radius used for checkboxes.
        ///</summary>
        public CheckoutBrandingCornerRadius? cornerRadius { get; set; }
    }

    ///<summary>
    ///The choice list customizations.
    ///</summary>
    public class CheckoutBrandingChoiceList : GraphQLObject<CheckoutBrandingChoiceList>
    {
        ///<summary>
        ///The settings that apply to the 'group' variant of ChoiceList.
        ///</summary>
        public CheckoutBrandingChoiceListGroup? group { get; set; }
    }

    ///<summary>
    ///The settings that apply to the 'group' variant of ChoiceList.
    ///</summary>
    public class CheckoutBrandingChoiceListGroup : GraphQLObject<CheckoutBrandingChoiceListGroup>
    {
        ///<summary>
        ///The spacing between UI elements in the list.
        ///</summary>
        public CheckoutBrandingSpacingKeyword? spacing { get; set; }
    }

    ///<summary>
    ///A set of colors for customizing the overall look and feel of the checkout.
    ///</summary>
    public class CheckoutBrandingColorGlobal : GraphQLObject<CheckoutBrandingColorGlobal>
    {
        ///<summary>
        ///A color used for interaction, like links and focus states.
        ///</summary>
        public string? accent { get; set; }
        ///<summary>
        ///A color strongly associated with the merchant, currently used for elements
        ///like primary and secondary buttons.
        ///</summary>
        public string? brand { get; set; }
        ///<summary>
        ///A semantic color used for components that communicate critical content.
        ///</summary>
        public string? critical { get; set; }
        ///<summary>
        ///A color used to highlight certain areas of the user interface.
        ///</summary>
        public string? decorative { get; set; }
        ///<summary>
        ///A semantic color used for components that communicate informative content.
        ///</summary>
        public string? info { get; set; }
        ///<summary>
        ///A semantic color used for components that communicate successful actions.
        ///</summary>
        public string? success { get; set; }
        ///<summary>
        ///A semantic color used for components that display content that requires attention.
        ///</summary>
        public string? warning { get; set; }
    }

    ///<summary>
    ///A group of colors used together on a surface.
    ///</summary>
    public class CheckoutBrandingColorRoles : GraphQLObject<CheckoutBrandingColorRoles>
    {
        ///<summary>
        ///The color of accented objects (links and focused state).
        ///</summary>
        public string? accent { get; set; }
        ///<summary>
        ///The color of the background.
        ///</summary>
        public string? background { get; set; }
        ///<summary>
        ///The color of borders.
        ///</summary>
        public string? border { get; set; }
        ///<summary>
        ///The decorative color for highlighting specific parts of the user interface.
        ///</summary>
        public string? decorative { get; set; }
        ///<summary>
        ///The color of icons.
        ///</summary>
        public string? icon { get; set; }
        ///<summary>
        ///The color of text.
        ///</summary>
        public string? text { get; set; }
    }

    ///<summary>
    ///A base set of color customizations that is applied to an area of Checkout, from which every component
    ///pulls its colors from.
    ///</summary>
    public class CheckoutBrandingColorScheme : GraphQLObject<CheckoutBrandingColorScheme>
    {
        ///<summary>
        ///The main colors of a scheme.
        ///</summary>
        public CheckoutBrandingColorRoles? @base { get; set; }
        ///<summary>
        ///The colors of form controls.
        ///</summary>
        public CheckoutBrandingControlColorRoles? control { get; set; }
        ///<summary>
        ///The colors of the primary button.
        ///</summary>
        public CheckoutBrandingButtonColorRoles? primaryButton { get; set; }
        ///<summary>
        ///The colors of the secondary button.
        ///</summary>
        public CheckoutBrandingButtonColorRoles? secondaryButton { get; set; }
    }

    ///<summary>
    ///The possible color schemes.
    ///</summary>
    public enum CheckoutBrandingColorSchemeSelection
    {
        ///<summary>
        ///Transparent color scheme selection.
        ///</summary>
        TRANSPARENT,
        ///<summary>
        ///Color Scheme1 color scheme selection.
        ///</summary>
        COLOR_SCHEME1,
        ///<summary>
        ///Color Scheme2 color scheme selection.
        ///</summary>
        COLOR_SCHEME2,
    }

    ///<summary>
    ///The color schemes.
    ///</summary>
    public class CheckoutBrandingColorSchemes : GraphQLObject<CheckoutBrandingColorSchemes>
    {
        ///<summary>
        ///The primary scheme. By default, it’s used for the main area of the interface.
        ///</summary>
        public CheckoutBrandingColorScheme? scheme1 { get; set; }
        ///<summary>
        ///The secondary scheme. By default, it’s used for secondary areas, like Checkout’s Order Summary.
        ///</summary>
        public CheckoutBrandingColorScheme? scheme2 { get; set; }
    }

    ///<summary>
    ///The possible colors.
    ///</summary>
    public enum CheckoutBrandingColorSelection
    {
        ///<summary>
        ///Transparent color selection.
        ///</summary>
        TRANSPARENT,
    }

    ///<summary>
    ///The color settings for global colors and color schemes.
    ///</summary>
    public class CheckoutBrandingColors : GraphQLObject<CheckoutBrandingColors>
    {
        ///<summary>
        ///A group of global colors for customizing the overall look and feel of the user interface.
        ///</summary>
        public CheckoutBrandingColorGlobal? global { get; set; }
        ///<summary>
        ///A set of color schemes which apply to different areas of the user interface.
        ///</summary>
        public CheckoutBrandingColorSchemes? schemes { get; set; }
    }

    ///<summary>
    ///The form controls customizations.
    ///</summary>
    public class CheckoutBrandingControl : GraphQLObject<CheckoutBrandingControl>
    {
        ///<summary>
        ///The border used for form controls.
        ///</summary>
        public CheckoutBrandingSimpleBorder? border { get; set; }
        ///<summary>
        ///Set to TRANSPARENT to define transparent form controls. If null, form controls inherit colors from their scheme settings (for example, the main section inherits from `design_system.colors.schemes.scheme1.control` by default). Note that usage of the `customizations.control.color` setting to customize the form control color is deprecated.
        ///</summary>
        public CheckoutBrandingColorSelection? color { get; set; }
        ///<summary>
        ///The corner radius used for form controls.
        ///</summary>
        public CheckoutBrandingCornerRadius? cornerRadius { get; set; }
        ///<summary>
        ///The label position used for form controls.
        ///</summary>
        public CheckoutBrandingLabelPosition? labelPosition { get; set; }
    }

    ///<summary>
    ///Colors for form controls.
    ///</summary>
    public class CheckoutBrandingControlColorRoles : GraphQLObject<CheckoutBrandingControlColorRoles>
    {
        ///<summary>
        ///The color of accented objects (links and focused state).
        ///</summary>
        public string? accent { get; set; }
        ///<summary>
        ///The color of the background.
        ///</summary>
        public string? background { get; set; }
        ///<summary>
        ///The color of borders.
        ///</summary>
        public string? border { get; set; }
        ///<summary>
        ///The decorative color for highlighting specific parts of the user interface.
        ///</summary>
        public string? decorative { get; set; }
        ///<summary>
        ///The color of icons.
        ///</summary>
        public string? icon { get; set; }
        ///<summary>
        ///The colors of selected controls.
        ///</summary>
        public CheckoutBrandingColorRoles? selected { get; set; }
        ///<summary>
        ///The color of text.
        ///</summary>
        public string? text { get; set; }
    }

    ///<summary>
    ///Possible values for the corner radius.
    ///</summary>
    public enum CheckoutBrandingCornerRadius
    {
        ///<summary>
        ///The None corner radius.
        ///</summary>
        NONE,
        ///<summary>
        ///The Small corner radius.
        ///</summary>
        SMALL,
        ///<summary>
        ///The Base corner radius.
        ///</summary>
        BASE,
        ///<summary>
        ///The Large corner radius.
        ///</summary>
        LARGE,
    }

    ///<summary>
    ///The corner radius variables.
    ///</summary>
    public class CheckoutBrandingCornerRadiusVariables : GraphQLObject<CheckoutBrandingCornerRadiusVariables>
    {
        ///<summary>
        ///The pixel value for base corner radiuses.
        ///</summary>
        public int? @base { get; set; }
        ///<summary>
        ///The pixel value for large corner radiuses.
        ///</summary>
        public int? large { get; set; }
        ///<summary>
        ///The pixel value for small corner radiuses.
        ///</summary>
        public int? small { get; set; }
    }

    ///<summary>
    ///A custom font.
    ///</summary>
    public class CheckoutBrandingCustomFont : GraphQLObject<CheckoutBrandingCustomFont>, ICheckoutBrandingFont
    {
        ///<summary>
        ///Globally unique ID reference to the custom font file.
        ///</summary>
        public string? genericFileId { get; set; }
        ///<summary>
        ///The font sources.
        ///</summary>
        public string? sources { get; set; }
        ///<summary>
        ///The font weight.
        ///</summary>
        public int? weight { get; set; }
    }

    ///<summary>
    ///The customizations that apply to specific components or areas of the user interface.
    ///</summary>
    public class CheckoutBrandingCustomizations : GraphQLObject<CheckoutBrandingCustomizations>
    {
        ///<summary>
        ///The checkboxes customizations.
        ///</summary>
        public CheckoutBrandingCheckbox? checkbox { get; set; }
        ///<summary>
        ///The choice list customizations.
        ///</summary>
        public CheckoutBrandingChoiceList? choiceList { get; set; }
        ///<summary>
        ///The form controls customizations.
        ///</summary>
        public CheckoutBrandingControl? control { get; set; }
        ///<summary>
        ///The favicon image.
        ///</summary>
        public CheckoutBrandingImage? favicon { get; set; }
        ///<summary>
        ///The global customizations.
        ///</summary>
        public CheckoutBrandingGlobal? global { get; set; }
        ///<summary>
        ///The header customizations.
        ///</summary>
        public CheckoutBrandingHeader? header { get; set; }
        ///<summary>
        ///The Heading Level 1 customizations.
        ///</summary>
        public CheckoutBrandingHeadingLevel? headingLevel1 { get; set; }
        ///<summary>
        ///The Heading Level 2 customizations.
        ///</summary>
        public CheckoutBrandingHeadingLevel? headingLevel2 { get; set; }
        ///<summary>
        ///The Heading Level 3 customizations.
        ///</summary>
        public CheckoutBrandingHeadingLevel? headingLevel3 { get; set; }
        ///<summary>
        ///The main area customizations.
        ///</summary>
        public CheckoutBrandingMain? main { get; set; }
        ///<summary>
        ///The merchandise thumbnails customizations.
        ///</summary>
        public CheckoutBrandingMerchandiseThumbnail? merchandiseThumbnail { get; set; }
        ///<summary>
        ///The order summary customizations.
        ///</summary>
        public CheckoutBrandingOrderSummary? orderSummary { get; set; }
        ///<summary>
        ///The primary buttons customizations.
        ///</summary>
        public CheckoutBrandingButton? primaryButton { get; set; }
        ///<summary>
        ///The secondary buttons customizations.
        ///</summary>
        public CheckoutBrandingButton? secondaryButton { get; set; }
        ///<summary>
        ///The selects customizations.
        ///</summary>
        public CheckoutBrandingSelect? select { get; set; }
        ///<summary>
        ///The text fields customizations.
        ///</summary>
        public CheckoutBrandingTextField? textField { get; set; }
    }

    ///<summary>
    ///The design system allows you to set values that represent specific attributes
    ///of your brand like color and font. These attributes are used throughout the user
    ///interface. This brings consistency and allows you to easily make broad design changes.
    ///</summary>
    public class CheckoutBrandingDesignSystem : GraphQLObject<CheckoutBrandingDesignSystem>
    {
        ///<summary>
        ///The color settings for global colors and color schemes.
        ///</summary>
        public CheckoutBrandingColors? colors { get; set; }
        ///<summary>
        ///The corner radius variables.
        ///</summary>
        public CheckoutBrandingCornerRadiusVariables? cornerRadius { get; set; }
        ///<summary>
        ///The typography.
        ///</summary>
        public CheckoutBrandingTypography? typography { get; set; }
    }

    ///<summary>
    ///A font.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CheckoutBrandingCustomFont), typeDiscriminator: "CheckoutBrandingCustomFont")]
    [JsonDerivedType(typeof(CheckoutBrandingShopifyFont), typeDiscriminator: "CheckoutBrandingShopifyFont")]
    public interface ICheckoutBrandingFont : IGraphQLObject
    {
        public CheckoutBrandingCustomFont? AsCheckoutBrandingCustomFont() => this as CheckoutBrandingCustomFont;
        public CheckoutBrandingShopifyFont? AsCheckoutBrandingShopifyFont() => this as CheckoutBrandingShopifyFont;
        ///<summary>
        ///The font sources.
        ///</summary>
        public string? sources { get; }
        ///<summary>
        ///The font weight.
        ///</summary>
        public int? weight { get; }
    }

    ///<summary>
    ///A font group.
    ///</summary>
    public class CheckoutBrandingFontGroup : GraphQLObject<CheckoutBrandingFontGroup>
    {
        ///<summary>
        ///The base font.
        ///</summary>
        public ICheckoutBrandingFont? @base { get; set; }
        ///<summary>
        ///The bold font.
        ///</summary>
        public ICheckoutBrandingFont? bold { get; set; }
        ///<summary>
        ///The font loading strategy.
        ///</summary>
        public CheckoutBrandingFontLoadingStrategy? loadingStrategy { get; set; }
        ///<summary>
        ///The font group name.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///The font loading strategy determines how a font face is displayed after it is loaded or failed to load.
    ///For more information: https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display.
    ///</summary>
    public enum CheckoutBrandingFontLoadingStrategy
    {
        ///<summary>
        ///The font display strategy is defined by the browser user agent.
        ///</summary>
        AUTO,
        ///<summary>
        ///Gives the font face a short block period and an infinite swap period.
        ///</summary>
        BLOCK,
        ///<summary>
        ///Gives the font face an extremely small block period and an infinite swap period.
        ///</summary>
        SWAP,
        ///<summary>
        ///Gives the font face an extremely small block period and a short swap period.
        ///</summary>
        FALLBACK,
        ///<summary>
        ///Gives the font face an extremely small block period and no swap period.
        ///</summary>
        OPTIONAL,
    }

    ///<summary>
    ///The font size.
    ///</summary>
    public class CheckoutBrandingFontSize : GraphQLObject<CheckoutBrandingFontSize>
    {
        ///<summary>
        ///The base font size.
        ///</summary>
        public float? @base { get; set; }
        ///<summary>
        ///The scale ratio used to derive all font sizes such as small and large.
        ///</summary>
        public float? ratio { get; set; }
    }

    ///<summary>
    ///The global customizations.
    ///</summary>
    public class CheckoutBrandingGlobal : GraphQLObject<CheckoutBrandingGlobal>
    {
        ///<summary>
        ///The global corner radius.
        ///</summary>
        public CheckoutBrandingGlobalCornerRadius? cornerRadius { get; set; }
        ///<summary>
        ///The global typography customizations.
        ///</summary>
        public CheckoutBrandingTypographyStyleGlobal? typography { get; set; }
    }

    ///<summary>
    ///Possible values for the corner radius.
    ///</summary>
    public enum CheckoutBrandingGlobalCornerRadius
    {
        ///<summary>
        ///The None corner radius.
        ///</summary>
        NONE,
    }

    ///<summary>
    ///The header customizations.
    ///</summary>
    public class CheckoutBrandingHeader : GraphQLObject<CheckoutBrandingHeader>
    {
        ///<summary>
        ///The header alignment.
        ///</summary>
        public CheckoutBrandingHeaderAlignment? alignment { get; set; }
        ///<summary>
        ///The background image of the header.
        ///</summary>
        public CheckoutBrandingImage? banner { get; set; }
        ///<summary>
        ///The store logo.
        ///</summary>
        public CheckoutBrandingLogo? logo { get; set; }
        ///<summary>
        ///The header position.
        ///</summary>
        public CheckoutBrandingHeaderPosition? position { get; set; }
    }

    ///<summary>
    ///The possible header alignments.
    ///</summary>
    public enum CheckoutBrandingHeaderAlignment
    {
        ///<summary>
        ///Start alignment.
        ///</summary>
        START,
        ///<summary>
        ///Center alignment.
        ///</summary>
        CENTER,
        ///<summary>
        ///End alignment.
        ///</summary>
        END,
    }

    ///<summary>
    ///The possible header positions.
    ///</summary>
    public enum CheckoutBrandingHeaderPosition
    {
        ///<summary>
        ///Inline position.
        ///</summary>
        INLINE,
        ///<summary>
        ///Secondary inline position.
        ///</summary>
        INLINE_SECONDARY,
        ///<summary>
        ///Start position.
        ///</summary>
        START,
    }

    ///<summary>
    ///The heading level customizations.
    ///</summary>
    public class CheckoutBrandingHeadingLevel : GraphQLObject<CheckoutBrandingHeadingLevel>
    {
        ///<summary>
        ///The typography customizations used for headings.
        ///</summary>
        public CheckoutBrandingTypographyStyle? typography { get; set; }
    }

    ///<summary>
    ///A checkout branding image.
    ///</summary>
    public class CheckoutBrandingImage : GraphQLObject<CheckoutBrandingImage>
    {
        ///<summary>
        ///The image details.
        ///</summary>
        public Image? image { get; set; }
    }

    ///<summary>
    ///Possible values for the label position.
    ///</summary>
    public enum CheckoutBrandingLabelPosition
    {
        ///<summary>
        ///The Inside label position.
        ///</summary>
        INSIDE,
        ///<summary>
        ///The Outside label position.
        ///</summary>
        OUTSIDE,
    }

    ///<summary>
    ///The store logo customizations.
    ///</summary>
    public class CheckoutBrandingLogo : GraphQLObject<CheckoutBrandingLogo>
    {
        ///<summary>
        ///The logo image.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The maximum width of the logo.
        ///</summary>
        public int? maxWidth { get; set; }
    }

    ///<summary>
    ///The main container customizations.
    ///</summary>
    public class CheckoutBrandingMain : GraphQLObject<CheckoutBrandingMain>
    {
        ///<summary>
        ///The background image of the main container.
        ///</summary>
        public CheckoutBrandingImage? backgroundImage { get; set; }
        ///<summary>
        ///The selected color scheme of the main container.
        ///</summary>
        public CheckoutBrandingColorSchemeSelection? colorScheme { get; set; }
    }

    ///<summary>
    ///The merchandise thumbnails customizations.
    ///</summary>
    public class CheckoutBrandingMerchandiseThumbnail : GraphQLObject<CheckoutBrandingMerchandiseThumbnail>
    {
        ///<summary>
        ///The border used for merchandise thumbnails.
        ///</summary>
        public CheckoutBrandingSimpleBorder? border { get; set; }
        ///<summary>
        ///The corner radius used for merchandise thumbnails.
        ///</summary>
        public CheckoutBrandingCornerRadius? cornerRadius { get; set; }
    }

    ///<summary>
    ///The order summary customizations.
    ///</summary>
    public class CheckoutBrandingOrderSummary : GraphQLObject<CheckoutBrandingOrderSummary>
    {
        ///<summary>
        ///The background image of the order summary container.
        ///</summary>
        public CheckoutBrandingImage? backgroundImage { get; set; }
        ///<summary>
        ///The selected color scheme of the order summary container.
        ///</summary>
        public CheckoutBrandingColorSchemeSelection? colorScheme { get; set; }
    }

    ///<summary>
    ///The selects customizations.
    ///</summary>
    public class CheckoutBrandingSelect : GraphQLObject<CheckoutBrandingSelect>
    {
        ///<summary>
        ///The border used for selects.
        ///</summary>
        public CheckoutBrandingBorder? border { get; set; }
        ///<summary>
        ///The typography customizations used for selects.
        ///</summary>
        public CheckoutBrandingTypographyStyle? typography { get; set; }
    }

    ///<summary>
    ///A Shopify font.
    ///</summary>
    public class CheckoutBrandingShopifyFont : GraphQLObject<CheckoutBrandingShopifyFont>, ICheckoutBrandingFont
    {
        ///<summary>
        ///The font sources.
        ///</summary>
        public string? sources { get; set; }
        ///<summary>
        ///The font weight.
        ///</summary>
        public int? weight { get; set; }
    }

    ///<summary>
    ///Possible values for the simple border.
    ///</summary>
    public enum CheckoutBrandingSimpleBorder
    {
        ///<summary>
        ///The None simple border.
        ///</summary>
        NONE,
        ///<summary>
        ///The Full simple border.
        ///</summary>
        FULL,
    }

    ///<summary>
    ///Possible values for the spacing.
    ///</summary>
    public enum CheckoutBrandingSpacing
    {
        ///<summary>
        ///The None spacing.
        ///</summary>
        NONE,
        ///<summary>
        ///The Extra Tight spacing.
        ///</summary>
        EXTRA_TIGHT,
        ///<summary>
        ///The Tight spacing.
        ///</summary>
        TIGHT,
        ///<summary>
        ///The Base spacing.
        ///</summary>
        BASE,
        ///<summary>
        ///The Loose spacing.
        ///</summary>
        LOOSE,
        ///<summary>
        ///The Extra Loose spacing.
        ///</summary>
        EXTRA_LOOSE,
    }

    ///<summary>
    ///The spacing between UI elements.
    ///</summary>
    public enum CheckoutBrandingSpacingKeyword
    {
        ///<summary>
        ///The None spacing.
        ///</summary>
        NONE,
        ///<summary>
        ///The Base spacing.
        ///</summary>
        BASE,
        ///<summary>
        ///The Small spacing.
        ///</summary>
        SMALL,
        ///<summary>
        ///The Small 100 spacing.
        ///</summary>
        SMALL_100,
        ///<summary>
        ///The Small 200 spacing.
        ///</summary>
        SMALL_200,
        ///<summary>
        ///The Small 300 spacing.
        ///</summary>
        SMALL_300,
        ///<summary>
        ///The Small 400 spacing.
        ///</summary>
        SMALL_400,
        ///<summary>
        ///The Small 500 spacing.
        ///</summary>
        SMALL_500,
        ///<summary>
        ///The Large spacing.
        ///</summary>
        LARGE,
        ///<summary>
        ///The Large 100 spacing.
        ///</summary>
        LARGE_100,
        ///<summary>
        ///The Large 200 spacing.
        ///</summary>
        LARGE_200,
        ///<summary>
        ///The Large 300 spacing.
        ///</summary>
        LARGE_300,
        ///<summary>
        ///The Large 400 spacing.
        ///</summary>
        LARGE_400,
        ///<summary>
        ///The Large 500 spacing.
        ///</summary>
        LARGE_500,
    }

    ///<summary>
    ///The text fields customizations.
    ///</summary>
    public class CheckoutBrandingTextField : GraphQLObject<CheckoutBrandingTextField>
    {
        ///<summary>
        ///The border used for text fields.
        ///</summary>
        public CheckoutBrandingBorder? border { get; set; }
        ///<summary>
        ///The typography customizations used for text fields.
        ///</summary>
        public CheckoutBrandingTypographyStyle? typography { get; set; }
    }

    ///<summary>
    ///The typography settings.
    ///</summary>
    public class CheckoutBrandingTypography : GraphQLObject<CheckoutBrandingTypography>
    {
        ///<summary>
        ///A font group used for most components such as text, buttons and form controls.
        ///</summary>
        public CheckoutBrandingFontGroup? primary { get; set; }
        ///<summary>
        ///A font group used for heading components by default.
        ///</summary>
        public CheckoutBrandingFontGroup? secondary { get; set; }
        ///<summary>
        ///The font size.
        ///</summary>
        public CheckoutBrandingFontSize? size { get; set; }
    }

    ///<summary>
    ///The font selection.
    ///</summary>
    public enum CheckoutBrandingTypographyFont
    {
        ///<summary>
        ///The primary font.
        ///</summary>
        PRIMARY,
        ///<summary>
        ///The secondary font.
        ///</summary>
        SECONDARY,
    }

    ///<summary>
    ///Possible values for the typography kerning.
    ///</summary>
    public enum CheckoutBrandingTypographyKerning
    {
        ///<summary>
        ///Base or default kerning.
        ///</summary>
        BASE,
        ///<summary>
        ///Loose kerning, leaving more space than the default in between characters.
        ///</summary>
        LOOSE,
        ///<summary>
        ///Extra loose kerning, leaving even more space in between characters.
        ///</summary>
        EXTRA_LOOSE,
    }

    ///<summary>
    ///Possible values for the typography letter case.
    ///</summary>
    public enum CheckoutBrandingTypographyLetterCase
    {
        ///<summary>
        ///All letters are is lower case.
        ///</summary>
        LOWER,
        ///<summary>
        ///No letter casing applied.
        ///</summary>
        NONE,
        ///<summary>
        ///Capitalize the first letter of each word.
        ///</summary>
        TITLE,
        ///<summary>
        ///All letters are uppercase.
        ///</summary>
        UPPER,
    }

    ///<summary>
    ///Possible values for the font size.
    ///</summary>
    public enum CheckoutBrandingTypographySize
    {
        ///<summary>
        ///The extra small font size.
        ///</summary>
        EXTRA_SMALL,
        ///<summary>
        ///The small font size.
        ///</summary>
        SMALL,
        ///<summary>
        ///The base font size.
        ///</summary>
        BASE,
        ///<summary>
        ///The medium font size.
        ///</summary>
        MEDIUM,
        ///<summary>
        ///The large font size.
        ///</summary>
        LARGE,
        ///<summary>
        ///The extra large font size.
        ///</summary>
        EXTRA_LARGE,
        ///<summary>
        ///The extra extra large font size.
        ///</summary>
        EXTRA_EXTRA_LARGE,
    }

    ///<summary>
    ///The typography customizations.
    ///</summary>
    public class CheckoutBrandingTypographyStyle : GraphQLObject<CheckoutBrandingTypographyStyle>
    {
        ///<summary>
        ///The font.
        ///</summary>
        public CheckoutBrandingTypographyFont? font { get; set; }
        ///<summary>
        ///The kerning.
        ///</summary>
        public CheckoutBrandingTypographyKerning? kerning { get; set; }
        ///<summary>
        ///The letter case.
        ///</summary>
        public CheckoutBrandingTypographyLetterCase? letterCase { get; set; }
        ///<summary>
        ///The font size.
        ///</summary>
        public CheckoutBrandingTypographySize? size { get; set; }
        ///<summary>
        ///The font weight.
        ///</summary>
        public CheckoutBrandingTypographyWeight? weight { get; set; }
    }

    ///<summary>
    ///The global typography customizations.
    ///</summary>
    public class CheckoutBrandingTypographyStyleGlobal : GraphQLObject<CheckoutBrandingTypographyStyleGlobal>
    {
        ///<summary>
        ///The kerning.
        ///</summary>
        public CheckoutBrandingTypographyKerning? kerning { get; set; }
        ///<summary>
        ///The letter case.
        ///</summary>
        public CheckoutBrandingTypographyLetterCase? letterCase { get; set; }
    }

    ///<summary>
    ///Possible values for the font weight.
    ///</summary>
    public enum CheckoutBrandingTypographyWeight
    {
        ///<summary>
        ///The base weight.
        ///</summary>
        BASE,
        ///<summary>
        ///The bold weight.
        ///</summary>
        BOLD,
    }

    ///<summary>
    ///Return type for `checkoutBrandingUpsert` mutation.
    ///</summary>
    public class CheckoutBrandingUpsertPayload : GraphQLObject<CheckoutBrandingUpsertPayload>
    {
        ///<summary>
        ///Returns the new checkout branding settings.
        ///</summary>
        public CheckoutBranding? checkoutBranding { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CheckoutBrandingUpsertUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `CheckoutBrandingUpsert`.
    ///</summary>
    public class CheckoutBrandingUpsertUserError : GraphQLObject<CheckoutBrandingUpsertUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CheckoutBrandingUpsertUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CheckoutBrandingUpsertUserError`.
    ///</summary>
    public enum CheckoutBrandingUpsertUserErrorCode
    {
        ///<summary>
        ///Unexpected internal error happened.
        ///</summary>
        INTERNAL_ERROR,
    }

    ///<summary>
    ///A checkout profile defines the branding settings and the UI extensions for a store's checkout. A checkout profile could be published or draft. A store might have at most one published checkout profile, which is used to render their live checkout. The store could also have multiple draft profiles that were created, previewed, and published using the admin checkout editor.
    ///</summary>
    public class CheckoutProfile : GraphQLObject<CheckoutProfile>, INode
    {
        ///<summary>
        ///The date and time when the checkout profile was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The date and time when the checkout profile was last edited.
        ///</summary>
        public DateTime? editedAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether the checkout profile is published or not.
        ///</summary>
        public bool? isPublished { get; set; }
        ///<summary>
        ///The profile name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The date and time when the checkout profile was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CheckoutProfiles.
    ///</summary>
    public class CheckoutProfileConnection : GraphQLObject<CheckoutProfileConnection>, IConnectionWithNodesAndEdges<CheckoutProfileEdge, CheckoutProfile>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CheckoutProfileEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CheckoutProfileEdge.
        ///</summary>
        public IEnumerable<CheckoutProfile>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CheckoutProfile and a cursor during pagination.
    ///</summary>
    public class CheckoutProfileEdge : GraphQLObject<CheckoutProfileEdge>, IEdge<CheckoutProfile>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CheckoutProfileEdge.
        ///</summary>
        public CheckoutProfile? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the CheckoutProfile query.
    ///</summary>
    public enum CheckoutProfileSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `edited_at` value.
        ///</summary>
        EDITED_AT,
        ///<summary>
        ///Sort by the `is_published` value.
        ///</summary>
        IS_PUBLISHED,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The set of valid sort keys for the CodeDiscount query.
    ///</summary>
    public enum CodeDiscountSortKeys
    {
        ///<summary>
        ///Sort by the `starts_at` value.
        ///</summary>
        STARTS_AT,
        ///<summary>
        ///Sort by the `ends_at` value.
        ///</summary>
        ENDS_AT,
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
    ///
    ///Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
    ///
    ///Collections can also be created for a custom group of products. These are called custom or manual collections.
    ///</summary>
    public class Collection : GraphQLObject<Collection>, IHasMetafieldDefinitions, IHasMetafields, IHasPublishedTranslations, INode, IPublishable, IMetafieldReference, IMetafieldReferencer
    {
        ///<summary>
        ///The number of publications a resource is published to without feedback errors.
        ///</summary>
        public int? availablePublicationCount { get; set; }
        ///<summary>
        ///A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme.
        ///</summary>
        public string? descriptionHtml { get; set; }
        ///<summary>
        ///Information about the collection that's provided through resource feedback.
        ///</summary>
        public ResourceFeedback? feedback { get; set; }
        ///<summary>
        ///A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
        ///
        ///If the title is changed, the handle doesn't automatically change.
        ///
        ///The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///Whether the collection includes the specified product.
        ///</summary>
        public bool? hasProduct { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image associated with the collection.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The products that are included in the collection.
        ///</summary>
        public ProductConnection? products { get; set; }
        ///<summary>
        ///The number of products in the collection.
        ///</summary>
        public int? productsCount { get; set; }
        ///<summary>
        ///The number of publications a resource is published on.
        ///</summary>
        public int? publicationCount { get; set; }

        ///<summary>
        ///The channels where the collection is published.
        ///</summary>
        [Obsolete("Use `resourcePublications` instead.")]
        public CollectionPublicationConnection? publications { get; set; }

        ///<summary>
        ///Check to see whether the resource is published to a given channel.
        ///</summary>
        [Obsolete("Use `publishedOnPublication` instead.")]
        public bool? publishedOnChannel { get; set; }

        ///<summary>
        ///Check to see whether the resource is published to the calling app's channel.
        ///</summary>
        [Obsolete("Use `publishedOnCurrentPublication` instead.")]
        public bool? publishedOnCurrentChannel { get; set; }
        ///<summary>
        ///Check to see whether the resource is published to the calling app's publication.
        ///</summary>
        public bool? publishedOnCurrentPublication { get; set; }
        ///<summary>
        ///Check to see whether the resource is published to a given publication.
        ///</summary>
        public bool? publishedOnPublication { get; set; }
        ///<summary>
        ///The list of resources that are published to a publication.
        ///</summary>
        public ResourcePublicationConnection? resourcePublications { get; set; }
        ///<summary>
        ///The list of resources that are either published or staged to be published to a publication.
        ///</summary>
        public ResourcePublicationV2Connection? resourcePublicationsV2 { get; set; }
        ///<summary>
        ///For a smart (automated) collection, specifies the rules that determine whether a product is included.
        ///</summary>
        public CollectionRuleSet? ruleSet { get; set; }
        ///<summary>
        ///If the default SEO fields for page title and description have been modified, contains the modified information.
        ///</summary>
        public SEO? seo { get; set; }
        ///<summary>
        ///The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store.
        ///</summary>
        public CollectionSortOrder? sortOrder { get; set; }

        ///<summary>
        ///The Storefront GraphQL API ID of the `Collection`.
        ///
        ///As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
        ///</summary>
        [Obsolete("Use `id` instead.")]
        public string? storefrontId { get; set; }
        ///<summary>
        ///The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template.
        ///</summary>
        public string? templateSuffix { get; set; }
        ///<summary>
        ///The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }

        ///<summary>
        ///The list of channels that the resource is not published to.
        ///</summary>
        [Obsolete("Use `unpublishedPublications` instead.")]
        public ChannelConnection? unpublishedChannels { get; set; }
        ///<summary>
        ///The list of publications that the resource is not published to.
        ///</summary>
        public PublicationConnection? unpublishedPublications { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `collectionAddProducts` mutation.
    ///</summary>
    public class CollectionAddProductsPayload : GraphQLObject<CollectionAddProductsPayload>
    {
        ///<summary>
        ///The updated collection. Returns `null` if an error is raised.
        ///</summary>
        public Collection? collection { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `collectionAddProductsV2` mutation.
    ///</summary>
    public class CollectionAddProductsV2Payload : GraphQLObject<CollectionAddProductsV2Payload>
    {
        ///<summary>
        ///The asynchronous job adding the products.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CollectionAddProductsV2UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `CollectionAddProductsV2`.
    ///</summary>
    public class CollectionAddProductsV2UserError : GraphQLObject<CollectionAddProductsV2UserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CollectionAddProductsV2UserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CollectionAddProductsV2UserError`.
    ///</summary>
    public enum CollectionAddProductsV2UserErrorCode
    {
        ///<summary>
        ///Can't manually add products to a smart collection.
        ///</summary>
        CANT_ADD_TO_SMART_COLLECTION,
        ///<summary>
        ///Collection doesn't exist.
        ///</summary>
        COLLECTION_DOES_NOT_EXIST,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Collections.
    ///</summary>
    public class CollectionConnection : GraphQLObject<CollectionConnection>, IConnectionWithNodesAndEdges<CollectionEdge, Collection>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CollectionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CollectionEdge.
        ///</summary>
        public IEnumerable<Collection>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `collectionCreate` mutation.
    ///</summary>
    public class CollectionCreatePayload : GraphQLObject<CollectionCreatePayload>
    {
        ///<summary>
        ///The collection that has been created.
        ///</summary>
        public Collection? collection { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `collectionDelete` mutation.
    ///</summary>
    public class CollectionDeletePayload : GraphQLObject<CollectionDeletePayload>
    {
        ///<summary>
        ///The ID of the collection that was deleted. Returns `null` if the collection doesn't exist.
        ///</summary>
        public string? deletedCollectionId { get; set; }
        ///<summary>
        ///The shop associated with the collection.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Collection and a cursor during pagination.
    ///</summary>
    public class CollectionEdge : GraphQLObject<CollectionEdge>, IEdge<Collection>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CollectionEdge.
        ///</summary>
        public Collection? node { get; set; }
    }

    ///<summary>
    ///Represents the publications where a collection is published.
    ///</summary>
    public class CollectionPublication : GraphQLObject<CollectionPublication>
    {
        ///<summary>
        ///The channel where the collection will be published.
        ///</summary>
        [Obsolete("Use `publication` instead.")]
        public Channel? channel { get; set; }
        ///<summary>
        ///The collection to be published on the publication.
        ///</summary>
        public Collection? collection { get; set; }
        ///<summary>
        ///Whether the publication is published or not.
        ///</summary>
        public bool? isPublished { get; set; }
        ///<summary>
        ///The publication where the collection will be published.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The date that the publication was or is going to be published.
        ///</summary>
        public DateTime? publishDate { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CollectionPublications.
    ///</summary>
    public class CollectionPublicationConnection : GraphQLObject<CollectionPublicationConnection>, IConnectionWithNodesAndEdges<CollectionPublicationEdge, CollectionPublication>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CollectionPublicationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CollectionPublicationEdge.
        ///</summary>
        public IEnumerable<CollectionPublication>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CollectionPublication and a cursor during pagination.
    ///</summary>
    public class CollectionPublicationEdge : GraphQLObject<CollectionPublicationEdge>, IEdge<CollectionPublication>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CollectionPublicationEdge.
        ///</summary>
        public CollectionPublication? node { get; set; }
    }

    ///<summary>
    ///Return type for `collectionPublish` mutation.
    ///</summary>
    public class CollectionPublishPayload : GraphQLObject<CollectionPublishPayload>
    {
        ///<summary>
        ///The published collection.
        ///</summary>
        public Collection? collection { get; set; }
        ///<summary>
        ///The channels where the collection has been published.
        ///</summary>
        public IEnumerable<CollectionPublication>? collectionPublications { get; set; }
        ///<summary>
        ///The shop associated with the collection.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `collectionRemoveProducts` mutation.
    ///</summary>
    public class CollectionRemoveProductsPayload : GraphQLObject<CollectionRemoveProductsPayload>
    {
        ///<summary>
        ///The asynchronous job removing the products.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `collectionReorderProducts` mutation.
    ///</summary>
    public class CollectionReorderProductsPayload : GraphQLObject<CollectionReorderProductsPayload>
    {
        ///<summary>
        ///The asynchronous job reordering the products.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents at rule that's used to assign products to a collection.
    ///</summary>
    public class CollectionRule : GraphQLObject<CollectionRule>
    {
        ///<summary>
        ///The attribute that the rule focuses on. For example, `title` or `product_type`.
        ///</summary>
        public CollectionRuleColumn? column { get; set; }
        ///<summary>
        ///The value that the operator is applied to. For example, `Hats`.
        ///</summary>
        public string? condition { get; set; }
        ///<summary>
        ///The value that the operator is applied to.
        ///</summary>
        public ICollectionRuleConditionObject? conditionObject { get; set; }
        ///<summary>
        ///The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
        ///</summary>
        public CollectionRuleRelation? relation { get; set; }
    }

    ///<summary>
    ///Specifies the attribute of a product being used to populate the smart collection.
    ///</summary>
    public enum CollectionRuleColumn
    {
        ///<summary>
        ///The [`tag`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
        ///</summary>
        TAG,
        ///<summary>
        ///The [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-title) attribute.
        ///</summary>
        TITLE,
        ///<summary>
        ///The [`type`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
        ///</summary>
        TYPE,
        ///<summary>
        ///The [`product_taxonomy_node_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-productcategory) attribute.
        ///</summary>
        PRODUCT_TAXONOMY_NODE_ID,
        ///<summary>
        ///The [`vendor`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-vendor) attribute.
        ///</summary>
        VENDOR,
        ///<summary>
        ///The [`variant_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-price) attribute.
        ///</summary>
        VARIANT_PRICE,
        ///<summary>
        ///An attribute evaluated based on the `compare_at_price` attribute of the product's variants.
        ///With `is_set` relation, the rule matches products with at least one variant with `compare_at_price` set.
        ///With `is_not_set` relation, the rule matches matches products with at least one variant with `compare_at_price` not set.
        ///</summary>
        IS_PRICE_REDUCED,
        ///<summary>
        ///The [`variant_compare_at_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-compareatprice) attribute.
        ///</summary>
        VARIANT_COMPARE_AT_PRICE,
        ///<summary>
        ///The [`variant_weight`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-weight) attribute.
        ///</summary>
        VARIANT_WEIGHT,
        ///<summary>
        ///The [`variant_inventory`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryquantity) attribute.
        ///</summary>
        VARIANT_INVENTORY,
        ///<summary>
        ///The [`variant_title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-title) attribute.
        ///</summary>
        VARIANT_TITLE,
        ///<summary>
        ///This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
        ///</summary>
        PRODUCT_METAFIELD_DEFINITION,
        ///<summary>
        ///This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
        ///</summary>
        VARIANT_METAFIELD_DEFINITION,
    }

    ///<summary>
    ///Specifies object for the condition of the rule.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CollectionRuleMetafieldCondition), typeDiscriminator: "CollectionRuleMetafieldCondition")]
    [JsonDerivedType(typeof(CollectionRuleProductCategoryCondition), typeDiscriminator: "CollectionRuleProductCategoryCondition")]
    [JsonDerivedType(typeof(CollectionRuleTextCondition), typeDiscriminator: "CollectionRuleTextCondition")]
    public interface ICollectionRuleConditionObject : IGraphQLObject
    {
        public CollectionRuleMetafieldCondition? AsCollectionRuleMetafieldCondition() => this as CollectionRuleMetafieldCondition;
        public CollectionRuleProductCategoryCondition? AsCollectionRuleProductCategoryCondition() => this as CollectionRuleProductCategoryCondition;
        public CollectionRuleTextCondition? AsCollectionRuleTextCondition() => this as CollectionRuleTextCondition;
    }

    ///<summary>
    ///This object defines all columns and allowed relations that can be used in rules for smart collections to automatically include the matching products.
    ///</summary>
    public class CollectionRuleConditions : GraphQLObject<CollectionRuleConditions>
    {
        ///<summary>
        ///Allowed relations of the rule.
        ///</summary>
        public IEnumerable<CollectionRuleRelation>? allowedRelations { get; set; }
        ///<summary>
        ///Most commonly used relation for this rule.
        ///</summary>
        public CollectionRuleRelation? defaultRelation { get; set; }
        ///<summary>
        ///Additional attributes defining the rule.
        ///</summary>
        public ICollectionRuleConditionsRuleObject? ruleObject { get; set; }
        ///<summary>
        ///Type of the rule.
        ///</summary>
        public CollectionRuleColumn? ruleType { get; set; }
    }

    ///<summary>
    ///Specifies object with additional rule attributes.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CollectionRuleMetafieldCondition), typeDiscriminator: "CollectionRuleMetafieldCondition")]
    public interface ICollectionRuleConditionsRuleObject : IGraphQLObject
    {
        public CollectionRuleMetafieldCondition? AsCollectionRuleMetafieldCondition() => this as CollectionRuleMetafieldCondition;
        ///<summary>
        ///The metafield definition associated with the condition.
        ///</summary>
        public MetafieldDefinition? metafieldDefinition { get; set; }
    }

    ///<summary>
    ///Identifies a metafield definition used as a rule for the smart collection.
    ///</summary>
    public class CollectionRuleMetafieldCondition : GraphQLObject<CollectionRuleMetafieldCondition>, ICollectionRuleConditionObject, ICollectionRuleConditionsRuleObject
    {
        ///<summary>
        ///The metafield definition associated with the condition.
        ///</summary>
        public MetafieldDefinition? metafieldDefinition { get; set; }
    }

    ///<summary>
    ///Specifies the condition for a Product Category field.
    ///</summary>
    public class CollectionRuleProductCategoryCondition : GraphQLObject<CollectionRuleProductCategoryCondition>, ICollectionRuleConditionObject
    {
        ///<summary>
        ///The value of the condition.
        ///</summary>
        public ProductTaxonomyNode? value { get; set; }
    }

    ///<summary>
    ///Specifies the relationship between the `column` and the `condition`.
    ///</summary>
    public enum CollectionRuleRelation
    {
        ///<summary>
        ///The attribute contains the condition.
        ///</summary>
        CONTAINS,
        ///<summary>
        ///The attribute ends with the condition.
        ///</summary>
        ENDS_WITH,
        ///<summary>
        ///The attribute is equal to the condition.
        ///</summary>
        EQUALS,
        ///<summary>
        ///The attribute is greater than the condition.
        ///</summary>
        GREATER_THAN,
        ///<summary>
        ///The attribute is not set (equal to `null`).
        ///</summary>
        IS_NOT_SET,
        ///<summary>
        ///The attribute is set (not equal to `null`).
        ///</summary>
        IS_SET,
        ///<summary>
        ///The attribute is less than the condition.
        ///</summary>
        LESS_THAN,
        ///<summary>
        ///The attribute does not contain the condition.
        ///</summary>
        NOT_CONTAINS,
        ///<summary>
        ///The attribute does not equal the condition.
        ///</summary>
        NOT_EQUALS,
        ///<summary>
        ///The attribute starts with the condition.
        ///</summary>
        STARTS_WITH,
    }

    ///<summary>
    ///The set of rules that are used to determine which products are included in the collection.
    ///</summary>
    public class CollectionRuleSet : GraphQLObject<CollectionRuleSet>
    {
        ///<summary>
        ///Whether products must match any or all of the rules to be included in the collection.
        ///If true, then products must match at least one of the rules to be included in the collection.
        ///If false, then products must match all of the rules to be included in the collection.
        ///</summary>
        public bool? appliedDisjunctively { get; set; }
        ///<summary>
        ///The rules used to assign products to the collection.
        ///</summary>
        public IEnumerable<CollectionRule>? rules { get; set; }
    }

    ///<summary>
    ///Specifies the condition for a text field.
    ///</summary>
    public class CollectionRuleTextCondition : GraphQLObject<CollectionRuleTextCondition>, ICollectionRuleConditionObject
    {
        ///<summary>
        ///The value of the condition.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the Collection query.
    ///</summary>
    public enum CollectionSortKeys
    {
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Specifies the sort order for the products in the collection.
    ///</summary>
    public enum CollectionSortOrder
    {
        ///<summary>
        ///Alphabetically, in ascending order (A - Z).
        ///</summary>
        ALPHA_ASC,
        ///<summary>
        ///Alphabetically, in descending order (Z - A).
        ///</summary>
        ALPHA_DESC,
        ///<summary>
        ///By best-selling products.
        ///</summary>
        BEST_SELLING,
        ///<summary>
        ///By date created, in ascending order (oldest - newest).
        ///</summary>
        CREATED,
        ///<summary>
        ///By date created, in descending order (newest - oldest).
        ///</summary>
        CREATED_DESC,
        ///<summary>
        ///In the order set manually by the merchant.
        ///</summary>
        MANUAL,
        ///<summary>
        ///By price, in ascending order (lowest - highest).
        ///</summary>
        PRICE_ASC,
        ///<summary>
        ///By price, in descending order (highest - lowest).
        ///</summary>
        PRICE_DESC,
    }

    ///<summary>
    ///Return type for `collectionUnpublish` mutation.
    ///</summary>
    public class CollectionUnpublishPayload : GraphQLObject<CollectionUnpublishPayload>
    {
        ///<summary>
        ///The collection that has been unpublished.
        ///</summary>
        public Collection? collection { get; set; }
        ///<summary>
        ///The shop associated with the collection.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `collectionUpdate` mutation.
    ///</summary>
    public class CollectionUpdatePayload : GraphQLObject<CollectionUpdatePayload>
    {
        ///<summary>
        ///The updated collection.
        ///</summary>
        public Collection? collection { get; set; }
        ///<summary>
        ///The asynchronous job updating the products based on the new rule set.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Comment events are generated by staff members of a shop.
    ///They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
    ///</summary>
    public class CommentEvent : GraphQLObject<CommentEvent>, IEvent, INode
    {
        ///<summary>
        ///The name of the app that created the event.
        ///</summary>
        public string? appTitle { get; set; }
        ///<summary>
        ///The attachments associated with the comment event.
        ///</summary>
        public IEnumerable<CommentEventAttachment>? attachments { get; set; }
        ///<summary>
        ///Whether the event was created by an app.
        ///</summary>
        public bool? attributeToApp { get; set; }
        ///<summary>
        ///Whether the event was caused by an admin user.
        ///</summary>
        public bool? attributeToUser { get; set; }
        ///<summary>
        ///The name of the user that authored the comment event.
        ///</summary>
        public StaffMember? author { get; set; }
        ///<summary>
        ///Whether the comment event can be deleted. If true, then the comment event can be deleted.
        ///</summary>
        public bool? canDelete { get; set; }
        ///<summary>
        ///Whether the comment event can be edited. If true, then the comment event can be edited.
        ///</summary>
        public bool? canEdit { get; set; }
        ///<summary>
        ///The date and time when the event was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///Whether the event is critical.
        ///</summary>
        public bool? criticalAlert { get; set; }
        ///<summary>
        ///Whether the comment event has been edited. If true, then the comment event has been edited.
        ///</summary>
        public bool? edited { get; set; }
        ///<summary>
        ///The object reference associated with the comment event. For example, a product or discount).
        ///</summary>
        public ICommentEventEmbed? embed { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Human readable text that describes the event.
        ///</summary>
        public string? message { get; set; }
        ///<summary>
        ///The raw body of the comment event.
        ///</summary>
        public string? rawMessage { get; set; }
        ///<summary>
        ///The parent subject to which the comment event belongs.
        ///</summary>
        public ICommentEventSubject? subject { get; set; }
    }

    ///<summary>
    ///A file attachment associated to a comment event.
    ///</summary>
    public class CommentEventAttachment : GraphQLObject<CommentEventAttachment>
    {
        ///<summary>
        ///The file extension of the comment event attachment, indicating the file format.
        ///</summary>
        public string? fileExtension { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image attached to the comment event.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The filename of the comment event attachment.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The size of the attachment.
        ///</summary>
        public int? size { get; set; }
        ///<summary>
        ///The URL of the attachment.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The main embed of a comment event.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    public interface ICommentEventEmbed : IGraphQLObject
    {
        public Customer? AsCustomer() => this as Customer;
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public Order? AsOrder() => this as Order;
        public Product? AsProduct() => this as Product;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        ///<summary>
        ///The date and time when the customer was added to the store.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The date and time when the customer was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///The subject line of a comment event.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Company), typeDiscriminator: "Company")]
    [JsonDerivedType(typeof(CompanyLocation), typeDiscriminator: "CompanyLocation")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    [JsonDerivedType(typeof(PriceRule), typeDiscriminator: "PriceRule")]
    public interface ICommentEventSubject : IGraphQLObject
    {
        public Company? AsCompany() => this as Company;
        public CompanyLocation? AsCompanyLocation() => this as CompanyLocation;
        public Customer? AsCustomer() => this as Customer;
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public Order? AsOrder() => this as Order;
        public PriceRule? AsPriceRule() => this as PriceRule;
        ///<summary>
        ///Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
        ///</summary>
        public bool? hasTimelineComment { get; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; }
    }

    ///<summary>
    ///Return type for `companiesDelete` mutation.
    ///</summary>
    public class CompaniesDeletePayload : GraphQLObject<CompaniesDeletePayload>
    {
        ///<summary>
        ///A list of IDs of the deleted companies.
        ///</summary>
        public IEnumerable<string>? deletedCompanyIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents information about a company which is also a customer of the shop.
    ///</summary>
    public class Company : GraphQLObject<Company>, ICommentEventSubject, IHasEvents, IHasMetafieldDefinitions, IHasMetafields, INavigable, INode
    {
        ///<summary>
        ///The number of contacts that belong to the company.
        ///</summary>
        public int? contactCount { get; set; }
        ///<summary>
        ///The list of roles for the company contacts.
        ///</summary>
        public CompanyContactRoleConnection? contactRoles { get; set; }
        ///<summary>
        ///The list of contacts in the company.
        ///</summary>
        public CompanyContactConnection? contacts { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer.
        ///</summary>
        public DateTime? customerSince { get; set; }
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; set; }
        ///<summary>
        ///The role proposed by default for a contact at the company.
        ///</summary>
        public CompanyContactRole? defaultRole { get; set; }
        ///<summary>
        ///The list of the company's draft orders.
        ///</summary>
        public DraftOrderConnection? draftOrders { get; set; }
        ///<summary>
        ///The paginated list of events associated with the host subject.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///A unique externally-supplied ID for the company.
        ///</summary>
        public string? externalId { get; set; }
        ///<summary>
        ///Whether the merchant added a timeline comment to the company.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`.
        ///</summary>
        public string? lifetimeDuration { get; set; }
        ///<summary>
        ///The number of locations that belong to the company.
        ///</summary>
        public int? locationCount { get; set; }
        ///<summary>
        ///The list of locations in the company.
        ///</summary>
        public CompanyLocationConnection? locations { get; set; }
        ///<summary>
        ///The main contact for the company.
        ///</summary>
        public CompanyContact? mainContact { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The name of the company.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///A note about the company.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The total number of orders placed for this company, across all its locations.
        ///</summary>
        public int? orderCount { get; set; }
        ///<summary>
        ///The list of the company's orders.
        ///</summary>
        public OrderConnection? orders { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The total amount spent by this company, across all its locations.
        ///</summary>
        public MoneyV2? totalSpent { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Represents a billing or shipping address for a company location.
    ///</summary>
    public class CompanyAddress : GraphQLObject<CompanyAddress>, INode
    {
        ///<summary>
        ///The first line of the address. Typically the street address or PO Box number.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the address. Typically the number of the apartment, suite, or unit.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The name of the city, district, village, or town.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The name of the company.
        ///</summary>
        public string? companyName { get; set; }
        ///<summary>
        ///The name of the country.
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The two-letter code for the country of the address.
        ///For example, US.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The first name of the recipient.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///The formatted version of the address.
        ///</summary>
        public IEnumerable<string>? formattedAddress { get; set; }
        ///<summary>
        ///A comma-separated list of the values for city, province, and country.
        ///</summary>
        public string? formattedArea { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The last name of the recipient.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///A unique phone number for the customer.
        ///Formatted using E.164 standard. For example, _+16135551111_.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The region of the address, such as the province, state, or district.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The identity of the recipient e.g. 'Receiving Department'.
        ///</summary>
        public string? recipient { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The zip or postal code of the address.
        ///</summary>
        public string? zip { get; set; }
        ///<summary>
        ///The two-letter code for the region.
        ///For example, ON.
        ///</summary>
        public string? zoneCode { get; set; }
    }

    ///<summary>
    ///Return type for `companyAddressDelete` mutation.
    ///</summary>
    public class CompanyAddressDeletePayload : GraphQLObject<CompanyAddressDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted address.
        ///</summary>
        public string? deletedAddressId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The valid values for the address type of a company.
    ///</summary>
    public enum CompanyAddressType
    {
        ///<summary>
        ///The address is a billing address.
        ///</summary>
        BILLING,
        ///<summary>
        ///The address is a shipping address.
        ///</summary>
        SHIPPING,
    }

    ///<summary>
    ///Return type for `companyAssignCustomerAsContact` mutation.
    ///</summary>
    public class CompanyAssignCustomerAsContactPayload : GraphQLObject<CompanyAssignCustomerAsContactPayload>
    {
        ///<summary>
        ///The created company contact.
        ///</summary>
        public CompanyContact? companyContact { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyAssignMainContact` mutation.
    ///</summary>
    public class CompanyAssignMainContactPayload : GraphQLObject<CompanyAssignMainContactPayload>
    {
        ///<summary>
        ///The company for which the main contact is assigned.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Companies.
    ///</summary>
    public class CompanyConnection : GraphQLObject<CompanyConnection>, IConnectionWithNodesAndEdges<CompanyEdge, Company>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CompanyEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CompanyEdge.
        ///</summary>
        public IEnumerable<Company>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer).
    ///</summary>
    public class CompanyContact : GraphQLObject<CompanyContact>, INode
    {
        ///<summary>
        ///The company to which the contact belongs.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was created at Shopify.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The customer associated to this contact.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of draft orders for the company contact.
        ///</summary>
        public DraftOrderConnection? draftOrders { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether the contact is the main contact of the company.
        ///</summary>
        public bool? isMainContact { get; set; }
        ///<summary>
        ///The lifetime duration of the company contact, since its creation date on Shopify. Examples: `1 year`, `2 months`, `3 days`.
        ///</summary>
        public string? lifetimeDuration { get; set; }
        ///<summary>
        ///The company contact's locale (language).
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///The list of orders for the company contact.
        ///</summary>
        public OrderConnection? orders { get; set; }
        ///<summary>
        ///The list of roles assigned to this company contact.
        ///</summary>
        public CompanyContactRoleAssignmentConnection? roleAssignments { get; set; }
        ///<summary>
        ///The company contact's job title.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `companyContactAssignRole` mutation.
    ///</summary>
    public class CompanyContactAssignRolePayload : GraphQLObject<CompanyContactAssignRolePayload>
    {
        ///<summary>
        ///The company contact role assignment.
        ///</summary>
        public CompanyContactRoleAssignment? companyContactRoleAssignment { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyContactAssignRoles` mutation.
    ///</summary>
    public class CompanyContactAssignRolesPayload : GraphQLObject<CompanyContactAssignRolesPayload>
    {
        ///<summary>
        ///A list of newly created assignments of company contacts to a company location.
        ///</summary>
        public IEnumerable<CompanyContactRoleAssignment>? roleAssignments { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CompanyContacts.
    ///</summary>
    public class CompanyContactConnection : GraphQLObject<CompanyContactConnection>, IConnectionWithNodesAndEdges<CompanyContactEdge, CompanyContact>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CompanyContactEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CompanyContactEdge.
        ///</summary>
        public IEnumerable<CompanyContact>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `companyContactCreate` mutation.
    ///</summary>
    public class CompanyContactCreatePayload : GraphQLObject<CompanyContactCreatePayload>
    {
        ///<summary>
        ///The created company contact.
        ///</summary>
        public CompanyContact? companyContact { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyContactDelete` mutation.
    ///</summary>
    public class CompanyContactDeletePayload : GraphQLObject<CompanyContactDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted company contact.
        ///</summary>
        public string? deletedCompanyContactId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CompanyContact and a cursor during pagination.
    ///</summary>
    public class CompanyContactEdge : GraphQLObject<CompanyContactEdge>, IEdge<CompanyContact>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CompanyContactEdge.
        ///</summary>
        public CompanyContact? node { get; set; }
    }

    ///<summary>
    ///Return type for `companyContactRemoveFromCompany` mutation.
    ///</summary>
    public class CompanyContactRemoveFromCompanyPayload : GraphQLObject<CompanyContactRemoveFromCompanyPayload>
    {
        ///<summary>
        ///The ID of the removed company contact.
        ///</summary>
        public string? removedCompanyContactId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyContactRevokeRole` mutation.
    ///</summary>
    public class CompanyContactRevokeRolePayload : GraphQLObject<CompanyContactRevokeRolePayload>
    {
        ///<summary>
        ///The role assignment that was revoked.
        ///</summary>
        public string? revokedCompanyContactRoleAssignmentId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyContactRevokeRoles` mutation.
    ///</summary>
    public class CompanyContactRevokeRolesPayload : GraphQLObject<CompanyContactRevokeRolesPayload>
    {
        ///<summary>
        ///A list of role assignment IDs that were removed from the company contact.
        ///</summary>
        public IEnumerable<string>? revokedRoleAssignmentIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact).
    ///</summary>
    public class CompanyContactRole : GraphQLObject<CompanyContactRole>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of a role.
        ///For example, `admin` or `buyer`.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///A note for the role.
        ///</summary>
        public string? note { get; set; }
    }

    ///<summary>
    ///The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.
    ///</summary>
    public class CompanyContactRoleAssignment : GraphQLObject<CompanyContactRoleAssignment>, INode
    {
        ///<summary>
        ///The company this role assignment belongs to.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///The company contact for whom this role is assigned.
        ///</summary>
        public CompanyContact? companyContact { get; set; }
        ///<summary>
        ///The company location to which the role is assigned.
        ///</summary>
        public CompanyLocation? companyLocation { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The role that's assigned to the company contact.
        ///</summary>
        public CompanyContactRole? role { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CompanyContactRoleAssignments.
    ///</summary>
    public class CompanyContactRoleAssignmentConnection : GraphQLObject<CompanyContactRoleAssignmentConnection>, IConnectionWithNodesAndEdges<CompanyContactRoleAssignmentEdge, CompanyContactRoleAssignment>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CompanyContactRoleAssignmentEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CompanyContactRoleAssignmentEdge.
        ///</summary>
        public IEnumerable<CompanyContactRoleAssignment>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.
    ///</summary>
    public class CompanyContactRoleAssignmentEdge : GraphQLObject<CompanyContactRoleAssignmentEdge>, IEdge<CompanyContactRoleAssignment>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CompanyContactRoleAssignmentEdge.
        ///</summary>
        public CompanyContactRoleAssignment? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the CompanyContactRoleAssignment query.
    ///</summary>
    public enum CompanyContactRoleAssignmentSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `location_name` value.
        ///</summary>
        LOCATION_NAME,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CompanyContactRoles.
    ///</summary>
    public class CompanyContactRoleConnection : GraphQLObject<CompanyContactRoleConnection>, IConnectionWithNodesAndEdges<CompanyContactRoleEdge, CompanyContactRole>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CompanyContactRoleEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CompanyContactRoleEdge.
        ///</summary>
        public IEnumerable<CompanyContactRole>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CompanyContactRole and a cursor during pagination.
    ///</summary>
    public class CompanyContactRoleEdge : GraphQLObject<CompanyContactRoleEdge>, IEdge<CompanyContactRole>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CompanyContactRoleEdge.
        ///</summary>
        public CompanyContactRole? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the CompanyContactRole query.
    ///</summary>
    public enum CompanyContactRoleSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `companyContactSendWelcomeEmail` mutation.
    ///</summary>
    public class CompanyContactSendWelcomeEmailPayload : GraphQLObject<CompanyContactSendWelcomeEmailPayload>
    {
        ///<summary>
        ///The company contact to whom a welcome email was sent.
        ///</summary>
        public CompanyContact? companyContact { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the CompanyContact query.
    ///</summary>
    public enum CompanyContactSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `company_id` value.
        ///</summary>
        COMPANY_ID,
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `email` value.
        ///</summary>
        EMAIL,
        ///<summary>
        ///Sort by the `name_email` value.
        ///</summary>
        NAME_EMAIL,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `companyContactUpdate` mutation.
    ///</summary>
    public class CompanyContactUpdatePayload : GraphQLObject<CompanyContactUpdatePayload>
    {
        ///<summary>
        ///The updated company contact.
        ///</summary>
        public CompanyContact? companyContact { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyContactsDelete` mutation.
    ///</summary>
    public class CompanyContactsDeletePayload : GraphQLObject<CompanyContactsDeletePayload>
    {
        ///<summary>
        ///The list of IDs of the deleted company contacts.
        ///</summary>
        public IEnumerable<string>? deletedCompanyContactIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyCreate` mutation.
    ///</summary>
    public class CompanyCreatePayload : GraphQLObject<CompanyCreatePayload>
    {
        ///<summary>
        ///The created company.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyDelete` mutation.
    ///</summary>
    public class CompanyDeletePayload : GraphQLObject<CompanyDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted company.
        ///</summary>
        public string? deletedCompanyId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Company and a cursor during pagination.
    ///</summary>
    public class CompanyEdge : GraphQLObject<CompanyEdge>, IEdge<Company>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CompanyEdge.
        ///</summary>
        public Company? node { get; set; }
    }

    ///<summary>
    ///A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location.
    ///</summary>
    public class CompanyLocation : GraphQLObject<CompanyLocation>, ICommentEventSubject, IHasEvents, IHasMetafieldDefinitions, IHasMetafields, INavigable, INode
    {
        ///<summary>
        ///The address used as billing address for the location.
        ///</summary>
        public CompanyAddress? billingAddress { get; set; }
        ///<summary>
        ///The configuration for the buyer's B2B checkout.
        ///</summary>
        public BuyerExperienceConfiguration? buyerExperienceConfiguration { get; set; }
        ///<summary>
        ///The list of catalogs associated with the company location.
        ///</summary>
        public CatalogConnection? catalogs { get; set; }
        ///<summary>
        ///The company that the company location belongs to.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was created in Shopify.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The location's currency based on the shipping address. If the shipping address is empty, then the value is the shop's primary market.
        ///</summary>
        public CurrencyCode? currency { get; set; }
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; set; }
        ///<summary>
        ///The list of draft orders for the company location.
        ///</summary>
        public DraftOrderConnection? draftOrders { get; set; }
        ///<summary>
        ///The paginated list of events associated with the host subject.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///A unique externally-supplied ID for the company location.
        ///</summary>
        public string? externalId { get; set; }
        ///<summary>
        ///Whether the merchant added a timeline comment to the company location.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether the company location is assigned a specific catalog.
        ///</summary>
        public bool? inCatalog { get; set; }
        ///<summary>
        ///The preferred locale of the company location.
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///The market that includes the location's shipping address. If the shipping address is empty, then the value is the shop's primary market.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The name of the company location.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///A note about the company location.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The total number of orders placed for the location.
        ///</summary>
        public int? orderCount { get; set; }
        ///<summary>
        ///The list of orders for the company location.
        ///</summary>
        public OrderConnection? orders { get; set; }
        ///<summary>
        ///The phone number of the company location.
        ///</summary>
        public string? phone { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The list of roles assigned to the company location.
        ///</summary>
        public CompanyContactRoleAssignmentConnection? roleAssignments { get; set; }
        ///<summary>
        ///The address used as shipping address for the location.
        ///</summary>
        public CompanyAddress? shippingAddress { get; set; }
        ///<summary>
        ///The list of tax exemptions applied to the location.
        ///</summary>
        public IEnumerable<TaxExemption>? taxExemptions { get; set; }
        ///<summary>
        ///The tax registration ID for the company location.
        ///</summary>
        public string? taxRegistrationId { get; set; }
        ///<summary>
        ///The total amount spent by the location.
        ///</summary>
        public MoneyV2? totalSpent { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was last modified.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationAssignAddress` mutation.
    ///</summary>
    public class CompanyLocationAssignAddressPayload : GraphQLObject<CompanyLocationAssignAddressPayload>
    {
        ///<summary>
        ///The list of updated addresses on the company location.
        ///</summary>
        public IEnumerable<CompanyAddress>? addresses { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationAssignRoles` mutation.
    ///</summary>
    public class CompanyLocationAssignRolesPayload : GraphQLObject<CompanyLocationAssignRolesPayload>
    {
        ///<summary>
        ///A list of newly created assignments of company contacts to a company location.
        ///</summary>
        public IEnumerable<CompanyContactRoleAssignment>? roleAssignments { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationAssignTaxExemptions` mutation.
    ///</summary>
    public class CompanyLocationAssignTaxExemptionsPayload : GraphQLObject<CompanyLocationAssignTaxExemptionsPayload>
    {
        ///<summary>
        ///The updated company location.
        ///</summary>
        public CompanyLocation? companyLocation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A list of products with publishing and pricing information associated with company locations.
    ///</summary>
    public class CompanyLocationCatalog : GraphQLObject<CompanyLocationCatalog>, ICatalog, INode
    {
        ///<summary>
        ///The company locations associated with the catalog.
        ///</summary>
        public CompanyLocationConnection? companyLocations { get; set; }
        ///<summary>
        ///The number of company locations associated with the catalog.
        ///</summary>
        public int? companyLocationsCount { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Most recent catalog operations.
        ///</summary>
        public IEnumerable<IResourceOperation>? operations { get; set; }
        ///<summary>
        ///The price list associated with the catalog.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///A group of products and collections that's published to a catalog.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The status of the catalog.
        ///</summary>
        public CatalogStatus? status { get; set; }
        ///<summary>
        ///The name of the catalog.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CompanyLocations.
    ///</summary>
    public class CompanyLocationConnection : GraphQLObject<CompanyLocationConnection>, IConnectionWithNodesAndEdges<CompanyLocationEdge, CompanyLocation>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CompanyLocationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CompanyLocationEdge.
        ///</summary>
        public IEnumerable<CompanyLocation>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationCreate` mutation.
    ///</summary>
    public class CompanyLocationCreatePayload : GraphQLObject<CompanyLocationCreatePayload>
    {
        ///<summary>
        ///The created company location.
        ///</summary>
        public CompanyLocation? companyLocation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationCreateTaxRegistration` mutation.
    ///</summary>
    public class CompanyLocationCreateTaxRegistrationPayload : GraphQLObject<CompanyLocationCreateTaxRegistrationPayload>
    {
        ///<summary>
        ///The company location with the created tax registration.
        ///</summary>
        public CompanyLocation? companyLocation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationDelete` mutation.
    ///</summary>
    public class CompanyLocationDeletePayload : GraphQLObject<CompanyLocationDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted company location.
        ///</summary>
        public string? deletedCompanyLocationId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CompanyLocation and a cursor during pagination.
    ///</summary>
    public class CompanyLocationEdge : GraphQLObject<CompanyLocationEdge>, IEdge<CompanyLocation>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CompanyLocationEdge.
        ///</summary>
        public CompanyLocation? node { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationRevokeRoles` mutation.
    ///</summary>
    public class CompanyLocationRevokeRolesPayload : GraphQLObject<CompanyLocationRevokeRolesPayload>
    {
        ///<summary>
        ///A list of role assignment IDs that were removed from the company location.
        ///</summary>
        public IEnumerable<string>? revokedRoleAssignmentIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationRevokeTaxExemptions` mutation.
    ///</summary>
    public class CompanyLocationRevokeTaxExemptionsPayload : GraphQLObject<CompanyLocationRevokeTaxExemptionsPayload>
    {
        ///<summary>
        ///The updated company location.
        ///</summary>
        public CompanyLocation? companyLocation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationRevokeTaxRegistration` mutation.
    ///</summary>
    public class CompanyLocationRevokeTaxRegistrationPayload : GraphQLObject<CompanyLocationRevokeTaxRegistrationPayload>
    {
        ///<summary>
        ///The updated company location.
        ///</summary>
        public CompanyLocation? companyLocation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the CompanyLocation query.
    ///</summary>
    public enum CompanyLocationSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `company_id` value.
        ///</summary>
        COMPANY_ID,
        ///<summary>
        ///Sort by the `company_and_location_name` value.
        ///</summary>
        COMPANY_AND_LOCATION_NAME,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `companyLocationUpdate` mutation.
    ///</summary>
    public class CompanyLocationUpdatePayload : GraphQLObject<CompanyLocationUpdatePayload>
    {
        ///<summary>
        ///The updated company location.
        ///</summary>
        public CompanyLocation? companyLocation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyLocationsDelete` mutation.
    ///</summary>
    public class CompanyLocationsDeletePayload : GraphQLObject<CompanyLocationsDeletePayload>
    {
        ///<summary>
        ///A list of IDs of the deleted company locations.
        ///</summary>
        public IEnumerable<string>? deletedCompanyLocationIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `companyRevokeMainContact` mutation.
    ///</summary>
    public class CompanyRevokeMainContactPayload : GraphQLObject<CompanyRevokeMainContactPayload>
    {
        ///<summary>
        ///The company from which the main contact is revoked.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the Company query.
    ///</summary>
    public enum CompanySortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `since_date` value.
        ///</summary>
        SINCE_DATE,
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `order_count` value.
        ///</summary>
        ORDER_COUNT,
        ///<summary>
        ///Sort by the `total_spent` value.
        ///</summary>
        TOTAL_SPENT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `companyUpdate` mutation.
    ///</summary>
    public class CompanyUpdatePayload : GraphQLObject<CompanyUpdatePayload>
    {
        ///<summary>
        ///The updated company.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BusinessCustomerUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The list of all the countries from the combined shipping zones for the shop.
    ///</summary>
    public class CountriesInShippingZones : GraphQLObject<CountriesInShippingZones>
    {
        ///<summary>
        ///The list of all the countries from all the combined shipping zones.
        ///</summary>
        public IEnumerable<CountryCode>? countryCodes { get; set; }
        ///<summary>
        ///Whether 'Rest of World' has been defined in any of the shipping zones.
        ///</summary>
        public bool? includeRestOfWorld { get; set; }
    }

    ///<summary>
    ///The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
    ///If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
    ///of another country. For example, the territories associated with Spain are represented by the country code `ES`,
    ///and the territories associated with the United States of America are represented by the country code `US`.
    ///</summary>
    public enum CountryCode
    {
        ///<summary>
        ///Afghanistan.
        ///</summary>
        AF,
        ///<summary>
        ///Åland Islands.
        ///</summary>
        AX,
        ///<summary>
        ///Albania.
        ///</summary>
        AL,
        ///<summary>
        ///Algeria.
        ///</summary>
        DZ,
        ///<summary>
        ///Andorra.
        ///</summary>
        AD,
        ///<summary>
        ///Angola.
        ///</summary>
        AO,
        ///<summary>
        ///Anguilla.
        ///</summary>
        AI,
        ///<summary>
        ///Antigua & Barbuda.
        ///</summary>
        AG,
        ///<summary>
        ///Argentina.
        ///</summary>
        AR,
        ///<summary>
        ///Armenia.
        ///</summary>
        AM,
        ///<summary>
        ///Aruba.
        ///</summary>
        AW,
        ///<summary>
        ///Ascension Island.
        ///</summary>
        AC,
        ///<summary>
        ///Australia.
        ///</summary>
        AU,
        ///<summary>
        ///Austria.
        ///</summary>
        AT,
        ///<summary>
        ///Azerbaijan.
        ///</summary>
        AZ,
        ///<summary>
        ///Bahamas.
        ///</summary>
        BS,
        ///<summary>
        ///Bahrain.
        ///</summary>
        BH,
        ///<summary>
        ///Bangladesh.
        ///</summary>
        BD,
        ///<summary>
        ///Barbados.
        ///</summary>
        BB,
        ///<summary>
        ///Belarus.
        ///</summary>
        BY,
        ///<summary>
        ///Belgium.
        ///</summary>
        BE,
        ///<summary>
        ///Belize.
        ///</summary>
        BZ,
        ///<summary>
        ///Benin.
        ///</summary>
        BJ,
        ///<summary>
        ///Bermuda.
        ///</summary>
        BM,
        ///<summary>
        ///Bhutan.
        ///</summary>
        BT,
        ///<summary>
        ///Bolivia.
        ///</summary>
        BO,
        ///<summary>
        ///Bosnia & Herzegovina.
        ///</summary>
        BA,
        ///<summary>
        ///Botswana.
        ///</summary>
        BW,
        ///<summary>
        ///Bouvet Island.
        ///</summary>
        BV,
        ///<summary>
        ///Brazil.
        ///</summary>
        BR,
        ///<summary>
        ///British Indian Ocean Territory.
        ///</summary>
        IO,
        ///<summary>
        ///Brunei.
        ///</summary>
        BN,
        ///<summary>
        ///Bulgaria.
        ///</summary>
        BG,
        ///<summary>
        ///Burkina Faso.
        ///</summary>
        BF,
        ///<summary>
        ///Burundi.
        ///</summary>
        BI,
        ///<summary>
        ///Cambodia.
        ///</summary>
        KH,
        ///<summary>
        ///Canada.
        ///</summary>
        CA,
        ///<summary>
        ///Cape Verde.
        ///</summary>
        CV,
        ///<summary>
        ///Caribbean Netherlands.
        ///</summary>
        BQ,
        ///<summary>
        ///Cayman Islands.
        ///</summary>
        KY,
        ///<summary>
        ///Central African Republic.
        ///</summary>
        CF,
        ///<summary>
        ///Chad.
        ///</summary>
        TD,
        ///<summary>
        ///Chile.
        ///</summary>
        CL,
        ///<summary>
        ///China.
        ///</summary>
        CN,
        ///<summary>
        ///Christmas Island.
        ///</summary>
        CX,
        ///<summary>
        ///Cocos (Keeling) Islands.
        ///</summary>
        CC,
        ///<summary>
        ///Colombia.
        ///</summary>
        CO,
        ///<summary>
        ///Comoros.
        ///</summary>
        KM,
        ///<summary>
        ///Congo - Brazzaville.
        ///</summary>
        CG,
        ///<summary>
        ///Congo - Kinshasa.
        ///</summary>
        CD,
        ///<summary>
        ///Cook Islands.
        ///</summary>
        CK,
        ///<summary>
        ///Costa Rica.
        ///</summary>
        CR,
        ///<summary>
        ///Croatia.
        ///</summary>
        HR,
        ///<summary>
        ///Cuba.
        ///</summary>
        CU,
        ///<summary>
        ///Curaçao.
        ///</summary>
        CW,
        ///<summary>
        ///Cyprus.
        ///</summary>
        CY,
        ///<summary>
        ///Czechia.
        ///</summary>
        CZ,
        ///<summary>
        ///Côte d’Ivoire.
        ///</summary>
        CI,
        ///<summary>
        ///Denmark.
        ///</summary>
        DK,
        ///<summary>
        ///Djibouti.
        ///</summary>
        DJ,
        ///<summary>
        ///Dominica.
        ///</summary>
        DM,
        ///<summary>
        ///Dominican Republic.
        ///</summary>
        DO,
        ///<summary>
        ///Ecuador.
        ///</summary>
        EC,
        ///<summary>
        ///Egypt.
        ///</summary>
        EG,
        ///<summary>
        ///El Salvador.
        ///</summary>
        SV,
        ///<summary>
        ///Equatorial Guinea.
        ///</summary>
        GQ,
        ///<summary>
        ///Eritrea.
        ///</summary>
        ER,
        ///<summary>
        ///Estonia.
        ///</summary>
        EE,
        ///<summary>
        ///Eswatini.
        ///</summary>
        SZ,
        ///<summary>
        ///Ethiopia.
        ///</summary>
        ET,
        ///<summary>
        ///Falkland Islands.
        ///</summary>
        FK,
        ///<summary>
        ///Faroe Islands.
        ///</summary>
        FO,
        ///<summary>
        ///Fiji.
        ///</summary>
        FJ,
        ///<summary>
        ///Finland.
        ///</summary>
        FI,
        ///<summary>
        ///France.
        ///</summary>
        FR,
        ///<summary>
        ///French Guiana.
        ///</summary>
        GF,
        ///<summary>
        ///French Polynesia.
        ///</summary>
        PF,
        ///<summary>
        ///French Southern Territories.
        ///</summary>
        TF,
        ///<summary>
        ///Gabon.
        ///</summary>
        GA,
        ///<summary>
        ///Gambia.
        ///</summary>
        GM,
        ///<summary>
        ///Georgia.
        ///</summary>
        GE,
        ///<summary>
        ///Germany.
        ///</summary>
        DE,
        ///<summary>
        ///Ghana.
        ///</summary>
        GH,
        ///<summary>
        ///Gibraltar.
        ///</summary>
        GI,
        ///<summary>
        ///Greece.
        ///</summary>
        GR,
        ///<summary>
        ///Greenland.
        ///</summary>
        GL,
        ///<summary>
        ///Grenada.
        ///</summary>
        GD,
        ///<summary>
        ///Guadeloupe.
        ///</summary>
        GP,
        ///<summary>
        ///Guatemala.
        ///</summary>
        GT,
        ///<summary>
        ///Guernsey.
        ///</summary>
        GG,
        ///<summary>
        ///Guinea.
        ///</summary>
        GN,
        ///<summary>
        ///Guinea-Bissau.
        ///</summary>
        GW,
        ///<summary>
        ///Guyana.
        ///</summary>
        GY,
        ///<summary>
        ///Haiti.
        ///</summary>
        HT,
        ///<summary>
        ///Heard & McDonald Islands.
        ///</summary>
        HM,
        ///<summary>
        ///Vatican City.
        ///</summary>
        VA,
        ///<summary>
        ///Honduras.
        ///</summary>
        HN,
        ///<summary>
        ///Hong Kong SAR.
        ///</summary>
        HK,
        ///<summary>
        ///Hungary.
        ///</summary>
        HU,
        ///<summary>
        ///Iceland.
        ///</summary>
        IS,
        ///<summary>
        ///India.
        ///</summary>
        IN,
        ///<summary>
        ///Indonesia.
        ///</summary>
        ID,
        ///<summary>
        ///Iran.
        ///</summary>
        IR,
        ///<summary>
        ///Iraq.
        ///</summary>
        IQ,
        ///<summary>
        ///Ireland.
        ///</summary>
        IE,
        ///<summary>
        ///Isle of Man.
        ///</summary>
        IM,
        ///<summary>
        ///Israel.
        ///</summary>
        IL,
        ///<summary>
        ///Italy.
        ///</summary>
        IT,
        ///<summary>
        ///Jamaica.
        ///</summary>
        JM,
        ///<summary>
        ///Japan.
        ///</summary>
        JP,
        ///<summary>
        ///Jersey.
        ///</summary>
        JE,
        ///<summary>
        ///Jordan.
        ///</summary>
        JO,
        ///<summary>
        ///Kazakhstan.
        ///</summary>
        KZ,
        ///<summary>
        ///Kenya.
        ///</summary>
        KE,
        ///<summary>
        ///Kiribati.
        ///</summary>
        KI,
        ///<summary>
        ///North Korea.
        ///</summary>
        KP,
        ///<summary>
        ///Kosovo.
        ///</summary>
        XK,
        ///<summary>
        ///Kuwait.
        ///</summary>
        KW,
        ///<summary>
        ///Kyrgyzstan.
        ///</summary>
        KG,
        ///<summary>
        ///Laos.
        ///</summary>
        LA,
        ///<summary>
        ///Latvia.
        ///</summary>
        LV,
        ///<summary>
        ///Lebanon.
        ///</summary>
        LB,
        ///<summary>
        ///Lesotho.
        ///</summary>
        LS,
        ///<summary>
        ///Liberia.
        ///</summary>
        LR,
        ///<summary>
        ///Libya.
        ///</summary>
        LY,
        ///<summary>
        ///Liechtenstein.
        ///</summary>
        LI,
        ///<summary>
        ///Lithuania.
        ///</summary>
        LT,
        ///<summary>
        ///Luxembourg.
        ///</summary>
        LU,
        ///<summary>
        ///Macao SAR.
        ///</summary>
        MO,
        ///<summary>
        ///Madagascar.
        ///</summary>
        MG,
        ///<summary>
        ///Malawi.
        ///</summary>
        MW,
        ///<summary>
        ///Malaysia.
        ///</summary>
        MY,
        ///<summary>
        ///Maldives.
        ///</summary>
        MV,
        ///<summary>
        ///Mali.
        ///</summary>
        ML,
        ///<summary>
        ///Malta.
        ///</summary>
        MT,
        ///<summary>
        ///Martinique.
        ///</summary>
        MQ,
        ///<summary>
        ///Mauritania.
        ///</summary>
        MR,
        ///<summary>
        ///Mauritius.
        ///</summary>
        MU,
        ///<summary>
        ///Mayotte.
        ///</summary>
        YT,
        ///<summary>
        ///Mexico.
        ///</summary>
        MX,
        ///<summary>
        ///Moldova.
        ///</summary>
        MD,
        ///<summary>
        ///Monaco.
        ///</summary>
        MC,
        ///<summary>
        ///Mongolia.
        ///</summary>
        MN,
        ///<summary>
        ///Montenegro.
        ///</summary>
        ME,
        ///<summary>
        ///Montserrat.
        ///</summary>
        MS,
        ///<summary>
        ///Morocco.
        ///</summary>
        MA,
        ///<summary>
        ///Mozambique.
        ///</summary>
        MZ,
        ///<summary>
        ///Myanmar (Burma).
        ///</summary>
        MM,
        ///<summary>
        ///Namibia.
        ///</summary>
        NA,
        ///<summary>
        ///Nauru.
        ///</summary>
        NR,
        ///<summary>
        ///Nepal.
        ///</summary>
        NP,
        ///<summary>
        ///Netherlands.
        ///</summary>
        NL,
        ///<summary>
        ///Netherlands Antilles.
        ///</summary>
        AN,
        ///<summary>
        ///New Caledonia.
        ///</summary>
        NC,
        ///<summary>
        ///New Zealand.
        ///</summary>
        NZ,
        ///<summary>
        ///Nicaragua.
        ///</summary>
        NI,
        ///<summary>
        ///Niger.
        ///</summary>
        NE,
        ///<summary>
        ///Nigeria.
        ///</summary>
        NG,
        ///<summary>
        ///Niue.
        ///</summary>
        NU,
        ///<summary>
        ///Norfolk Island.
        ///</summary>
        NF,
        ///<summary>
        ///North Macedonia.
        ///</summary>
        MK,
        ///<summary>
        ///Norway.
        ///</summary>
        NO,
        ///<summary>
        ///Oman.
        ///</summary>
        OM,
        ///<summary>
        ///Pakistan.
        ///</summary>
        PK,
        ///<summary>
        ///Palestinian Territories.
        ///</summary>
        PS,
        ///<summary>
        ///Panama.
        ///</summary>
        PA,
        ///<summary>
        ///Papua New Guinea.
        ///</summary>
        PG,
        ///<summary>
        ///Paraguay.
        ///</summary>
        PY,
        ///<summary>
        ///Peru.
        ///</summary>
        PE,
        ///<summary>
        ///Philippines.
        ///</summary>
        PH,
        ///<summary>
        ///Pitcairn Islands.
        ///</summary>
        PN,
        ///<summary>
        ///Poland.
        ///</summary>
        PL,
        ///<summary>
        ///Portugal.
        ///</summary>
        PT,
        ///<summary>
        ///Qatar.
        ///</summary>
        QA,
        ///<summary>
        ///Cameroon.
        ///</summary>
        CM,
        ///<summary>
        ///Réunion.
        ///</summary>
        RE,
        ///<summary>
        ///Romania.
        ///</summary>
        RO,
        ///<summary>
        ///Russia.
        ///</summary>
        RU,
        ///<summary>
        ///Rwanda.
        ///</summary>
        RW,
        ///<summary>
        ///St. Barthélemy.
        ///</summary>
        BL,
        ///<summary>
        ///St. Helena.
        ///</summary>
        SH,
        ///<summary>
        ///St. Kitts & Nevis.
        ///</summary>
        KN,
        ///<summary>
        ///St. Lucia.
        ///</summary>
        LC,
        ///<summary>
        ///St. Martin.
        ///</summary>
        MF,
        ///<summary>
        ///St. Pierre & Miquelon.
        ///</summary>
        PM,
        ///<summary>
        ///Samoa.
        ///</summary>
        WS,
        ///<summary>
        ///San Marino.
        ///</summary>
        SM,
        ///<summary>
        ///São Tomé & Príncipe.
        ///</summary>
        ST,
        ///<summary>
        ///Saudi Arabia.
        ///</summary>
        SA,
        ///<summary>
        ///Senegal.
        ///</summary>
        SN,
        ///<summary>
        ///Serbia.
        ///</summary>
        RS,
        ///<summary>
        ///Seychelles.
        ///</summary>
        SC,
        ///<summary>
        ///Sierra Leone.
        ///</summary>
        SL,
        ///<summary>
        ///Singapore.
        ///</summary>
        SG,
        ///<summary>
        ///Sint Maarten.
        ///</summary>
        SX,
        ///<summary>
        ///Slovakia.
        ///</summary>
        SK,
        ///<summary>
        ///Slovenia.
        ///</summary>
        SI,
        ///<summary>
        ///Solomon Islands.
        ///</summary>
        SB,
        ///<summary>
        ///Somalia.
        ///</summary>
        SO,
        ///<summary>
        ///South Africa.
        ///</summary>
        ZA,
        ///<summary>
        ///South Georgia & South Sandwich Islands.
        ///</summary>
        GS,
        ///<summary>
        ///South Korea.
        ///</summary>
        KR,
        ///<summary>
        ///South Sudan.
        ///</summary>
        SS,
        ///<summary>
        ///Spain.
        ///</summary>
        ES,
        ///<summary>
        ///Sri Lanka.
        ///</summary>
        LK,
        ///<summary>
        ///St. Vincent & Grenadines.
        ///</summary>
        VC,
        ///<summary>
        ///Sudan.
        ///</summary>
        SD,
        ///<summary>
        ///Suriname.
        ///</summary>
        SR,
        ///<summary>
        ///Svalbard & Jan Mayen.
        ///</summary>
        SJ,
        ///<summary>
        ///Sweden.
        ///</summary>
        SE,
        ///<summary>
        ///Switzerland.
        ///</summary>
        CH,
        ///<summary>
        ///Syria.
        ///</summary>
        SY,
        ///<summary>
        ///Taiwan.
        ///</summary>
        TW,
        ///<summary>
        ///Tajikistan.
        ///</summary>
        TJ,
        ///<summary>
        ///Tanzania.
        ///</summary>
        TZ,
        ///<summary>
        ///Thailand.
        ///</summary>
        TH,
        ///<summary>
        ///Timor-Leste.
        ///</summary>
        TL,
        ///<summary>
        ///Togo.
        ///</summary>
        TG,
        ///<summary>
        ///Tokelau.
        ///</summary>
        TK,
        ///<summary>
        ///Tonga.
        ///</summary>
        TO,
        ///<summary>
        ///Trinidad & Tobago.
        ///</summary>
        TT,
        ///<summary>
        ///Tristan da Cunha.
        ///</summary>
        TA,
        ///<summary>
        ///Tunisia.
        ///</summary>
        TN,
        ///<summary>
        ///Türkiye.
        ///</summary>
        TR,
        ///<summary>
        ///Turkmenistan.
        ///</summary>
        TM,
        ///<summary>
        ///Turks & Caicos Islands.
        ///</summary>
        TC,
        ///<summary>
        ///Tuvalu.
        ///</summary>
        TV,
        ///<summary>
        ///Uganda.
        ///</summary>
        UG,
        ///<summary>
        ///Ukraine.
        ///</summary>
        UA,
        ///<summary>
        ///United Arab Emirates.
        ///</summary>
        AE,
        ///<summary>
        ///United Kingdom.
        ///</summary>
        GB,
        ///<summary>
        ///United States.
        ///</summary>
        US,
        ///<summary>
        ///U.S. Outlying Islands.
        ///</summary>
        UM,
        ///<summary>
        ///Uruguay.
        ///</summary>
        UY,
        ///<summary>
        ///Uzbekistan.
        ///</summary>
        UZ,
        ///<summary>
        ///Vanuatu.
        ///</summary>
        VU,
        ///<summary>
        ///Venezuela.
        ///</summary>
        VE,
        ///<summary>
        ///Vietnam.
        ///</summary>
        VN,
        ///<summary>
        ///British Virgin Islands.
        ///</summary>
        VG,
        ///<summary>
        ///Wallis & Futuna.
        ///</summary>
        WF,
        ///<summary>
        ///Western Sahara.
        ///</summary>
        EH,
        ///<summary>
        ///Yemen.
        ///</summary>
        YE,
        ///<summary>
        ///Zambia.
        ///</summary>
        ZM,
        ///<summary>
        ///Zimbabwe.
        ///</summary>
        ZW,
        ///<summary>
        ///Unknown Region.
        ///</summary>
        ZZ,
    }

    ///<summary>
    ///The country-specific harmonized system code and ISO country code for an inventory item.
    ///</summary>
    public class CountryHarmonizedSystemCode : GraphQLObject<CountryHarmonizedSystemCode>
    {
        ///<summary>
        ///The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///The country-specific harmonized system code. These are usually longer than 6 digits.
        ///</summary>
        public string? harmonizedSystemCode { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
    ///</summary>
    public class CountryHarmonizedSystemCodeConnection : GraphQLObject<CountryHarmonizedSystemCodeConnection>, IConnectionWithNodesAndEdges<CountryHarmonizedSystemCodeEdge, CountryHarmonizedSystemCode>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CountryHarmonizedSystemCodeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CountryHarmonizedSystemCodeEdge.
        ///</summary>
        public IEnumerable<CountryHarmonizedSystemCode>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
    ///</summary>
    public class CountryHarmonizedSystemCodeEdge : GraphQLObject<CountryHarmonizedSystemCodeEdge>, IEdge<CountryHarmonizedSystemCode>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CountryHarmonizedSystemCodeEdge.
        ///</summary>
        public CountryHarmonizedSystemCode? node { get; set; }
    }

    ///<summary>
    ///The part of the image that should remain after cropping.
    ///</summary>
    public enum CropRegion
    {
        ///<summary>
        ///Keep the center of the image.
        ///</summary>
        CENTER,
        ///<summary>
        ///Keep the top of the image.
        ///</summary>
        TOP,
        ///<summary>
        ///Keep the bottom of the image.
        ///</summary>
        BOTTOM,
        ///<summary>
        ///Keep the left of the image.
        ///</summary>
        LEFT,
        ///<summary>
        ///Keep the right of the image.
        ///</summary>
        RIGHT,
    }

    ///<summary>
    ///The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,
    ///and non-standard codes.
    ///</summary>
    public enum CurrencyCode
    {
        ///<summary>
        ///United States Dollars (USD).
        ///</summary>
        USD,
        ///<summary>
        ///Euro (EUR).
        ///</summary>
        EUR,
        ///<summary>
        ///United Kingdom Pounds (GBP).
        ///</summary>
        GBP,
        ///<summary>
        ///Canadian Dollars (CAD).
        ///</summary>
        CAD,
        ///<summary>
        ///Afghan Afghani (AFN).
        ///</summary>
        AFN,
        ///<summary>
        ///Albanian Lek (ALL).
        ///</summary>
        ALL,
        ///<summary>
        ///Algerian Dinar (DZD).
        ///</summary>
        DZD,
        ///<summary>
        ///Angolan Kwanza (AOA).
        ///</summary>
        AOA,
        ///<summary>
        ///Argentine Pesos (ARS).
        ///</summary>
        ARS,
        ///<summary>
        ///Armenian Dram (AMD).
        ///</summary>
        AMD,
        ///<summary>
        ///Aruban Florin (AWG).
        ///</summary>
        AWG,
        ///<summary>
        ///Australian Dollars (AUD).
        ///</summary>
        AUD,
        ///<summary>
        ///Barbadian Dollar (BBD).
        ///</summary>
        BBD,
        ///<summary>
        ///Azerbaijani Manat (AZN).
        ///</summary>
        AZN,
        ///<summary>
        ///Bangladesh Taka (BDT).
        ///</summary>
        BDT,
        ///<summary>
        ///Bahamian Dollar (BSD).
        ///</summary>
        BSD,
        ///<summary>
        ///Bahraini Dinar (BHD).
        ///</summary>
        BHD,
        ///<summary>
        ///Burundian Franc (BIF).
        ///</summary>
        BIF,
        ///<summary>
        ///Belarusian Ruble (BYN).
        ///</summary>
        BYN,
        ///<summary>
        ///Belize Dollar (BZD).
        ///</summary>
        BZD,
        ///<summary>
        ///Bermudian Dollar (BMD).
        ///</summary>
        BMD,
        ///<summary>
        ///Bhutanese Ngultrum (BTN).
        ///</summary>
        BTN,
        ///<summary>
        ///Bosnia and Herzegovina Convertible Mark (BAM).
        ///</summary>
        BAM,
        ///<summary>
        ///Brazilian Real (BRL).
        ///</summary>
        BRL,
        ///<summary>
        ///Bolivian Boliviano (BOB).
        ///</summary>
        BOB,
        ///<summary>
        ///Botswana Pula (BWP).
        ///</summary>
        BWP,
        ///<summary>
        ///Brunei Dollar (BND).
        ///</summary>
        BND,
        ///<summary>
        ///Bulgarian Lev (BGN).
        ///</summary>
        BGN,
        ///<summary>
        ///Burmese Kyat (MMK).
        ///</summary>
        MMK,
        ///<summary>
        ///Cambodian Riel.
        ///</summary>
        KHR,
        ///<summary>
        ///Cape Verdean escudo (CVE).
        ///</summary>
        CVE,
        ///<summary>
        ///Cayman Dollars (KYD).
        ///</summary>
        KYD,
        ///<summary>
        ///Central African CFA Franc (XAF).
        ///</summary>
        XAF,
        ///<summary>
        ///Chilean Peso (CLP).
        ///</summary>
        CLP,
        ///<summary>
        ///Chinese Yuan Renminbi (CNY).
        ///</summary>
        CNY,
        ///<summary>
        ///Colombian Peso (COP).
        ///</summary>
        COP,
        ///<summary>
        ///Comorian Franc (KMF).
        ///</summary>
        KMF,
        ///<summary>
        ///Congolese franc (CDF).
        ///</summary>
        CDF,
        ///<summary>
        ///Costa Rican Colones (CRC).
        ///</summary>
        CRC,
        ///<summary>
        ///Croatian Kuna (HRK).
        ///</summary>
        HRK,
        ///<summary>
        ///Czech Koruny (CZK).
        ///</summary>
        CZK,
        ///<summary>
        ///Danish Kroner (DKK).
        ///</summary>
        DKK,
        ///<summary>
        ///Djiboutian Franc (DJF).
        ///</summary>
        DJF,
        ///<summary>
        ///Dominican Peso (DOP).
        ///</summary>
        DOP,
        ///<summary>
        ///East Caribbean Dollar (XCD).
        ///</summary>
        XCD,
        ///<summary>
        ///Egyptian Pound (EGP).
        ///</summary>
        EGP,
        ///<summary>
        ///Eritrean Nakfa (ERN).
        ///</summary>
        ERN,
        ///<summary>
        ///Ethiopian Birr (ETB).
        ///</summary>
        ETB,
        ///<summary>
        ///Falkland Islands Pounds (FKP).
        ///</summary>
        FKP,
        ///<summary>
        ///CFP Franc (XPF).
        ///</summary>
        XPF,
        ///<summary>
        ///Fijian Dollars (FJD).
        ///</summary>
        FJD,
        ///<summary>
        ///Gibraltar Pounds (GIP).
        ///</summary>
        GIP,
        ///<summary>
        ///Gambian Dalasi (GMD).
        ///</summary>
        GMD,
        ///<summary>
        ///Ghanaian Cedi (GHS).
        ///</summary>
        GHS,
        ///<summary>
        ///Guatemalan Quetzal (GTQ).
        ///</summary>
        GTQ,
        ///<summary>
        ///Guyanese Dollar (GYD).
        ///</summary>
        GYD,
        ///<summary>
        ///Georgian Lari (GEL).
        ///</summary>
        GEL,
        ///<summary>
        ///Guinean Franc (GNF).
        ///</summary>
        GNF,
        ///<summary>
        ///Haitian Gourde (HTG).
        ///</summary>
        HTG,
        ///<summary>
        ///Honduran Lempira (HNL).
        ///</summary>
        HNL,
        ///<summary>
        ///Hong Kong Dollars (HKD).
        ///</summary>
        HKD,
        ///<summary>
        ///Hungarian Forint (HUF).
        ///</summary>
        HUF,
        ///<summary>
        ///Icelandic Kronur (ISK).
        ///</summary>
        ISK,
        ///<summary>
        ///Indian Rupees (INR).
        ///</summary>
        INR,
        ///<summary>
        ///Indonesian Rupiah (IDR).
        ///</summary>
        IDR,
        ///<summary>
        ///Israeli New Shekel (NIS).
        ///</summary>
        ILS,
        ///<summary>
        ///Iranian Rial (IRR).
        ///</summary>
        IRR,
        ///<summary>
        ///Iraqi Dinar (IQD).
        ///</summary>
        IQD,
        ///<summary>
        ///Jamaican Dollars (JMD).
        ///</summary>
        JMD,
        ///<summary>
        ///Japanese Yen (JPY).
        ///</summary>
        JPY,
        ///<summary>
        ///Jersey Pound.
        ///</summary>
        JEP,
        ///<summary>
        ///Jordanian Dinar (JOD).
        ///</summary>
        JOD,
        ///<summary>
        ///Kazakhstani Tenge (KZT).
        ///</summary>
        KZT,
        ///<summary>
        ///Kenyan Shilling (KES).
        ///</summary>
        KES,
        ///<summary>
        ///Kiribati Dollar (KID).
        ///</summary>
        KID,
        ///<summary>
        ///Kuwaiti Dinar (KWD).
        ///</summary>
        KWD,
        ///<summary>
        ///Kyrgyzstani Som (KGS).
        ///</summary>
        KGS,
        ///<summary>
        ///Laotian Kip (LAK).
        ///</summary>
        LAK,
        ///<summary>
        ///Latvian Lati (LVL).
        ///</summary>
        LVL,
        ///<summary>
        ///Lebanese Pounds (LBP).
        ///</summary>
        LBP,
        ///<summary>
        ///Lesotho Loti (LSL).
        ///</summary>
        LSL,
        ///<summary>
        ///Liberian Dollar (LRD).
        ///</summary>
        LRD,
        ///<summary>
        ///Libyan Dinar (LYD).
        ///</summary>
        LYD,
        ///<summary>
        ///Lithuanian Litai (LTL).
        ///</summary>
        LTL,
        ///<summary>
        ///Malagasy Ariary (MGA).
        ///</summary>
        MGA,
        ///<summary>
        ///Macedonia Denar (MKD).
        ///</summary>
        MKD,
        ///<summary>
        ///Macanese Pataca (MOP).
        ///</summary>
        MOP,
        ///<summary>
        ///Malawian Kwacha (MWK).
        ///</summary>
        MWK,
        ///<summary>
        ///Maldivian Rufiyaa (MVR).
        ///</summary>
        MVR,
        ///<summary>
        ///Mauritanian Ouguiya (MRU).
        ///</summary>
        MRU,
        ///<summary>
        ///Mexican Pesos (MXN).
        ///</summary>
        MXN,
        ///<summary>
        ///Malaysian Ringgits (MYR).
        ///</summary>
        MYR,
        ///<summary>
        ///Mauritian Rupee (MUR).
        ///</summary>
        MUR,
        ///<summary>
        ///Moldovan Leu (MDL).
        ///</summary>
        MDL,
        ///<summary>
        ///Moroccan Dirham.
        ///</summary>
        MAD,
        ///<summary>
        ///Mongolian Tugrik.
        ///</summary>
        MNT,
        ///<summary>
        ///Mozambican Metical.
        ///</summary>
        MZN,
        ///<summary>
        ///Namibian Dollar.
        ///</summary>
        NAD,
        ///<summary>
        ///Nepalese Rupee (NPR).
        ///</summary>
        NPR,
        ///<summary>
        ///Netherlands Antillean Guilder.
        ///</summary>
        ANG,
        ///<summary>
        ///New Zealand Dollars (NZD).
        ///</summary>
        NZD,
        ///<summary>
        ///Nicaraguan Córdoba (NIO).
        ///</summary>
        NIO,
        ///<summary>
        ///Nigerian Naira (NGN).
        ///</summary>
        NGN,
        ///<summary>
        ///Norwegian Kroner (NOK).
        ///</summary>
        NOK,
        ///<summary>
        ///Omani Rial (OMR).
        ///</summary>
        OMR,
        ///<summary>
        ///Panamian Balboa (PAB).
        ///</summary>
        PAB,
        ///<summary>
        ///Pakistani Rupee (PKR).
        ///</summary>
        PKR,
        ///<summary>
        ///Papua New Guinean Kina (PGK).
        ///</summary>
        PGK,
        ///<summary>
        ///Paraguayan Guarani (PYG).
        ///</summary>
        PYG,
        ///<summary>
        ///Peruvian Nuevo Sol (PEN).
        ///</summary>
        PEN,
        ///<summary>
        ///Philippine Peso (PHP).
        ///</summary>
        PHP,
        ///<summary>
        ///Polish Zlotych (PLN).
        ///</summary>
        PLN,
        ///<summary>
        ///Qatari Rial (QAR).
        ///</summary>
        QAR,
        ///<summary>
        ///Romanian Lei (RON).
        ///</summary>
        RON,
        ///<summary>
        ///Russian Rubles (RUB).
        ///</summary>
        RUB,
        ///<summary>
        ///Rwandan Franc (RWF).
        ///</summary>
        RWF,
        ///<summary>
        ///Samoan Tala (WST).
        ///</summary>
        WST,
        ///<summary>
        ///Saint Helena Pounds (SHP).
        ///</summary>
        SHP,
        ///<summary>
        ///Saudi Riyal (SAR).
        ///</summary>
        SAR,
        ///<summary>
        ///Serbian dinar (RSD).
        ///</summary>
        RSD,
        ///<summary>
        ///Seychellois Rupee (SCR).
        ///</summary>
        SCR,
        ///<summary>
        ///Sierra Leonean Leone (SLL).
        ///</summary>
        SLL,
        ///<summary>
        ///Singapore Dollars (SGD).
        ///</summary>
        SGD,
        ///<summary>
        ///Sudanese Pound (SDG).
        ///</summary>
        SDG,
        ///<summary>
        ///Somali Shilling (SOS).
        ///</summary>
        SOS,
        ///<summary>
        ///Syrian Pound (SYP).
        ///</summary>
        SYP,
        ///<summary>
        ///South African Rand (ZAR).
        ///</summary>
        ZAR,
        ///<summary>
        ///South Korean Won (KRW).
        ///</summary>
        KRW,
        ///<summary>
        ///South Sudanese Pound (SSP).
        ///</summary>
        SSP,
        ///<summary>
        ///Solomon Islands Dollar (SBD).
        ///</summary>
        SBD,
        ///<summary>
        ///Sri Lankan Rupees (LKR).
        ///</summary>
        LKR,
        ///<summary>
        ///Surinamese Dollar (SRD).
        ///</summary>
        SRD,
        ///<summary>
        ///Swazi Lilangeni (SZL).
        ///</summary>
        SZL,
        ///<summary>
        ///Swedish Kronor (SEK).
        ///</summary>
        SEK,
        ///<summary>
        ///Swiss Francs (CHF).
        ///</summary>
        CHF,
        ///<summary>
        ///Taiwan Dollars (TWD).
        ///</summary>
        TWD,
        ///<summary>
        ///Thai baht (THB).
        ///</summary>
        THB,
        ///<summary>
        ///Tajikistani Somoni (TJS).
        ///</summary>
        TJS,
        ///<summary>
        ///Tanzanian Shilling (TZS).
        ///</summary>
        TZS,
        ///<summary>
        ///Tongan Pa'anga (TOP).
        ///</summary>
        TOP,
        ///<summary>
        ///Trinidad and Tobago Dollars (TTD).
        ///</summary>
        TTD,
        ///<summary>
        ///Tunisian Dinar (TND).
        ///</summary>
        TND,
        ///<summary>
        ///Turkish Lira (TRY).
        ///</summary>
        TRY,
        ///<summary>
        ///Turkmenistani Manat (TMT).
        ///</summary>
        TMT,
        ///<summary>
        ///Ugandan Shilling (UGX).
        ///</summary>
        UGX,
        ///<summary>
        ///Ukrainian Hryvnia (UAH).
        ///</summary>
        UAH,
        ///<summary>
        ///United Arab Emirates Dirham (AED).
        ///</summary>
        AED,
        ///<summary>
        ///Uruguayan Pesos (UYU).
        ///</summary>
        UYU,
        ///<summary>
        ///Uzbekistan som (UZS).
        ///</summary>
        UZS,
        ///<summary>
        ///Vanuatu Vatu (VUV).
        ///</summary>
        VUV,
        ///<summary>
        ///Venezuelan Bolivares Soberanos (VES).
        ///</summary>
        VES,
        ///<summary>
        ///Vietnamese đồng (VND).
        ///</summary>
        VND,
        ///<summary>
        ///West African CFA franc (XOF).
        ///</summary>
        XOF,
        ///<summary>
        ///Yemeni Rial (YER).
        ///</summary>
        YER,
        ///<summary>
        ///Zambian Kwacha (ZMW).
        ///</summary>
        ZMW,
        ///<summary>
        ///Belarusian Ruble (BYR).
        ///</summary>
        [Obsolete("`BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.")]
        BYR,
        ///<summary>
        ///Sao Tome And Principe Dobra (STD).
        ///</summary>
        [Obsolete("`STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.")]
        STD,
        ///<summary>
        ///Sao Tome And Principe Dobra (STN).
        ///</summary>
        STN,
        ///<summary>
        ///Venezuelan Bolivares (VED).
        ///</summary>
        VED,
        ///<summary>
        ///Venezuelan Bolivares (VEF).
        ///</summary>
        [Obsolete("`VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.")]
        VEF,
        ///<summary>
        ///Unrecognized currency.
        ///</summary>
        XXX,
    }

    ///<summary>
    ///Currency formats configured for the merchant. These formats are available to use within Liquid.
    ///</summary>
    public class CurrencyFormats : GraphQLObject<CurrencyFormats>
    {
        ///<summary>
        ///Money without currency in HTML.
        ///</summary>
        public string? moneyFormat { get; set; }
        ///<summary>
        ///Money without currency in emails.
        ///</summary>
        public string? moneyInEmailsFormat { get; set; }
        ///<summary>
        ///Money with currency in HTML.
        ///</summary>
        public string? moneyWithCurrencyFormat { get; set; }
        ///<summary>
        ///Money with currency in emails.
        ///</summary>
        public string? moneyWithCurrencyInEmailsFormat { get; set; }
    }

    ///<summary>
    ///A setting for a presentment currency.
    ///</summary>
    public class CurrencySetting : GraphQLObject<CurrencySetting>
    {
        ///<summary>
        ///The currency's ISO code.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
        ///<summary>
        ///The full name of the currency.
        ///</summary>
        public string? currencyName { get; set; }
        ///<summary>
        ///Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment.
        ///</summary>
        public bool? enabled { get; set; }
        ///<summary>
        ///The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active.
        ///</summary>
        public DateTime? rateUpdatedAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CurrencySettings.
    ///</summary>
    public class CurrencySettingConnection : GraphQLObject<CurrencySettingConnection>, IConnectionWithNodesAndEdges<CurrencySettingEdge, CurrencySetting>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CurrencySettingEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CurrencySettingEdge.
        ///</summary>
        public IEnumerable<CurrencySetting>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CurrencySetting and a cursor during pagination.
    ///</summary>
    public class CurrencySettingEdge : GraphQLObject<CurrencySettingEdge>, IEdge<CurrencySetting>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CurrencySettingEdge.
        ///</summary>
        public CurrencySetting? node { get; set; }
    }

    ///<summary>
    ///Represents information about a customer of the shop, such as the customer's contact details, their order
    ///history, and whether they've agreed to receive marketing material by email.
    ///
    ///**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
    ///</summary>
    public class Customer : GraphQLObject<Customer>, ICommentEventSubject, IHasEvents, IHasMetafieldDefinitions, IHasMetafields, ILegacyInteroperability, INode, ICommentEventEmbed, IMetafieldReferencer, IPurchasingEntity
    {
        ///<summary>
        ///A list of addresses associated with the customer.
        ///</summary>
        public IEnumerable<MailingAddress>? addresses { get; set; }
        ///<summary>
        ///The total amount that the customer has spent on orders in their lifetime.
        ///</summary>
        public MoneyV2? amountSpent { get; set; }
        ///<summary>
        ///Whether the merchant can delete the customer from their store.
        ///
        ///A customer can be deleted from a store only if they haven't yet made an order. After a customer makes an
        ///order, they can't be deleted from a store.
        ///</summary>
        public bool? canDelete { get; set; }
        ///<summary>
        ///A list of the customer's company contact profiles.
        ///</summary>
        public IEnumerable<CompanyContact>? companyContactProfiles { get; set; }
        ///<summary>
        ///The date and time when the customer was added to the store.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The default address associated with the customer.
        ///</summary>
        public MailingAddress? defaultAddress { get; set; }
        ///<summary>
        ///The full name of the customer, based on the values for first_name and last_name. If the first_name and
        ///last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
        ///</summary>
        public string? displayName { get; set; }
        ///<summary>
        ///The customer's email address.
        ///</summary>
        public string? email { get; set; }
        ///<summary>
        ///The current email marketing state for the customer.
        ///If the customer doesn't have an email address, then this property is `null`.
        ///</summary>
        public CustomerEmailMarketingConsentState? emailMarketingConsent { get; set; }
        ///<summary>
        ///A list of events associated with the customer.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///The customer's first name.
        ///</summary>
        public string? firstName { get; set; }

        ///<summary>
        ///Whether the merchant has added timeline comments about the customer on the customer's page.
        ///</summary>
        [Obsolete("To query for comments on the timeline, use the events connection and a `query` argument containing `verb:comment`, or look for a `CommentEvent` in the `__typename` of events.")]
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image associated with the customer.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The customer's last name.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The customer's last order.
        ///</summary>
        public Order? lastOrder { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The amount of time since the customer was first added to the store.
        ///
        ///Example: 'about 12 years'.
        ///</summary>
        public string? lifetimeDuration { get; set; }
        ///<summary>
        ///The customer's locale.
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///The market that includes the customer’s default address.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///Whether the customer can be merged with another customer.
        ///</summary>
        public CustomerMergeable? mergeable { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///A unique identifier for the customer that's used with Multipass login.
        ///</summary>
        public string? multipassIdentifier { get; set; }
        ///<summary>
        ///A note about the customer.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The number of orders that the customer has made at the store in their lifetime.
        ///</summary>
        public ulong? numberOfOrders { get; set; }
        ///<summary>
        ///A list of the customer's orders.
        ///</summary>
        public OrderConnection? orders { get; set; }
        ///<summary>
        ///A list of the customer's payment methods.
        ///</summary>
        public CustomerPaymentMethodConnection? paymentMethods { get; set; }
        ///<summary>
        ///The customer's phone number.
        ///</summary>
        public string? phone { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///Possible subscriber states of a customer defined by their subscription contracts.
        ///</summary>
        public CustomerProductSubscriberStatus? productSubscriberStatus { get; set; }
        ///<summary>
        ///The current SMS marketing state for the customer's phone number.
        ///
        ///If the customer does not have a phone number, then this property is `null`.
        ///</summary>
        public CustomerSmsMarketingConsentState? smsMarketingConsent { get; set; }
        ///<summary>
        ///The state of the customer's account with the shop.
        ///</summary>
        public CustomerState? state { get; set; }
        ///<summary>
        ///The statistics for a given customer.
        ///</summary>
        public CustomerStatistics? statistics { get; set; }
        ///<summary>
        ///A list of the customer's subscription contracts.
        ///</summary>
        public SubscriptionContractConnection? subscriptionContracts { get; set; }
        ///<summary>
        ///A comma separated list of tags that have been added to the customer.
        ///</summary>
        public IEnumerable<string>? tags { get; set; }
        ///<summary>
        ///Whether the customer is exempt from being charged taxes on their orders.
        ///</summary>
        public bool? taxExempt { get; set; }
        ///<summary>
        ///The list of tax exemptions applied to the customer.
        ///</summary>
        public IEnumerable<TaxExemption>? taxExemptions { get; set; }
        ///<summary>
        ///The URL to unsubscribe the customer from the mailing list.
        ///</summary>
        public string? unsubscribeUrl { get; set; }
        ///<summary>
        ///The date and time when the customer was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///Whether the email address is formatted correctly.
        ///
        ///Returns `true` when the email is formatted correctly and
        ///belongs to an existing domain. This doesn't guarantee that
        ///the email address actually exists.
        ///</summary>
        public bool? validEmailAddress { get; set; }
        ///<summary>
        ///Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
        ///</summary>
        public bool? verifiedEmail { get; set; }
    }

    ///<summary>
    ///Information about the shop's customer accounts.
    ///</summary>
    public class CustomerAccountsV2 : GraphQLObject<CustomerAccountsV2>
    {
        ///<summary>
        ///Indicates which version of customer accounts the merchant is using in online store and checkout.
        ///</summary>
        public CustomerAccountsVersion? customerAccountsVersion { get; set; }
        ///<summary>
        ///Login links are shown in online store and checkout.
        ///</summary>
        public bool? loginLinksVisibleOnStorefrontAndCheckout { get; set; }
        ///<summary>
        ///Customers are required to log in to their account before checkout.
        ///</summary>
        public bool? loginRequiredAtCheckout { get; set; }
        ///<summary>
        ///The root url for the customer accounts pages.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The login redirection target for customer accounts.
    ///</summary>
    public enum CustomerAccountsVersion
    {
        ///<summary>
        ///The customer is redirected to the classic customer accounts login page.
        ///</summary>
        CLASSIC,
        ///<summary>
        ///The customer is redirected to the new customer accounts login page.
        ///</summary>
        NEW_CUSTOMER_ACCOUNTS,
    }

    ///<summary>
    ///Return type for `customerAddTaxExemptions` mutation.
    ///</summary>
    public class CustomerAddTaxExemptionsPayload : GraphQLObject<CustomerAddTaxExemptionsPayload>
    {
        ///<summary>
        ///The updated customer.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerCancelDataErasureUserError`.
    ///</summary>
    public enum CustomerCancelDataErasureErrorCode
    {
        ///<summary>
        ///Customer does not exist.
        ///</summary>
        DOES_NOT_EXIST,
        ///<summary>
        ///Failed to cancel customer data erasure.
        ///</summary>
        FAILED_TO_CANCEL,
        ///<summary>
        ///Customer's data is not scheduled for erasure.
        ///</summary>
        NOT_BEING_ERASED,
    }

    ///<summary>
    ///Return type for `customerCancelDataErasure` mutation.
    ///</summary>
    public class CustomerCancelDataErasurePayload : GraphQLObject<CustomerCancelDataErasurePayload>
    {
        ///<summary>
        ///The ID of the customer whose pending data erasure has been cancelled.
        ///</summary>
        public string? customerId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerCancelDataErasureUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs when cancelling a customer data erasure request.
    ///</summary>
    public class CustomerCancelDataErasureUserError : GraphQLObject<CustomerCancelDataErasureUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerCancelDataErasureErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Customers.
    ///</summary>
    public class CustomerConnection : GraphQLObject<CustomerConnection>, IConnectionWithNodesAndEdges<CustomerEdge, Customer>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CustomerEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CustomerEdge.
        ///</summary>
        public IEnumerable<Customer>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///The source that collected the customer's consent to receive marketing materials.
    ///</summary>
    public enum CustomerConsentCollectedFrom
    {
        ///<summary>
        ///The customer consent was collected by Shopify.
        ///</summary>
        SHOPIFY,
        ///<summary>
        ///The customer consent was collected outside of Shopify.
        ///</summary>
        OTHER,
    }

    ///<summary>
    ///Return type for `customerCreate` mutation.
    ///</summary>
    public class CustomerCreatePayload : GraphQLObject<CustomerCreatePayload>
    {
        ///<summary>
        ///The created customer.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a card instrument for customer payment method.
    ///</summary>
    public class CustomerCreditCard : GraphQLObject<CustomerCreditCard>, ICustomerPaymentInstrument
    {
        ///<summary>
        ///The billing address of the card.
        ///</summary>
        public CustomerCreditCardBillingAddress? billingAddress { get; set; }
        ///<summary>
        ///The brand of the card.
        ///</summary>
        public string? brand { get; set; }
        ///<summary>
        ///Whether the card is about to expire.
        ///</summary>
        public bool? expiresSoon { get; set; }
        ///<summary>
        ///The expiry month of the card.
        ///</summary>
        public int? expiryMonth { get; set; }
        ///<summary>
        ///The expiry year of the card.
        ///</summary>
        public int? expiryYear { get; set; }
        ///<summary>
        ///The card's BIN number.
        ///</summary>
        public string? firstDigits { get; set; }
        ///<summary>
        ///The payment method can be revoked if there are no active subscription contracts.
        ///</summary>
        public bool? isRevocable { get; set; }
        ///<summary>
        ///The last 4 digits of the card.
        ///</summary>
        public string? lastDigits { get; set; }
        ///<summary>
        ///The masked card number with only the last 4 digits displayed.
        ///</summary>
        public string? maskedNumber { get; set; }
        ///<summary>
        ///The name of the card holder.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The source of the card if coming from a wallet such as Apple Pay.
        ///</summary>
        public string? source { get; set; }
        ///<summary>
        ///The last 4 digits of the Device Account Number.
        ///</summary>
        public string? virtualLastDigits { get; set; }
    }

    ///<summary>
    ///The billing address of a credit card payment instrument.
    ///</summary>
    public class CustomerCreditCardBillingAddress : GraphQLObject<CustomerCreditCardBillingAddress>
    {
        ///<summary>
        ///The first line of the address. Typically the street address or PO Box number.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The name of the city, district, village, or town.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The name of the country.
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The two-letter code for the country of the address.
        ///For example, US.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///The first name in the billing address.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///The last name in the billing address.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The region of the address, such as the province, state, or district.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The two-letter code for the region.
        ///For example, ON.
        ///</summary>
        public string? provinceCode { get; set; }
        ///<summary>
        ///The zip or postal code of the address.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///Return type for `customerDelete` mutation.
    ///</summary>
    public class CustomerDeletePayload : GraphQLObject<CustomerDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted customer.
        ///</summary>
        public string? deletedCustomerId { get; set; }
        ///<summary>
        ///The shop of the deleted customer.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Customer and a cursor during pagination.
    ///</summary>
    public class CustomerEdge : GraphQLObject<CustomerEdge>, IEdge<Customer>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CustomerEdge.
        ///</summary>
        public Customer? node { get; set; }
    }

    ///<summary>
    ///Represents an email address.
    ///</summary>
    public class CustomerEmailAddress : GraphQLObject<CustomerEmailAddress>
    {
        ///<summary>
        ///The customer's default email address.
        ///</summary>
        public string? emailAddress { get; set; }
        ///<summary>
        ///Whether the customer has subscribed to email marketing.
        ///</summary>
        public CustomerEmailAddressMarketingState? marketingState { get; set; }
        ///<summary>
        ///The URL to unsubscribe a member from all mailing lists.
        ///</summary>
        public string? marketingUnsubscribeUrl { get; set; }
        ///<summary>
        ///Whether the customer has opted in to having their opened emails tracked.
        ///</summary>
        public CustomerEmailAddressOpenTrackingLevel? openTrackingLevel { get; set; }
        ///<summary>
        ///The URL that can be used to opt a customer in or out of email open tracking.
        ///</summary>
        public string? openTrackingUrl { get; set; }
    }

    ///<summary>
    ///Possible marketing states for the customer’s email address.
    ///</summary>
    public enum CustomerEmailAddressMarketingState
    {
        ///<summary>
        ///The customer’s email address marketing state is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The customer is not subscribed to email marketing.
        ///</summary>
        NOT_SUBSCRIBED,
        ///<summary>
        ///The customer is in the process of subscribing to email marketing.
        ///</summary>
        PENDING,
        ///<summary>
        ///The customer is subscribed to email marketing.
        ///</summary>
        SUBSCRIBED,
        ///<summary>
        ///The customer is not subscribed to email marketing but was previously subscribed.
        ///</summary>
        UNSUBSCRIBED,
    }

    ///<summary>
    ///The different levels related to whether a customer has opted in to having their opened emails tracked.
    ///</summary>
    public enum CustomerEmailAddressOpenTrackingLevel
    {
        ///<summary>
        ///The customer has not specified whether they want to opt in or out of having their open emails tracked.
        ///</summary>
        UNKNOWN,
        ///<summary>
        ///The customer has opted in to having their open emails tracked.
        ///</summary>
        OPTED_IN,
        ///<summary>
        ///The customer has opted out of having their open emails tracked.
        ///</summary>
        OPTED_OUT,
    }

    ///<summary>
    ///The record of when a customer consented to receive marketing material by email.
    ///</summary>
    public class CustomerEmailMarketingConsentState : GraphQLObject<CustomerEmailMarketingConsentState>
    {
        ///<summary>
        ///The date and time at which the customer consented to receive marketing material by email.
        ///The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
        ///If no date is provided, then the date and time at which the consent information was sent is used.
        ///</summary>
        public DateTime? consentUpdatedAt { get; set; }
        ///<summary>
        ///The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
        ///that the customer gave when they consented to receive marketing material by email.
        ///</summary>
        public CustomerMarketingOptInLevel? marketingOptInLevel { get; set; }
        ///<summary>
        ///The current email marketing state for the customer.
        ///</summary>
        public CustomerEmailMarketingState? marketingState { get; set; }
    }

    ///<summary>
    ///Return type for `customerEmailMarketingConsentUpdate` mutation.
    ///</summary>
    public class CustomerEmailMarketingConsentUpdatePayload : GraphQLObject<CustomerEmailMarketingConsentUpdatePayload>
    {
        ///<summary>
        ///The updated customer.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerEmailMarketingConsentUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `CustomerEmailMarketingConsentUpdate`.
    ///</summary>
    public class CustomerEmailMarketingConsentUpdateUserError : GraphQLObject<CustomerEmailMarketingConsentUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerEmailMarketingConsentUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerEmailMarketingConsentUpdateUserError`.
    ///</summary>
    public enum CustomerEmailMarketingConsentUpdateUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///Unexpected internal error happened.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Missing a required argument.
        ///</summary>
        MISSING_ARGUMENT,
    }

    ///<summary>
    ///The possible email marketing states for a customer.
    ///</summary>
    public enum CustomerEmailMarketingState
    {
        ///<summary>
        ///The customer isn't subscribed to email marketing.
        ///</summary>
        NOT_SUBSCRIBED,
        ///<summary>
        ///The customer is in the process of subscribing to email marketing.
        ///</summary>
        PENDING,
        ///<summary>
        ///The customer is subscribed to email marketing.
        ///</summary>
        SUBSCRIBED,
        ///<summary>
        ///The customer isn't currently subscribed to email marketing but was previously subscribed.
        ///</summary>
        UNSUBSCRIBED,
        ///<summary>
        ///The customer's personal data is erased. This value is internally-set and read-only.
        ///</summary>
        REDACTED,
        ///<summary>
        ///The customer’s email address marketing state is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///Return type for `customerGenerateAccountActivationUrl` mutation.
    ///</summary>
    public class CustomerGenerateAccountActivationUrlPayload : GraphQLObject<CustomerGenerateAccountActivationUrlPayload>
    {
        ///<summary>
        ///The generated account activation URL.
        ///</summary>
        public string? accountActivationUrl { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a customer's visiting activities on a shop's online store.
    ///</summary>
    public class CustomerJourney : GraphQLObject<CustomerJourney>
    {
        ///<summary>
        ///The position of the current order within the customer's order history.
        ///</summary>
        public int? customerOrderIndex { get; set; }
        ///<summary>
        ///The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
        ///</summary>
        public int? daysToConversion { get; set; }
        ///<summary>
        ///The customer's first session going into the shop.
        ///</summary>
        public CustomerVisit? firstVisit { get; set; }
        ///<summary>
        ///The last session before an order is made.
        ///</summary>
        public CustomerVisit? lastVisit { get; set; }
        ///<summary>
        ///Events preceding a customer order, such as shop sessions.
        ///</summary>
        public IEnumerable<ICustomerMoment>? moments { get; set; }
    }

    ///<summary>
    ///Represents a customer's visiting activities on a shop's online store.
    ///</summary>
    public class CustomerJourneySummary : GraphQLObject<CustomerJourneySummary>
    {
        ///<summary>
        ///The position of the current order within the customer's order history. Test orders aren't included.
        ///</summary>
        public int? customerOrderIndex { get; set; }
        ///<summary>
        ///The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
        ///</summary>
        public int? daysToConversion { get; set; }
        ///<summary>
        ///The customer's first session going into the shop.
        ///</summary>
        public CustomerVisit? firstVisit { get; set; }
        ///<summary>
        ///The last session before an order is made.
        ///</summary>
        public CustomerVisit? lastVisit { get; set; }
        ///<summary>
        ///The events preceding a customer's order, such as shop sessions.
        ///</summary>
        public CustomerMomentConnection? moments { get; set; }
        ///<summary>
        ///The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
        ///</summary>
        public int? momentsCount { get; set; }
        ///<summary>
        ///Whether the attributed sessions for the order have been created yet.
        ///</summary>
        public bool? ready { get; set; }
    }

    ///<summary>
    ///The possible values for the marketing subscription opt-in level enabled at the time the customer consented to receive marketing information.
    ///
    ///The levels are defined by [the M3AAWG best practices guideline
    ///  document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
    ///</summary>
    public enum CustomerMarketingOptInLevel
    {
        ///<summary>
        ///After providing their information, the customer receives marketing information without any
        ///intermediate steps.
        ///</summary>
        SINGLE_OPT_IN,
        ///<summary>
        ///After providing their information, the customer receives a confirmation and is required to
        ///perform a intermediate step before receiving marketing information.
        ///</summary>
        CONFIRMED_OPT_IN,
        ///<summary>
        ///The customer receives marketing information but how they were opted in is unknown.
        ///</summary>
        UNKNOWN,
    }

    ///<summary>
    ///The error blocking a customer merge.
    ///</summary>
    public class CustomerMergeError : GraphQLObject<CustomerMergeError>
    {
        ///<summary>
        ///The list of fields preventing the customer from being merged.
        ///</summary>
        public IEnumerable<CustomerMergeErrorFieldType>? errorFields { get; set; }
        ///<summary>
        ///The customer merge error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerMergeUserError`.
    ///</summary>
    public enum CustomerMergeErrorCode
    {
        ///<summary>
        ///An internal error occurred.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///The customer cannot be merged.
        ///</summary>
        INVALID_CUSTOMER,
        ///<summary>
        ///The customer ID is invalid.
        ///</summary>
        INVALID_CUSTOMER_ID,
        ///<summary>
        ///The customer cannot be merged because it has associated gift cards.
        ///</summary>
        CUSTOMER_HAS_GIFT_CARDS,
        ///<summary>
        ///The customer is missing the attribute requested for override.
        ///</summary>
        MISSING_OVERRIDE_ATTRIBUTE,
        ///<summary>
        ///The override attribute is invalid.
        ///</summary>
        OVERRIDE_ATTRIBUTE_INVALID,
    }

    ///<summary>
    ///The types of the hard blockers preventing a customer from being merged to another customer.
    ///</summary>
    public enum CustomerMergeErrorFieldType
    {
        ///<summary>
        ///The customer does not exist.
        ///</summary>
        DELETED_AT,
        ///<summary>
        ///The customer has a pending or completed redaction.
        ///</summary>
        REDACTED_AT,
        ///<summary>
        ///The customer has a subscription history.
        ///</summary>
        SUBSCRIPTIONS,
        ///<summary>
        ///The customer has a merge in progress.
        ///</summary>
        MERGE_IN_PROGRESS,
        ///<summary>
        ///The customer has gift cards.
        ///</summary>
        GIFT_CARDS,
        ///<summary>
        ///The customer is a company contact.
        ///</summary>
        COMPANY_CONTACT,
        ///<summary>
        ///The customer has payment methods.
        ///</summary>
        CUSTOMER_PAYMENT_METHODS,
        ///<summary>
        ///The customer has a pending data request.
        ///</summary>
        PENDING_DATA_REQUEST,
        ///<summary>
        ///The customer has a multipass identifier.
        ///</summary>
        MULTIPASS_IDENTIFIER,
    }

    ///<summary>
    ///Return type for `customerMerge` mutation.
    ///</summary>
    public class CustomerMergePayload : GraphQLObject<CustomerMergePayload>
    {
        ///<summary>
        ///The asynchronous job for merging the customers.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The ID of the customer resulting from the merge.
        ///</summary>
        public string? resultingCustomerId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerMergeUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A preview of the results of a customer merge request.
    ///</summary>
    public class CustomerMergePreview : GraphQLObject<CustomerMergePreview>
    {
        ///<summary>
        ///The fields that can be used to override the default fields.
        ///</summary>
        public CustomerMergePreviewAlternateFields? alternateFields { get; set; }
        ///<summary>
        ///The fields that will block the merge if the two customers are merged.
        ///</summary>
        public CustomerMergePreviewBlockingFields? blockingFields { get; set; }
        ///<summary>
        ///The errors blocking the customer merge.
        ///</summary>
        public IEnumerable<CustomerMergeError>? customerMergeErrors { get; set; }
        ///<summary>
        ///The fields that will be kept if the two customers are merged.
        ///</summary>
        public CustomerMergePreviewDefaultFields? defaultFields { get; set; }
        ///<summary>
        ///The resulting customer ID if the two customers are merged.
        ///</summary>
        public string? resultingCustomerId { get; set; }
    }

    ///<summary>
    ///The fields that can be used to override the default fields.
    ///</summary>
    public class CustomerMergePreviewAlternateFields : GraphQLObject<CustomerMergePreviewAlternateFields>
    {
        ///<summary>
        ///The default address of a customer.
        ///</summary>
        public MailingAddress? defaultAddress { get; set; }
        ///<summary>
        ///The email state of a customer.
        ///</summary>
        public CustomerEmailAddress? email { get; set; }
        ///<summary>
        ///The first name of a customer.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///The last name of a customer.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The phone number state of a customer.
        ///</summary>
        public CustomerPhoneNumber? phoneNumber { get; set; }
    }

    ///<summary>
    ///The blocking fields of a customer merge preview. These fields will block customer merge unless edited.
    ///</summary>
    public class CustomerMergePreviewBlockingFields : GraphQLObject<CustomerMergePreviewBlockingFields>
    {
        ///<summary>
        ///The merged note resulting from a customer merge. The merged note is over the 5000 character limit and will block customer merge.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The merged tags resulting from a customer merge. The merged tags are over the 250 limit and will block customer merge.
        ///</summary>
        public IEnumerable<string>? tags { get; set; }
    }

    ///<summary>
    ///The fields that will be kept as part of a customer merge preview.
    ///</summary>
    public class CustomerMergePreviewDefaultFields : GraphQLObject<CustomerMergePreviewDefaultFields>
    {
        ///<summary>
        ///The merged addresses resulting from a customer merge.
        ///</summary>
        public MailingAddressConnection? addresses { get; set; }
        ///<summary>
        ///The default address resulting from a customer merge.
        ///</summary>
        public MailingAddress? defaultAddress { get; set; }
        ///<summary>
        ///The total number of customer-specific discounts resulting from a customer merge.
        ///</summary>
        public ulong? discountNodeCount { get; set; }
        ///<summary>
        ///The merged customer-specific discounts resulting from a customer merge.
        ///</summary>
        public DiscountNodeConnection? discountNodes { get; set; }
        ///<summary>
        ///The full name of the customer, based on the values for `first_name` and `last_name`. If `first_name` and `last_name` aren't available, then this field falls back to the customer's email address. If the customer's email isn't available, then this field falls back to the customer's phone number.
        ///</summary>
        public string? displayName { get; set; }
        ///<summary>
        ///The total number of merged draft orders.
        ///</summary>
        public ulong? draftOrderCount { get; set; }
        ///<summary>
        ///The merged draft orders resulting from a customer merge.
        ///</summary>
        public DraftOrderConnection? draftOrders { get; set; }
        ///<summary>
        ///The email state of a customer.
        ///</summary>
        public CustomerEmailAddress? email { get; set; }
        ///<summary>
        ///The first name resulting from a customer merge.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///The total number of merged gift cards.
        ///</summary>
        public ulong? giftCardCount { get; set; }
        ///<summary>
        ///The merged gift cards resulting from a customer merge.
        ///</summary>
        public GiftCardConnection? giftCards { get; set; }
        ///<summary>
        ///The last name resulting from a customer merge.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The total number of merged metafields.
        ///</summary>
        public ulong? metafieldCount { get; set; }
        ///<summary>
        ///The merged note resulting from a customer merge.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The total number of merged orders.
        ///</summary>
        public ulong? orderCount { get; set; }
        ///<summary>
        ///The merged orders resulting from a customer merge.
        ///</summary>
        public OrderConnection? orders { get; set; }
        ///<summary>
        ///The phone number state of a customer.
        ///</summary>
        public CustomerPhoneNumber? phoneNumber { get; set; }
        ///<summary>
        ///The merged tags resulting from a customer merge.
        ///</summary>
        public IEnumerable<string>? tags { get; set; }
    }

    ///<summary>
    ///A merge request for merging two customers.
    ///</summary>
    public class CustomerMergeRequest : GraphQLObject<CustomerMergeRequest>
    {
        ///<summary>
        ///The merge errors that occurred during the customer merge request.
        ///</summary>
        public IEnumerable<CustomerMergeError>? customerMergeErrors { get; set; }
        ///<summary>
        ///The UUID of the merge job.
        ///</summary>
        public string? jobId { get; set; }
        ///<summary>
        ///The ID of the customer resulting from the merge.
        ///</summary>
        public string? resultingCustomerId { get; set; }
        ///<summary>
        ///The status of the customer merge request.
        ///</summary>
        public CustomerMergeRequestStatus? status { get; set; }
    }

    ///<summary>
    ///The status of the customer merge request.
    ///</summary>
    public enum CustomerMergeRequestStatus
    {
        ///<summary>
        ///The customer merge request has been requested.
        ///</summary>
        REQUESTED,
        ///<summary>
        ///The customer merge request is currently in progress.
        ///</summary>
        IN_PROGRESS,
        ///<summary>
        ///The customer merge request has been completed.
        ///</summary>
        COMPLETED,
        ///<summary>
        ///The customer merge request has failed.
        ///</summary>
        FAILED,
    }

    ///<summary>
    ///An error that occurs while merging two customers.
    ///</summary>
    public class CustomerMergeUserError : GraphQLObject<CustomerMergeUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerMergeErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///An object that represents whether a customer can be merged with another customer.
    ///</summary>
    public class CustomerMergeable : GraphQLObject<CustomerMergeable>
    {
        ///<summary>
        ///The list of fields preventing the customer from being merged.
        ///</summary>
        public IEnumerable<CustomerMergeErrorFieldType>? errorFields { get; set; }
        ///<summary>
        ///Whether the customer can be merged with another customer.
        ///</summary>
        public bool? isMergeable { get; set; }
        ///<summary>
        ///The merge request if one is currently in progress.
        ///</summary>
        public CustomerMergeRequest? mergeInProgress { get; set; }
        ///<summary>
        ///The reason why the customer can't be merged with another customer.
        ///</summary>
        public string? reason { get; set; }
    }

    ///<summary>
    ///Represents a session preceding an order, often used for building a timeline of events leading to an order.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CustomerVisit), typeDiscriminator: "CustomerVisit")]
    public interface ICustomerMoment : IGraphQLObject
    {
        public CustomerVisit? AsCustomerVisit() => this as CustomerVisit;
        ///<summary>
        ///The date and time when the customer's session occurred.
        ///</summary>
        public DateTime? occurredAt { get; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CustomerMoments.
    ///</summary>
    public class CustomerMomentConnection : GraphQLObject<CustomerMomentConnection>, IConnectionWithNodesAndEdges<CustomerMomentEdge, ICustomerMoment>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CustomerMomentEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CustomerMomentEdge.
        ///</summary>
        public IEnumerable<ICustomerMoment>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CustomerMoment and a cursor during pagination.
    ///</summary>
    public class CustomerMomentEdge : GraphQLObject<CustomerMomentEdge>, IEdge<ICustomerMoment>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CustomerMomentEdge.
        ///</summary>
        public ICustomerMoment? node { get; set; }
    }

    ///<summary>
    ///All possible instruments for CustomerPaymentMethods.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CustomerCreditCard), typeDiscriminator: "CustomerCreditCard")]
    [JsonDerivedType(typeof(CustomerPaypalBillingAgreement), typeDiscriminator: "CustomerPaypalBillingAgreement")]
    [JsonDerivedType(typeof(CustomerShopPayAgreement), typeDiscriminator: "CustomerShopPayAgreement")]
    public interface ICustomerPaymentInstrument : IGraphQLObject
    {
        public CustomerCreditCard? AsCustomerCreditCard() => this as CustomerCreditCard;
        public CustomerPaypalBillingAgreement? AsCustomerPaypalBillingAgreement() => this as CustomerPaypalBillingAgreement;
        public CustomerShopPayAgreement? AsCustomerShopPayAgreement() => this as CustomerShopPayAgreement;
        ///<summary>
        ///The payment method can be revoked if there are no active subscription contracts.
        ///</summary>
        public bool? isRevocable { get; set; }
    }

    ///<summary>
    ///The billing address of a payment instrument.
    ///</summary>
    public class CustomerPaymentInstrumentBillingAddress : GraphQLObject<CustomerPaymentInstrumentBillingAddress>
    {
        ///<summary>
        ///The first line of the address. Typically the street address or PO Box number.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The name of the city, district, village, or town.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The name of the country.
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The two-letter code for the country of the address.
        ///For example, US.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///The name of the buyer of the address.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The region of the address, such as the province, state, or district.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The two-letter code for the region.
        ///For example, ON.
        ///</summary>
        public string? provinceCode { get; set; }
        ///<summary>
        ///The zip or postal code of the address.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///A customer's payment method.
    ///</summary>
    public class CustomerPaymentMethod : GraphQLObject<CustomerPaymentMethod>, INode
    {
        ///<summary>
        ///The customer to whom the payment method belongs.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The ID of this payment method.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The instrument for this payment method.
        ///</summary>
        public ICustomerPaymentInstrument? instrument { get; set; }
        ///<summary>
        ///The time that the payment method was revoked.
        ///</summary>
        public DateTime? revokedAt { get; set; }
        ///<summary>
        ///The revocation reason for this payment method.
        ///</summary>
        public CustomerPaymentMethodRevocationReason? revokedReason { get; set; }
        ///<summary>
        ///List Subscription Contracts.
        ///</summary>
        public SubscriptionContractConnection? subscriptionContracts { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CustomerPaymentMethods.
    ///</summary>
    public class CustomerPaymentMethodConnection : GraphQLObject<CustomerPaymentMethodConnection>, IConnectionWithNodesAndEdges<CustomerPaymentMethodEdge, CustomerPaymentMethod>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CustomerPaymentMethodEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CustomerPaymentMethodEdge.
        ///</summary>
        public IEnumerable<CustomerPaymentMethod>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `customerPaymentMethodCreateFromDuplicationData` mutation.
    ///</summary>
    public class CustomerPaymentMethodCreateFromDuplicationDataPayload : GraphQLObject<CustomerPaymentMethodCreateFromDuplicationDataPayload>
    {
        ///<summary>
        ///The customer payment method.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerPaymentMethodCreateFromDuplicationDataUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `CustomerPaymentMethodCreateFromDuplicationData`.
    ///</summary>
    public class CustomerPaymentMethodCreateFromDuplicationDataUserError : GraphQLObject<CustomerPaymentMethodCreateFromDuplicationDataUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerPaymentMethodCreateFromDuplicationDataUserError`.
    ///</summary>
    public enum CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode
    {
        ///<summary>
        ///Too many requests.
        ///</summary>
        TOO_MANY_REQUESTS,
        ///<summary>
        ///Customer doesn't exist.
        ///</summary>
        CUSTOMER_DOES_NOT_EXIST,
        ///<summary>
        ///Invalid encrypted duplication data.
        ///</summary>
        INVALID_ENCRYPTED_DUPLICATION_DATA,
    }

    ///<summary>
    ///Return type for `customerPaymentMethodCreditCardCreate` mutation.
    ///</summary>
    public class CustomerPaymentMethodCreditCardCreatePayload : GraphQLObject<CustomerPaymentMethodCreditCardCreatePayload>
    {
        ///<summary>
        ///The customer payment method.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///If the card verification result is processing. When this is true, customer_payment_method will be null.
        ///</summary>
        public bool? processing { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `customerPaymentMethodCreditCardUpdate` mutation.
    ///</summary>
    public class CustomerPaymentMethodCreditCardUpdatePayload : GraphQLObject<CustomerPaymentMethodCreditCardUpdatePayload>
    {
        ///<summary>
        ///The customer payment method.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///If the card verification result is processing. When this is true, customer_payment_method will be null.
        ///</summary>
        public bool? processing { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
    ///</summary>
    public class CustomerPaymentMethodEdge : GraphQLObject<CustomerPaymentMethodEdge>, IEdge<CustomerPaymentMethod>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CustomerPaymentMethodEdge.
        ///</summary>
        public CustomerPaymentMethod? node { get; set; }
    }

    ///<summary>
    ///Return type for `customerPaymentMethodGetDuplicationData` mutation.
    ///</summary>
    public class CustomerPaymentMethodGetDuplicationDataPayload : GraphQLObject<CustomerPaymentMethodGetDuplicationDataPayload>
    {
        ///<summary>
        ///The encrypted data from the payment method to be duplicated.
        ///</summary>
        public string? encryptedDuplicationData { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerPaymentMethodGetDuplicationDataUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `CustomerPaymentMethodGetDuplicationData`.
    ///</summary>
    public class CustomerPaymentMethodGetDuplicationDataUserError : GraphQLObject<CustomerPaymentMethodGetDuplicationDataUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerPaymentMethodGetDuplicationDataUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerPaymentMethodGetDuplicationDataUserError`.
    ///</summary>
    public enum CustomerPaymentMethodGetDuplicationDataUserErrorCode
    {
        ///<summary>
        ///Payment method doesn't exist.
        ///</summary>
        PAYMENT_METHOD_DOES_NOT_EXIST,
        ///<summary>
        ///Invalid payment instrument.
        ///</summary>
        INVALID_INSTRUMENT,
        ///<summary>
        ///Too many requests.
        ///</summary>
        TOO_MANY_REQUESTS,
        ///<summary>
        ///Customer doesn't exist.
        ///</summary>
        CUSTOMER_DOES_NOT_EXIST,
        ///<summary>
        ///Target shop cannot be the same as the source.
        ///</summary>
        SAME_SHOP,
        ///<summary>
        ///Must be targeted to another shop in the same organization.
        ///</summary>
        INVALID_ORGANIZATION_SHOP,
    }

    ///<summary>
    ///Return type for `customerPaymentMethodGetUpdateUrl` mutation.
    ///</summary>
    public class CustomerPaymentMethodGetUpdateUrlPayload : GraphQLObject<CustomerPaymentMethodGetUpdateUrlPayload>
    {
        ///<summary>
        ///The URL to redirect the customer to update the payment method.
        ///</summary>
        public string? updatePaymentMethodUrl { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerPaymentMethodGetUpdateUrlUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`.
    ///</summary>
    public class CustomerPaymentMethodGetUpdateUrlUserError : GraphQLObject<CustomerPaymentMethodGetUpdateUrlUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerPaymentMethodGetUpdateUrlUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerPaymentMethodGetUpdateUrlUserError`.
    ///</summary>
    public enum CustomerPaymentMethodGetUpdateUrlUserErrorCode
    {
        ///<summary>
        ///Payment method doesn't exist.
        ///</summary>
        PAYMENT_METHOD_DOES_NOT_EXIST,
        ///<summary>
        ///Invalid payment instrument.
        ///</summary>
        INVALID_INSTRUMENT,
        ///<summary>
        ///Too many requests.
        ///</summary>
        TOO_MANY_REQUESTS,
        ///<summary>
        ///Customer doesn't exist.
        ///</summary>
        CUSTOMER_DOES_NOT_EXIST,
    }

    ///<summary>
    ///Return type for `customerPaymentMethodPaypalBillingAgreementCreate` mutation.
    ///</summary>
    public class CustomerPaymentMethodPaypalBillingAgreementCreatePayload : GraphQLObject<CustomerPaymentMethodPaypalBillingAgreementCreatePayload>
    {
        ///<summary>
        ///The customer payment method.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerPaymentMethodUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `customerPaymentMethodPaypalBillingAgreementUpdate` mutation.
    ///</summary>
    public class CustomerPaymentMethodPaypalBillingAgreementUpdatePayload : GraphQLObject<CustomerPaymentMethodPaypalBillingAgreementUpdatePayload>
    {
        ///<summary>
        ///The customer payment method.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerPaymentMethodUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `customerPaymentMethodRemoteCreate` mutation.
    ///</summary>
    public class CustomerPaymentMethodRemoteCreatePayload : GraphQLObject<CustomerPaymentMethodRemoteCreatePayload>
    {
        ///<summary>
        ///The customer payment method.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerPaymentMethodRemoteUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `customerPaymentMethodRemoteCreditCardCreate` mutation.
    ///</summary>
    public class CustomerPaymentMethodRemoteCreditCardCreatePayload : GraphQLObject<CustomerPaymentMethodRemoteCreditCardCreatePayload>
    {
        ///<summary>
        ///The customer payment method.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerPaymentMethodUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents an error in the input of a mutation.
    ///</summary>
    public class CustomerPaymentMethodRemoteUserError : GraphQLObject<CustomerPaymentMethodRemoteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerPaymentMethodRemoteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerPaymentMethodRemoteUserError`.
    ///</summary>
    public enum CustomerPaymentMethodRemoteUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///Exactly one remote reference is required.
        ///</summary>
        EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED,
        ///<summary>
        ///Authorize.net is not enabled for subscriptions.
        ///</summary>
        AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS,
        ///<summary>
        ///Braintree is not enabled for subscriptions.
        ///</summary>
        BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS,
    }

    ///<summary>
    ///The revocation reason types for a customer payment method.
    ///</summary>
    public enum CustomerPaymentMethodRevocationReason
    {
        ///<summary>
        ///The Authorize.net payment gateway is not enabled.
        ///</summary>
        AUTHORIZE_NET_GATEWAY_NOT_ENABLED,
        ///<summary>
        ///Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked.
        ///</summary>
        AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD,
        ///<summary>
        ///The credit card failed to update.
        ///</summary>
        FAILED_TO_UPDATE_CREDIT_CARD,
        ///<summary>
        ///Failed to contact the Stripe API.
        ///</summary>
        STRIPE_API_AUTHENTICATION_ERROR,
        ///<summary>
        ///Invalid request. Failed to retrieve payment method from Stripe.
        ///</summary>
        STRIPE_API_INVALID_REQUEST_ERROR,
        ///<summary>
        ///The Stripe payment gateway is not enabled.
        ///</summary>
        STRIPE_GATEWAY_NOT_ENABLED,
        ///<summary>
        ///Stripe did not return any payment methods. Make sure that the correct Stripe account is linked.
        ///</summary>
        STRIPE_RETURNED_NO_PAYMENT_METHOD,
        ///<summary>
        ///The Stripe payment method type should be card.
        ///</summary>
        STRIPE_PAYMENT_METHOD_NOT_CARD,
        ///<summary>
        ///Failed to contact Braintree API.
        ///</summary>
        BRAINTREE_API_AUTHENTICATION_ERROR,
        ///<summary>
        ///The Braintree payment gateway is not enabled.
        ///</summary>
        BRAINTREE_GATEWAY_NOT_ENABLED,
        ///<summary>
        ///Braintree returned no payment methods. Make sure the correct Braintree account is linked.
        ///</summary>
        BRAINTREE_RETURNED_NO_PAYMENT_METHOD,
        ///<summary>
        ///The Braintree payment method type should be a credit card or Apple Pay card.
        ///</summary>
        BRAINTREE_PAYMENT_METHOD_NOT_CARD,
        ///<summary>
        ///The payment method was manually revoked.
        ///</summary>
        MANUALLY_REVOKED,
        ///<summary>
        ///The payment method was replaced with an existing payment method. The associated contracts have been migrated to the other payment method.
        ///</summary>
        MERGED,
    }

    ///<summary>
    ///Return type for `customerPaymentMethodRevoke` mutation.
    ///</summary>
    public class CustomerPaymentMethodRevokePayload : GraphQLObject<CustomerPaymentMethodRevokePayload>
    {
        ///<summary>
        ///The ID of the revoked customer payment method.
        ///</summary>
        public string? revokedCustomerPaymentMethodId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `customerPaymentMethodSendUpdateEmail` mutation.
    ///</summary>
    public class CustomerPaymentMethodSendUpdateEmailPayload : GraphQLObject<CustomerPaymentMethodSendUpdateEmailPayload>
    {
        ///<summary>
        ///The customer to whom an update payment method email was sent.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents an error in the input of a mutation.
    ///</summary>
    public class CustomerPaymentMethodUserError : GraphQLObject<CustomerPaymentMethodUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerPaymentMethodUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerPaymentMethodUserError`.
    ///</summary>
    public enum CustomerPaymentMethodUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
    }

    ///<summary>
    ///Represents a PayPal instrument for customer payment method.
    ///</summary>
    public class CustomerPaypalBillingAgreement : GraphQLObject<CustomerPaypalBillingAgreement>, ICustomerPaymentInstrument
    {
        ///<summary>
        ///The billing address of this payment method.
        ///</summary>
        public CustomerPaymentInstrumentBillingAddress? billingAddress { get; set; }
        ///<summary>
        ///Whether the PayPal billing agreement is inactive.
        ///</summary>
        public bool? inactive { get; set; }
        ///<summary>
        ///Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
        ///</summary>
        public bool? isRevocable { get; set; }
        ///<summary>
        ///The customers's PayPal account email address.
        ///</summary>
        public string? paypalAccountEmail { get; set; }
    }

    ///<summary>
    ///A phone number.
    ///</summary>
    public class CustomerPhoneNumber : GraphQLObject<CustomerPhoneNumber>
    {
        ///<summary>
        ///Whether the customer has subscribed to SMS marketing material.
        ///</summary>
        public CustomerSmsMarketingState? marketingState { get; set; }
        ///<summary>
        ///A customer's phone number.
        ///</summary>
        public string? phoneNumber { get; set; }
    }

    ///<summary>
    ///The valid tiers for the predicted spend of a customer with a shop.
    ///</summary>
    public enum CustomerPredictedSpendTier
    {
        ///<summary>
        ///The customer's spending is predicted to be in the top spending range for the shop in the following year.
        ///</summary>
        HIGH,
        ///<summary>
        ///The customer's spending is predicted to be in the normal spending range for the shop in the following year.
        ///</summary>
        MEDIUM,
        ///<summary>
        ///The customer's spending is predicted to be zero, or in the lowest spending range for the shop in the following year.
        ///</summary>
        LOW,
    }

    ///<summary>
    ///The possible product subscription states for a customer, as defined by the customer's subscription contracts.
    ///</summary>
    public enum CustomerProductSubscriberStatus
    {
        ///<summary>
        ///The customer has at least one active subscription contract.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The customer's last subscription contract was cancelled and there are no other active or paused
        ///subscription contracts.
        ///</summary>
        CANCELLED,
        ///<summary>
        ///The customer's last subscription contract expired and there are no other active or paused
        ///subscription contracts.
        ///</summary>
        EXPIRED,
        ///<summary>
        ///The customer's last subscription contract failed and there are no other active or paused
        ///subscription contracts.
        ///</summary>
        FAILED,
        ///<summary>
        ///The customer has never had a subscription contract.
        ///</summary>
        NEVER_SUBSCRIBED,
        ///<summary>
        ///The customer has at least one paused subscription contract and there are no other active
        ///subscription contracts.
        ///</summary>
        PAUSED,
    }

    ///<summary>
    ///Return type for `customerRemoveTaxExemptions` mutation.
    ///</summary>
    public class CustomerRemoveTaxExemptionsPayload : GraphQLObject<CustomerRemoveTaxExemptionsPayload>
    {
        ///<summary>
        ///The updated customer.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `customerReplaceTaxExemptions` mutation.
    ///</summary>
    public class CustomerReplaceTaxExemptionsPayload : GraphQLObject<CustomerReplaceTaxExemptionsPayload>
    {
        ///<summary>
        ///The updated customer.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerRequestDataErasureUserError`.
    ///</summary>
    public enum CustomerRequestDataErasureErrorCode
    {
        ///<summary>
        ///Customer does not exist.
        ///</summary>
        DOES_NOT_EXIST,
        ///<summary>
        ///Failed to request customer data erasure.
        ///</summary>
        FAILED_TO_REQUEST,
    }

    ///<summary>
    ///Return type for `customerRequestDataErasure` mutation.
    ///</summary>
    public class CustomerRequestDataErasurePayload : GraphQLObject<CustomerRequestDataErasurePayload>
    {
        ///<summary>
        ///The ID of the customer that will be erased.
        ///</summary>
        public string? customerId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerRequestDataErasureUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs when requesting a customer data erasure.
    ///</summary>
    public class CustomerRequestDataErasureUserError : GraphQLObject<CustomerRequestDataErasureUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerRequestDataErasureErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the CustomerSavedSearch query.
    ///</summary>
    public enum CustomerSavedSearchSortKeys
    {
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The member of a segment.
    ///</summary>
    public class CustomerSegmentMember : GraphQLObject<CustomerSegmentMember>, IHasMetafields
    {
        ///<summary>
        ///The total amount of money that the member has spent on orders.
        ///</summary>
        public MoneyV2? amountSpent { get; set; }
        ///<summary>
        ///The member's default address.
        ///</summary>
        public MailingAddress? defaultAddress { get; set; }
        ///<summary>
        ///The member's default email address.
        ///</summary>
        public CustomerEmailAddress? defaultEmailAddress { get; set; }
        ///<summary>
        ///The member's default phone number.
        ///</summary>
        public CustomerPhoneNumber? defaultPhoneNumber { get; set; }
        ///<summary>
        ///The full name of the member, which is based on the values of the `first_name` and `last_name` fields. If the member's first name and last name aren't available, then the customer's email address is used. If the customer's email address isn't available, then the customer's phone number is used.
        ///</summary>
        public string? displayName { get; set; }
        ///<summary>
        ///The member's first name.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///The member’s ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The member's last name.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The ID of the member's most recent order.
        ///</summary>
        public string? lastOrderId { get; set; }
        ///<summary>
        ///Whether the customer can be merged with another customer.
        ///</summary>
        public CustomerMergeable? mergeable { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///A note about the member.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The total number of orders that the member has made.
        ///</summary>
        public ulong? numberOfOrders { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
    }

    ///<summary>
    ///The connection type for the `CustomerSegmentMembers` object.
    ///</summary>
    public class CustomerSegmentMemberConnection : GraphQLObject<CustomerSegmentMemberConnection>, IConnectionWithEdges<CustomerSegmentMemberEdge, CustomerSegmentMember>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CustomerSegmentMemberEdge>? edges { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
        ///<summary>
        ///The statistics for a given segment.
        ///</summary>
        public SegmentStatistics? statistics { get; set; }
        ///<summary>
        ///The total number of members in a given segment.
        ///</summary>
        public int? totalCount { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.
    ///</summary>
    public class CustomerSegmentMemberEdge : GraphQLObject<CustomerSegmentMemberEdge>, IEdge<CustomerSegmentMember>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CustomerSegmentMemberEdge.
        ///</summary>
        public CustomerSegmentMember? node { get; set; }
    }

    ///<summary>
    ///A job to determine a list of members, such as customers, that are associated with an individual segment.
    ///</summary>
    public class CustomerSegmentMembersQuery : GraphQLObject<CustomerSegmentMembersQuery>, IJobResult, INode
    {
        ///<summary>
        ///The current total number of members in a given segment.
        ///</summary>
        public int? currentCount { get; set; }
        ///<summary>
        ///This indicates if the job is still queued or has been run.
        ///</summary>
        public bool? done { get; set; }
        ///<summary>
        ///A globally-unique ID that's returned when running an asynchronous mutation.
        ///</summary>
        public string? id { get; set; }
    }

    ///<summary>
    ///Return type for `customerSegmentMembersQueryCreate` mutation.
    ///</summary>
    public class CustomerSegmentMembersQueryCreatePayload : GraphQLObject<CustomerSegmentMembersQueryCreatePayload>
    {
        ///<summary>
        ///The newly created customer segment members query.
        ///</summary>
        public CustomerSegmentMembersQuery? customerSegmentMembersQuery { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerSegmentMembersQueryUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a customer segment members query custom error.
    ///</summary>
    public class CustomerSegmentMembersQueryUserError : GraphQLObject<CustomerSegmentMembersQueryUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerSegmentMembersQueryUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerSegmentMembersQueryUserError`.
    ///</summary>
    public enum CustomerSegmentMembersQueryUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///Represents a Shop Pay card instrument for customer payment method.
    ///</summary>
    public class CustomerShopPayAgreement : GraphQLObject<CustomerShopPayAgreement>, ICustomerPaymentInstrument
    {
        ///<summary>
        ///The billing address of the card.
        ///</summary>
        public CustomerCreditCardBillingAddress? billingAddress { get; set; }
        ///<summary>
        ///Whether the card is about to expire.
        ///</summary>
        public bool? expiresSoon { get; set; }
        ///<summary>
        ///The expiry month of the card.
        ///</summary>
        public int? expiryMonth { get; set; }
        ///<summary>
        ///The expiry year of the card.
        ///</summary>
        public int? expiryYear { get; set; }
        ///<summary>
        ///Whether the Shop Pay billing agreement is inactive.
        ///</summary>
        public bool? inactive { get; set; }
        ///<summary>
        ///The payment method can be revoked if there are no active subscription contracts.
        ///</summary>
        public bool? isRevocable { get; set; }
        ///<summary>
        ///The last 4 digits of the card.
        ///</summary>
        public string? lastDigits { get; set; }
        ///<summary>
        ///The masked card number with only the last 4 digits displayed.
        ///</summary>
        public string? maskedNumber { get; set; }
        ///<summary>
        ///The name of the card holder.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///An error that occurs during execution of an SMS marketing consent mutation.
    ///</summary>
    public class CustomerSmsMarketingConsentError : GraphQLObject<CustomerSmsMarketingConsentError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public CustomerSmsMarketingConsentErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `CustomerSmsMarketingConsentError`.
    ///</summary>
    public enum CustomerSmsMarketingConsentErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///Unexpected internal error happened.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Missing a required argument.
        ///</summary>
        MISSING_ARGUMENT,
    }

    ///<summary>
    ///The record of when a customer consented to receive marketing material by SMS.
    ///
    ///The customer's consent state reflects the record with the most recent date when consent was updated.
    ///</summary>
    public class CustomerSmsMarketingConsentState : GraphQLObject<CustomerSmsMarketingConsentState>
    {
        ///<summary>
        ///The source from which the SMS marketing information for the customer was collected.
        ///</summary>
        public CustomerConsentCollectedFrom? consentCollectedFrom { get; set; }
        ///<summary>
        ///The date and time when the customer consented to receive marketing material by SMS.
        ///If no date is provided, then the date and time when the consent information was sent is used.
        ///</summary>
        public DateTime? consentUpdatedAt { get; set; }
        ///<summary>
        ///The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
        ///</summary>
        public CustomerMarketingOptInLevel? marketingOptInLevel { get; set; }
        ///<summary>
        ///The current SMS marketing state for the customer.
        ///</summary>
        public CustomerSmsMarketingState? marketingState { get; set; }
    }

    ///<summary>
    ///Return type for `customerSmsMarketingConsentUpdate` mutation.
    ///</summary>
    public class CustomerSmsMarketingConsentUpdatePayload : GraphQLObject<CustomerSmsMarketingConsentUpdatePayload>
    {
        ///<summary>
        ///The updated customer.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<CustomerSmsMarketingConsentError>? userErrors { get; set; }
    }

    ///<summary>
    ///The valid SMS marketing states for a customer’s phone number.
    ///</summary>
    public enum CustomerSmsMarketingState
    {
        ///<summary>
        ///The customer hasn't subscribed to SMS marketing.
        ///</summary>
        NOT_SUBSCRIBED,
        ///<summary>
        ///The customer is in the process of subscribing to SMS marketing.
        ///</summary>
        PENDING,
        ///<summary>
        ///The customer is subscribed to SMS marketing.
        ///</summary>
        SUBSCRIBED,
        ///<summary>
        ///The customer isn't currently subscribed to SMS marketing but was previously subscribed.
        ///</summary>
        UNSUBSCRIBED,
        ///<summary>
        ///The customer's personal data is erased. This value is internally-set and read-only.
        ///</summary>
        REDACTED,
    }

    ///<summary>
    ///The set of valid sort keys for the Customer query.
    ///</summary>
    public enum CustomerSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `location` value.
        ///</summary>
        LOCATION,
        ///<summary>
        ///Sort by the `orders_count` value.
        ///</summary>
        ORDERS_COUNT,
        ///<summary>
        ///Sort by the `last_order_date` value.
        ///</summary>
        LAST_ORDER_DATE,
        ///<summary>
        ///Sort by the `total_spent` value.
        ///</summary>
        TOTAL_SPENT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The valid values for the state of a customer's account with a shop.
    ///</summary>
    public enum CustomerState
    {
        ///<summary>
        ///The customer declined the email invite to create an account.
        ///</summary>
        DECLINED,
        ///<summary>
        ///The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
        ///</summary>
        DISABLED,
        ///<summary>
        ///The customer has created an account.
        ///</summary>
        ENABLED,
        ///<summary>
        ///The customer has received an email invite to create an account.
        ///</summary>
        INVITED,
    }

    ///<summary>
    ///A customer's computed statistics.
    ///</summary>
    public class CustomerStatistics : GraphQLObject<CustomerStatistics>
    {
        ///<summary>
        ///The predicted spend tier of a customer with a shop.
        ///</summary>
        public CustomerPredictedSpendTier? predictedSpendTier { get; set; }
    }

    ///<summary>
    ///Return type for `customerUpdateDefaultAddress` mutation.
    ///</summary>
    public class CustomerUpdateDefaultAddressPayload : GraphQLObject<CustomerUpdateDefaultAddressPayload>
    {
        ///<summary>
        ///The customer whose address was updated.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `customerUpdate` mutation.
    ///</summary>
    public class CustomerUpdatePayload : GraphQLObject<CustomerUpdatePayload>
    {
        ///<summary>
        ///The updated customer.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.
    ///</summary>
    public class CustomerVisit : GraphQLObject<CustomerVisit>, ICustomerMoment, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///URL of the first page the customer landed on for the session.
        ///</summary>
        public string? landingPage { get; set; }
        ///<summary>
        ///Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
        ///</summary>
        public string? landingPageHtml { get; set; }
        ///<summary>
        ///Represent actions taken by an app, on behalf of a merchant,
        ///to market Shopify resources such as products, collections, and discounts.
        ///</summary>
        public MarketingEvent? marketingEvent { get; set; }
        ///<summary>
        ///The date and time when the customer's session occurred.
        ///</summary>
        public DateTime? occurredAt { get; set; }
        ///<summary>
        ///Marketing referral code from the link that the customer clicked to visit the store.
        ///Supports the following URL attributes: _ref_, _source_, or _r_.
        ///For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
        ///</summary>
        public string? referralCode { get; set; }
        ///<summary>
        ///Referral information with URLs linked in HTML.
        ///</summary>
        public string? referralInfoHtml { get; set; }
        ///<summary>
        ///Webpage where the customer clicked a link that sent them to the online store.
        ///For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
        ///</summary>
        public string? referrerUrl { get; set; }
        ///<summary>
        ///Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
        ///a website domain, QR code, or unknown.
        ///</summary>
        public string? source { get; set; }
        ///<summary>
        ///Describes the source explicitly for first or last session.
        ///</summary>
        public string? sourceDescription { get; set; }
        ///<summary>
        ///Type of marketing tactic.
        ///</summary>
        public MarketingTactic? sourceType { get; set; }
        ///<summary>
        ///A set of UTM parameters gathered from the URL parameters of the referrer.
        ///</summary>
        public UTMParameters? utmParameters { get; set; }
    }

    ///<summary>
    ///This type returns the information about the product and product variant from a customer visit.
    ///</summary>
    public class CustomerVisitProductInfo : GraphQLObject<CustomerVisitProductInfo>
    {
        ///<summary>
        ///The product information. If `null`, then the product was deleted from the store.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The quantity of the product that the customer requested.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The product variant information, if the product variant exists.
        ///</summary>
        public ProductVariant? variant { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple CustomerVisitProductInfos.
    ///</summary>
    public class CustomerVisitProductInfoConnection : GraphQLObject<CustomerVisitProductInfoConnection>, IConnectionWithNodesAndEdges<CustomerVisitProductInfoEdge, CustomerVisitProductInfo>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<CustomerVisitProductInfoEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in CustomerVisitProductInfoEdge.
        ///</summary>
        public IEnumerable<CustomerVisitProductInfo>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.
    ///</summary>
    public class CustomerVisitProductInfoEdge : GraphQLObject<CustomerVisitProductInfoEdge>, IEdge<CustomerVisitProductInfo>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of CustomerVisitProductInfoEdge.
        ///</summary>
        public CustomerVisitProductInfo? node { get; set; }
    }

    ///<summary>
    ///Days of the week from Monday to Sunday.
    ///</summary>
    public enum DayOfTheWeek
    {
        ///<summary>
        ///Monday.
        ///</summary>
        MONDAY,
        ///<summary>
        ///Tuesday.
        ///</summary>
        TUESDAY,
        ///<summary>
        ///Wednesday.
        ///</summary>
        WEDNESDAY,
        ///<summary>
        ///Thursday.
        ///</summary>
        THURSDAY,
        ///<summary>
        ///Friday.
        ///</summary>
        FRIDAY,
        ///<summary>
        ///Saturday.
        ///</summary>
        SATURDAY,
        ///<summary>
        ///Sunday.
        ///</summary>
        SUNDAY,
    }

    ///<summary>
    ///A token that delegates a set of scopes from the original permission.
    ///
    ///To learn more about creating delegate access tokens, refer to
    ///[Delegate OAuth access tokens to subsystems]
    ///(https://shopify.dev/apps/auth/oauth/delegate-access-tokens).
    ///</summary>
    public class DelegateAccessToken : GraphQLObject<DelegateAccessToken>
    {
        ///<summary>
        ///The list of permissions associated with the token.
        ///</summary>
        public IEnumerable<string>? accessScopes { get; set; }
        ///<summary>
        ///The issued delegate access token.
        ///</summary>
        public string? accessToken { get; set; }
        ///<summary>
        ///The date and time when the delegate access token was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
    }

    ///<summary>
    ///Return type for `delegateAccessTokenCreate` mutation.
    ///</summary>
    public class DelegateAccessTokenCreatePayload : GraphQLObject<DelegateAccessTokenCreatePayload>
    {
        ///<summary>
        ///The delegate access token.
        ///</summary>
        public DelegateAccessToken? delegateAccessToken { get; set; }
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DelegateAccessTokenCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `DelegateAccessTokenCreate`.
    ///</summary>
    public class DelegateAccessTokenCreateUserError : GraphQLObject<DelegateAccessTokenCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public DelegateAccessTokenCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `DelegateAccessTokenCreateUserError`.
    ///</summary>
    public enum DelegateAccessTokenCreateUserErrorCode
    {
        ///<summary>
        ///The access scope can't be empty.
        ///</summary>
        EMPTY_ACCESS_SCOPE,
        ///<summary>
        ///The parent access token can't be a delegate token.
        ///</summary>
        DELEGATE_ACCESS_TOKEN,
        ///<summary>
        ///The expires_in value must be greater than 0.
        ///</summary>
        NEGATIVE_EXPIRES_IN,
        ///<summary>
        ///The delegate token can't expire after the parent token.
        ///</summary>
        EXPIRES_AFTER_PARENT,
        ///<summary>
        ///The parent access token can't have a refresh token.
        ///</summary>
        REFRESH_TOKEN,
        ///<summary>
        ///Persistence failed.
        ///</summary>
        PERSISTENCE_FAILED,
        ///<summary>
        ///Unknown scopes.
        ///</summary>
        UNKNOWN_SCOPES,
    }

    ///<summary>
    ///Return type for `delegateAccessTokenDestroy` mutation.
    ///</summary>
    public class DelegateAccessTokenDestroyPayload : GraphQLObject<DelegateAccessTokenDestroyPayload>
    {
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The status of the delegate access token destroy operation. Returns true if successful.
        ///</summary>
        public bool? status { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DelegateAccessTokenDestroyUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `DelegateAccessTokenDestroy`.
    ///</summary>
    public class DelegateAccessTokenDestroyUserError : GraphQLObject<DelegateAccessTokenDestroyUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public DelegateAccessTokenDestroyUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `DelegateAccessTokenDestroyUserError`.
    ///</summary>
    public enum DelegateAccessTokenDestroyUserErrorCode
    {
        ///<summary>
        ///Persistence failed.
        ///</summary>
        PERSISTENCE_FAILED,
        ///<summary>
        ///Access token not found.
        ///</summary>
        ACCESS_TOKEN_NOT_FOUND,
        ///<summary>
        ///Cannot delete parent access token.
        ///</summary>
        CAN_ONLY_DELETE_DELEGATE_TOKENS,
        ///<summary>
        ///Access denied.
        ///</summary>
        ACCESS_DENIED,
    }

    ///<summary>
    ///Deletion events chronicle the destruction of resources (e.g. products and collections).
    ///Once deleted, the deletion event is the only trace of the original's existence,
    ///as the resource itself has been removed and can no longer be accessed.
    ///</summary>
    public class DeletionEvent : GraphQLObject<DeletionEvent>
    {
        ///<summary>
        ///The date and time when the deletion event for the related resource was generated.
        ///</summary>
        public DateTime? occurredAt { get; set; }
        ///<summary>
        ///The ID of the resource that was deleted.
        ///</summary>
        public string? subjectId { get; set; }
        ///<summary>
        ///The type of resource that was deleted.
        ///</summary>
        public DeletionEventSubjectType? subjectType { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DeletionEvents.
    ///</summary>
    public class DeletionEventConnection : GraphQLObject<DeletionEventConnection>, IConnectionWithNodesAndEdges<DeletionEventEdge, DeletionEvent>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DeletionEventEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DeletionEventEdge.
        ///</summary>
        public IEnumerable<DeletionEvent>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DeletionEvent and a cursor during pagination.
    ///</summary>
    public class DeletionEventEdge : GraphQLObject<DeletionEventEdge>, IEdge<DeletionEvent>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DeletionEventEdge.
        ///</summary>
        public DeletionEvent? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the DeletionEvent query.
    ///</summary>
    public enum DeletionEventSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The supported subject types of deletion events.
    ///</summary>
    public enum DeletionEventSubjectType
    {
        COLLECTION,
        PRODUCT,
    }

    ///<summary>
    ///A shipping service and a list of countries that the service is available for.
    ///</summary>
    public class DeliveryAvailableService : GraphQLObject<DeliveryAvailableService>
    {
        ///<summary>
        ///The countries the service provider ships to.
        ///</summary>
        public DeliveryCountryCodesOrRestOfWorld? countries { get; set; }
        ///<summary>
        ///The name of the service.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///Represents a branded promise presented to buyers.
    ///</summary>
    public class DeliveryBrandedPromise : GraphQLObject<DeliveryBrandedPromise>
    {
        ///<summary>
        ///The handle of the branded promise.  For example: `shop_promise`.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///The name of the branded promise.  For example: `Shop Promise`.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///A shipping service provider or a carrier account.
    ///</summary>
    public class DeliveryCarrierService : GraphQLObject<DeliveryCarrierService>, INode
    {
        ///<summary>
        ///The list of services offered for given destinations.
        ///</summary>
        public IEnumerable<DeliveryAvailableService>? availableServicesForCountries { get; set; }
        ///<summary>
        ///The properly formatted name of the shipping service provider, ready to display.
        ///</summary>
        public string? formattedName { get; set; }
        ///<summary>
        ///The logo of the service provider.
        ///</summary>
        public Image? icon { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the shipping service provider.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///A carrier service and the associated list of shop locations.
    ///</summary>
    public class DeliveryCarrierServiceAndLocations : GraphQLObject<DeliveryCarrierServiceAndLocations>
    {
        ///<summary>
        ///The carrier service.
        ///</summary>
        public DeliveryCarrierService? carrierService { get; set; }
        ///<summary>
        ///The list of locations that support this carrier service.
        ///</summary>
        public IEnumerable<Location>? locations { get; set; }
    }

    ///<summary>
    ///A condition that must pass for a delivery method definition to be applied to an order.
    ///</summary>
    public class DeliveryCondition : GraphQLObject<DeliveryCondition>, INode
    {
        ///<summary>
        ///The value (weight or price) that the condition field is compared to.
        ///</summary>
        public IDeliveryConditionCriteria? conditionCriteria { get; set; }
        ///<summary>
        ///The field to compare the criterion value against, using the operator.
        ///</summary>
        public DeliveryConditionField? field { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The operator to compare the field and criterion value.
        ///</summary>
        public DeliveryConditionOperator? @operator { get; set; }
    }

    ///<summary>
    ///The value (weight or price) that the condition field is compared to.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(MoneyV2), typeDiscriminator: "MoneyV2")]
    [JsonDerivedType(typeof(Weight), typeDiscriminator: "Weight")]
    public interface IDeliveryConditionCriteria : IGraphQLObject
    {
        public MoneyV2? AsMoneyV2() => this as MoneyV2;
        public Weight? AsWeight() => this as Weight;
    }

    ///<summary>
    ///The field type that the condition will be applied to.
    ///</summary>
    public enum DeliveryConditionField
    {
        ///<summary>
        ///The condition will check against the total weight of the order.
        ///</summary>
        TOTAL_WEIGHT,
        ///<summary>
        ///The condition will check against the total price of the order.
        ///</summary>
        TOTAL_PRICE,
    }

    ///<summary>
    ///The operator to use to determine if the condition passes.
    ///</summary>
    public enum DeliveryConditionOperator
    {
        ///<summary>
        ///The condition will check whether the field is greater than or equal to the criterion.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The condition will check if the field is less than or equal to the criterion.
        ///</summary>
        LESS_THAN_OR_EQUAL_TO,
    }

    ///<summary>
    ///A country that is used to define a shipping zone.
    ///</summary>
    public class DeliveryCountry : GraphQLObject<DeliveryCountry>, INode
    {
        ///<summary>
        ///A two-letter country code in ISO 3166-1 alpha-2 standard.
        ///It also includes a flag indicating whether the country should be
        ///a part of the 'Rest Of World' shipping zone.
        ///</summary>
        public DeliveryCountryCodeOrRestOfWorld? code { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The full name of the country.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The list of regions associated with this country.
        ///</summary>
        public IEnumerable<DeliveryProvince>? provinces { get; set; }
        ///<summary>
        ///The translated name of the country. The translation returned is based on the system's locale.
        ///</summary>
        public string? translatedName { get; set; }
    }

    ///<summary>
    ///The country details and the associated shipping zone.
    ///</summary>
    public class DeliveryCountryAndZone : GraphQLObject<DeliveryCountryAndZone>
    {
        ///<summary>
        ///The country details.
        ///</summary>
        public DeliveryCountry? country { get; set; }
        ///<summary>
        ///The name of the shipping zone.
        ///</summary>
        public string? zone { get; set; }
    }

    ///<summary>
    ///The country code and whether the country is a part of the 'Rest Of World' shipping zone.
    ///</summary>
    public class DeliveryCountryCodeOrRestOfWorld : GraphQLObject<DeliveryCountryCodeOrRestOfWorld>
    {
        ///<summary>
        ///The country code in the ISO 3166-1 alpha-2 format.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///Whether the country is a part of the 'Rest of World' shipping zone.
        ///</summary>
        public bool? restOfWorld { get; set; }
    }

    ///<summary>
    ///The list of country codes and information whether the countries
    ///are a part of the 'Rest Of World' shipping zone.
    ///</summary>
    public class DeliveryCountryCodesOrRestOfWorld : GraphQLObject<DeliveryCountryCodesOrRestOfWorld>
    {
        ///<summary>
        ///List of applicable country codes in the ISO 3166-1 alpha-2 format.
        ///</summary>
        public IEnumerable<CountryCode>? countryCodes { get; set; }
        ///<summary>
        ///Whether the countries are a part of the 'Rest of World' shipping zone.
        ///</summary>
        public bool? restOfWorld { get; set; }
    }

    ///<summary>
    ///A delivery customization.
    ///</summary>
    public class DeliveryCustomization : GraphQLObject<DeliveryCustomization>, IHasMetafieldDefinitions, IHasMetafields, INode, IMetafieldReferencer
    {
        ///<summary>
        ///The enabled status of the delivery customization.
        ///</summary>
        public bool? enabled { get; set; }
        ///<summary>
        ///The error history on the most recent version of the delivery customization.
        ///</summary>
        public FunctionsErrorHistory? errorHistory { get; set; }
        ///<summary>
        ///The ID of the Shopify Function implementing the delivery customization.
        ///</summary>
        public string? functionId { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The Shopify Function implementing the delivery customization.
        ///</summary>
        public ShopifyFunction? shopifyFunction { get; set; }
        ///<summary>
        ///The title of the delivery customization.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///Return type for `deliveryCustomizationActivation` mutation.
    ///</summary>
    public class DeliveryCustomizationActivationPayload : GraphQLObject<DeliveryCustomizationActivationPayload>
    {
        ///<summary>
        ///The IDs of the updated delivery customizations.
        ///</summary>
        public IEnumerable<string>? ids { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DeliveryCustomizationError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DeliveryCustomizations.
    ///</summary>
    public class DeliveryCustomizationConnection : GraphQLObject<DeliveryCustomizationConnection>, IConnectionWithNodesAndEdges<DeliveryCustomizationEdge, DeliveryCustomization>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DeliveryCustomizationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DeliveryCustomizationEdge.
        ///</summary>
        public IEnumerable<DeliveryCustomization>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `deliveryCustomizationCreate` mutation.
    ///</summary>
    public class DeliveryCustomizationCreatePayload : GraphQLObject<DeliveryCustomizationCreatePayload>
    {
        ///<summary>
        ///Returns the created delivery customization.
        ///</summary>
        public DeliveryCustomization? deliveryCustomization { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DeliveryCustomizationError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `deliveryCustomizationDelete` mutation.
    ///</summary>
    public class DeliveryCustomizationDeletePayload : GraphQLObject<DeliveryCustomizationDeletePayload>
    {
        ///<summary>
        ///Returns the deleted delivery customization ID.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DeliveryCustomizationError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DeliveryCustomization and a cursor during pagination.
    ///</summary>
    public class DeliveryCustomizationEdge : GraphQLObject<DeliveryCustomizationEdge>, IEdge<DeliveryCustomization>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DeliveryCustomizationEdge.
        ///</summary>
        public DeliveryCustomization? node { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of a delivery customization mutation.
    ///</summary>
    public class DeliveryCustomizationError : GraphQLObject<DeliveryCustomizationError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public DeliveryCustomizationErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `DeliveryCustomizationError`.
    ///</summary>
    public enum DeliveryCustomizationErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///Function not found.
        ///</summary>
        FUNCTION_NOT_FOUND,
        ///<summary>
        ///Delivery customization not found.
        ///</summary>
        DELIVERY_CUSTOMIZATION_NOT_FOUND,
        ///<summary>
        ///Shop must be on a Shopify Plus plan to activate delivery customizations from a custom app.
        ///</summary>
        DELIVERY_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE,
        ///<summary>
        ///Unauthorized app scope.
        ///</summary>
        UNAUTHORIZED_APP_SCOPE,
        ///<summary>
        ///Maximum delivery customizations are already enabled.
        ///</summary>
        MAXIMUM_ACTIVE_DELIVERY_CUSTOMIZATIONS,
        ///<summary>
        ///Shop must be on a Shopify Plus plan to activate functions from a custom app.
        ///</summary>
        CUSTOM_APP_FUNCTION_NOT_ELIGIBLE,
        ///<summary>
        ///Function does not implement the required interface for this delivery customization.
        ///</summary>
        FUNCTION_DOES_NOT_IMPLEMENT,
        ///<summary>
        ///Function is pending deletion.
        ///</summary>
        FUNCTION_PENDING_DELETION,
        ///<summary>
        ///Function ID cannot be changed.
        ///</summary>
        FUNCTION_ID_CANNOT_BE_CHANGED,
        ///<summary>
        ///Required input field must be present.
        ///</summary>
        REQUIRED_INPUT_FIELD,
        ///<summary>
        ///Could not create or update metafields.
        ///</summary>
        INVALID_METAFIELDS,
    }

    ///<summary>
    ///Return type for `deliveryCustomizationUpdate` mutation.
    ///</summary>
    public class DeliveryCustomizationUpdatePayload : GraphQLObject<DeliveryCustomizationUpdatePayload>
    {
        ///<summary>
        ///Returns the updated delivery customization.
        ///</summary>
        public DeliveryCustomization? deliveryCustomization { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DeliveryCustomizationError>? userErrors { get; set; }
    }

    ///<summary>
    ///Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
    ///</summary>
    public class DeliveryLegacyModeBlocked : GraphQLObject<DeliveryLegacyModeBlocked>
    {
        ///<summary>
        ///Whether the shop can convert to full multi-location delivery profiles mode.
        ///</summary>
        public bool? blocked { get; set; }
        ///<summary>
        ///The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
        ///</summary>
        public IEnumerable<DeliveryLegacyModeBlockedReason>? reasons { get; set; }
    }

    ///<summary>
    ///Reasons the shop is blocked from converting to full multi-location delivery profiles mode.
    ///</summary>
    public enum DeliveryLegacyModeBlockedReason
    {
        ///<summary>
        ///Multi-Location mode is disabled. The shop can't convert to full multi-location delivery profiles mode.
        ///</summary>
        [Obsolete("All shops are now using multi-location mode.")]
        MULTI_LOCATION_DISABLED,
        ///<summary>
        ///There are no locations for this store that can fulfill online orders.
        ///</summary>
        NO_LOCATIONS_FULFILLING_ONLINE_ORDERS,
    }

    ///<summary>
    ///Local pickup settings associated with a location.
    ///</summary>
    public class DeliveryLocalPickupSettings : GraphQLObject<DeliveryLocalPickupSettings>
    {
        ///<summary>
        ///Additional instructions or information related to the local pickup.
        ///</summary>
        public string? instructions { get; set; }
        ///<summary>
        ///The estimated pickup time to show customers at checkout.
        ///</summary>
        public DeliveryLocalPickupTime? pickupTime { get; set; }
    }

    ///<summary>
    ///Possible pickup time values that a location enabled for local pickup can have.
    ///</summary>
    public enum DeliveryLocalPickupTime
    {
        ///<summary>
        ///Usually ready in 1 hour.
        ///</summary>
        ONE_HOUR,
        ///<summary>
        ///Usually ready in 2 hours.
        ///</summary>
        TWO_HOURS,
        ///<summary>
        ///Usually ready in 4 hours.
        ///</summary>
        FOUR_HOURS,
        ///<summary>
        ///Usually ready in 24 hours.
        ///</summary>
        TWENTY_FOUR_HOURS,
        ///<summary>
        ///Usually ready in 2-4 days.
        ///</summary>
        TWO_TO_FOUR_DAYS,
        ///<summary>
        ///Usually ready in 5+ days.
        ///</summary>
        FIVE_OR_MORE_DAYS,
    }

    ///<summary>
    ///A location group is a collection of locations. They share zones and delivery methods across delivery
    ///profiles.
    ///</summary>
    public class DeliveryLocationGroup : GraphQLObject<DeliveryLocationGroup>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///A list of all locations that are part of this location group.
        ///</summary>
        public LocationConnection? locations { get; set; }
        ///<summary>
        ///A count of all locations that are part of this location group.
        ///</summary>
        public int? locationsCount { get; set; }
    }

    ///<summary>
    ///Links a location group with a zone and the associated method definitions.
    ///</summary>
    public class DeliveryLocationGroupZone : GraphQLObject<DeliveryLocationGroupZone>
    {
        ///<summary>
        ///The number of method definitions for the zone.
        ///</summary>
        public DeliveryMethodDefinitionCounts? methodDefinitionCounts { get; set; }
        ///<summary>
        ///The method definitions associated to a zone and location group.
        ///</summary>
        public DeliveryMethodDefinitionConnection? methodDefinitions { get; set; }
        ///<summary>
        ///The zone associated to a location group.
        ///</summary>
        public DeliveryZone? zone { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
    ///</summary>
    public class DeliveryLocationGroupZoneConnection : GraphQLObject<DeliveryLocationGroupZoneConnection>, IConnectionWithNodesAndEdges<DeliveryLocationGroupZoneEdge, DeliveryLocationGroupZone>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DeliveryLocationGroupZoneEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DeliveryLocationGroupZoneEdge.
        ///</summary>
        public IEnumerable<DeliveryLocationGroupZone>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
    ///</summary>
    public class DeliveryLocationGroupZoneEdge : GraphQLObject<DeliveryLocationGroupZoneEdge>, IEdge<DeliveryLocationGroupZone>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DeliveryLocationGroupZoneEdge.
        ///</summary>
        public DeliveryLocationGroupZone? node { get; set; }
    }

    ///<summary>
    ///Represents an error that happened when changing local pickup settings for a location.
    ///</summary>
    public class DeliveryLocationLocalPickupSettingsError : GraphQLObject<DeliveryLocationLocalPickupSettingsError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public DeliveryLocationLocalPickupSettingsErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `DeliveryLocationLocalPickupSettingsError`.
    ///</summary>
    public enum DeliveryLocationLocalPickupSettingsErrorCode
    {
        ///<summary>
        ///Provided locationId is not for an active location belonging to this store.
        ///</summary>
        ACTIVE_LOCATION_NOT_FOUND,
        ///<summary>
        ///An error occurred while changing the local pickup settings.
        ///</summary>
        GENERIC_ERROR,
    }

    ///<summary>
    ///The delivery method used by a fulfillment order.
    ///</summary>
    public class DeliveryMethod : GraphQLObject<DeliveryMethod>, INode
    {
        ///<summary>
        ///The branded promise that was presented to the buyer during checkout.  For example: Shop Promise.
        ///</summary>
        public DeliveryBrandedPromise? brandedPromise { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The latest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
        ///</summary>
        public DateTime? maxDeliveryDateTime { get; set; }
        ///<summary>
        ///The type of the delivery method.
        ///</summary>
        public DeliveryMethodType? methodType { get; set; }
        ///<summary>
        ///The earliest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
        ///</summary>
        public DateTime? minDeliveryDateTime { get; set; }
        ///<summary>
        ///A reference to the shipping method.
        ///</summary>
        public string? serviceCode { get; set; }
    }

    ///<summary>
    ///A method definition contains the delivery rate and the conditions that must be met for the method to be
    ///applied.
    ///</summary>
    public class DeliveryMethodDefinition : GraphQLObject<DeliveryMethodDefinition>, INode
    {
        ///<summary>
        ///Whether this method definition is active.
        ///</summary>
        public bool? active { get; set; }
        ///<summary>
        ///The description of the method definition.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The method conditions that must pass for this method definition to be applied to an order.
        ///</summary>
        public IEnumerable<DeliveryCondition>? methodConditions { get; set; }
        ///<summary>
        ///The name of the method definition.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The provided rate for this method definition, from a rate definition or participant.
        ///</summary>
        public IDeliveryRateProvider? rateProvider { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
    ///</summary>
    public class DeliveryMethodDefinitionConnection : GraphQLObject<DeliveryMethodDefinitionConnection>, IConnectionWithNodesAndEdges<DeliveryMethodDefinitionEdge, DeliveryMethodDefinition>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DeliveryMethodDefinitionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DeliveryMethodDefinitionEdge.
        ///</summary>
        public IEnumerable<DeliveryMethodDefinition>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///The number of method definitions for a zone, separated into merchant-owned and participant definitions.
    ///</summary>
    public class DeliveryMethodDefinitionCounts : GraphQLObject<DeliveryMethodDefinitionCounts>
    {
        ///<summary>
        ///The number of participant method definitions for the specified zone.
        ///</summary>
        public int? participantDefinitionsCount { get; set; }
        ///<summary>
        ///The number of merchant-defined method definitions for the specified zone.
        ///</summary>
        public int? rateDefinitionsCount { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
    ///</summary>
    public class DeliveryMethodDefinitionEdge : GraphQLObject<DeliveryMethodDefinitionEdge>, IEdge<DeliveryMethodDefinition>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DeliveryMethodDefinitionEdge.
        ///</summary>
        public DeliveryMethodDefinition? node { get; set; }
    }

    ///<summary>
    ///The different types of method definitions to filter by.
    ///</summary>
    public enum DeliveryMethodDefinitionType
    {
        ///<summary>
        ///A static merchant-defined rate.
        ///</summary>
        MERCHANT,
        ///<summary>
        ///A dynamic participant rate.
        ///</summary>
        PARTICIPANT,
    }

    ///<summary>
    ///Possible method types that a delivery method can have.
    ///</summary>
    public enum DeliveryMethodType
    {
        ///<summary>
        ///The order is shipped.
        ///</summary>
        SHIPPING,
        ///<summary>
        ///The order is picked up by the customer.
        ///</summary>
        PICK_UP,
        ///<summary>
        ///No delivery is needed.
        ///</summary>
        NONE,
        ///<summary>
        ///The order is delivered to a retail store.
        ///</summary>
        RETAIL,
        ///<summary>
        ///The order is delivered using a local delivery service.
        ///</summary>
        LOCAL,
    }

    ///<summary>
    ///A participant defines carrier-calculated rates for shipping services
    ///with a possible merchant-defined fixed fee or a percentage-of-rate fee.
    ///</summary>
    public class DeliveryParticipant : GraphQLObject<DeliveryParticipant>, INode, IDeliveryRateProvider
    {
        ///<summary>
        ///Whether to display new shipping services automatically to the customer when the service becomes available.
        ///</summary>
        public bool? adaptToNewServicesFlag { get; set; }
        ///<summary>
        ///The carrier used for this participant.
        ///</summary>
        public DeliveryCarrierService? carrierService { get; set; }
        ///<summary>
        ///The merchant-defined fixed fee for this participant.
        ///</summary>
        public MoneyV2? fixedFee { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The carrier-specific services offered by the participant, and whether each service is active.
        ///</summary>
        public IEnumerable<DeliveryParticipantService>? participantServices { get; set; }
        ///<summary>
        ///The merchant-defined percentage-of-rate fee for this participant.
        ///</summary>
        public float? percentageOfRateFee { get; set; }
    }

    ///<summary>
    ///A mail service provided by the participant.
    ///</summary>
    public class DeliveryParticipantService : GraphQLObject<DeliveryParticipantService>
    {
        ///<summary>
        ///Whether the service is active.
        ///</summary>
        public bool? active { get; set; }
        ///<summary>
        ///The name of the service.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///How many product variants are in a profile. This count is capped at 500.
    ///</summary>
    public class DeliveryProductVariantsCount : GraphQLObject<DeliveryProductVariantsCount>
    {
        ///<summary>
        ///Whether the count has reached the cap of 500.
        ///</summary>
        public bool? capped { get; set; }
        ///<summary>
        ///The product variant count.
        ///</summary>
        public int? count { get; set; }
    }

    ///<summary>
    ///A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones.
    ///</summary>
    public class DeliveryProfile : GraphQLObject<DeliveryProfile>, INode
    {
        ///<summary>
        ///The number of active shipping rates for the profile.
        ///</summary>
        public int? activeMethodDefinitionsCount { get; set; }
        ///<summary>
        ///Whether this is the default profile.
        ///</summary>
        public bool? @default { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether this shop has enabled legacy compatibility mode for delivery profiles.
        ///</summary>
        public bool? legacyMode { get; set; }
        ///<summary>
        ///The number of locations without rates defined.
        ///</summary>
        public int? locationsWithoutRatesCount { get; set; }
        ///<summary>
        ///The name of the delivery profile.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The number of active origin locations for the profile.
        ///</summary>
        public int? originLocationCount { get; set; }

        ///<summary>
        ///The number of product variants for this profile. The count for the default profile isn't supported and will return -1.
        ///</summary>
        [Obsolete("Use `productVariantsCountV2` instead.")]
        public int? productVariantsCount { get; set; }
        ///<summary>
        ///How many product variants are in this profile.
        ///</summary>
        public DeliveryProductVariantsCount? productVariantsCountV2 { get; set; }
        ///<summary>
        ///The products and variants associated with this profile.
        ///</summary>
        public DeliveryProfileItemConnection? profileItems { get; set; }
        ///<summary>
        ///The location groups and associated zones using this profile.
        ///</summary>
        public IEnumerable<DeliveryProfileLocationGroup>? profileLocationGroups { get; set; }
        ///<summary>
        ///Selling plan groups associated with the specified delivery profile.
        ///</summary>
        public SellingPlanGroupConnection? sellingPlanGroups { get; set; }
        ///<summary>
        ///List of locations that haven't been assigned to a location group for this profile.
        ///</summary>
        public IEnumerable<Location>? unassignedLocations { get; set; }
        ///<summary>
        ///List of locations that have not been assigned to a location group for this profile.
        ///</summary>
        public LocationConnection? unassignedLocationsPaginated { get; set; }
        ///<summary>
        ///The number of countries with active rates to deliver to.
        ///</summary>
        public int? zoneCountryCount { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DeliveryProfiles.
    ///</summary>
    public class DeliveryProfileConnection : GraphQLObject<DeliveryProfileConnection>, IConnectionWithNodesAndEdges<DeliveryProfileEdge, DeliveryProfile>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DeliveryProfileEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DeliveryProfileEdge.
        ///</summary>
        public IEnumerable<DeliveryProfile>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
    ///</summary>
    public class DeliveryProfileEdge : GraphQLObject<DeliveryProfileEdge>, IEdge<DeliveryProfile>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DeliveryProfileEdge.
        ///</summary>
        public DeliveryProfile? node { get; set; }
    }

    ///<summary>
    ///A product and the subset of associated variants that are part of this delivery profile.
    ///</summary>
    public class DeliveryProfileItem : GraphQLObject<DeliveryProfileItem>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///A product associated with this profile.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The product variants associated with this delivery profile.
        ///</summary>
        public ProductVariantConnection? variants { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DeliveryProfileItems.
    ///</summary>
    public class DeliveryProfileItemConnection : GraphQLObject<DeliveryProfileItemConnection>, IConnectionWithNodesAndEdges<DeliveryProfileItemEdge, DeliveryProfileItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DeliveryProfileItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DeliveryProfileItemEdge.
        ///</summary>
        public IEnumerable<DeliveryProfileItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
    ///</summary>
    public class DeliveryProfileItemEdge : GraphQLObject<DeliveryProfileItemEdge>, IEdge<DeliveryProfileItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DeliveryProfileItemEdge.
        ///</summary>
        public DeliveryProfileItem? node { get; set; }
    }

    ///<summary>
    ///Links a location group with zones. Both are associated to a delivery profile.
    ///</summary>
    public class DeliveryProfileLocationGroup : GraphQLObject<DeliveryProfileLocationGroup>
    {
        ///<summary>
        ///The countries already selected in any zone for the specified location group.
        ///</summary>
        public IEnumerable<DeliveryCountryAndZone>? countriesInAnyZone { get; set; }
        ///<summary>
        ///The collection of locations that make up the specified location group.
        ///</summary>
        public DeliveryLocationGroup? locationGroup { get; set; }
        ///<summary>
        ///The applicable zones associated to the specified location group.
        ///</summary>
        public DeliveryLocationGroupZoneConnection? locationGroupZones { get; set; }
    }

    ///<summary>
    ///A region that is used to define a shipping zone.
    ///</summary>
    public class DeliveryProvince : GraphQLObject<DeliveryProvince>, INode
    {
        ///<summary>
        ///The code of the region.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The full name of the region.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The translated name of the region. The translation returned is based on the system's locale.
        ///</summary>
        public string? translatedName { get; set; }
    }

    ///<summary>
    ///The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
    ///</summary>
    public class DeliveryRateDefinition : GraphQLObject<DeliveryRateDefinition>, INode, IDeliveryRateProvider
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The price of this rate.
        ///</summary>
        public MoneyV2? price { get; set; }
    }

    ///<summary>
    ///A rate provided by a merchant-defined rate or a participant.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DeliveryParticipant), typeDiscriminator: "DeliveryParticipant")]
    [JsonDerivedType(typeof(DeliveryRateDefinition), typeDiscriminator: "DeliveryRateDefinition")]
    public interface IDeliveryRateProvider : IGraphQLObject
    {
        public DeliveryParticipant? AsDeliveryParticipant() => this as DeliveryParticipant;
        public DeliveryRateDefinition? AsDeliveryRateDefinition() => this as DeliveryRateDefinition;
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
    }

    ///<summary>
    ///The `DeliverySetting` object enables you to manage shop-wide shipping settings.
    ///You can enable legacy compatibility mode for the multi-location delivery profiles feature
    ///if the legacy mode isn't blocked.
    ///</summary>
    public class DeliverySetting : GraphQLObject<DeliverySetting>
    {
        ///<summary>
        ///Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
        ///</summary>
        public DeliveryLegacyModeBlocked? legacyModeBlocked { get; set; }
        ///<summary>
        ///Enables legacy compatability mode for the multi-location delivery profiles feature.
        ///</summary>
        public bool? legacyModeProfiles { get; set; }
    }

    ///<summary>
    ///Return type for `deliverySettingUpdate` mutation.
    ///</summary>
    public class DeliverySettingUpdatePayload : GraphQLObject<DeliverySettingUpdatePayload>
    {
        ///<summary>
        ///The updated delivery shop level settings.
        ///</summary>
        public DeliverySetting? setting { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `deliveryShippingOriginAssign` mutation.
    ///</summary>
    public class DeliveryShippingOriginAssignPayload : GraphQLObject<DeliveryShippingOriginAssignPayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.
    ///</summary>
    public class DeliveryZone : GraphQLObject<DeliveryZone>, INode
    {
        ///<summary>
        ///The list of countries within the zone.
        ///</summary>
        public IEnumerable<DeliveryCountry>? countries { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the zone.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
    ///</summary>
    public enum DigitalWallet
    {
        ///<summary>
        ///Apple Pay.
        ///</summary>
        APPLE_PAY,
        ///<summary>
        ///Android Pay.
        ///</summary>
        ANDROID_PAY,
        ///<summary>
        ///Google Pay.
        ///</summary>
        GOOGLE_PAY,
        ///<summary>
        ///Shopify Pay.
        ///</summary>
        SHOPIFY_PAY,
    }

    ///<summary>
    ///A discount.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountAutomaticApp), typeDiscriminator: "DiscountAutomaticApp")]
    [JsonDerivedType(typeof(DiscountAutomaticBasic), typeDiscriminator: "DiscountAutomaticBasic")]
    [JsonDerivedType(typeof(DiscountAutomaticBxgy), typeDiscriminator: "DiscountAutomaticBxgy")]
    [JsonDerivedType(typeof(DiscountAutomaticFreeShipping), typeDiscriminator: "DiscountAutomaticFreeShipping")]
    [JsonDerivedType(typeof(DiscountCodeApp), typeDiscriminator: "DiscountCodeApp")]
    [JsonDerivedType(typeof(DiscountCodeBasic), typeDiscriminator: "DiscountCodeBasic")]
    [JsonDerivedType(typeof(DiscountCodeBxgy), typeDiscriminator: "DiscountCodeBxgy")]
    [JsonDerivedType(typeof(DiscountCodeFreeShipping), typeDiscriminator: "DiscountCodeFreeShipping")]
    public interface IDiscount : IGraphQLObject
    {
        public DiscountAutomaticApp? AsDiscountAutomaticApp() => this as DiscountAutomaticApp;
        public DiscountAutomaticBasic? AsDiscountAutomaticBasic() => this as DiscountAutomaticBasic;
        public DiscountAutomaticBxgy? AsDiscountAutomaticBxgy() => this as DiscountAutomaticBxgy;
        public DiscountAutomaticFreeShipping? AsDiscountAutomaticFreeShipping() => this as DiscountAutomaticFreeShipping;
        public DiscountCodeApp? AsDiscountCodeApp() => this as DiscountCodeApp;
        public DiscountCodeBasic? AsDiscountCodeBasic() => this as DiscountCodeBasic;
        public DiscountCodeBxgy? AsDiscountCodeBxgy() => this as DiscountCodeBxgy;
        public DiscountCodeFreeShipping? AsDiscountCodeFreeShipping() => this as DiscountCodeFreeShipping;
        ///<summary>
        ///The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An amount that's allocated to a line based on an associated discount application.
    ///</summary>
    public class DiscountAllocation : GraphQLObject<DiscountAllocation>
    {
        ///<summary>
        ///The money amount that's allocated to a line based on the associated discount application.
        ///</summary>
        [Obsolete("Use `allocatedAmountSet` instead.")]
        public MoneyV2? allocatedAmount { get; set; }
        ///<summary>
        ///The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.
        ///</summary>
        public MoneyBag? allocatedAmountSet { get; set; }
        ///<summary>
        ///The discount application that the allocated amount originated from.
        ///</summary>
        public IDiscountApplication? discountApplication { get; set; }
    }

    ///<summary>
    ///The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items.
    ///</summary>
    public class DiscountAmount : GraphQLObject<DiscountAmount>, IDiscountCustomerGetsValue, IDiscountEffect
    {
        ///<summary>
        ///The value of the discount.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
        ///</summary>
        public bool? appliesOnEachItem { get; set; }
    }

    ///<summary>
    ///Discount applications capture the intentions of a discount source at
    ///the time of application on an order's line items or shipping lines.
    ///
    ///Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AutomaticDiscountApplication), typeDiscriminator: "AutomaticDiscountApplication")]
    [JsonDerivedType(typeof(DiscountCodeApplication), typeDiscriminator: "DiscountCodeApplication")]
    [JsonDerivedType(typeof(ManualDiscountApplication), typeDiscriminator: "ManualDiscountApplication")]
    [JsonDerivedType(typeof(ScriptDiscountApplication), typeDiscriminator: "ScriptDiscountApplication")]
    public interface IDiscountApplication : IGraphQLObject
    {
        public AutomaticDiscountApplication? AsAutomaticDiscountApplication() => this as AutomaticDiscountApplication;
        public DiscountCodeApplication? AsDiscountCodeApplication() => this as DiscountCodeApplication;
        public ManualDiscountApplication? AsManualDiscountApplication() => this as ManualDiscountApplication;
        public ScriptDiscountApplication? AsScriptDiscountApplication() => this as ScriptDiscountApplication;
        ///<summary>
        ///The method by which the discount's value is applied to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; }
        ///<summary>
        ///An ordered index that can be used to identify the discount application and indicate the precedence
        ///of the discount application for calculations.
        ///</summary>
        public int? index { get; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; }
    }

    ///<summary>
    ///The method by which the discount's value is allocated onto its entitled lines.
    ///</summary>
    public enum DiscountApplicationAllocationMethod
    {
        ///<summary>
        ///The value is spread across all entitled lines.
        ///</summary>
        ACROSS,
        ///<summary>
        ///The value is applied onto every entitled line.
        ///</summary>
        EACH,
        ///<summary>
        ///The value is specifically applied onto a particular line.
        ///</summary>
        [Obsolete("Use ACROSS instead.")]
        ONE,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DiscountApplications.
    ///</summary>
    public class DiscountApplicationConnection : GraphQLObject<DiscountApplicationConnection>, IConnectionWithNodesAndEdges<DiscountApplicationEdge, IDiscountApplication>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DiscountApplicationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DiscountApplicationEdge.
        ///</summary>
        public IEnumerable<IDiscountApplication>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DiscountApplication and a cursor during pagination.
    ///</summary>
    public class DiscountApplicationEdge : GraphQLObject<DiscountApplicationEdge>, IEdge<IDiscountApplication>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DiscountApplicationEdge.
        ///</summary>
        public IDiscountApplication? node { get; set; }
    }

    ///<summary>
    ///The level at which the discount's value is applied.
    ///</summary>
    public enum DiscountApplicationLevel
    {
        ///<summary>
        ///The discount is applied at the order level.
        ///Order level discounts are not factored into the discountedUnitPriceSet on line items.
        ///</summary>
        ORDER,
        ///<summary>
        ///The discount is applied at the line level.
        ///Line level discounts are factored into the discountedUnitPriceSet on line items.
        ///</summary>
        LINE,
    }

    ///<summary>
    ///The lines on the order to which the discount is applied, of the type defined by
    ///the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
    ///`LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
    ///The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
    ///</summary>
    public enum DiscountApplicationTargetSelection
    {
        ///<summary>
        ///The discount is allocated onto all the lines.
        ///</summary>
        ALL,
        ///<summary>
        ///The discount is allocated onto only the lines that it's entitled for.
        ///</summary>
        ENTITLED,
        ///<summary>
        ///The discount is allocated onto explicitly chosen lines.
        ///</summary>
        EXPLICIT,
    }

    ///<summary>
    ///The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
    ///</summary>
    public enum DiscountApplicationTargetType
    {
        ///<summary>
        ///The discount applies onto line items.
        ///</summary>
        LINE_ITEM,
        ///<summary>
        ///The discount applies onto shipping lines.
        ///</summary>
        SHIPPING_LINE,
    }

    ///<summary>
    ///The type of discount associated to the automatic discount. For example, the automatic discount might offer a basic discount using a fixed percentage, or a fixed amount, on specific products from the order. The automatic discount may also be a BXGY discount, which offers customer discounts on select products if they add a specific product to their order.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountAutomaticApp), typeDiscriminator: "DiscountAutomaticApp")]
    [JsonDerivedType(typeof(DiscountAutomaticBasic), typeDiscriminator: "DiscountAutomaticBasic")]
    [JsonDerivedType(typeof(DiscountAutomaticBxgy), typeDiscriminator: "DiscountAutomaticBxgy")]
    [JsonDerivedType(typeof(DiscountAutomaticFreeShipping), typeDiscriminator: "DiscountAutomaticFreeShipping")]
    public interface IDiscountAutomatic : IGraphQLObject
    {
        public DiscountAutomaticApp? AsDiscountAutomaticApp() => this as DiscountAutomaticApp;
        public DiscountAutomaticBasic? AsDiscountAutomaticBasic() => this as DiscountAutomaticBasic;
        public DiscountAutomaticBxgy? AsDiscountAutomaticBxgy() => this as DiscountAutomaticBxgy;
        public DiscountAutomaticFreeShipping? AsDiscountAutomaticFreeShipping() => this as DiscountAutomaticFreeShipping;
        ///<summary>
        ///The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticActivate` mutation.
    ///</summary>
    public class DiscountAutomaticActivatePayload : GraphQLObject<DiscountAutomaticActivatePayload>
    {
        ///<summary>
        ///The activated automatic discount.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An automatic app discount.
    ///</summary>
    public class DiscountAutomaticApp : GraphQLObject<DiscountAutomaticApp>, IDiscount, IDiscountAutomatic
    {
        ///<summary>
        ///The app discount type providing the discount type.
        ///</summary>
        public AppDiscountType? appDiscountType { get; set; }
        ///<summary>
        ///The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public DiscountClass? discountClass { get; set; }
        ///<summary>
        ///The ID for the discount.
        ///</summary>
        public string? discountId { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///The error history on the most recent version of the app discount.
        ///</summary>
        public FunctionsErrorHistory? errorHistory { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticAppCreate` mutation.
    ///</summary>
    public class DiscountAutomaticAppCreatePayload : GraphQLObject<DiscountAutomaticAppCreatePayload>
    {
        ///<summary>
        ///The created app discount.
        ///</summary>
        public DiscountAutomaticApp? automaticAppDiscount { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticAppUpdate` mutation.
    ///</summary>
    public class DiscountAutomaticAppUpdatePayload : GraphQLObject<DiscountAutomaticAppUpdatePayload>
    {
        ///<summary>
        ///The updated automatic app discount.
        ///</summary>
        public DiscountAutomaticApp? automaticAppDiscount { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An automatic discount that offers customers a percentage discount, or fixed amount discount, on specific products, collections, or the entire order.
    ///</summary>
    public class DiscountAutomaticBasic : GraphQLObject<DiscountAutomaticBasic>, IDiscount, IDiscountAutomatic
    {
        ///<summary>
        ///The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The qualifying items in an order, the quantity of each one, and the total value of the discount.
        ///</summary>
        public DiscountCustomerGets? customerGets { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public MerchandiseDiscountClass? discountClass { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///The minimum subtotal or quantity that's required for the discount to be applied.
        ///</summary>
        public IDiscountMinimumRequirement? minimumRequirement { get; set; }
        ///<summary>
        ///The number of times a discount applies on recurring purchases (subscriptions).
        ///</summary>
        public int? recurringCycleLimit { get; set; }
        ///<summary>
        ///A short summary of the discount.
        ///</summary>
        public string? shortSummary { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///A detailed summary of the discount.
        ///</summary>
        public string? summary { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }

        ///<summary>
        ///The number of times that the discount has been used.
        ///</summary>
        [Obsolete("Use `asyncUsageCount` instead.")]
        public int? usageCount { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticBasicCreate` mutation.
    ///</summary>
    public class DiscountAutomaticBasicCreatePayload : GraphQLObject<DiscountAutomaticBasicCreatePayload>
    {
        ///<summary>
        ///The created automatic discount.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticBasicUpdate` mutation.
    ///</summary>
    public class DiscountAutomaticBasicUpdatePayload : GraphQLObject<DiscountAutomaticBasicUpdatePayload>
    {
        ///<summary>
        ///The updated automatic discount.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticBulkDelete` mutation.
    ///</summary>
    public class DiscountAutomaticBulkDeletePayload : GraphQLObject<DiscountAutomaticBulkDeletePayload>
    {
        ///<summary>
        ///The asynchronous job removing the automatic discounts.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An automatic discount that offers customers a Buy X, Get Y (BXGY) discount.
    ///</summary>
    public class DiscountAutomaticBxgy : GraphQLObject<DiscountAutomaticBxgy>, IHasEvents, INode, IDiscount, IDiscountAutomatic
    {
        ///<summary>
        ///The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
        ///</summary>
        public DiscountCustomerBuys? customerBuys { get; set; }
        ///<summary>
        ///The qualifying items in an order, the quantity of each one, and the total value of the discount.
        ///</summary>
        public DiscountCustomerGets? customerGets { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public MerchandiseDiscountClass? discountClass { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///The paginated list of events associated with the host subject.
        ///</summary>
        public EventConnection? events { get; set; }

        ///<summary>
        ///A legacy unique ID for the discount.
        ///</summary>
        [Obsolete("Use DiscountAutomaticNode.id instead.")]
        public string? id { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///A detailed summary of the discount.
        ///</summary>
        public string? summary { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }

        ///<summary>
        ///The number of times that the discount has been used.
        ///</summary>
        [Obsolete("Use `asyncUsageCount` instead.")]
        public int? usageCount { get; set; }
        ///<summary>
        ///The maximum number of times that the discount can be applied to an order.
        ///</summary>
        public int? usesPerOrderLimit { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticBxgyCreate` mutation.
    ///</summary>
    public class DiscountAutomaticBxgyCreatePayload : GraphQLObject<DiscountAutomaticBxgyCreatePayload>
    {
        ///<summary>
        ///The created automatic discount.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticBxgyUpdate` mutation.
    ///</summary>
    public class DiscountAutomaticBxgyUpdatePayload : GraphQLObject<DiscountAutomaticBxgyUpdatePayload>
    {
        ///<summary>
        ///The updated automatic discount.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DiscountAutomatics.
    ///</summary>
    public class DiscountAutomaticConnection : GraphQLObject<DiscountAutomaticConnection>, IConnectionWithNodesAndEdges<DiscountAutomaticEdge, IDiscountAutomatic>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DiscountAutomaticEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DiscountAutomaticEdge.
        ///</summary>
        public IEnumerable<IDiscountAutomatic>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticDeactivate` mutation.
    ///</summary>
    public class DiscountAutomaticDeactivatePayload : GraphQLObject<DiscountAutomaticDeactivatePayload>
    {
        ///<summary>
        ///The deactivated automatic discount.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticDelete` mutation.
    ///</summary>
    public class DiscountAutomaticDeletePayload : GraphQLObject<DiscountAutomaticDeletePayload>
    {
        ///<summary>
        ///The deleted automatic discount ID.
        ///</summary>
        public string? deletedAutomaticDiscountId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.
    ///</summary>
    public class DiscountAutomaticEdge : GraphQLObject<DiscountAutomaticEdge>, IEdge<IDiscountAutomatic>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DiscountAutomaticEdge.
        ///</summary>
        public IDiscountAutomatic? node { get; set; }
    }

    ///<summary>
    ///An automatic discount that offers customers free shipping on their order.
    ///</summary>
    public class DiscountAutomaticFreeShipping : GraphQLObject<DiscountAutomaticFreeShipping>, IDiscount, IDiscountAutomatic
    {
        ///<summary>
        ///Whether the discount applies on regular one-time-purchase shipping lines.
        ///</summary>
        public bool? appliesOnOneTimePurchase { get; set; }
        ///<summary>
        ///Whether the discount applies on subscription shipping lines.
        ///</summary>
        public bool? appliesOnSubscription { get; set; }
        ///<summary>
        ///The number of times that the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A shipping destination that qualifies for the discount.
        ///</summary>
        public IDiscountShippingDestinationSelection? destinationSelection { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public ShippingDiscountClass? discountClass { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///Indicates whether there are any timeline comments on the discount.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///The maximum shipping price amount accepted to qualify for the discount.
        ///</summary>
        public MoneyV2? maximumShippingPrice { get; set; }
        ///<summary>
        ///The minimum subtotal or quantity that's required for the discount to be applied.
        ///</summary>
        public IDiscountMinimumRequirement? minimumRequirement { get; set; }
        ///<summary>
        ///The number of times a discount applies on recurring purchases (subscriptions).
        ///</summary>
        public int? recurringCycleLimit { get; set; }
        ///<summary>
        ///A short summary of the discount.
        ///</summary>
        public string? shortSummary { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///A detailed summary of the discount.
        ///</summary>
        public string? summary { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total sales from orders where the discount was used.
        ///</summary>
        public MoneyV2? totalSales { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticFreeShippingCreate` mutation.
    ///</summary>
    public class DiscountAutomaticFreeShippingCreatePayload : GraphQLObject<DiscountAutomaticFreeShippingCreatePayload>
    {
        ///<summary>
        ///The created automatic discount.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountAutomaticFreeShippingUpdate` mutation.
    ///</summary>
    public class DiscountAutomaticFreeShippingUpdatePayload : GraphQLObject<DiscountAutomaticFreeShippingUpdatePayload>
    {
        ///<summary>
        ///The updated automatic discount.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A node containing an automatic discount and its related events.
    ///</summary>
    public class DiscountAutomaticNode : GraphQLObject<DiscountAutomaticNode>, IHasEvents, IHasMetafieldDefinitions, IHasMetafields, INode, IMetafieldReferencer
    {
        ///<summary>
        ///The automatic discount object.
        ///</summary>
        public IDiscountAutomatic? automaticDiscount { get; set; }
        ///<summary>
        ///The paginated list of events associated with the host subject.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DiscountAutomaticNodes.
    ///</summary>
    public class DiscountAutomaticNodeConnection : GraphQLObject<DiscountAutomaticNodeConnection>, IConnectionWithNodesAndEdges<DiscountAutomaticNodeEdge, DiscountAutomaticNode>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DiscountAutomaticNodeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DiscountAutomaticNodeEdge.
        ///</summary>
        public IEnumerable<DiscountAutomaticNode>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.
    ///</summary>
    public class DiscountAutomaticNodeEdge : GraphQLObject<DiscountAutomaticNodeEdge>, IEdge<DiscountAutomaticNode>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DiscountAutomaticNodeEdge.
        ///</summary>
        public DiscountAutomaticNode? node { get; set; }
    }

    ///<summary>
    ///The class of the discount for combining purposes.
    ///</summary>
    public enum DiscountClass
    {
        ///<summary>
        ///Combined as a product discount.
        ///</summary>
        PRODUCT,
        ///<summary>
        ///Combined as an order discount.
        ///</summary>
        ORDER,
        ///<summary>
        ///Combined as a shipping discount.
        ///</summary>
        SHIPPING,
    }

    ///<summary>
    ///The type of discount associated with the discount code. For example, the discount code might offer a basic discount of a fixed percentage, or a fixed amount, on specific products or the order. Alternatively, the discount might offer the customer free shipping on their order. A third option is a Buy X, Get Y (BXGY) discount, which offers a customer discounts on select products if they add a specific product to their order.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountCodeApp), typeDiscriminator: "DiscountCodeApp")]
    [JsonDerivedType(typeof(DiscountCodeBasic), typeDiscriminator: "DiscountCodeBasic")]
    [JsonDerivedType(typeof(DiscountCodeBxgy), typeDiscriminator: "DiscountCodeBxgy")]
    [JsonDerivedType(typeof(DiscountCodeFreeShipping), typeDiscriminator: "DiscountCodeFreeShipping")]
    public interface IDiscountCode : IGraphQLObject
    {
        public DiscountCodeApp? AsDiscountCodeApp() => this as DiscountCodeApp;
        public DiscountCodeBasic? AsDiscountCodeBasic() => this as DiscountCodeBasic;
        public DiscountCodeBxgy? AsDiscountCodeBxgy() => this as DiscountCodeBxgy;
        public DiscountCodeFreeShipping? AsDiscountCodeFreeShipping() => this as DiscountCodeFreeShipping;
        ///<summary>
        ///Whether the discount can be applied only once per customer.
        ///</summary>
        public bool? appliesOncePerCustomer { get; set; }
        ///<summary>
        ///The number of times that the discount has been used.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///The number of redeem codes for the discount.
        ///</summary>
        public int? codeCount { get; set; }
        ///<summary>
        ///A list of redeem codes for the discount.
        ///</summary>
        public DiscountRedeemCodeConnection? codes { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The customers that can use the discount.
        ///</summary>
        public IDiscountCustomerSelection? customerSelection { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///Indicates whether there are any timeline comments on the discount.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///URLs that can be used to share the discount.
        ///</summary>
        public IEnumerable<DiscountShareableUrl>? shareableUrls { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total sales from orders where the discount was used.
        ///</summary>
        public MoneyV2? totalSales { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The maximum number of times that the discount can be used.
        ///</summary>
        public int? usageLimit { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeActivate` mutation.
    ///</summary>
    public class DiscountCodeActivatePayload : GraphQLObject<DiscountCodeActivatePayload>
    {
        ///<summary>
        ///The activated code discount.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A code app discount.
    ///</summary>
    public class DiscountCodeApp : GraphQLObject<DiscountCodeApp>, IDiscount, IDiscountCode
    {
        ///<summary>
        ///The app discount type providing the discount type.
        ///</summary>
        public AppDiscountType? appDiscountType { get; set; }
        ///<summary>
        ///Whether the discount can be applied only once per customer.
        ///</summary>
        public bool? appliesOncePerCustomer { get; set; }
        ///<summary>
        ///The number of times that the discount has been used.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///The number of redeem codes for the discount.
        ///</summary>
        public int? codeCount { get; set; }
        ///<summary>
        ///A list of redeem codes for the discount.
        ///</summary>
        public DiscountRedeemCodeConnection? codes { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The customers that can use the discount.
        ///</summary>
        public IDiscountCustomerSelection? customerSelection { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public DiscountClass? discountClass { get; set; }
        ///<summary>
        ///The ID for the discount.
        ///</summary>
        public string? discountId { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///The error history on the most recent version of the discount.
        ///</summary>
        public FunctionsErrorHistory? errorHistory { get; set; }
        ///<summary>
        ///Indicates whether there are any timeline comments on the discount.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///The number of times a discount applies on recurring purchases (subscriptions).
        ///</summary>
        public int? recurringCycleLimit { get; set; }
        ///<summary>
        ///URLs that can be used to share the discount.
        ///</summary>
        public IEnumerable<DiscountShareableUrl>? shareableUrls { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total sales from orders where the discount was used.
        ///</summary>
        public MoneyV2? totalSales { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The maximum number of times that the discount can be used.
        ///</summary>
        public int? usageLimit { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeAppCreate` mutation.
    ///</summary>
    public class DiscountCodeAppCreatePayload : GraphQLObject<DiscountCodeAppCreatePayload>
    {
        ///<summary>
        ///The created code app discount.
        ///</summary>
        public DiscountCodeApp? codeAppDiscount { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeAppUpdate` mutation.
    ///</summary>
    public class DiscountCodeAppUpdatePayload : GraphQLObject<DiscountCodeAppUpdatePayload>
    {
        ///<summary>
        ///The updated code app discount.
        ///</summary>
        public DiscountCodeApp? codeAppDiscount { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Discount code applications capture the intentions of a discount code at
    ///the time that it is applied onto an order.
    ///
    ///Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
    ///</summary>
    public class DiscountCodeApplication : GraphQLObject<DiscountCodeApplication>, IDiscountApplication
    {
        ///<summary>
        ///The method by which the discount's value is applied to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///The string identifying the discount code that was used at the time of application.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///An ordered index that can be used to identify the discount application and indicate the precedence
        ///of the discount application for calculations.
        ///</summary>
        public int? index { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///A code discount that offers customers a percentage or fixed amount discount on specific products, collections, or the entire order.
    ///</summary>
    public class DiscountCodeBasic : GraphQLObject<DiscountCodeBasic>, IDiscount, IDiscountCode
    {
        ///<summary>
        ///Whether the discount can be applied only once per customer.
        ///</summary>
        public bool? appliesOncePerCustomer { get; set; }
        ///<summary>
        ///The number of times that the discount has been used.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///The number of redeem codes for the discount.
        ///</summary>
        public int? codeCount { get; set; }
        ///<summary>
        ///A list of redeem codes for the discount.
        ///</summary>
        public DiscountRedeemCodeConnection? codes { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The qualifying items in an order, the quantity of each one, and the total value of the discount.
        ///</summary>
        public DiscountCustomerGets? customerGets { get; set; }
        ///<summary>
        ///The customers that can use the discount.
        ///</summary>
        public IDiscountCustomerSelection? customerSelection { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public MerchandiseDiscountClass? discountClass { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///Indicates whether there are any timeline comments on the discount.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///The minimum subtotal or quantity that's required for the discount to be applied.
        ///</summary>
        public IDiscountMinimumRequirement? minimumRequirement { get; set; }
        ///<summary>
        ///The number of times a discount applies on recurring purchases (subscriptions).
        ///</summary>
        public int? recurringCycleLimit { get; set; }
        ///<summary>
        ///URLs that can be used to share the discount.
        ///</summary>
        public IEnumerable<DiscountShareableUrl>? shareableUrls { get; set; }
        ///<summary>
        ///A short summary of the discount.
        ///</summary>
        public string? shortSummary { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///A detailed summary of the discount.
        ///</summary>
        public string? summary { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total sales from orders where the discount was used.
        ///</summary>
        public MoneyV2? totalSales { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The maximum number of times that the discount can be used.
        ///</summary>
        public int? usageLimit { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeBasicCreate` mutation.
    ///</summary>
    public class DiscountCodeBasicCreatePayload : GraphQLObject<DiscountCodeBasicCreatePayload>
    {
        ///<summary>
        ///The created code discount.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeBasicUpdate` mutation.
    ///</summary>
    public class DiscountCodeBasicUpdatePayload : GraphQLObject<DiscountCodeBasicUpdatePayload>
    {
        ///<summary>
        ///The updated code discount.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeBulkActivate` mutation.
    ///</summary>
    public class DiscountCodeBulkActivatePayload : GraphQLObject<DiscountCodeBulkActivatePayload>
    {
        ///<summary>
        ///The asynchronous job that activates the code discounts.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeBulkDeactivate` mutation.
    ///</summary>
    public class DiscountCodeBulkDeactivatePayload : GraphQLObject<DiscountCodeBulkDeactivatePayload>
    {
        ///<summary>
        ///The asynchronous job that deactivates the code discounts.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeBulkDelete` mutation.
    ///</summary>
    public class DiscountCodeBulkDeletePayload : GraphQLObject<DiscountCodeBulkDeletePayload>
    {
        ///<summary>
        ///The asynchronous job that deletes the code discounts.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A code discount that offers customers a Buy X, Get Y (BXGY) discount.
    ///</summary>
    public class DiscountCodeBxgy : GraphQLObject<DiscountCodeBxgy>, IDiscount, IDiscountCode
    {
        ///<summary>
        ///Whether the discount can be applied only once per customer.
        ///</summary>
        public bool? appliesOncePerCustomer { get; set; }
        ///<summary>
        ///The number of times that the discount has been used.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///The number of redeem codes for the discount.
        ///</summary>
        public int? codeCount { get; set; }
        ///<summary>
        ///A list of redeem codes for the discount.
        ///</summary>
        public DiscountRedeemCodeConnection? codes { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
        ///</summary>
        public DiscountCustomerBuys? customerBuys { get; set; }
        ///<summary>
        ///The qualifying items in an order, the quantity of each one, and the total value of the discount.
        ///</summary>
        public DiscountCustomerGets? customerGets { get; set; }
        ///<summary>
        ///The customers that can use the discount.
        ///</summary>
        public IDiscountCustomerSelection? customerSelection { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public MerchandiseDiscountClass? discountClass { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///Indicates whether there are any timeline comments on the discount.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///URLs that can be used to share the discount.
        ///</summary>
        public IEnumerable<DiscountShareableUrl>? shareableUrls { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///A detailed summary of the discount.
        ///</summary>
        public string? summary { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total sales from orders where the discount was used.
        ///</summary>
        public MoneyV2? totalSales { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The maximum number of times that the discount can be used.
        ///</summary>
        public int? usageLimit { get; set; }
        ///<summary>
        ///The maximum number of times that the discount can be applied to an order.
        ///</summary>
        public int? usesPerOrderLimit { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeBxgyCreate` mutation.
    ///</summary>
    public class DiscountCodeBxgyCreatePayload : GraphQLObject<DiscountCodeBxgyCreatePayload>
    {
        ///<summary>
        ///The created code discount.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeBxgyUpdate` mutation.
    ///</summary>
    public class DiscountCodeBxgyUpdatePayload : GraphQLObject<DiscountCodeBxgyUpdatePayload>
    {
        ///<summary>
        ///The updated code discount.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeDeactivate` mutation.
    ///</summary>
    public class DiscountCodeDeactivatePayload : GraphQLObject<DiscountCodeDeactivatePayload>
    {
        ///<summary>
        ///The deactivated code discount.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeDelete` mutation.
    ///</summary>
    public class DiscountCodeDeletePayload : GraphQLObject<DiscountCodeDeletePayload>
    {
        ///<summary>
        ///The deleted code discount ID.
        ///</summary>
        public string? deletedCodeDiscountId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A code discount that offers customers free shipping on their order.
    ///</summary>
    public class DiscountCodeFreeShipping : GraphQLObject<DiscountCodeFreeShipping>, IDiscount, IDiscountCode
    {
        ///<summary>
        ///Whether the discount applies on regular one-time-purchase shipping lines.
        ///</summary>
        public bool? appliesOnOneTimePurchase { get; set; }
        ///<summary>
        ///Whether the discount applies on subscription shipping lines.
        ///</summary>
        public bool? appliesOnSubscription { get; set; }
        ///<summary>
        ///Whether the discount can be applied only once per customer.
        ///</summary>
        public bool? appliesOncePerCustomer { get; set; }
        ///<summary>
        ///The number of times that the discount has been used.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///The number of redeem codes for the discount.
        ///</summary>
        public int? codeCount { get; set; }
        ///<summary>
        ///A list of redeem codes for the discount.
        ///</summary>
        public DiscountRedeemCodeConnection? codes { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the discount was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The customers that can use the discount.
        ///</summary>
        public IDiscountCustomerSelection? customerSelection { get; set; }
        ///<summary>
        ///A shipping destination that qualifies for the discount.
        ///</summary>
        public IDiscountShippingDestinationSelection? destinationSelection { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public ShippingDiscountClass? discountClass { get; set; }
        ///<summary>
        ///The date and time when the discount ends. For open-ended discounts, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }
        ///<summary>
        ///Indicates whether there are any timeline comments on the discount.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///The maximum shipping price amount accepted to qualify for the discount.
        ///</summary>
        public MoneyV2? maximumShippingPrice { get; set; }
        ///<summary>
        ///The minimum subtotal or quantity that's required for the discount to be applied.
        ///</summary>
        public IDiscountMinimumRequirement? minimumRequirement { get; set; }
        ///<summary>
        ///The number of times a discount applies on recurring purchases (subscriptions).
        ///</summary>
        public int? recurringCycleLimit { get; set; }
        ///<summary>
        ///URLs that can be used to share the discount.
        ///</summary>
        public IEnumerable<DiscountShareableUrl>? shareableUrls { get; set; }
        ///<summary>
        ///A short summary of the discount.
        ///</summary>
        public string? shortSummary { get; set; }
        ///<summary>
        ///The date and time when the discount starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the discount.
        ///</summary>
        public DiscountStatus? status { get; set; }
        ///<summary>
        ///A detailed summary of the discount.
        ///</summary>
        public string? summary { get; set; }
        ///<summary>
        ///The title of the discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total sales from orders where the discount was used.
        ///</summary>
        public MoneyV2? totalSales { get; set; }
        ///<summary>
        ///The date and time when the discount was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The maximum number of times that the discount can be used.
        ///</summary>
        public int? usageLimit { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeFreeShippingCreate` mutation.
    ///</summary>
    public class DiscountCodeFreeShippingCreatePayload : GraphQLObject<DiscountCodeFreeShippingCreatePayload>
    {
        ///<summary>
        ///The created code discount.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeFreeShippingUpdate` mutation.
    ///</summary>
    public class DiscountCodeFreeShippingUpdatePayload : GraphQLObject<DiscountCodeFreeShippingUpdatePayload>
    {
        ///<summary>
        ///The updated code discount.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A node containing a code discount and its related events.
    ///</summary>
    public class DiscountCodeNode : GraphQLObject<DiscountCodeNode>, IHasEvents, IHasMetafieldDefinitions, IHasMetafields, INode, IMetafieldReferencer
    {
        ///<summary>
        ///The underlying code discount object.
        ///</summary>
        public IDiscountCode? codeDiscount { get; set; }
        ///<summary>
        ///The paginated list of events associated with the host subject.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DiscountCodeNodes.
    ///</summary>
    public class DiscountCodeNodeConnection : GraphQLObject<DiscountCodeNodeConnection>, IConnectionWithNodesAndEdges<DiscountCodeNodeEdge, DiscountCodeNode>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DiscountCodeNodeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DiscountCodeNodeEdge.
        ///</summary>
        public IEnumerable<DiscountCodeNode>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.
    ///</summary>
    public class DiscountCodeNodeEdge : GraphQLObject<DiscountCodeNodeEdge>, IEdge<DiscountCodeNode>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DiscountCodeNodeEdge.
        ///</summary>
        public DiscountCodeNode? node { get; set; }
    }

    ///<summary>
    ///Return type for `discountCodeRedeemCodeBulkDelete` mutation.
    ///</summary>
    public class DiscountCodeRedeemCodeBulkDeletePayload : GraphQLObject<DiscountCodeRedeemCodeBulkDeletePayload>
    {
        ///<summary>
        ///The asynchronous job that deletes the discount redeem codes.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the DiscountCode query.
    ///</summary>
    public enum DiscountCodeSortKeys
    {
        ///<summary>
        ///Sort by the `code` value.
        ///</summary>
        CODE,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied.
    ///</summary>
    public class DiscountCollections : GraphQLObject<DiscountCollections>, IDiscountItems
    {
        ///<summary>
        ///The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied.
        ///</summary>
        public CollectionConnection? collections { get; set; }
    }

    ///<summary>
    ///Determines which discount classes the discount can combine with.
    ///</summary>
    public class DiscountCombinesWith : GraphQLObject<DiscountCombinesWith>
    {
        ///<summary>
        ///Combines with order discounts.
        ///</summary>
        public bool? orderDiscounts { get; set; }
        ///<summary>
        ///Combines with product discounts.
        ///</summary>
        public bool? productDiscounts { get; set; }
        ///<summary>
        ///Combines with shipping discounts.
        ///</summary>
        public bool? shippingDiscounts { get; set; }
    }

    ///<summary>
    ///The shipping destinations where the discount can be applied.
    ///</summary>
    public class DiscountCountries : GraphQLObject<DiscountCountries>, IDiscountShippingDestinationSelection
    {
        ///<summary>
        ///The codes for the countries where the discount can be applied.
        ///</summary>
        public IEnumerable<CountryCode>? countries { get; set; }
        ///<summary>
        ///Whether the discount is applicable to countries that haven't been defined in the shop's shipping zones.
        ///</summary>
        public bool? includeRestOfWorld { get; set; }
    }

    ///<summary>
    ///The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
    ///</summary>
    public class DiscountCountryAll : GraphQLObject<DiscountCountryAll>, IDiscountShippingDestinationSelection
    {
        ///<summary>
        ///Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
        ///</summary>
        public bool? allCountries { get; set; }
    }

    ///<summary>
    ///The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
    ///</summary>
    public class DiscountCustomerAll : GraphQLObject<DiscountCustomerAll>, IDiscountCustomerSelection
    {
        ///<summary>
        ///Whether the discount can be applied by all customers. This value is always `true`.
        ///</summary>
        public bool? allCustomers { get; set; }
    }

    ///<summary>
    ///The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
    ///</summary>
    public class DiscountCustomerBuys : GraphQLObject<DiscountCustomerBuys>
    {
        ///<summary>
        ///The items required for the discount to be applicable.
        ///</summary>
        public IDiscountItems? items { get; set; }
        ///<summary>
        ///The prerequisite value.
        ///</summary>
        public IDiscountCustomerBuysValue? value { get; set; }
    }

    ///<summary>
    ///The prerequisite for the discount to be applicable. For example, the discount might require a customer to buy a minimum quantity of select items. Alternatively, the discount might require a customer to spend a minimum amount on select items.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountPurchaseAmount), typeDiscriminator: "DiscountPurchaseAmount")]
    [JsonDerivedType(typeof(DiscountQuantity), typeDiscriminator: "DiscountQuantity")]
    public interface IDiscountCustomerBuysValue : IGraphQLObject
    {
        public DiscountPurchaseAmount? AsDiscountPurchaseAmount() => this as DiscountPurchaseAmount;
        public DiscountQuantity? AsDiscountQuantity() => this as DiscountQuantity;
    }

    ///<summary>
    ///The qualifying items in an order, the quantity of each one, and the total value of the discount.
    ///</summary>
    public class DiscountCustomerGets : GraphQLObject<DiscountCustomerGets>
    {
        ///<summary>
        ///Whether the discount applies on regular one-time-purchase items.
        ///</summary>
        public bool? appliesOnOneTimePurchase { get; set; }
        ///<summary>
        ///Whether the discount applies on subscription items.
        ///</summary>
        public bool? appliesOnSubscription { get; set; }
        ///<summary>
        ///The items to which the discount applies.
        ///</summary>
        public IDiscountItems? items { get; set; }
        ///<summary>
        ///Entitled quantity and the discount value.
        ///</summary>
        public IDiscountCustomerGetsValue? value { get; set; }
    }

    ///<summary>
    ///The type of the discount value and how it will be applied. For example, it might be a percentage discount on a fixed number of items. Alternatively, it might be a fixed amount evenly distributed across all items or on each individual item. A third example is a percentage discount on all items.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountAmount), typeDiscriminator: "DiscountAmount")]
    [JsonDerivedType(typeof(DiscountOnQuantity), typeDiscriminator: "DiscountOnQuantity")]
    [JsonDerivedType(typeof(DiscountPercentage), typeDiscriminator: "DiscountPercentage")]
    public interface IDiscountCustomerGetsValue : IGraphQLObject
    {
        public DiscountAmount? AsDiscountAmount() => this as DiscountAmount;
        public DiscountOnQuantity? AsDiscountOnQuantity() => this as DiscountOnQuantity;
        public DiscountPercentage? AsDiscountPercentage() => this as DiscountPercentage;
    }

    ///<summary>
    ///A list of customer segments that contain the customers that the discount applies to.
    ///</summary>
    public class DiscountCustomerSegments : GraphQLObject<DiscountCustomerSegments>, IDiscountCustomerSelection
    {
        ///<summary>
        ///A list of customer segments that contain the customers who can use the discount.
        ///</summary>
        public IEnumerable<Segment>? segments { get; set; }
    }

    ///<summary>
    ///The type used for targeting a set of customers who are eligible for the discount. For example, the discount might be available to all customers or it might only be available to a specific set of customers. You can define the set of customers by targeting a list of customer segments, or by targeting a list of specific customers.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountCustomerAll), typeDiscriminator: "DiscountCustomerAll")]
    [JsonDerivedType(typeof(DiscountCustomerSegments), typeDiscriminator: "DiscountCustomerSegments")]
    [JsonDerivedType(typeof(DiscountCustomers), typeDiscriminator: "DiscountCustomers")]
    public interface IDiscountCustomerSelection : IGraphQLObject
    {
        public DiscountCustomerAll? AsDiscountCustomerAll() => this as DiscountCustomerAll;
        public DiscountCustomerSegments? AsDiscountCustomerSegments() => this as DiscountCustomerSegments;
        public DiscountCustomers? AsDiscountCustomers() => this as DiscountCustomers;
    }

    ///<summary>
    ///A list of customers eligible for the discount.
    ///</summary>
    public class DiscountCustomers : GraphQLObject<DiscountCustomers>, IDiscountCustomerSelection
    {
        ///<summary>
        ///The list of customers eligible for the discount.
        ///</summary>
        public IEnumerable<Customer>? customers { get; set; }
    }

    ///<summary>
    ///The type of discount that will be applied. Currently, only a percentage discount is supported.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountAmount), typeDiscriminator: "DiscountAmount")]
    [JsonDerivedType(typeof(DiscountPercentage), typeDiscriminator: "DiscountPercentage")]
    public interface IDiscountEffect : IGraphQLObject
    {
        public DiscountAmount? AsDiscountAmount() => this as DiscountAmount;
        public DiscountPercentage? AsDiscountPercentage() => this as DiscountPercentage;
    }

    ///<summary>
    ///Possible error codes that can be returned by `DiscountUserError`.
    ///</summary>
    public enum DiscountErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value should be equal to the value allowed.
        ///</summary>
        EQUAL_TO,
        ///<summary>
        ///The input value should be greater than the minimum allowed value.
        ///</summary>
        GREATER_THAN,
        ///<summary>
        ///The input value should be greater than or equal to the minimum value allowed.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value should be less than or equal to the maximum value allowed.
        ///</summary>
        LESS_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value should be less than the maximum value allowed.
        ///</summary>
        LESS_THAN,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///Unexpected internal error happened.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Too many arguments provided.
        ///</summary>
        TOO_MANY_ARGUMENTS,
        ///<summary>
        ///Missing a required argument.
        ///</summary>
        MISSING_ARGUMENT,
        ///<summary>
        ///The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
        ///</summary>
        ACTIVE_PERIOD_OVERLAP,
        ///<summary>
        ///The value exceeded the maximum allowed value.
        ///</summary>
        EXCEEDED_MAX,
        ///<summary>
        ///Specify a minimum subtotal or a quantity, but not both.
        ///</summary>
        MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT,
        ///<summary>
        ///The value is outside of the allowed range.
        ///</summary>
        VALUE_OUTSIDE_RANGE,
        ///<summary>
        ///The attribute selection contains conflicting settings.
        ///</summary>
        CONFLICT,
        ///<summary>
        ///The value is already present through another selection.
        ///</summary>
        IMPLICIT_DUPLICATE,
        ///<summary>
        ///The input value is already present.
        ///</summary>
        DUPLICATE,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The `combinesWith` settings are invalid for the discount class.
        ///</summary>
        INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS,
        ///<summary>
        ///The discountClass is invalid for the price rule.
        ///</summary>
        INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE,
        ///<summary>
        ///The active period overlaps with too many other app-provided discounts. There's a limit on the number of app discounts that can be active at any given time.
        ///</summary>
        MAX_APP_DISCOUNTS,
    }

    ///<summary>
    ///The type used to target the items required for discount eligibility, or the items to which the application of a discount might apply. For example, for a customer to be eligible for a discount, they're required to add an item from a specified collection to their order. Alternatively, a customer might be required to add a specific product or product variant. When using this type to target which items the discount will apply to, the discount might apply to all items on the order, or to specific products and product variants, or items in a given collection.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AllDiscountItems), typeDiscriminator: "AllDiscountItems")]
    [JsonDerivedType(typeof(DiscountCollections), typeDiscriminator: "DiscountCollections")]
    [JsonDerivedType(typeof(DiscountProducts), typeDiscriminator: "DiscountProducts")]
    public interface IDiscountItems : IGraphQLObject
    {
        public AllDiscountItems? AsAllDiscountItems() => this as AllDiscountItems;
        public DiscountCollections? AsDiscountCollections() => this as DiscountCollections;
        public DiscountProducts? AsDiscountProducts() => this as DiscountProducts;
    }

    ///<summary>
    ///The minimum quantity of items required for the discount to apply.
    ///</summary>
    public class DiscountMinimumQuantity : GraphQLObject<DiscountMinimumQuantity>, IDiscountMinimumRequirement
    {
        ///<summary>
        ///The minimum quantity of items that's required for the discount to be applied.
        ///</summary>
        public ulong? greaterThanOrEqualToQuantity { get; set; }
    }

    ///<summary>
    ///The type of minimum requirement that must be met for the discount to be applied. For example, a customer must spend a minimum subtotal to be eligible for the discount. Alternatively, a customer must purchase a minimum quantity of items to be eligible for the discount.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountMinimumQuantity), typeDiscriminator: "DiscountMinimumQuantity")]
    [JsonDerivedType(typeof(DiscountMinimumSubtotal), typeDiscriminator: "DiscountMinimumSubtotal")]
    public interface IDiscountMinimumRequirement : IGraphQLObject
    {
        public DiscountMinimumQuantity? AsDiscountMinimumQuantity() => this as DiscountMinimumQuantity;
        public DiscountMinimumSubtotal? AsDiscountMinimumSubtotal() => this as DiscountMinimumSubtotal;
    }

    ///<summary>
    ///The minimum subtotal required for the discount to apply.
    ///</summary>
    public class DiscountMinimumSubtotal : GraphQLObject<DiscountMinimumSubtotal>, IDiscountMinimumRequirement
    {
        ///<summary>
        ///The minimum subtotal that's required for the discount to be applied.
        ///</summary>
        public MoneyV2? greaterThanOrEqualToSubtotal { get; set; }
    }

    ///<summary>
    ///A discount wrapper node.
    ///</summary>
    public class DiscountNode : GraphQLObject<DiscountNode>, IHasEvents, IHasMetafieldDefinitions, IHasMetafields, INode, IMetafieldReferencer
    {
        ///<summary>
        ///A discount.
        ///</summary>
        public IDiscount? discount { get; set; }
        ///<summary>
        ///The paginated list of events associated with the host subject.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DiscountNodes.
    ///</summary>
    public class DiscountNodeConnection : GraphQLObject<DiscountNodeConnection>, IConnectionWithNodesAndEdges<DiscountNodeEdge, DiscountNode>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DiscountNodeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DiscountNodeEdge.
        ///</summary>
        public IEnumerable<DiscountNode>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DiscountNode and a cursor during pagination.
    ///</summary>
    public class DiscountNodeEdge : GraphQLObject<DiscountNodeEdge>, IEdge<DiscountNode>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DiscountNodeEdge.
        ///</summary>
        public DiscountNode? node { get; set; }
    }

    ///<summary>
    ///The quantity of items discounted, the discount value, and how the discount will be applied.
    ///</summary>
    public class DiscountOnQuantity : GraphQLObject<DiscountOnQuantity>, IDiscountCustomerGetsValue
    {
        ///<summary>
        ///The discount's effect on qualifying items.
        ///</summary>
        public IDiscountEffect? effect { get; set; }
        ///<summary>
        ///The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount.
        ///</summary>
        public DiscountQuantity? quantity { get; set; }
    }

    ///<summary>
    ///A discount effect that gives customers a percentage off of specified items on their order.
    ///</summary>
    public class DiscountPercentage : GraphQLObject<DiscountPercentage>, IDiscountCustomerGetsValue, IDiscountEffect
    {
        ///<summary>
        ///The percentage value of the discount.
        ///</summary>
        public float? percentage { get; set; }
    }

    ///<summary>
    ///A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied.
    ///</summary>
    public class DiscountProducts : GraphQLObject<DiscountProducts>, IDiscountItems
    {
        ///<summary>
        ///The list of product variants that the discount can have as a prerequisite or the list of product variants to which the discount can be applied.
        ///</summary>
        public ProductVariantConnection? productVariants { get; set; }
        ///<summary>
        ///The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied.
        ///</summary>
        public ProductConnection? products { get; set; }
    }

    ///<summary>
    ///A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable.
    ///</summary>
    public class DiscountPurchaseAmount : GraphQLObject<DiscountPurchaseAmount>, IDiscountCustomerBuysValue
    {
        ///<summary>
        ///The purchase amount in decimal format.
        ///</summary>
        public decimal? amount { get; set; }
    }

    ///<summary>
    ///A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted.
    ///</summary>
    public class DiscountQuantity : GraphQLObject<DiscountQuantity>, IDiscountCustomerBuysValue
    {
        ///<summary>
        ///The quantity of items.
        ///</summary>
        public ulong? quantity { get; set; }
    }

    ///<summary>
    ///A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order.
    ///</summary>
    public class DiscountRedeemCode : GraphQLObject<DiscountRedeemCode>
    {
        ///<summary>
        ///The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? asyncUsageCount { get; set; }
        ///<summary>
        ///The code that a customer can use at checkout to receive a discount.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The application that created the discount redeem code.
        ///</summary>
        public App? createdBy { get; set; }
        ///<summary>
        ///A globally-unique ID of the discount redeem code.
        ///</summary>
        public string? id { get; set; }
    }

    ///<summary>
    ///Return type for `discountRedeemCodeBulkAdd` mutation.
    ///</summary>
    public class DiscountRedeemCodeBulkAddPayload : GraphQLObject<DiscountRedeemCodeBulkAddPayload>
    {
        ///<summary>
        ///The ID of the discount redeem code bulk creation operation. The properties and status of the operation can be tracked using the [`DiscountRedeemCodeBulkCreation` query](https://shopify.dev/api/admin-graphql/2022-04/queries/discountRedeemCodeBulkCreation).
        ///</summary>
        public DiscountRedeemCodeBulkCreation? bulkCreation { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The properties and status of a bulk discount redeem code creation operation.
    ///</summary>
    public class DiscountRedeemCodeBulkCreation : GraphQLObject<DiscountRedeemCodeBulkCreation>, INode
    {
        ///<summary>
        ///The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation.
        ///</summary>
        public DiscountRedeemCodeBulkCreationCodeConnection? codes { get; set; }
        ///<summary>
        ///The number of codes to create.
        ///</summary>
        public int? codesCount { get; set; }
        ///<summary>
        ///The date and time when the bulk creation was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The code discount associated with the created codes.
        ///</summary>
        public DiscountCodeNode? discountCode { get; set; }
        ///<summary>
        ///Whether the bulk creation is still queued (`false`) or has been run (`true`).
        ///</summary>
        public bool? done { get; set; }
        ///<summary>
        ///The number of codes that weren't created successfully.
        ///</summary>
        public int? failedCount { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The number of codes created successfully.
        ///</summary>
        public int? importedCount { get; set; }
    }

    ///<summary>
    ///A result of a discount redeem code creation operation created by a bulk creation.
    ///</summary>
    public class DiscountRedeemCodeBulkCreationCode : GraphQLObject<DiscountRedeemCodeBulkCreationCode>
    {
        ///<summary>
        ///The code to use in the discount redeem code creation operation.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The successfully created discount redeem code.
        ///
        ///If the discount redeem code couldn't be created, then this field is `null``.
        ///</summary>
        public DiscountRedeemCode? discountRedeemCode { get; set; }
        ///<summary>
        ///A list of errors that occurred during the creation operation of the discount redeem code.
        ///</summary>
        public IEnumerable<DiscountUserError>? errors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
    ///</summary>
    public class DiscountRedeemCodeBulkCreationCodeConnection : GraphQLObject<DiscountRedeemCodeBulkCreationCodeConnection>, IConnectionWithNodesAndEdges<DiscountRedeemCodeBulkCreationCodeEdge, DiscountRedeemCodeBulkCreationCode>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DiscountRedeemCodeBulkCreationCodeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DiscountRedeemCodeBulkCreationCodeEdge.
        ///</summary>
        public IEnumerable<DiscountRedeemCodeBulkCreationCode>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
    ///</summary>
    public class DiscountRedeemCodeBulkCreationCodeEdge : GraphQLObject<DiscountRedeemCodeBulkCreationCodeEdge>, IEdge<DiscountRedeemCodeBulkCreationCode>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DiscountRedeemCodeBulkCreationCodeEdge.
        ///</summary>
        public DiscountRedeemCodeBulkCreationCode? node { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DiscountRedeemCodes.
    ///</summary>
    public class DiscountRedeemCodeConnection : GraphQLObject<DiscountRedeemCodeConnection>, IConnectionWithNodesAndEdges<DiscountRedeemCodeEdge, DiscountRedeemCode>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DiscountRedeemCodeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DiscountRedeemCodeEdge.
        ///</summary>
        public IEnumerable<DiscountRedeemCode>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
    ///</summary>
    public class DiscountRedeemCodeEdge : GraphQLObject<DiscountRedeemCodeEdge>, IEdge<DiscountRedeemCode>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DiscountRedeemCodeEdge.
        ///</summary>
        public DiscountRedeemCode? node { get; set; }
    }

    ///<summary>
    ///A shareable URL for a discount code.
    ///</summary>
    public class DiscountShareableUrl : GraphQLObject<DiscountShareableUrl>
    {
        ///<summary>
        ///The image URL of the item (product or collection) to which the discount applies.
        ///</summary>
        public Image? targetItemImage { get; set; }
        ///<summary>
        ///The type of page that's associated with the URL.
        ///</summary>
        public DiscountShareableUrlTargetType? targetType { get; set; }
        ///<summary>
        ///The title of the page that's associated with the URL.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The URL for the discount code.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The type of page where a shareable discount URL lands.
    ///</summary>
    public enum DiscountShareableUrlTargetType
    {
        ///<summary>
        ///The URL lands on a home page.
        ///</summary>
        HOME,
        ///<summary>
        ///The URL lands on a product page.
        ///</summary>
        PRODUCT,
        ///<summary>
        ///The URL lands on a collection page.
        ///</summary>
        COLLECTION,
    }

    ///<summary>
    ///The type used to target the eligible countries of an order's shipping destination for which the discount applies. For example, the discount might be applicable when shipping to all countries, or only to a set of countries.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DiscountCountries), typeDiscriminator: "DiscountCountries")]
    [JsonDerivedType(typeof(DiscountCountryAll), typeDiscriminator: "DiscountCountryAll")]
    public interface IDiscountShippingDestinationSelection : IGraphQLObject
    {
        public DiscountCountries? AsDiscountCountries() => this as DiscountCountries;
        public DiscountCountryAll? AsDiscountCountryAll() => this as DiscountCountryAll;
    }

    ///<summary>
    ///The set of valid sort keys for the Discount query.
    ///</summary>
    public enum DiscountSortKeys
    {
        ///<summary>
        ///Sort by the `starts_at` value.
        ///</summary>
        STARTS_AT,
        ///<summary>
        ///Sort by the `ends_at` value.
        ///</summary>
        ENDS_AT,
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The status of the discount.
    ///</summary>
    public enum DiscountStatus
    {
        ///<summary>
        ///The discount is active.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The discount is expired.
        ///</summary>
        EXPIRED,
        ///<summary>
        ///The discount is scheduled.
        ///</summary>
        SCHEDULED,
    }

    ///<summary>
    ///The type of line (line item or shipping line) on an order that the subscription discount is applicable towards.
    ///</summary>
    public enum DiscountTargetType
    {
        ///<summary>
        ///The discount applies onto line items.
        ///</summary>
        LINE_ITEM,
        ///<summary>
        ///The discount applies onto shipping lines.
        ///</summary>
        SHIPPING_LINE,
    }

    ///<summary>
    ///The type of the subscription discount.
    ///</summary>
    public enum DiscountType
    {
        ///<summary>
        ///Manual discount type.
        ///</summary>
        MANUAL,
        ///<summary>
        ///Code discount type.
        ///</summary>
        CODE_DISCOUNT,
        ///<summary>
        ///Automatic discount type.
        ///</summary>
        AUTOMATIC_DISCOUNT,
    }

    ///<summary>
    ///An error that occurs during the execution of a discount mutation.
    ///</summary>
    public class DiscountUserError : GraphQLObject<DiscountUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public DiscountErrorCode? code { get; set; }
        ///<summary>
        ///Extra information about this error.
        ///</summary>
        public string? extraInfo { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Represents an error in the input of a mutation.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AbandonmentEmailStateUpdateUserError), typeDiscriminator: "AbandonmentEmailStateUpdateUserError")]
    [JsonDerivedType(typeof(AbandonmentUpdateActivitiesDeliveryStatusesUserError), typeDiscriminator: "AbandonmentUpdateActivitiesDeliveryStatusesUserError")]
    [JsonDerivedType(typeof(AppSubscriptionTrialExtendUserError), typeDiscriminator: "AppSubscriptionTrialExtendUserError")]
    [JsonDerivedType(typeof(BillingAttemptUserError), typeDiscriminator: "BillingAttemptUserError")]
    [JsonDerivedType(typeof(BulkMutationUserError), typeDiscriminator: "BulkMutationUserError")]
    [JsonDerivedType(typeof(BulkProductResourceFeedbackCreateUserError), typeDiscriminator: "BulkProductResourceFeedbackCreateUserError")]
    [JsonDerivedType(typeof(BusinessCustomerUserError), typeDiscriminator: "BusinessCustomerUserError")]
    [JsonDerivedType(typeof(CartTransformCreateUserError), typeDiscriminator: "CartTransformCreateUserError")]
    [JsonDerivedType(typeof(CartTransformDeleteUserError), typeDiscriminator: "CartTransformDeleteUserError")]
    [JsonDerivedType(typeof(CatalogUserError), typeDiscriminator: "CatalogUserError")]
    [JsonDerivedType(typeof(CheckoutBrandingUpsertUserError), typeDiscriminator: "CheckoutBrandingUpsertUserError")]
    [JsonDerivedType(typeof(CollectionAddProductsV2UserError), typeDiscriminator: "CollectionAddProductsV2UserError")]
    [JsonDerivedType(typeof(CustomerCancelDataErasureUserError), typeDiscriminator: "CustomerCancelDataErasureUserError")]
    [JsonDerivedType(typeof(CustomerEmailMarketingConsentUpdateUserError), typeDiscriminator: "CustomerEmailMarketingConsentUpdateUserError")]
    [JsonDerivedType(typeof(CustomerMergeUserError), typeDiscriminator: "CustomerMergeUserError")]
    [JsonDerivedType(typeof(CustomerPaymentMethodCreateFromDuplicationDataUserError), typeDiscriminator: "CustomerPaymentMethodCreateFromDuplicationDataUserError")]
    [JsonDerivedType(typeof(CustomerPaymentMethodGetDuplicationDataUserError), typeDiscriminator: "CustomerPaymentMethodGetDuplicationDataUserError")]
    [JsonDerivedType(typeof(CustomerPaymentMethodGetUpdateUrlUserError), typeDiscriminator: "CustomerPaymentMethodGetUpdateUrlUserError")]
    [JsonDerivedType(typeof(CustomerPaymentMethodRemoteUserError), typeDiscriminator: "CustomerPaymentMethodRemoteUserError")]
    [JsonDerivedType(typeof(CustomerPaymentMethodUserError), typeDiscriminator: "CustomerPaymentMethodUserError")]
    [JsonDerivedType(typeof(CustomerRequestDataErasureUserError), typeDiscriminator: "CustomerRequestDataErasureUserError")]
    [JsonDerivedType(typeof(CustomerSegmentMembersQueryUserError), typeDiscriminator: "CustomerSegmentMembersQueryUserError")]
    [JsonDerivedType(typeof(CustomerSmsMarketingConsentError), typeDiscriminator: "CustomerSmsMarketingConsentError")]
    [JsonDerivedType(typeof(DelegateAccessTokenCreateUserError), typeDiscriminator: "DelegateAccessTokenCreateUserError")]
    [JsonDerivedType(typeof(DelegateAccessTokenDestroyUserError), typeDiscriminator: "DelegateAccessTokenDestroyUserError")]
    [JsonDerivedType(typeof(DeliveryCustomizationError), typeDiscriminator: "DeliveryCustomizationError")]
    [JsonDerivedType(typeof(DeliveryLocationLocalPickupSettingsError), typeDiscriminator: "DeliveryLocationLocalPickupSettingsError")]
    [JsonDerivedType(typeof(DiscountUserError), typeDiscriminator: "DiscountUserError")]
    [JsonDerivedType(typeof(DisputeEvidenceUpdateUserError), typeDiscriminator: "DisputeEvidenceUpdateUserError")]
    [JsonDerivedType(typeof(ErrorsServerPixelUserError), typeDiscriminator: "ErrorsServerPixelUserError")]
    [JsonDerivedType(typeof(ErrorsWebPixelUserError), typeDiscriminator: "ErrorsWebPixelUserError")]
    [JsonDerivedType(typeof(FilesUserError), typeDiscriminator: "FilesUserError")]
    [JsonDerivedType(typeof(FulfillmentConstraintRuleCreateUserError), typeDiscriminator: "FulfillmentConstraintRuleCreateUserError")]
    [JsonDerivedType(typeof(FulfillmentConstraintRuleDeleteUserError), typeDiscriminator: "FulfillmentConstraintRuleDeleteUserError")]
    [JsonDerivedType(typeof(FulfillmentOrderHoldUserError), typeDiscriminator: "FulfillmentOrderHoldUserError")]
    [JsonDerivedType(typeof(FulfillmentOrderLineItemsPreparedForPickupUserError), typeDiscriminator: "FulfillmentOrderLineItemsPreparedForPickupUserError")]
    [JsonDerivedType(typeof(FulfillmentOrderMergeUserError), typeDiscriminator: "FulfillmentOrderMergeUserError")]
    [JsonDerivedType(typeof(FulfillmentOrderReleaseHoldUserError), typeDiscriminator: "FulfillmentOrderReleaseHoldUserError")]
    [JsonDerivedType(typeof(FulfillmentOrderRescheduleUserError), typeDiscriminator: "FulfillmentOrderRescheduleUserError")]
    [JsonDerivedType(typeof(FulfillmentOrderSplitUserError), typeDiscriminator: "FulfillmentOrderSplitUserError")]
    [JsonDerivedType(typeof(FulfillmentOrdersReleaseHoldsUserError), typeDiscriminator: "FulfillmentOrdersReleaseHoldsUserError")]
    [JsonDerivedType(typeof(FulfillmentOrdersSetFulfillmentDeadlineUserError), typeDiscriminator: "FulfillmentOrdersSetFulfillmentDeadlineUserError")]
    [JsonDerivedType(typeof(GiftCardUserError), typeDiscriminator: "GiftCardUserError")]
    [JsonDerivedType(typeof(InventoryAdjustQuantitiesUserError), typeDiscriminator: "InventoryAdjustQuantitiesUserError")]
    [JsonDerivedType(typeof(InventoryBulkToggleActivationUserError), typeDiscriminator: "InventoryBulkToggleActivationUserError")]
    [JsonDerivedType(typeof(InventoryMoveQuantitiesUserError), typeDiscriminator: "InventoryMoveQuantitiesUserError")]
    [JsonDerivedType(typeof(InventorySetOnHandQuantitiesUserError), typeDiscriminator: "InventorySetOnHandQuantitiesUserError")]
    [JsonDerivedType(typeof(InventorySetScheduledChangesUserError), typeDiscriminator: "InventorySetScheduledChangesUserError")]
    [JsonDerivedType(typeof(LocationActivateUserError), typeDiscriminator: "LocationActivateUserError")]
    [JsonDerivedType(typeof(LocationAddUserError), typeDiscriminator: "LocationAddUserError")]
    [JsonDerivedType(typeof(LocationDeactivateUserError), typeDiscriminator: "LocationDeactivateUserError")]
    [JsonDerivedType(typeof(LocationDeleteUserError), typeDiscriminator: "LocationDeleteUserError")]
    [JsonDerivedType(typeof(LocationEditUserError), typeDiscriminator: "LocationEditUserError")]
    [JsonDerivedType(typeof(MarketCurrencySettingsUserError), typeDiscriminator: "MarketCurrencySettingsUserError")]
    [JsonDerivedType(typeof(MarketUserError), typeDiscriminator: "MarketUserError")]
    [JsonDerivedType(typeof(MarketingActivityUserError), typeDiscriminator: "MarketingActivityUserError")]
    [JsonDerivedType(typeof(MediaUserError), typeDiscriminator: "MediaUserError")]
    [JsonDerivedType(typeof(MetafieldDefinitionCreateUserError), typeDiscriminator: "MetafieldDefinitionCreateUserError")]
    [JsonDerivedType(typeof(MetafieldDefinitionDeleteUserError), typeDiscriminator: "MetafieldDefinitionDeleteUserError")]
    [JsonDerivedType(typeof(MetafieldDefinitionPinUserError), typeDiscriminator: "MetafieldDefinitionPinUserError")]
    [JsonDerivedType(typeof(MetafieldDefinitionUnpinUserError), typeDiscriminator: "MetafieldDefinitionUnpinUserError")]
    [JsonDerivedType(typeof(MetafieldDefinitionUpdateUserError), typeDiscriminator: "MetafieldDefinitionUpdateUserError")]
    [JsonDerivedType(typeof(MetafieldsSetUserError), typeDiscriminator: "MetafieldsSetUserError")]
    [JsonDerivedType(typeof(MetaobjectUserError), typeDiscriminator: "MetaobjectUserError")]
    [JsonDerivedType(typeof(OrderCancelUserError), typeDiscriminator: "OrderCancelUserError")]
    [JsonDerivedType(typeof(OrderCreateMandatePaymentUserError), typeDiscriminator: "OrderCreateMandatePaymentUserError")]
    [JsonDerivedType(typeof(OrderEditRemoveDiscountUserError), typeDiscriminator: "OrderEditRemoveDiscountUserError")]
    [JsonDerivedType(typeof(OrderEditUpdateDiscountUserError), typeDiscriminator: "OrderEditUpdateDiscountUserError")]
    [JsonDerivedType(typeof(OrderInvoiceSendUserError), typeDiscriminator: "OrderInvoiceSendUserError")]
    [JsonDerivedType(typeof(PaymentCustomizationError), typeDiscriminator: "PaymentCustomizationError")]
    [JsonDerivedType(typeof(PaymentReminderSendUserError), typeDiscriminator: "PaymentReminderSendUserError")]
    [JsonDerivedType(typeof(PaymentTermsCreateUserError), typeDiscriminator: "PaymentTermsCreateUserError")]
    [JsonDerivedType(typeof(PaymentTermsDeleteUserError), typeDiscriminator: "PaymentTermsDeleteUserError")]
    [JsonDerivedType(typeof(PaymentTermsUpdateUserError), typeDiscriminator: "PaymentTermsUpdateUserError")]
    [JsonDerivedType(typeof(PriceListFixedPricesByProductBulkUpdateUserError), typeDiscriminator: "PriceListFixedPricesByProductBulkUpdateUserError")]
    [JsonDerivedType(typeof(PriceListPriceUserError), typeDiscriminator: "PriceListPriceUserError")]
    [JsonDerivedType(typeof(PriceListUserError), typeDiscriminator: "PriceListUserError")]
    [JsonDerivedType(typeof(PriceRuleUserError), typeDiscriminator: "PriceRuleUserError")]
    [JsonDerivedType(typeof(ProductChangeStatusUserError), typeDiscriminator: "ProductChangeStatusUserError")]
    [JsonDerivedType(typeof(ProductDeleteUserError), typeDiscriminator: "ProductDeleteUserError")]
    [JsonDerivedType(typeof(ProductDuplicateUserError), typeDiscriminator: "ProductDuplicateUserError")]
    [JsonDerivedType(typeof(ProductFeedCreateUserError), typeDiscriminator: "ProductFeedCreateUserError")]
    [JsonDerivedType(typeof(ProductFeedDeleteUserError), typeDiscriminator: "ProductFeedDeleteUserError")]
    [JsonDerivedType(typeof(ProductFullSyncUserError), typeDiscriminator: "ProductFullSyncUserError")]
    [JsonDerivedType(typeof(ProductVariantRelationshipBulkUpdateUserError), typeDiscriminator: "ProductVariantRelationshipBulkUpdateUserError")]
    [JsonDerivedType(typeof(ProductVariantsBulkCreateUserError), typeDiscriminator: "ProductVariantsBulkCreateUserError")]
    [JsonDerivedType(typeof(ProductVariantsBulkDeleteUserError), typeDiscriminator: "ProductVariantsBulkDeleteUserError")]
    [JsonDerivedType(typeof(ProductVariantsBulkReorderUserError), typeDiscriminator: "ProductVariantsBulkReorderUserError")]
    [JsonDerivedType(typeof(ProductVariantsBulkUpdateUserError), typeDiscriminator: "ProductVariantsBulkUpdateUserError")]
    [JsonDerivedType(typeof(ProductVariantsBulkUpdateUserError), typeDiscriminator: "ProductVariantsBulkUpdateUserError")]
    [JsonDerivedType(typeof(PubSubWebhookSubscriptionCreateUserError), typeDiscriminator: "PubSubWebhookSubscriptionCreateUserError")]
    [JsonDerivedType(typeof(PubSubWebhookSubscriptionUpdateUserError), typeDiscriminator: "PubSubWebhookSubscriptionUpdateUserError")]
    [JsonDerivedType(typeof(PublicationUserError), typeDiscriminator: "PublicationUserError")]
    [JsonDerivedType(typeof(QuantityPricingByVariantUserError), typeDiscriminator: "QuantityPricingByVariantUserError")]
    [JsonDerivedType(typeof(QuantityRuleUserError), typeDiscriminator: "QuantityRuleUserError")]
    [JsonDerivedType(typeof(ReturnUserError), typeDiscriminator: "ReturnUserError")]
    [JsonDerivedType(typeof(SellingPlanGroupUserError), typeDiscriminator: "SellingPlanGroupUserError")]
    [JsonDerivedType(typeof(ShopPolicyUserError), typeDiscriminator: "ShopPolicyUserError")]
    [JsonDerivedType(typeof(ShopResourceFeedbackCreateUserError), typeDiscriminator: "ShopResourceFeedbackCreateUserError")]
    [JsonDerivedType(typeof(StandardMetafieldDefinitionEnableUserError), typeDiscriminator: "StandardMetafieldDefinitionEnableUserError")]
    [JsonDerivedType(typeof(SubscriptionBillingCycleSkipUserError), typeDiscriminator: "SubscriptionBillingCycleSkipUserError")]
    [JsonDerivedType(typeof(SubscriptionBillingCycleUnskipUserError), typeDiscriminator: "SubscriptionBillingCycleUnskipUserError")]
    [JsonDerivedType(typeof(SubscriptionBillingCycleUserError), typeDiscriminator: "SubscriptionBillingCycleUserError")]
    [JsonDerivedType(typeof(SubscriptionContractStatusUpdateUserError), typeDiscriminator: "SubscriptionContractStatusUpdateUserError")]
    [JsonDerivedType(typeof(SubscriptionContractUserError), typeDiscriminator: "SubscriptionContractUserError")]
    [JsonDerivedType(typeof(SubscriptionDraftUserError), typeDiscriminator: "SubscriptionDraftUserError")]
    [JsonDerivedType(typeof(TaxAppConfigureUserError), typeDiscriminator: "TaxAppConfigureUserError")]
    [JsonDerivedType(typeof(TranslationUserError), typeDiscriminator: "TranslationUserError")]
    [JsonDerivedType(typeof(UrlRedirectBulkDeleteByIdsUserError), typeDiscriminator: "UrlRedirectBulkDeleteByIdsUserError")]
    [JsonDerivedType(typeof(UrlRedirectBulkDeleteBySavedSearchUserError), typeDiscriminator: "UrlRedirectBulkDeleteBySavedSearchUserError")]
    [JsonDerivedType(typeof(UrlRedirectBulkDeleteBySearchUserError), typeDiscriminator: "UrlRedirectBulkDeleteBySearchUserError")]
    [JsonDerivedType(typeof(UrlRedirectImportUserError), typeDiscriminator: "UrlRedirectImportUserError")]
    [JsonDerivedType(typeof(UrlRedirectUserError), typeDiscriminator: "UrlRedirectUserError")]
    [JsonDerivedType(typeof(UserError), typeDiscriminator: "UserError")]
    [JsonDerivedType(typeof(ValidationUserError), typeDiscriminator: "ValidationUserError")]
    public interface IDisplayableError : IGraphQLObject
    {
        public AbandonmentEmailStateUpdateUserError? AsAbandonmentEmailStateUpdateUserError() => this as AbandonmentEmailStateUpdateUserError;
        public AbandonmentUpdateActivitiesDeliveryStatusesUserError? AsAbandonmentUpdateActivitiesDeliveryStatusesUserError() => this as AbandonmentUpdateActivitiesDeliveryStatusesUserError;
        public AppSubscriptionTrialExtendUserError? AsAppSubscriptionTrialExtendUserError() => this as AppSubscriptionTrialExtendUserError;
        public BillingAttemptUserError? AsBillingAttemptUserError() => this as BillingAttemptUserError;
        public BulkMutationUserError? AsBulkMutationUserError() => this as BulkMutationUserError;
        public BulkProductResourceFeedbackCreateUserError? AsBulkProductResourceFeedbackCreateUserError() => this as BulkProductResourceFeedbackCreateUserError;
        public BusinessCustomerUserError? AsBusinessCustomerUserError() => this as BusinessCustomerUserError;
        public CartTransformCreateUserError? AsCartTransformCreateUserError() => this as CartTransformCreateUserError;
        public CartTransformDeleteUserError? AsCartTransformDeleteUserError() => this as CartTransformDeleteUserError;
        public CatalogUserError? AsCatalogUserError() => this as CatalogUserError;
        public CheckoutBrandingUpsertUserError? AsCheckoutBrandingUpsertUserError() => this as CheckoutBrandingUpsertUserError;
        public CollectionAddProductsV2UserError? AsCollectionAddProductsV2UserError() => this as CollectionAddProductsV2UserError;
        public CustomerCancelDataErasureUserError? AsCustomerCancelDataErasureUserError() => this as CustomerCancelDataErasureUserError;
        public CustomerEmailMarketingConsentUpdateUserError? AsCustomerEmailMarketingConsentUpdateUserError() => this as CustomerEmailMarketingConsentUpdateUserError;
        public CustomerMergeUserError? AsCustomerMergeUserError() => this as CustomerMergeUserError;
        public CustomerPaymentMethodCreateFromDuplicationDataUserError? AsCustomerPaymentMethodCreateFromDuplicationDataUserError() => this as CustomerPaymentMethodCreateFromDuplicationDataUserError;
        public CustomerPaymentMethodGetDuplicationDataUserError? AsCustomerPaymentMethodGetDuplicationDataUserError() => this as CustomerPaymentMethodGetDuplicationDataUserError;
        public CustomerPaymentMethodGetUpdateUrlUserError? AsCustomerPaymentMethodGetUpdateUrlUserError() => this as CustomerPaymentMethodGetUpdateUrlUserError;
        public CustomerPaymentMethodRemoteUserError? AsCustomerPaymentMethodRemoteUserError() => this as CustomerPaymentMethodRemoteUserError;
        public CustomerPaymentMethodUserError? AsCustomerPaymentMethodUserError() => this as CustomerPaymentMethodUserError;
        public CustomerRequestDataErasureUserError? AsCustomerRequestDataErasureUserError() => this as CustomerRequestDataErasureUserError;
        public CustomerSegmentMembersQueryUserError? AsCustomerSegmentMembersQueryUserError() => this as CustomerSegmentMembersQueryUserError;
        public CustomerSmsMarketingConsentError? AsCustomerSmsMarketingConsentError() => this as CustomerSmsMarketingConsentError;
        public DelegateAccessTokenCreateUserError? AsDelegateAccessTokenCreateUserError() => this as DelegateAccessTokenCreateUserError;
        public DelegateAccessTokenDestroyUserError? AsDelegateAccessTokenDestroyUserError() => this as DelegateAccessTokenDestroyUserError;
        public DeliveryCustomizationError? AsDeliveryCustomizationError() => this as DeliveryCustomizationError;
        public DeliveryLocationLocalPickupSettingsError? AsDeliveryLocationLocalPickupSettingsError() => this as DeliveryLocationLocalPickupSettingsError;
        public DiscountUserError? AsDiscountUserError() => this as DiscountUserError;
        public DisputeEvidenceUpdateUserError? AsDisputeEvidenceUpdateUserError() => this as DisputeEvidenceUpdateUserError;
        public ErrorsServerPixelUserError? AsErrorsServerPixelUserError() => this as ErrorsServerPixelUserError;
        public ErrorsWebPixelUserError? AsErrorsWebPixelUserError() => this as ErrorsWebPixelUserError;
        public FilesUserError? AsFilesUserError() => this as FilesUserError;
        public FulfillmentConstraintRuleCreateUserError? AsFulfillmentConstraintRuleCreateUserError() => this as FulfillmentConstraintRuleCreateUserError;
        public FulfillmentConstraintRuleDeleteUserError? AsFulfillmentConstraintRuleDeleteUserError() => this as FulfillmentConstraintRuleDeleteUserError;
        public FulfillmentOrderHoldUserError? AsFulfillmentOrderHoldUserError() => this as FulfillmentOrderHoldUserError;
        public FulfillmentOrderLineItemsPreparedForPickupUserError? AsFulfillmentOrderLineItemsPreparedForPickupUserError() => this as FulfillmentOrderLineItemsPreparedForPickupUserError;
        public FulfillmentOrderMergeUserError? AsFulfillmentOrderMergeUserError() => this as FulfillmentOrderMergeUserError;
        public FulfillmentOrderReleaseHoldUserError? AsFulfillmentOrderReleaseHoldUserError() => this as FulfillmentOrderReleaseHoldUserError;
        public FulfillmentOrderRescheduleUserError? AsFulfillmentOrderRescheduleUserError() => this as FulfillmentOrderRescheduleUserError;
        public FulfillmentOrderSplitUserError? AsFulfillmentOrderSplitUserError() => this as FulfillmentOrderSplitUserError;
        public FulfillmentOrdersReleaseHoldsUserError? AsFulfillmentOrdersReleaseHoldsUserError() => this as FulfillmentOrdersReleaseHoldsUserError;
        public FulfillmentOrdersSetFulfillmentDeadlineUserError? AsFulfillmentOrdersSetFulfillmentDeadlineUserError() => this as FulfillmentOrdersSetFulfillmentDeadlineUserError;
        public GiftCardUserError? AsGiftCardUserError() => this as GiftCardUserError;
        public InventoryAdjustQuantitiesUserError? AsInventoryAdjustQuantitiesUserError() => this as InventoryAdjustQuantitiesUserError;
        public InventoryBulkToggleActivationUserError? AsInventoryBulkToggleActivationUserError() => this as InventoryBulkToggleActivationUserError;
        public InventoryMoveQuantitiesUserError? AsInventoryMoveQuantitiesUserError() => this as InventoryMoveQuantitiesUserError;
        public InventorySetOnHandQuantitiesUserError? AsInventorySetOnHandQuantitiesUserError() => this as InventorySetOnHandQuantitiesUserError;
        public InventorySetScheduledChangesUserError? AsInventorySetScheduledChangesUserError() => this as InventorySetScheduledChangesUserError;
        public LocationActivateUserError? AsLocationActivateUserError() => this as LocationActivateUserError;
        public LocationAddUserError? AsLocationAddUserError() => this as LocationAddUserError;
        public LocationDeactivateUserError? AsLocationDeactivateUserError() => this as LocationDeactivateUserError;
        public LocationDeleteUserError? AsLocationDeleteUserError() => this as LocationDeleteUserError;
        public LocationEditUserError? AsLocationEditUserError() => this as LocationEditUserError;
        public MarketCurrencySettingsUserError? AsMarketCurrencySettingsUserError() => this as MarketCurrencySettingsUserError;
        public MarketUserError? AsMarketUserError() => this as MarketUserError;
        public MarketingActivityUserError? AsMarketingActivityUserError() => this as MarketingActivityUserError;
        public MediaUserError? AsMediaUserError() => this as MediaUserError;
        public MetafieldDefinitionCreateUserError? AsMetafieldDefinitionCreateUserError() => this as MetafieldDefinitionCreateUserError;
        public MetafieldDefinitionDeleteUserError? AsMetafieldDefinitionDeleteUserError() => this as MetafieldDefinitionDeleteUserError;
        public MetafieldDefinitionPinUserError? AsMetafieldDefinitionPinUserError() => this as MetafieldDefinitionPinUserError;
        public MetafieldDefinitionUnpinUserError? AsMetafieldDefinitionUnpinUserError() => this as MetafieldDefinitionUnpinUserError;
        public MetafieldDefinitionUpdateUserError? AsMetafieldDefinitionUpdateUserError() => this as MetafieldDefinitionUpdateUserError;
        public MetafieldsSetUserError? AsMetafieldsSetUserError() => this as MetafieldsSetUserError;
        public MetaobjectUserError? AsMetaobjectUserError() => this as MetaobjectUserError;
        public OrderCancelUserError? AsOrderCancelUserError() => this as OrderCancelUserError;
        public OrderCreateMandatePaymentUserError? AsOrderCreateMandatePaymentUserError() => this as OrderCreateMandatePaymentUserError;
        public OrderEditRemoveDiscountUserError? AsOrderEditRemoveDiscountUserError() => this as OrderEditRemoveDiscountUserError;
        public OrderEditUpdateDiscountUserError? AsOrderEditUpdateDiscountUserError() => this as OrderEditUpdateDiscountUserError;
        public OrderInvoiceSendUserError? AsOrderInvoiceSendUserError() => this as OrderInvoiceSendUserError;
        public PaymentCustomizationError? AsPaymentCustomizationError() => this as PaymentCustomizationError;
        public PaymentReminderSendUserError? AsPaymentReminderSendUserError() => this as PaymentReminderSendUserError;
        public PaymentTermsCreateUserError? AsPaymentTermsCreateUserError() => this as PaymentTermsCreateUserError;
        public PaymentTermsDeleteUserError? AsPaymentTermsDeleteUserError() => this as PaymentTermsDeleteUserError;
        public PaymentTermsUpdateUserError? AsPaymentTermsUpdateUserError() => this as PaymentTermsUpdateUserError;
        public PriceListFixedPricesByProductBulkUpdateUserError? AsPriceListFixedPricesByProductBulkUpdateUserError() => this as PriceListFixedPricesByProductBulkUpdateUserError;
        public PriceListPriceUserError? AsPriceListPriceUserError() => this as PriceListPriceUserError;
        public PriceListUserError? AsPriceListUserError() => this as PriceListUserError;
        public PriceRuleUserError? AsPriceRuleUserError() => this as PriceRuleUserError;
        public ProductChangeStatusUserError? AsProductChangeStatusUserError() => this as ProductChangeStatusUserError;
        public ProductDeleteUserError? AsProductDeleteUserError() => this as ProductDeleteUserError;
        public ProductDuplicateUserError? AsProductDuplicateUserError() => this as ProductDuplicateUserError;
        public ProductFeedCreateUserError? AsProductFeedCreateUserError() => this as ProductFeedCreateUserError;
        public ProductFeedDeleteUserError? AsProductFeedDeleteUserError() => this as ProductFeedDeleteUserError;
        public ProductFullSyncUserError? AsProductFullSyncUserError() => this as ProductFullSyncUserError;
        public ProductVariantRelationshipBulkUpdateUserError? AsProductVariantRelationshipBulkUpdateUserError() => this as ProductVariantRelationshipBulkUpdateUserError;
        public ProductVariantsBulkCreateUserError? AsProductVariantsBulkCreateUserError() => this as ProductVariantsBulkCreateUserError;
        public ProductVariantsBulkDeleteUserError? AsProductVariantsBulkDeleteUserError() => this as ProductVariantsBulkDeleteUserError;
        public ProductVariantsBulkReorderUserError? AsProductVariantsBulkReorderUserError() => this as ProductVariantsBulkReorderUserError;
        public ProductVariantsBulkUpdateUserError? AsProductVariantsBulkUpdateUserError() => this as ProductVariantsBulkUpdateUserError;
        public PubSubWebhookSubscriptionCreateUserError? AsPubSubWebhookSubscriptionCreateUserError() => this as PubSubWebhookSubscriptionCreateUserError;
        public PubSubWebhookSubscriptionUpdateUserError? AsPubSubWebhookSubscriptionUpdateUserError() => this as PubSubWebhookSubscriptionUpdateUserError;
        public PublicationUserError? AsPublicationUserError() => this as PublicationUserError;
        public QuantityPricingByVariantUserError? AsQuantityPricingByVariantUserError() => this as QuantityPricingByVariantUserError;
        public QuantityRuleUserError? AsQuantityRuleUserError() => this as QuantityRuleUserError;
        public ReturnUserError? AsReturnUserError() => this as ReturnUserError;
        public SellingPlanGroupUserError? AsSellingPlanGroupUserError() => this as SellingPlanGroupUserError;
        public ShopPolicyUserError? AsShopPolicyUserError() => this as ShopPolicyUserError;
        public ShopResourceFeedbackCreateUserError? AsShopResourceFeedbackCreateUserError() => this as ShopResourceFeedbackCreateUserError;
        public StandardMetafieldDefinitionEnableUserError? AsStandardMetafieldDefinitionEnableUserError() => this as StandardMetafieldDefinitionEnableUserError;
        public SubscriptionBillingCycleSkipUserError? AsSubscriptionBillingCycleSkipUserError() => this as SubscriptionBillingCycleSkipUserError;
        public SubscriptionBillingCycleUnskipUserError? AsSubscriptionBillingCycleUnskipUserError() => this as SubscriptionBillingCycleUnskipUserError;
        public SubscriptionBillingCycleUserError? AsSubscriptionBillingCycleUserError() => this as SubscriptionBillingCycleUserError;
        public SubscriptionContractStatusUpdateUserError? AsSubscriptionContractStatusUpdateUserError() => this as SubscriptionContractStatusUpdateUserError;
        public SubscriptionContractUserError? AsSubscriptionContractUserError() => this as SubscriptionContractUserError;
        public SubscriptionDraftUserError? AsSubscriptionDraftUserError() => this as SubscriptionDraftUserError;
        public TaxAppConfigureUserError? AsTaxAppConfigureUserError() => this as TaxAppConfigureUserError;
        public TranslationUserError? AsTranslationUserError() => this as TranslationUserError;
        public UrlRedirectBulkDeleteByIdsUserError? AsUrlRedirectBulkDeleteByIdsUserError() => this as UrlRedirectBulkDeleteByIdsUserError;
        public UrlRedirectBulkDeleteBySavedSearchUserError? AsUrlRedirectBulkDeleteBySavedSearchUserError() => this as UrlRedirectBulkDeleteBySavedSearchUserError;
        public UrlRedirectBulkDeleteBySearchUserError? AsUrlRedirectBulkDeleteBySearchUserError() => this as UrlRedirectBulkDeleteBySearchUserError;
        public UrlRedirectImportUserError? AsUrlRedirectImportUserError() => this as UrlRedirectImportUserError;
        public UrlRedirectUserError? AsUrlRedirectUserError() => this as UrlRedirectUserError;
        public UserError? AsUserError() => this as UserError;
        public ValidationUserError? AsValidationUserError() => this as ValidationUserError;
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; }
    }

    ///<summary>
    ///Return type for `disputeEvidenceUpdate` mutation.
    ///</summary>
    public class DisputeEvidenceUpdatePayload : GraphQLObject<DisputeEvidenceUpdatePayload>
    {
        ///<summary>
        ///The updated dispute evidence.
        ///</summary>
        public ShopifyPaymentsDisputeEvidence? disputeEvidence { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DisputeEvidenceUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `DisputeEvidenceUpdate`.
    ///</summary>
    public class DisputeEvidenceUpdateUserError : GraphQLObject<DisputeEvidenceUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public DisputeEvidenceUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `DisputeEvidenceUpdateUserError`.
    ///</summary>
    public enum DisputeEvidenceUpdateUserErrorCode
    {
        ///<summary>
        ///Dispute evidence could not be found.
        ///</summary>
        DISPUTE_EVIDENCE_NOT_FOUND,
        ///<summary>
        ///Evidence already accepted.
        ///</summary>
        EVIDENCE_ALREADY_ACCEPTED,
        ///<summary>
        ///Evidence past due date.
        ///</summary>
        EVIDENCE_PAST_DUE_DATE,
        ///<summary>
        ///Combined files size is too large.
        ///</summary>
        FILES_SIZE_EXCEEDED_LIMIT,
        ///<summary>
        ///Individual file size is too large.
        ///</summary>
        TOO_LARGE,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///The possible statuses of a dispute.
    ///</summary>
    public enum DisputeStatus
    {
        NEEDS_RESPONSE,
        UNDER_REVIEW,
        CHARGE_REFUNDED,
        ACCEPTED,
        WON,
        LOST,
    }

    ///<summary>
    ///The possible types for a dispute.
    ///</summary>
    public enum DisputeType
    {
        ///<summary>
        ///The dispute has turned into a chargeback.
        ///</summary>
        CHARGEBACK,
        ///<summary>
        ///The dispute is in the inquiry phase.
        ///</summary>
        INQUIRY,
    }

    ///<summary>
    ///A unique string that represents the address of a Shopify store on the Internet.
    ///</summary>
    public class Domain : GraphQLObject<Domain>, INode
    {
        ///<summary>
        ///The host name of the domain. For example, `example.com`.
        ///</summary>
        public string? host { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The localization of the domain, if the domain doesn't redirect.
        ///</summary>
        public DomainLocalization? localization { get; set; }
        ///<summary>
        ///The web presence of the domain.
        ///</summary>
        public MarketWebPresence? marketWebPresence { get; set; }
        ///<summary>
        ///Whether SSL is enabled.
        ///</summary>
        public bool? sslEnabled { get; set; }
        ///<summary>
        ///The URL of the domain (for example, `https://example.com`).
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The country and language settings assigned to a domain.
    ///</summary>
    public class DomainLocalization : GraphQLObject<DomainLocalization>
    {
        ///<summary>
        ///The ISO codes for the domain’s alternate locales. For example, `["en"]`.
        ///</summary>
        public IEnumerable<string>? alternateLocales { get; set; }
        ///<summary>
        ///The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world".
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The ISO code for the domain’s default locale. For example, `"en"`.
        ///</summary>
        public string? defaultLocale { get; set; }
    }

    ///<summary>
    ///An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
    ///
    ///- Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
    ///- Send invoices to customers to pay with a secure checkout link.
    ///- Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
    ///- Re-create orders manually from active sales channels.
    ///- Sell products at discount or wholesale rates.
    ///- Take pre-orders.
    ///- Save an order as a draft and resume working on it later.
    ///
    ///For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
    ///
    ///**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
    ///</summary>
    public class DraftOrder : GraphQLObject<DraftOrder>, ICommentEventSubject, IHasEvents, IHasLocalizationExtensions, IHasMetafields, ILegacyInteroperability, INavigable, INode, ICommentEventEmbed, IMetafieldReferencer
    {
        ///<summary>
        ///The order-level discount applied to the draft order.
        ///</summary>
        public DraftOrderAppliedDiscount? appliedDiscount { get; set; }
        ///<summary>
        ///The billing address of the customer.
        ///</summary>
        public MailingAddress? billingAddress { get; set; }
        ///<summary>
        ///Whether the billing address matches the shipping address.
        ///</summary>
        public bool? billingAddressMatchesShippingAddress { get; set; }
        ///<summary>
        ///The date and time when the draft order converted to a new order,
        ///and the draft order's status changed to **Completed**.
        ///</summary>
        public DateTime? completedAt { get; set; }
        ///<summary>
        ///The date and time when the draft order was created in Shopify.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The three letter code for the currency of the store at the time of the most recent update to the draft order.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
        ///<summary>
        ///The custom information added to the draft order on behalf of the customer.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///The customer who will be sent an invoice for the draft order, if there is one.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; set; }
        ///<summary>
        ///The email address of the customer, which is used to send notifications.
        ///</summary>
        public string? email { get; set; }
        ///<summary>
        ///The list of events associated with the draft order.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///Whether the merchant has added timeline comments to the draft order.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The subject defined for the draft invoice email template.
        ///</summary>
        public string? invoiceEmailTemplateSubject { get; set; }
        ///<summary>
        ///The date and time when the invoice was last emailed to the customer.
        ///</summary>
        public DateTime? invoiceSentAt { get; set; }
        ///<summary>
        ///The link to the checkout, which is sent to the customer in the invoice email.
        ///</summary>
        public string? invoiceUrl { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The list of the line items in the draft order.
        ///</summary>
        public DraftOrderLineItemConnection? lineItems { get; set; }
        ///<summary>
        ///The subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, taxes, or order discounts.
        ///</summary>
        public MoneyBag? lineItemsSubtotalPrice { get; set; }
        ///<summary>
        ///List of localization extensions for the resource.
        ///</summary>
        public LocalizationExtensionConnection? localizationExtensions { get; set; }
        ///<summary>
        ///The name of the selected market.
        ///</summary>
        public string? marketName { get; set; }
        ///<summary>
        ///The selected country code that determines the pricing of the draft order.
        ///</summary>
        public CountryCode? marketRegionCountryCode { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The identifier for the draft order, which is unique within the store. For example, _#D1223_.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The text from an optional note attached to the draft order.
        ///</summary>
        public string? note2 { get; set; }
        ///<summary>
        ///The order that was created from this draft order.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The associated payment terms for this draft order.
        ///</summary>
        public PaymentTerms? paymentTerms { get; set; }
        ///<summary>
        ///The phone number assigned to the draft order.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The purchase order number.
        ///</summary>
        public string? poNumber { get; set; }
        ///<summary>
        ///The payment currency of the customer for this draft order.
        ///</summary>
        public CurrencyCode? presentmentCurrencyCode { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The purchasing entity for the draft order.
        ///</summary>
        public IPurchasingEntity? purchasingEntity { get; set; }
        ///<summary>
        ///Whether the Draft Order is ready and can be completed. Draft Orders might have asynchronous operations that can take time to finish.
        ///</summary>
        public bool? ready { get; set; }
        ///<summary>
        ///The time after which inventory will automatically be restocked.
        ///</summary>
        public DateTime? reserveInventoryUntil { get; set; }
        ///<summary>
        ///The shipping address of the customer.
        ///</summary>
        public MailingAddress? shippingAddress { get; set; }
        ///<summary>
        ///The line item that contains the shipping costs.
        ///</summary>
        public ShippingLine? shippingLine { get; set; }
        ///<summary>
        ///Status of the draft order.
        ///</summary>
        public DraftOrderStatus? status { get; set; }
        ///<summary>
        ///The subtotal of the line items and their discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes.
        ///</summary>
        public decimal? subtotalPrice { get; set; }
        ///<summary>
        ///A subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes.
        ///</summary>
        public MoneyBag? subtotalPriceSet { get; set; }
        ///<summary>
        ///A comma separated list of tags associated with the draft order. Updating `tags` overwrites
        ///any existing tags that were previously added to the draft order. To add new tags without overwriting
        ///existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
        ///mutation.
        ///</summary>
        public IEnumerable<string>? tags { get; set; }
        ///<summary>
        ///Whether the draft order is tax exempt.
        ///</summary>
        public bool? taxExempt { get; set; }
        ///<summary>
        ///Total amount of taxes charged for each line item and shipping line.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Whether the line item prices include taxes.
        ///</summary>
        public bool? taxesIncluded { get; set; }
        ///<summary>
        ///The total discounts for this draft order.
        ///</summary>
        public MoneyBag? totalDiscountsSet { get; set; }
        ///<summary>
        ///The total price of line items for this draft order.
        ///</summary>
        public MoneyBag? totalLineItemsPriceSet { get; set; }
        ///<summary>
        ///The total amount of the draft order, including taxes, shipping charges, and discounts.
        ///</summary>
        public decimal? totalPrice { get; set; }
        ///<summary>
        ///The total amount of the draft order including taxes, shipping charges, and discounts.
        ///</summary>
        public MoneyBag? totalPriceSet { get; set; }
        ///<summary>
        ///The total shipping charge for the draft order.
        ///</summary>
        public decimal? totalShippingPrice { get; set; }
        ///<summary>
        ///The total shipping charge for the draft order.
        ///</summary>
        public MoneyBag? totalShippingPriceSet { get; set; }
        ///<summary>
        ///The total amount of taxes for the draft order.
        ///</summary>
        public decimal? totalTax { get; set; }
        ///<summary>
        ///The total amount of taxes for the draft order.
        ///</summary>
        public MoneyBag? totalTaxSet { get; set; }
        ///<summary>
        ///The total weight in grams of the draft order.
        ///</summary>
        public ulong? totalWeight { get; set; }
        ///<summary>
        ///The date and time when the draft order was last changed.
        ///The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///Whether the draft order will be visible to the customer on the self-serve portal.
        ///</summary>
        public bool? visibleToCustomer { get; set; }
    }

    ///<summary>
    ///The order-level discount applied to a draft order.
    ///</summary>
    public class DraftOrderAppliedDiscount : GraphQLObject<DraftOrderAppliedDiscount>
    {
        ///<summary>
        ///Amount of the order-level discount that's applied to the draft order.
        ///</summary>
        [Obsolete("Use `amountV2` instead.")]
        public decimal? amount { get; set; }
        ///<summary>
        ///The amount of money discounted, with values shown in both shop currency and presentment currency.
        ///</summary>
        public MoneyBag? amountSet { get; set; }
        ///<summary>
        ///Amount of money discounted.
        ///</summary>
        public MoneyV2? amountV2 { get; set; }
        ///<summary>
        ///Description of the order-level discount.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///Name of the order-level discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The order level discount amount. If `valueType` is `"percentage"`,
        ///then `value` is the percentage discount.
        ///</summary>
        public float? value { get; set; }
        ///<summary>
        ///Type of the order-level discount.
        ///</summary>
        public DraftOrderAppliedDiscountType? valueType { get; set; }
    }

    ///<summary>
    ///The valid discount types that can be applied to a draft order.
    ///</summary>
    public enum DraftOrderAppliedDiscountType
    {
        ///<summary>
        ///A fixed amount in the store's currency.
        ///</summary>
        FIXED_AMOUNT,
        ///<summary>
        ///A percentage of the order subtotal.
        ///</summary>
        PERCENTAGE,
    }

    ///<summary>
    ///Return type for `draftOrderBulkAddTags` mutation.
    ///</summary>
    public class DraftOrderBulkAddTagsPayload : GraphQLObject<DraftOrderBulkAddTagsPayload>
    {
        ///<summary>
        ///The asynchronous job for adding tags to the draft orders.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderBulkDelete` mutation.
    ///</summary>
    public class DraftOrderBulkDeletePayload : GraphQLObject<DraftOrderBulkDeletePayload>
    {
        ///<summary>
        ///The asynchronous job for deleting the draft orders.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderBulkRemoveTags` mutation.
    ///</summary>
    public class DraftOrderBulkRemoveTagsPayload : GraphQLObject<DraftOrderBulkRemoveTagsPayload>
    {
        ///<summary>
        ///The asynchronous job for removing tags from the draft orders.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderCalculate` mutation.
    ///</summary>
    public class DraftOrderCalculatePayload : GraphQLObject<DraftOrderCalculatePayload>
    {
        ///<summary>
        ///The calculated properties for a draft order.
        ///</summary>
        public CalculatedDraftOrder? calculatedDraftOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderComplete` mutation.
    ///</summary>
    public class DraftOrderCompletePayload : GraphQLObject<DraftOrderCompletePayload>
    {
        ///<summary>
        ///The completed draft order.
        ///</summary>
        public DraftOrder? draftOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DraftOrders.
    ///</summary>
    public class DraftOrderConnection : GraphQLObject<DraftOrderConnection>, IConnectionWithNodesAndEdges<DraftOrderEdge, DraftOrder>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DraftOrderEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DraftOrderEdge.
        ///</summary>
        public IEnumerable<DraftOrder>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderCreateFromOrder` mutation.
    ///</summary>
    public class DraftOrderCreateFromOrderPayload : GraphQLObject<DraftOrderCreateFromOrderPayload>
    {
        ///<summary>
        ///The created Draft Order.
        ///</summary>
        public DraftOrder? draftOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderCreateMerchantCheckout` mutation.
    ///</summary>
    public class DraftOrderCreateMerchantCheckoutPayload : GraphQLObject<DraftOrderCreateMerchantCheckoutPayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderCreate` mutation.
    ///</summary>
    public class DraftOrderCreatePayload : GraphQLObject<DraftOrderCreatePayload>
    {
        ///<summary>
        ///The created draft order.
        ///</summary>
        public DraftOrder? draftOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderDelete` mutation.
    ///</summary>
    public class DraftOrderDeletePayload : GraphQLObject<DraftOrderDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted draft order.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderDuplicate` mutation.
    ///</summary>
    public class DraftOrderDuplicatePayload : GraphQLObject<DraftOrderDuplicatePayload>
    {
        ///<summary>
        ///The newly duplicated draft order.
        ///</summary>
        public DraftOrder? draftOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DraftOrder and a cursor during pagination.
    ///</summary>
    public class DraftOrderEdge : GraphQLObject<DraftOrderEdge>, IEdge<DraftOrder>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DraftOrderEdge.
        ///</summary>
        public DraftOrder? node { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderInvoicePreview` mutation.
    ///</summary>
    public class DraftOrderInvoicePreviewPayload : GraphQLObject<DraftOrderInvoicePreviewPayload>
    {
        ///<summary>
        ///The draft order invoice email rendered as HTML to allow previewing.
        ///</summary>
        public string? previewHtml { get; set; }
        ///<summary>
        ///The subject preview for the draft order invoice email.
        ///</summary>
        public string? previewSubject { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderInvoiceSend` mutation.
    ///</summary>
    public class DraftOrderInvoiceSendPayload : GraphQLObject<DraftOrderInvoiceSendPayload>
    {
        ///<summary>
        ///The draft order an invoice email is sent for.
        ///</summary>
        public DraftOrder? draftOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A line item included in a draft order.
    ///</summary>
    public class DraftOrderLineItem : GraphQLObject<DraftOrderLineItem>, INode
    {
        ///<summary>
        ///The discount that will be applied to the line item or the overall order.
        ///</summary>
        public DraftOrderAppliedDiscount? appliedDiscount { get; set; }
        ///<summary>
        ///Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
        ///</summary>
        public bool? custom { get; set; }
        ///<summary>
        ///A list of attributes that represent custom features or special requests.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///Additional information (metafields) about the line item with the associated types.
        ///</summary>
        public IEnumerable<TypedAttribute>? customAttributesV2 { get; set; }
        ///<summary>
        ///The line item price after discounts are applied.
        ///</summary>
        public decimal? discountedTotal { get; set; }
        ///<summary>
        ///The line item price after discounts are applied.
        ///</summary>
        public MoneyBag? discountedTotalSet { get; set; }
        ///<summary>
        ///The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
        ///</summary>
        public decimal? discountedUnitPrice { get; set; }
        ///<summary>
        ///The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
        ///</summary>
        public MoneyBag? discountedUnitPriceSet { get; set; }
        ///<summary>
        ///Name of the service provider who fulfilled the order.
        ///
        ///Valid values are either **manual** or the name of the provider.
        ///For example, **amazon**, **shipwire**.
        ///
        ///Deleted fulfillment services will return null.
        ///</summary>
        public FulfillmentService? fulfillmentService { get; set; }

        ///<summary>
        ///The weight of the line item in grams. The weight can only be specified if the line item is a custom
        ///line item.
        ///</summary>
        [Obsolete("Use `weight` instead.")]
        public int? grams { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image associated with the draft order line item.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///Whether the line item is a gift card.
        ///</summary>
        public bool? isGiftCard { get; set; }
        ///<summary>
        ///The name of the product.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
        ///</summary>
        public decimal? originalTotal { get; set; }
        ///<summary>
        ///The total price (without discounts) of the line item,based on the original unit price of the variant x quantity.
        ///</summary>
        public MoneyBag? originalTotalSet { get; set; }
        ///<summary>
        ///The variant price without any discounts applied.
        ///</summary>
        public decimal? originalUnitPrice { get; set; }
        ///<summary>
        ///The variant price without any discounts applied.
        ///</summary>
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///The product corresponding to the line item’s product variant.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The number of product variants that are requested in the draft order.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///Whether physical shipping is required for the variant.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///The SKU number of the product variant.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///A list of tax line objects, each of which details the total taxes applicable to the order.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Whether the variant is taxable.
        ///</summary>
        public bool? taxable { get; set; }
        ///<summary>
        ///The title of the product or variant. This field only applies to custom line items.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total value of the discount that's applied to the line item.
        ///</summary>
        public decimal? totalDiscount { get; set; }
        ///<summary>
        ///The total value of the discount that's applied to the line item.
        ///</summary>
        public MoneyBag? totalDiscountSet { get; set; }
        ///<summary>
        ///The associated variant for the line item.
        ///</summary>
        public ProductVariant? variant { get; set; }
        ///<summary>
        ///The name of the variant.
        ///</summary>
        public string? variantTitle { get; set; }
        ///<summary>
        ///The name of the vendor who created the product variant.
        ///</summary>
        public string? vendor { get; set; }
        ///<summary>
        ///The weight unit and value for a draft order line item.
        ///</summary>
        public Weight? weight { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple DraftOrderLineItems.
    ///</summary>
    public class DraftOrderLineItemConnection : GraphQLObject<DraftOrderLineItemConnection>, IConnectionWithNodesAndEdges<DraftOrderLineItemEdge, DraftOrderLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<DraftOrderLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in DraftOrderLineItemEdge.
        ///</summary>
        public IEnumerable<DraftOrderLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
    ///</summary>
    public class DraftOrderLineItemEdge : GraphQLObject<DraftOrderLineItemEdge>, IEdge<DraftOrderLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of DraftOrderLineItemEdge.
        ///</summary>
        public DraftOrderLineItem? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the DraftOrder query.
    ///</summary>
    public enum DraftOrderSortKeys
    {
        ///<summary>
        ///Sort by the `number` value.
        ///</summary>
        NUMBER,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `status` value.
        ///</summary>
        STATUS,
        ///<summary>
        ///Sort by the `total_price` value.
        ///</summary>
        TOTAL_PRICE,
        ///<summary>
        ///Sort by the `customer_name` value.
        ///</summary>
        CUSTOMER_NAME,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The valid statuses for a draft order.
    ///</summary>
    public enum DraftOrderStatus
    {
        ///<summary>
        ///The draft order has been paid.
        ///</summary>
        COMPLETED,
        ///<summary>
        ///An invoice for the draft order has been sent to the customer.
        ///</summary>
        INVOICE_SENT,
        ///<summary>
        ///The draft order is open. It has not been paid, and an invoice hasn't been sent.
        ///</summary>
        OPEN,
    }

    ///<summary>
    ///Represents a draft order tag.
    ///</summary>
    public class DraftOrderTag : GraphQLObject<DraftOrderTag>, INode
    {
        ///<summary>
        ///Handle of draft order tag.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///ID of draft order tag.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Title of draft order tag.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///Return type for `draftOrderUpdate` mutation.
    ///</summary>
    public class DraftOrderUpdatePayload : GraphQLObject<DraftOrderUpdatePayload>
    {
        ///<summary>
        ///The updated draft order.
        ///</summary>
        public DraftOrder? draftOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The duty details for a line item.
    ///</summary>
    public class Duty : GraphQLObject<Duty>, INode
    {
        ///<summary>
        ///The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
        ///</summary>
        public CountryCode? countryCodeOfOrigin { get; set; }
        ///<summary>
        ///The harmonized system code of the item used in calculating the duty.
        ///</summary>
        public string? harmonizedSystemCode { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The amount of the duty.
        ///</summary>
        public MoneyBag? price { get; set; }
        ///<summary>
        ///A list of taxes charged on the duty.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
    }

    ///<summary>
    ///A sale associated with a duty charge.
    ///</summary>
    public class DutySale : GraphQLObject<DutySale>, ISale
    {
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; set; }
        ///<summary>
        ///The duty for the associated sale.
        ///</summary>
        public Duty? duty { get; set; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; set; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; set; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; set; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; set; }
    }

    ///<summary>
    ///The attribute editable information.
    ///</summary>
    public class EditableProperty : GraphQLObject<EditableProperty>
    {
        ///<summary>
        ///Whether the attribute is locked for editing.
        ///</summary>
        public bool? locked { get; set; }
        ///<summary>
        ///The reason the attribute is locked for editing.
        ///</summary>
        public string? reason { get; set; }
    }

    ///<summary>
    ///Error position information in a ShopifyQL parsing error.
    ///</summary>
    public class ErrorPosition : GraphQLObject<ErrorPosition>
    {
        ///<summary>
        ///The character position of the error in the line.
        ///</summary>
        public int? character { get; set; }
        ///<summary>
        ///The line number of the error.
        ///</summary>
        public int? line { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of a server pixel mutation.
    ///</summary>
    public class ErrorsServerPixelUserError : GraphQLObject<ErrorsServerPixelUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ErrorsServerPixelUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ErrorsServerPixelUserError`.
    ///</summary>
    public enum ErrorsServerPixelUserErrorCode
    {
        ///<summary>
        ///A server pixel doesn't exist for this app and shop.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///A server pixel already exists for this app and shop. Only one server pixel can exist for any app and shop combination.
        ///</summary>
        ALREADY_EXISTS,
        ///<summary>
        ///PubSubProject and PubSubTopic values resulted in an address that is not a valid GCP pub/sub format.Address format should be pubsub://project:topic.
        ///</summary>
        PUB_SUB_ERROR,
        ///<summary>
        ///Server Pixel must be configured with a valid AWS Event Bridge or GCP pub/sub endpoint address to be connected.
        ///</summary>
        NEEDS_CONFIGURATION_TO_CONNECT,
    }

    ///<summary>
    ///An error that occurs during the execution of a web pixel mutation.
    ///</summary>
    public class ErrorsWebPixelUserError : GraphQLObject<ErrorsWebPixelUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ErrorsWebPixelUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ErrorsWebPixelUserError`.
    ///</summary>
    public enum ErrorsWebPixelUserErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The record with the ID used as the input value couldn't be found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///The provided settings ID does not match the expected settings definition on the app.
        ///</summary>
        INVALID_SETTINGS,
        ///<summary>
        ///An error occurred and the web pixel couldnt be deleted.
        ///</summary>
        UNABLE_TO_DELETE,
    }

    ///<summary>
    ///Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
    ///addition of a product.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(BasicEvent), typeDiscriminator: "BasicEvent")]
    [JsonDerivedType(typeof(CommentEvent), typeDiscriminator: "CommentEvent")]
    public interface IEvent : IGraphQLObject
    {
        public BasicEvent? AsBasicEvent() => this as BasicEvent;
        public CommentEvent? AsCommentEvent() => this as CommentEvent;
        ///<summary>
        ///The name of the app that created the event.
        ///</summary>
        public string? appTitle { get; }
        ///<summary>
        ///Whether the event was created by an app.
        ///</summary>
        public bool? attributeToApp { get; }
        ///<summary>
        ///Whether the event was caused by an admin user.
        ///</summary>
        public bool? attributeToUser { get; }
        ///<summary>
        ///The date and time when the event was created.
        ///</summary>
        public DateTime? createdAt { get; }
        ///<summary>
        ///Whether the event is critical.
        ///</summary>
        public bool? criticalAlert { get; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; }
        ///<summary>
        ///Human readable text that describes the event.
        ///</summary>
        public string? message { get; }
    }

    ///<summary>
    ///Return type for `eventBridgeServerPixelUpdate` mutation.
    ///</summary>
    public class EventBridgeServerPixelUpdatePayload : GraphQLObject<EventBridgeServerPixelUpdatePayload>
    {
        ///<summary>
        ///The server pixel as configured by the mutation.
        ///</summary>
        public ServerPixel? serverPixel { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ErrorsServerPixelUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `eventBridgeWebhookSubscriptionCreate` mutation.
    ///</summary>
    public class EventBridgeWebhookSubscriptionCreatePayload : GraphQLObject<EventBridgeWebhookSubscriptionCreatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
        ///<summary>
        ///The webhook subscription that was created.
        ///</summary>
        public WebhookSubscription? webhookSubscription { get; set; }
    }

    ///<summary>
    ///Return type for `eventBridgeWebhookSubscriptionUpdate` mutation.
    ///</summary>
    public class EventBridgeWebhookSubscriptionUpdatePayload : GraphQLObject<EventBridgeWebhookSubscriptionUpdatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
        ///<summary>
        ///The webhook subscription that was updated.
        ///</summary>
        public WebhookSubscription? webhookSubscription { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Events.
    ///</summary>
    public class EventConnection : GraphQLObject<EventConnection>, IConnectionWithNodesAndEdges<EventEdge, IEvent>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<EventEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in EventEdge.
        ///</summary>
        public IEnumerable<IEvent>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Event and a cursor during pagination.
    ///</summary>
    public class EventEdge : GraphQLObject<EventEdge>, IEdge<IEvent>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of EventEdge.
        ///</summary>
        public IEvent? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the Event query.
    ///</summary>
    public enum EventSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///An exchange where existing items on an order are returned and new items are added to the order.
    ///</summary>
    public class ExchangeV2 : GraphQLObject<ExchangeV2>, INode
    {
        ///<summary>
        ///The details of the new items in the exchange.
        ///</summary>
        public ExchangeV2Additions? additions { get; set; }
        ///<summary>
        ///The date and time when the exchange was completed.
        ///</summary>
        public DateTime? completedAt { get; set; }
        ///<summary>
        ///The date and time when the exchange was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The location where the exchange happened.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The text of an optional note that a shop owner can attach to the exchange.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The refunds processed during the exchange.
        ///</summary>
        public IEnumerable<Refund>? refunds { get; set; }
        ///<summary>
        ///The details of the returned items in the exchange.
        ///</summary>
        public ExchangeV2Returns? returns { get; set; }
        ///<summary>
        ///The staff member associated with the exchange.
        ///</summary>
        public StaffMember? staffMember { get; set; }
        ///<summary>
        ///The amount of money that was paid or refunded as part of the exchange.
        ///</summary>
        public MoneyBag? totalAmountProcessedSet { get; set; }
        ///<summary>
        ///The difference in values of the items that were exchanged.
        ///</summary>
        public MoneyBag? totalPriceSet { get; set; }
        ///<summary>
        ///The order transactions related to the exchange.
        ///</summary>
        public IEnumerable<OrderTransaction>? transactions { get; set; }
    }

    ///<summary>
    ///New items associated to the exchange.
    ///</summary>
    public class ExchangeV2Additions : GraphQLObject<ExchangeV2Additions>
    {
        ///<summary>
        ///The list of new items for the exchange.
        ///</summary>
        public IEnumerable<ExchangeV2LineItem>? lineItems { get; set; }
        ///<summary>
        ///The subtotal of the items being added, including discounts.
        ///</summary>
        public MoneyBag? subtotalPriceSet { get; set; }
        ///<summary>
        ///The summary of all taxes of the items being added.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///The total price of the items being added, including discounts and taxes.
        ///</summary>
        public MoneyBag? totalPriceSet { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ExchangeV2s.
    ///</summary>
    public class ExchangeV2Connection : GraphQLObject<ExchangeV2Connection>, IConnectionWithNodesAndEdges<ExchangeV2Edge, ExchangeV2>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ExchangeV2Edge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ExchangeV2Edge.
        ///</summary>
        public IEnumerable<ExchangeV2>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ExchangeV2 and a cursor during pagination.
    ///</summary>
    public class ExchangeV2Edge : GraphQLObject<ExchangeV2Edge>, IEdge<ExchangeV2>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ExchangeV2Edge.
        ///</summary>
        public ExchangeV2? node { get; set; }
    }

    ///<summary>
    ///Contains information about an item in the exchange.
    ///</summary>
    public class ExchangeV2LineItem : GraphQLObject<ExchangeV2LineItem>
    {
        ///<summary>
        ///A list of attributes that represent custom features or special requests.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///The total line price, in shop and presentment currencies, after discounts are applied.
        ///</summary>
        public MoneyBag? discountedTotalSet { get; set; }
        ///<summary>
        ///The price, in shop and presentment currencies,
        ///of a single variant unit after line item discounts are applied.
        ///</summary>
        public MoneyBag? discountedUnitPriceSet { get; set; }
        ///<summary>
        ///Name of the service provider who fulfilled the order.
        ///
        ///Valid values are either **manual** or the name of the provider.
        ///For example, **amazon**, **shipwire**.
        ///
        ///Deleted fulfillment services will return null.
        ///</summary>
        public FulfillmentService? fulfillmentService { get; set; }
        ///<summary>
        ///Indiciates if this line item is a gift card.
        ///</summary>
        public bool? giftCard { get; set; }
        ///<summary>
        ///The gift cards associated with the line item.
        ///</summary>
        public IEnumerable<GiftCard>? giftCards { get; set; }
        ///<summary>
        ///The line item associated with this object.
        ///</summary>
        public LineItem? lineItem { get; set; }
        ///<summary>
        ///The name of the product.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The total price, in shop and presentment currencies, before discounts are applied.
        ///</summary>
        public MoneyBag? originalTotalSet { get; set; }
        ///<summary>
        ///The price, in shop and presentment currencies,
        ///of a single variant unit before line item discounts are applied.
        ///</summary>
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///The number of products that were purchased.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///Whether physical shipping is required for the variant.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///The SKU number of the product variant.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///The TaxLine object connected to this line item.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Whether the variant is taxable.
        ///</summary>
        public bool? taxable { get; set; }
        ///<summary>
        ///The title of the product or variant. This field only applies to custom line items.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The product variant of the line item.
        ///</summary>
        public ProductVariant? variant { get; set; }
        ///<summary>
        ///The name of the variant.
        ///</summary>
        public string? variantTitle { get; set; }
        ///<summary>
        ///The name of the vendor who created the product variant.
        ///</summary>
        public string? vendor { get; set; }
    }

    ///<summary>
    ///Return items associated to the exchange.
    ///</summary>
    public class ExchangeV2Returns : GraphQLObject<ExchangeV2Returns>
    {
        ///<summary>
        ///The list of return items for the exchange.
        ///</summary>
        public IEnumerable<ExchangeV2LineItem>? lineItems { get; set; }
        ///<summary>
        ///The amount of the order-level discount for the items and shipping being returned, which doesn't contain any line item discounts.
        ///</summary>
        public MoneyBag? orderDiscountAmountSet { get; set; }
        ///<summary>
        ///The amount of money to be refunded for shipping.
        ///</summary>
        public MoneyBag? shippingRefundAmountSet { get; set; }
        ///<summary>
        ///The subtotal of the items being returned.
        ///</summary>
        public MoneyBag? subtotalPriceSet { get; set; }
        ///<summary>
        ///The summary of all taxes of the items being returned.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///The amount of money to be refunded for tip.
        ///</summary>
        public MoneyBag? tipRefundAmountSet { get; set; }
        ///<summary>
        ///The total value of the items being returned.
        ///</summary>
        public MoneyBag? totalPriceSet { get; set; }
    }

    ///<summary>
    ///Represents a video hosted outside of Shopify.
    ///</summary>
    public class ExternalVideo : GraphQLObject<ExternalVideo>, IMedia, INode
    {
        ///<summary>
        ///A word or phrase to share the nature or contents of a media.
        ///</summary>
        public string? alt { get; set; }
        ///<summary>
        ///The embed URL of the video for the respective host.
        ///</summary>
        public string? embedUrl { get; set; }

        ///<summary>
        ///The URL.
        ///</summary>
        [Obsolete("Use `originUrl` instead.")]
        public string? embeddedUrl { get; set; }
        ///<summary>
        ///The host of the external video.
        ///</summary>
        public MediaHost? host { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The media content type.
        ///</summary>
        public MediaContentType? mediaContentType { get; set; }
        ///<summary>
        ///Any errors which have occurred on the media.
        ///</summary>
        public IEnumerable<MediaError>? mediaErrors { get; set; }
        ///<summary>
        ///The warnings attached to the media.
        ///</summary>
        public IEnumerable<MediaWarning>? mediaWarnings { get; set; }
        ///<summary>
        ///The origin URL of the video on the respective host.
        ///</summary>
        public string? originUrl { get; set; }
        ///<summary>
        ///The preview image for the media.
        ///</summary>
        public MediaPreviewImage? preview { get; set; }
        ///<summary>
        ///Current status of the media.
        ///</summary>
        public MediaStatus? status { get; set; }
    }

    ///<summary>
    ///Requirements that must be met before an app can be installed.
    ///</summary>
    public class FailedRequirement : GraphQLObject<FailedRequirement>
    {
        ///<summary>
        ///Action to be taken to resolve a failed requirement, including URL link.
        ///</summary>
        public NavigationItem? action { get; set; }
        ///<summary>
        ///A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
        ///encounters when trying to make use of their Shop and its resources.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///A file interface.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(GenericFile), typeDiscriminator: "GenericFile")]
    [JsonDerivedType(typeof(MediaImage), typeDiscriminator: "MediaImage")]
    [JsonDerivedType(typeof(Video), typeDiscriminator: "Video")]
    public interface IFile : IGraphQLObject
    {
        public GenericFile? AsGenericFile() => this as GenericFile;
        public MediaImage? AsMediaImage() => this as MediaImage;
        public Video? AsVideo() => this as Video;
        ///<summary>
        ///A word or phrase to describe the contents or the function of a file.
        ///</summary>
        public string? alt { get; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
        ///</summary>
        public DateTime? createdAt { get; }
        ///<summary>
        ///Any errors that have occurred on the file.
        ///</summary>
        public IEnumerable<FileError>? fileErrors { get; }
        ///<summary>
        ///The status of the file.
        ///</summary>
        public FileStatus? fileStatus { get; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; }
        ///<summary>
        ///The preview image for the media.
        ///</summary>
        public MediaPreviewImage? preview { get; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
        ///</summary>
        public DateTime? updatedAt { get; }
    }

    ///<summary>
    ///Return type for `fileAcknowledgeUpdateFailed` mutation.
    ///</summary>
    public class FileAcknowledgeUpdateFailedPayload : GraphQLObject<FileAcknowledgeUpdateFailedPayload>
    {
        ///<summary>
        ///The updated file(s).
        ///</summary>
        public IEnumerable<IFile>? files { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FilesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Files.
    ///</summary>
    public class FileConnection : GraphQLObject<FileConnection>, IConnectionWithNodesAndEdges<FileEdge, IFile>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<FileEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in FileEdge.
        ///</summary>
        public IEnumerable<IFile>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///The possible content types for a file object.
    ///</summary>
    public enum FileContentType
    {
        ///<summary>
        ///A Shopify-hosted image.
        ///</summary>
        IMAGE,
        ///<summary>
        ///A Shopify-hosted generic file.
        ///</summary>
        FILE,
        ///<summary>
        ///A Shopify-hosted video file. It's recommended to use this type for all video files.
        ///</summary>
        VIDEO,
    }

    ///<summary>
    ///The input fields for handling if filename is already in use.
    ///</summary>
    public enum FileCreateInputDuplicateResolutionMode
    {
        ///<summary>
        ///Append a UUID if filename is already in use.
        ///</summary>
        APPEND_UUID,
        ///<summary>
        ///Raise an error if filename is already in use.
        ///</summary>
        RAISE_ERROR,
        ///<summary>
        ///Replace the existing file if filename is already in use.
        ///</summary>
        REPLACE,
    }

    ///<summary>
    ///Return type for `fileCreate` mutation.
    ///</summary>
    public class FileCreatePayload : GraphQLObject<FileCreatePayload>
    {
        ///<summary>
        ///The newly created files.
        ///</summary>
        public IEnumerable<IFile>? files { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FilesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `fileDelete` mutation.
    ///</summary>
    public class FileDeletePayload : GraphQLObject<FileDeletePayload>
    {
        ///<summary>
        ///The IDs of the deleted files.
        ///</summary>
        public IEnumerable<string>? deletedFileIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FilesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one File and a cursor during pagination.
    ///</summary>
    public class FileEdge : GraphQLObject<FileEdge>, IEdge<IFile>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of FileEdge.
        ///</summary>
        public IFile? node { get; set; }
    }

    ///<summary>
    ///A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
    ///Check the file before attempting to upload again.
    ///</summary>
    public class FileError : GraphQLObject<FileError>
    {
        ///<summary>
        ///Code representing the type of error.
        ///</summary>
        public FileErrorCode? code { get; set; }
        ///<summary>
        ///Additional details regarding the error.
        ///</summary>
        public string? details { get; set; }
        ///<summary>
        ///Translated error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///The error types for a file.
    ///</summary>
    public enum FileErrorCode
    {
        ///<summary>
        ///File error has occurred for an unknown reason.
        ///</summary>
        UNKNOWN,
        ///<summary>
        ///File could not be processed because the signed URL was invalid.
        ///</summary>
        INVALID_SIGNED_URL,
        ///<summary>
        ///File could not be processed because the image could not be downloaded.
        ///</summary>
        IMAGE_DOWNLOAD_FAILURE,
        ///<summary>
        ///File could not be processed because the image could not be processed.
        ///</summary>
        IMAGE_PROCESSING_FAILURE,
        ///<summary>
        ///File timed out because it is currently being modified by another operation.
        ///</summary>
        MEDIA_TIMEOUT_ERROR,
        ///<summary>
        ///File could not be created because the external video could not be found.
        ///</summary>
        EXTERNAL_VIDEO_NOT_FOUND,
        ///<summary>
        ///File could not be created because the external video is not listed or is private.
        ///</summary>
        EXTERNAL_VIDEO_UNLISTED,
        ///<summary>
        ///File could not be created because the external video has an invalid aspect ratio.
        ///</summary>
        EXTERNAL_VIDEO_INVALID_ASPECT_RATIO,
        ///<summary>
        ///File could not be created because embed permissions are disabled for this video.
        ///</summary>
        EXTERNAL_VIDEO_EMBED_DISABLED,
        ///<summary>
        ///File could not be created because video is either not found or still transcoding.
        ///</summary>
        EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING,
        ///<summary>
        ///File could not be processed because the source could not be downloaded.
        ///</summary>
        GENERIC_FILE_DOWNLOAD_FAILURE,
        ///<summary>
        ///File could not be created because the size is too large.
        ///</summary>
        GENERIC_FILE_INVALID_SIZE,
        ///<summary>
        ///File could not be created because the metadata could not be read.
        ///</summary>
        VIDEO_METADATA_READ_ERROR,
        ///<summary>
        ///File could not be created because it has an invalid file type.
        ///</summary>
        VIDEO_INVALID_FILETYPE_ERROR,
        ///<summary>
        ///File could not be created because it does not meet the minimum width requirement.
        ///</summary>
        VIDEO_MIN_WIDTH_ERROR,
        ///<summary>
        ///File could not be created because it does not meet the maximum width requirement.
        ///</summary>
        VIDEO_MAX_WIDTH_ERROR,
        ///<summary>
        ///File could not be created because it does not meet the minimum height requirement.
        ///</summary>
        VIDEO_MIN_HEIGHT_ERROR,
        ///<summary>
        ///File could not be created because it does not meet the maximum height requirement.
        ///</summary>
        VIDEO_MAX_HEIGHT_ERROR,
        ///<summary>
        ///File could not be created because it does not meet the minimum duration requirement.
        ///</summary>
        VIDEO_MIN_DURATION_ERROR,
        ///<summary>
        ///File could not be created because it does not meet the maximum duration requirement.
        ///</summary>
        VIDEO_MAX_DURATION_ERROR,
        ///<summary>
        ///Video failed validation.
        ///</summary>
        VIDEO_VALIDATION_ERROR,
        ///<summary>
        ///Model failed validation.
        ///</summary>
        MODEL3D_VALIDATION_ERROR,
        ///<summary>
        ///File could not be created because the model's thumbnail generation failed.
        ///</summary>
        MODEL3D_THUMBNAIL_GENERATION_ERROR,
        ///<summary>
        ///There was an issue while trying to generate a new thumbnail.
        ///</summary>
        MODEL3D_THUMBNAIL_REGENERATION_ERROR,
        ///<summary>
        ///File could not be created because the model can't be converted to USDZ format.
        ///</summary>
        MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR,
        ///<summary>
        ///File could not be created because the model file failed processing.
        ///</summary>
        MODEL3D_GLB_OUTPUT_CREATION_ERROR,
        ///<summary>
        ///File could not be created because the model file failed processing.
        ///</summary>
        MODEL3D_PROCESSING_FAILURE,
        ///<summary>
        ///File could not be created because the image is an unsupported file type.
        ///</summary>
        UNSUPPORTED_IMAGE_FILE_TYPE,
        ///<summary>
        ///File could not be created because the image size is too large.
        ///</summary>
        INVALID_IMAGE_FILE_SIZE,
        ///<summary>
        ///File could not be created because the image has an invalid aspect ratio.
        ///</summary>
        INVALID_IMAGE_ASPECT_RATIO,
        ///<summary>
        ///File could not be created because the image's resolution exceeds the max limit.
        ///</summary>
        INVALID_IMAGE_RESOLUTION,
        ///<summary>
        ///File could not be created because the cumulative file storage limit would be exceeded.
        ///</summary>
        FILE_STORAGE_LIMIT_EXCEEDED,
        ///<summary>
        ///File could not be created because a file with the same name already exists.
        ///</summary>
        DUPLICATE_FILENAME_ERROR,
    }

    ///<summary>
    ///The set of valid sort keys for the File query.
    ///</summary>
    public enum FileSortKeys
    {
        ///<summary>
        ///Sort by the `filename` value.
        ///</summary>
        FILENAME,
        ///<summary>
        ///Sort by the `original_upload_size` value.
        ///</summary>
        ORIGINAL_UPLOAD_SIZE,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The possible statuses for a file object.
    ///</summary>
    public enum FileStatus
    {
        ///<summary>
        ///File has been uploaded but hasn't been processed.
        ///</summary>
        UPLOADED,
        ///<summary>
        ///File is being processed.
        ///</summary>
        PROCESSING,
        ///<summary>
        ///File is ready to be displayed.
        ///</summary>
        READY,
        ///<summary>
        ///File processing has failed.
        ///</summary>
        FAILED,
    }

    ///<summary>
    ///Return type for `fileUpdate` mutation.
    ///</summary>
    public class FileUpdatePayload : GraphQLObject<FileUpdatePayload>
    {
        ///<summary>
        ///The list of updated files.
        ///</summary>
        public IEnumerable<IFile>? files { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FilesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FilesUserError`.
    ///</summary>
    public enum FilesErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///File does not exist.
        ///</summary>
        FILE_DOES_NOT_EXIST,
        ///<summary>
        ///File has a pending operation.
        ///</summary>
        FILE_LOCKED,
        ///<summary>
        ///Filename update is only supported on Image and GenericFile.
        ///</summary>
        UNSUPPORTED_MEDIA_TYPE_FOR_FILENAME_UPDATE,
        ///<summary>
        ///Specify one argument: search, IDs, or deleteAll.
        ///</summary>
        TOO_MANY_ARGUMENTS,
        ///<summary>
        ///The search term must not be blank.
        ///</summary>
        BLANK_SEARCH,
        ///<summary>
        ///At least one argument is required.
        ///</summary>
        MISSING_ARGUMENTS,
        ///<summary>
        ///Search query isn't supported.
        ///</summary>
        INVALID_QUERY,
        ///<summary>
        ///Invalid filename extension.
        ///</summary>
        INVALID_FILENAME_EXTENSION,
        ///<summary>
        ///The provided filename is invalid.
        ///</summary>
        INVALID_FILENAME,
        ///<summary>
        ///The provided filename already exists.
        ///</summary>
        FILENAME_ALREADY_EXISTS,
        ///<summary>
        ///The file is not supported on trial accounts that have not validated their email. Either select a plan or verify the shop owner email to upload this file.
        ///</summary>
        UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET,
        ///<summary>
        ///The file type is not supported.
        ///</summary>
        UNACCEPTABLE_ASSET,
        ///<summary>
        ///The file is not supported on trial accounts. Select a plan to upload this file.
        ///</summary>
        UNACCEPTABLE_TRIAL_ASSET,
        ///<summary>
        ///The alt value exceeds the maximum limit of 512 characters.
        ///</summary>
        ALT_VALUE_LIMIT_EXCEEDED,
        ///<summary>
        ///The file is not in the READY state.
        ///</summary>
        NON_READY_STATE,
        ///<summary>
        ///Exceeded the limit of non-image media per shop.
        ///</summary>
        NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED,
        ///<summary>
        ///Cannot create file with custom filename which does not match original source extension.
        ///</summary>
        MISMATCHED_FILENAME_AND_ORIGINAL_SOURCE,
        ///<summary>
        ///Duplicate resolution mode is not supported for this file type.
        ///</summary>
        INVALID_DUPLICATE_MODE_FOR_TYPE,
        ///<summary>
        ///Invalid image source url value provided.
        ///</summary>
        INVALID_IMAGE_SOURCE_URL,
        ///<summary>
        ///Duplicate resolution mode REPLACE cannot be used without specifying filename.
        ///</summary>
        MISSING_FILENAME_FOR_DUPLICATE_MODE_REPLACE,
    }

    ///<summary>
    ///An error that happens during the execution of a Files API query or mutation.
    ///</summary>
    public class FilesUserError : GraphQLObject<FilesUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FilesErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///A filter option is one possible value in a search filter.
    ///</summary>
    public class FilterOption : GraphQLObject<FilterOption>
    {
        ///<summary>
        ///The filter option's label for display purposes.
        ///</summary>
        public string? label { get; set; }
        ///<summary>
        ///The filter option's value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///An amount that's allocated to a line item based on an associated discount application.
    ///</summary>
    public class FinancialSummaryDiscountAllocation : GraphQLObject<FinancialSummaryDiscountAllocation>
    {
        ///<summary>
        ///The money amount that's allocated per unit on the associated line based on the discount application in shop and presentment currencies. If the allocated amount for the line cannot be evenly divided by the quantity, then this amount will be an approximate amount, avoiding fractional pennies. For example, if the associated line had a quantity of 3 with a discount of 4 cents, then the discount distribution would be [0.01, 0.01, 0.02]. This field returns the highest number of the distribution. In this example, this would be 0.02.
        ///</summary>
        public MoneyBag? approximateAllocatedAmountPerItem { get; set; }
        ///<summary>
        ///The discount application that the allocated amount originated from.
        ///</summary>
        public FinancialSummaryDiscountApplication? discountApplication { get; set; }
    }

    ///<summary>
    ///Discount applications capture the intentions of a discount source at
    ///the time of application on an order's line items or shipping lines.
    ///</summary>
    public class FinancialSummaryDiscountApplication : GraphQLObject<FinancialSummaryDiscountApplication>
    {
        ///<summary>
        ///The method by which the discount's value is applied to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
    }

    ///<summary>
    ///Return type for `flowGenerateSignature` mutation.
    ///</summary>
    public class FlowGenerateSignaturePayload : GraphQLObject<FlowGenerateSignaturePayload>
    {
        ///<summary>
        ///The payload used to generate the signature.
        ///</summary>
        public string? payload { get; set; }
        ///<summary>
        ///The generated signature.
        ///</summary>
        public string? signature { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `flowTriggerReceive` mutation.
    ///</summary>
    public class FlowTriggerReceivePayload : GraphQLObject<FlowTriggerReceivePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a fulfillment.
    ///In Shopify, a fulfillment represents a shipment of one or more items in an order.
    ///When an order has been completely fulfilled, it means that all the items that are included
    ///in the order have been sent to the customer.
    ///There can be more than one fulfillment for an order.
    ///</summary>
    public class Fulfillment : GraphQLObject<Fulfillment>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The date and time when the fulfillment was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The date that this fulfillment was delivered.
        ///</summary>
        public DateTime? deliveredAt { get; set; }
        ///<summary>
        ///Human readable display status for this fulfillment.
        ///</summary>
        public FulfillmentDisplayStatus? displayStatus { get; set; }
        ///<summary>
        ///The estimated date that this fulfillment will arrive.
        ///</summary>
        public DateTime? estimatedDeliveryAt { get; set; }
        ///<summary>
        ///The history of events associated with this fulfillment.
        ///</summary>
        public FulfillmentEventConnection? events { get; set; }
        ///<summary>
        ///List of the fulfillment's line items.
        ///</summary>
        public FulfillmentLineItemConnection? fulfillmentLineItems { get; set; }
        ///<summary>
        ///A paginated list of fulfillment orders for the fulfillment.
        ///</summary>
        public FulfillmentOrderConnection? fulfillmentOrders { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The date and time when the fulfillment went into transit.
        ///</summary>
        public DateTime? inTransitAt { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The location that the fulfillment was processed at.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///Human readable reference identifier for this fulfillment.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The order for which the fulfillment was created.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The address at which the fulfillment occurred. This field is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead.
        ///</summary>
        public FulfillmentOriginAddress? originAddress { get; set; }
        ///<summary>
        ///Whether any of the line items in the fulfillment require shipping.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///Fulfillment service associated with the fulfillment.
        ///</summary>
        public FulfillmentService? service { get; set; }
        ///<summary>
        ///The status of the fulfillment.
        ///</summary>
        public FulfillmentStatus? status { get; set; }
        ///<summary>
        ///Sum of all line item quantities for the fulfillment.
        ///</summary>
        public int? totalQuantity { get; set; }
        ///<summary>
        ///Tracking information associated with the fulfillment,
        ///such as the tracking company, tracking number, and tracking URL.
        ///</summary>
        public IEnumerable<FulfillmentTrackingInfo>? trackingInfo { get; set; }
        ///<summary>
        ///The date and time when the fulfillment was last modified.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentCancel` mutation.
    ///</summary>
    public class FulfillmentCancelPayload : GraphQLObject<FulfillmentCancelPayload>
    {
        ///<summary>
        ///The canceled fulfillment.
        ///</summary>
        public Fulfillment? fulfillment { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Fulfillments.
    ///</summary>
    public class FulfillmentConnection : GraphQLObject<FulfillmentConnection>, IConnectionWithNodesAndEdges<FulfillmentEdge, Fulfillment>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<FulfillmentEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in FulfillmentEdge.
        ///</summary>
        public IEnumerable<Fulfillment>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///A fulfillment constraint rule.
    ///</summary>
    public class FulfillmentConstraintRule : GraphQLObject<FulfillmentConstraintRule>, IHasMetafields, INode
    {
        ///<summary>
        ///The ID for the fulfillment constraint function.
        ///</summary>
        public ShopifyFunction? function { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentConstraintRuleCreate` mutation.
    ///</summary>
    public class FulfillmentConstraintRuleCreatePayload : GraphQLObject<FulfillmentConstraintRuleCreatePayload>
    {
        ///<summary>
        ///The newly created fulfillment constraint rule.
        ///</summary>
        public FulfillmentConstraintRule? fulfillmentConstraintRule { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentConstraintRuleCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentConstraintRuleCreate`.
    ///</summary>
    public class FulfillmentConstraintRuleCreateUserError : GraphQLObject<FulfillmentConstraintRuleCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentConstraintRuleCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentConstraintRuleCreateUserError`.
    ///</summary>
    public enum FulfillmentConstraintRuleCreateUserErrorCode
    {
        ///<summary>
        ///Failed to create fulfillment constraint rule due to invalid input.
        ///</summary>
        INPUT_INVALID,
        ///<summary>
        ///No Shopify Function found for provided function_id.
        ///</summary>
        FUNCTION_NOT_FOUND,
        ///<summary>
        ///A fulfillment constraint rule already exists for the provided function_id.
        ///</summary>
        FUNCTION_ALREADY_REGISTERED,
        ///<summary>
        ///Function does not implement the required interface for this fulfillment constraint rule.
        ///</summary>
        FUNCTION_DOES_NOT_IMPLEMENT,
        ///<summary>
        ///Shop must be on a Shopify Plus plan to activate functions from a custom app.
        ///</summary>
        CUSTOM_APP_FUNCTION_NOT_ELIGIBLE,
        ///<summary>
        ///Function is pending deletion and cannot have new rules created against it.
        ///</summary>
        FUNCTION_PENDING_DELETION,
    }

    ///<summary>
    ///Return type for `fulfillmentConstraintRuleDelete` mutation.
    ///</summary>
    public class FulfillmentConstraintRuleDeletePayload : GraphQLObject<FulfillmentConstraintRuleDeletePayload>
    {
        ///<summary>
        ///Whether or not the fulfillment constraint rule was successfully deleted.
        ///</summary>
        public bool? success { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentConstraintRuleDeleteUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentConstraintRuleDelete`.
    ///</summary>
    public class FulfillmentConstraintRuleDeleteUserError : GraphQLObject<FulfillmentConstraintRuleDeleteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentConstraintRuleDeleteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentConstraintRuleDeleteUserError`.
    ///</summary>
    public enum FulfillmentConstraintRuleDeleteUserErrorCode
    {
        ///<summary>
        ///Could not find fulfillment constraint rule for provided id.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///Unauthorized app scope.
        ///</summary>
        UNAUTHORIZED_APP_SCOPE,
    }

    ///<summary>
    ///Return type for `fulfillmentCreateV2` mutation.
    ///</summary>
    public class FulfillmentCreateV2Payload : GraphQLObject<FulfillmentCreateV2Payload>
    {
        ///<summary>
        ///The created fulfillment.
        ///</summary>
        public Fulfillment? fulfillment { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The display status of a fulfillment.
    ///</summary>
    public enum FulfillmentDisplayStatus
    {
        ///<summary>
        ///Displayed as **Attempted delivery**.
        ///</summary>
        ATTEMPTED_DELIVERY,
        ///<summary>
        ///Displayed as **Canceled**.
        ///</summary>
        CANCELED,
        ///<summary>
        ///Displayed as **Confirmed**.
        ///</summary>
        CONFIRMED,
        ///<summary>
        ///Displayed as **Delivered**.
        ///</summary>
        DELIVERED,
        ///<summary>
        ///Displayed as **Failure**.
        ///</summary>
        FAILURE,
        ///<summary>
        ///Displayed as **Fulfilled**.
        ///</summary>
        FULFILLED,
        ///<summary>
        ///Displayed as **In transit**.
        ///</summary>
        IN_TRANSIT,
        ///<summary>
        ///Displayed as **Label printed**.
        ///</summary>
        LABEL_PRINTED,
        ///<summary>
        ///Displayed as **Label purchased**.
        ///</summary>
        LABEL_PURCHASED,
        ///<summary>
        ///Displayed as **Label voided**.
        ///</summary>
        LABEL_VOIDED,
        ///<summary>
        ///Displayed as **Marked as fulfilled**.
        ///</summary>
        MARKED_AS_FULFILLED,
        ///<summary>
        ///Displayed as **Not delivered**.
        ///</summary>
        NOT_DELIVERED,
        ///<summary>
        ///Displayed as **Out for delivery**.
        ///</summary>
        OUT_FOR_DELIVERY,
        ///<summary>
        ///Displayed as **Ready for pickup**.
        ///</summary>
        READY_FOR_PICKUP,
        ///<summary>
        ///Displayed as **Picked up**.
        ///</summary>
        PICKED_UP,
        ///<summary>
        ///Displayed as **Submitted**.
        ///</summary>
        SUBMITTED,
    }

    ///<summary>
    ///An auto-generated type which holds one Fulfillment and a cursor during pagination.
    ///</summary>
    public class FulfillmentEdge : GraphQLObject<FulfillmentEdge>, IEdge<Fulfillment>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of FulfillmentEdge.
        ///</summary>
        public Fulfillment? node { get; set; }
    }

    ///<summary>
    ///The fulfillment event that describes the fulfilllment status at a particular time.
    ///</summary>
    public class FulfillmentEvent : GraphQLObject<FulfillmentEvent>, INode
    {
        ///<summary>
        ///The street address where this fulfillment event occurred.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The city where this fulfillment event occurred.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The country where this fulfillment event occurred.
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The estimated delivery date and time of the fulfillment.
        ///</summary>
        public DateTime? estimatedDeliveryAt { get; set; }
        ///<summary>
        ///The time at which this fulfillment event happened.
        ///</summary>
        public DateTime? happenedAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The latitude where this fulfillment event occurred.
        ///</summary>
        public float? latitude { get; set; }
        ///<summary>
        ///The longitude where this fulfillment event occurred.
        ///</summary>
        public float? longitude { get; set; }
        ///<summary>
        ///A message associated with this fulfillment event.
        ///</summary>
        public string? message { get; set; }
        ///<summary>
        ///The province where this fulfillment event occurred.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The status of this fulfillment event.
        ///</summary>
        public FulfillmentEventStatus? status { get; set; }
        ///<summary>
        ///The zip code of the location where this fulfillment event occurred.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple FulfillmentEvents.
    ///</summary>
    public class FulfillmentEventConnection : GraphQLObject<FulfillmentEventConnection>, IConnectionWithNodesAndEdges<FulfillmentEventEdge, FulfillmentEvent>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<FulfillmentEventEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in FulfillmentEventEdge.
        ///</summary>
        public IEnumerable<FulfillmentEvent>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentEventCreate` mutation.
    ///</summary>
    public class FulfillmentEventCreatePayload : GraphQLObject<FulfillmentEventCreatePayload>
    {
        ///<summary>
        ///The created fulfillment event.
        ///</summary>
        public FulfillmentEvent? fulfillmentEvent { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
    ///</summary>
    public class FulfillmentEventEdge : GraphQLObject<FulfillmentEventEdge>, IEdge<FulfillmentEvent>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of FulfillmentEventEdge.
        ///</summary>
        public FulfillmentEvent? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the FulfillmentEvent query.
    ///</summary>
    public enum FulfillmentEventSortKeys
    {
        ///<summary>
        ///Sort by the `happened_at` value.
        ///</summary>
        HAPPENED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The status that describes a fulfillment or delivery event.
    ///</summary>
    public enum FulfillmentEventStatus
    {
        ///<summary>
        ///A shipping label has been purchased.
        ///</summary>
        LABEL_PURCHASED,
        ///<summary>
        ///A purchased shipping label has been printed.
        ///</summary>
        LABEL_PRINTED,
        ///<summary>
        ///The fulfillment is ready to be picked up.
        ///</summary>
        READY_FOR_PICKUP,
        ///<summary>
        ///The fulfillment is confirmed. This is the default value when no other information is available.
        ///</summary>
        CONFIRMED,
        ///<summary>
        ///The fulfillment is in transit.
        ///</summary>
        IN_TRANSIT,
        ///<summary>
        ///The fulfillment is out for delivery.
        ///</summary>
        OUT_FOR_DELIVERY,
        ///<summary>
        ///A delivery was attempted.
        ///</summary>
        ATTEMPTED_DELIVERY,
        ///<summary>
        ///The fulfillment was successfully delivered.
        ///</summary>
        DELIVERED,
        ///<summary>
        ///The fulfillment request failed.
        ///</summary>
        FAILURE,
    }

    ///<summary>
    ///A fulfillment hold currently applied on a fulfillment order.
    ///</summary>
    public class FulfillmentHold : GraphQLObject<FulfillmentHold>
    {
        ///<summary>
        ///The name of the app or service that applied the fulfillment hold.
        ///</summary>
        public string? heldBy { get; set; }
        ///<summary>
        ///The reason for the fulfillment hold.
        ///</summary>
        public FulfillmentHoldReason? reason { get; set; }
        ///<summary>
        ///Additional information about the fulfillment hold reason.
        ///</summary>
        public string? reasonNotes { get; set; }
    }

    ///<summary>
    ///The reason for a fulfillment hold.
    ///</summary>
    public enum FulfillmentHoldReason
    {
        ///<summary>
        ///The fulfillment hold is applied because payment is pending.
        ///</summary>
        AWAITING_PAYMENT,
        ///<summary>
        ///The fulfillment hold is applied because of a high risk of fraud.
        ///</summary>
        HIGH_RISK_OF_FRAUD,
        ///<summary>
        ///The fulfillment hold is applied because of an incorrect address.
        ///</summary>
        INCORRECT_ADDRESS,
        ///<summary>
        ///The fulfillment hold is applied because inventory is out of stock.
        ///</summary>
        INVENTORY_OUT_OF_STOCK,
        ///<summary>
        ///The fulfillment hold is applied because of an unknown delivery date.
        ///</summary>
        UNKNOWN_DELIVERY_DATE,
        ///<summary>
        ///The fulfillment hold is applied because of a post purchase upsell offer.
        ///</summary>
        ONLINE_STORE_POST_PURCHASE_CROSS_SELL,
        ///<summary>
        ///The fulfillment hold is applied because of return items not yet received during an exchange.
        ///</summary>
        AWAITING_RETURN_ITEMS,
        ///<summary>
        ///The fulfillment hold is applied for another reason.
        ///</summary>
        OTHER,
    }

    ///<summary>
    ///Represents a line item from an order that's included in a fulfillment.
    ///</summary>
    public class FulfillmentLineItem : GraphQLObject<FulfillmentLineItem>, INode
    {
        ///<summary>
        ///The total price after discounts are applied.
        ///</summary>
        [Obsolete("Use `discountedTotalSet` instead.")]
        public decimal? discountedTotal { get; set; }
        ///<summary>
        ///The total price after discounts are applied in shop and presentment currencies.
        ///</summary>
        public MoneyBag? discountedTotalSet { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The associated order's line item.
        ///</summary>
        public LineItem? lineItem { get; set; }

        ///<summary>
        ///The total price before discounts are applied.
        ///</summary>
        [Obsolete("Use `originalTotalSet` instead.")]
        public decimal? originalTotal { get; set; }
        ///<summary>
        ///The total price before discounts are applied in shop and presentment currencies.
        ///</summary>
        public MoneyBag? originalTotalSet { get; set; }
        ///<summary>
        ///Number of line items in the fulfillment.
        ///</summary>
        public int? quantity { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple FulfillmentLineItems.
    ///</summary>
    public class FulfillmentLineItemConnection : GraphQLObject<FulfillmentLineItemConnection>, IConnectionWithNodesAndEdges<FulfillmentLineItemEdge, FulfillmentLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<FulfillmentLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in FulfillmentLineItemEdge.
        ///</summary>
        public IEnumerable<FulfillmentLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
    ///</summary>
    public class FulfillmentLineItemEdge : GraphQLObject<FulfillmentLineItemEdge>, IEdge<FulfillmentLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of FulfillmentLineItemEdge.
        ///</summary>
        public FulfillmentLineItem? node { get; set; }
    }

    ///<summary>
    ///The FulfillmentOrder object represents either an item or a group of items in an
    ///[Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
    ///that are expected to be fulfilled from the same location.
    ///There can be more than one fulfillment order for an
    ///[order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
    ///at a given location.
    ///
    ///{{ '/api/reference/fulfillment_order_relationships.png' | image }}
    ///
    ///Fulfillment orders represent the work which is intended to be done in relation to an order.
    ///When fulfillment has started for one or more line items, a
    ///[Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
    ///is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
    ///
    ///[See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
    ///
    ///> Note:
    ///> Shopify creates fulfillment orders automatically when an order is created.
    ///> It is not possible to manually create fulfillment orders.
    ///>
    ///> [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
    ///
    ///## Retrieving fulfillment orders
    ///
    ///### Fulfillment orders from an order
    ///
    ///All fulfillment orders related to a given order can be retrieved with the
    ///[Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
    ///connection.
    ///
    ///[API access scopes](#api-access-scopes)
    ///govern which fulfillments orders are returned to clients.
    ///An API client will only receive a subset of the fulfillment orders which belong to an order
    ///if they don't have the necessary access scopes to view all of the fulfillment orders.
    ///
    ///### Fulfillment orders assigned to the app for fulfillment
    ///
    ///Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
    ///[Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
    ///connection.
    ///Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
    ///should be returned or only those where a merchant has sent a
    ///[fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
    ///and it has yet to be responded to.
    ///
    ///The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
    ///the assigned fulfillment orders.
    ///
    ///### All fulfillment orders
    ///
    ///Apps can retrieve all fulfillment orders with the
    ///[fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
    ///query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
    ///which are accessible to the app according to the
    ///[fulfillment order access scopes](#api-access-scopes) it was granted with.
    ///
    ///## The lifecycle of a fulfillment order
    ///
    ///### Fulfillment Order Creation
    ///
    ///After an order is created, a background worker performs the order routing process which determines
    ///which locations will be responsible for fulfilling the purchased items.
    ///Once the order routing process is complete, one or more fulfillment orders will be created
    ///and assigned to these locations. It is not possible to manually create fulfillment orders.
    ///
    ///Once a fulfillment order has been created, it will have one of two different lifecycles depending on
    ///the type of location which the fulfillment order is assigned to.
    ///
    ///### The lifecycle of a fulfillment order at a merchant managed location
    ///
    ///Fulfillment orders are completed by creating
    ///[fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
    ///Fulfillments represents the work done.
    ///
    ///For digital products a merchant or an order management app would create a fulfilment once the digital asset
    ///has been provisioned.
    ///For example, in the case of a digital gift card, a merchant would to do this once
    ///the gift card has been activated - before the email has been shipped.
    ///
    ///On the other hand, for a traditional shipped order,
    ///a merchant or an order management app would create a fulfillment after picking and packing the items relating
    ///to a fulfillment order, but before the courier has collected the goods.
    ///
    ///[Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
    ///
    ///### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
    ///
    ///For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
    ///a merchant or an Order Management App can
    ///[send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
    ///to the fulfillment service which operates the location to request that they fulfill the associated items.
    ///A fulfillment service has the option to
    ///[accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
    ///or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
    ///this fulfillment request.
    ///
    ///Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
    ///or order management app and instead a
    ///[cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
    ///to the fulfillment service.
    ///
    ///Once a fulfillment service accepts a fulfillment request,
    ///then after they are ready to pack items and send them for delivery, they create fulfillments with the
    ///[fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
    ///mutation.
    ///They can provide tracking information right away or create fulfillments without it and then
    ///update the tracking information for fulfillments with the
    ///[fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
    ///mutation.
    ///
    ///[Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
    ///
    ///## API access scopes
    ///
    ///Fulfillment orders are governed by the following API access scopes:
    ///
    ///* The `read_merchant_managed_fulfillment_orders` and
    ///  `write_merchant_managed_fulfillment_orders` access scopes
    ///  grant access to fulfillment orders assigned to merchant-managed locations.
    ///* The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
    ///  access scopes are intended for fulfillment services.
    ///  These scopes grant access to fulfillment orders assigned to locations that are being managed
    ///  by fulfillment services.
    ///* The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
    ///  access scopes grant access to fulfillment orders
    ///  assigned to locations managed by other fulfillment services.
    ///
    ///### Fulfillment service app access scopes
    ///
    ///Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
    ///and don't have the `*_third_party_fulfillment_orders`
    ///or `*_merchant_managed_fulfillment_orders` access scopes.
    ///The app will only have access to the fulfillment orders assigned to their location
    ///(or multiple locations if the app registers multiple fulfillment services on the shop).
    ///The app will not have access to fulfillment orders assigned to merchant-managed locations
    ///or locations owned by other fulfillment service apps.
    ///
    ///### Order management app access scopes
    ///
    ///**Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
    ///`write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
    ///on behalf of a merchant.
    ///
    ///If an app combines the functions of an order management app and a fulfillment service,
    ///then the app should request all
    ///access scopes to manage all assigned and all unassigned fulfillment orders.
    ///
    ///## Notifications about fulfillment orders
    ///
    ///Fulfillment services are required to
    ///[register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
    ///a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
    ///whenever a merchant submits a fulfillment or cancellation request.
    ///
    ///Both merchants and apps can
    ///[subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
    ///to the
    ///[fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
    ///to be notified whenever fulfillment order related domain events occur.
    ///
    ///[Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
    ///</summary>
    public class FulfillmentOrder : GraphQLObject<FulfillmentOrder>, INode, IMetafieldReferencer
    {
        ///<summary>
        ///The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
        ///
        ///The fulfillment order's assigned location might change in the following cases:
        ///
        ///- The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
        ///  https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
        ///  ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
        ///  https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
        ///  ) field within the mutation's response.
        ///- Work on the fulfillment order hasn't yet begun, which means that the fulfillment order has the
        ///    [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
        ///    [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
        ///    [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
        ///    status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
        ///</summary>
        public FulfillmentOrderAssignedLocation? assignedLocation { get; set; }
        ///<summary>
        ///ID of the channel that created the order.
        ///</summary>
        public string? channelId { get; set; }
        ///<summary>
        ///Date and time when the fulfillment order was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///Delivery method of this fulfillment order.
        ///</summary>
        public DeliveryMethod? deliveryMethod { get; set; }
        ///<summary>
        ///The destination where the items should be sent.
        ///</summary>
        public FulfillmentOrderDestination? destination { get; set; }
        ///<summary>
        ///The date and time at which the fulfillment order will be fulfillable. When this date and time is reached, the scheduled fulfillment order is automatically transitioned to open. For example, the `fulfill_at` date for a subscription order might be the 1st of each month, a pre-order `fulfill_at` date would be `nil`, and a standard order `fulfill_at` date would be the order creation date.
        ///</summary>
        public DateTime? fulfillAt { get; set; }
        ///<summary>
        ///The latest date and time by which all items in the fulfillment order need to be fulfilled.
        ///</summary>
        public DateTime? fulfillBy { get; set; }
        ///<summary>
        ///The fulfillment holds applied on the fulfillment order.
        ///</summary>
        public IEnumerable<FulfillmentHold>? fulfillmentHolds { get; set; }
        ///<summary>
        ///Fulfillment orders eligible for merging with the given fulfillment order.
        ///</summary>
        public FulfillmentOrderConnection? fulfillmentOrdersForMerge { get; set; }
        ///<summary>
        ///A list of fulfillments for the fulfillment order.
        ///</summary>
        public FulfillmentConnection? fulfillments { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The duties delivery method of this fulfillment order.
        ///</summary>
        public FulfillmentOrderInternationalDuties? internationalDuties { get; set; }
        ///<summary>
        ///A list of the fulfillment order's line items.
        ///</summary>
        public FulfillmentOrderLineItemConnection? lineItems { get; set; }
        ///<summary>
        ///A list of locations that the fulfillment order can potentially move to.
        ///</summary>
        public FulfillmentOrderLocationForMoveConnection? locationsForMove { get; set; }
        ///<summary>
        ///A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order.
        ///</summary>
        public FulfillmentOrderMerchantRequestConnection? merchantRequests { get; set; }
        ///<summary>
        ///The order that's associated with the fulfillment order.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///ID of the order that's associated with the fulfillment order.
        ///</summary>
        public string? orderId { get; set; }
        ///<summary>
        ///The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
        ///For example, "#1001", "EN1001", or "1001-A".
        ///This value isn't unique across multiple stores.
        ///</summary>
        public string? orderName { get; set; }
        ///<summary>
        ///The date and time when the order was processed.
        ///This date and time might not match the date and time when the order was created.
        ///</summary>
        public DateTime? orderProcessedAt { get; set; }
        ///<summary>
        ///The request status of the fulfillment order.
        ///</summary>
        public FulfillmentOrderRequestStatus? requestStatus { get; set; }
        ///<summary>
        ///The status of the fulfillment order.
        ///</summary>
        public FulfillmentOrderStatus? status { get; set; }
        ///<summary>
        ///The actions that can be performed on this fulfillment order.
        ///</summary>
        public IEnumerable<FulfillmentOrderSupportedAction>? supportedActions { get; set; }
        ///<summary>
        ///The date and time when the fulfillment order was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderAcceptCancellationRequest` mutation.
    ///</summary>
    public class FulfillmentOrderAcceptCancellationRequestPayload : GraphQLObject<FulfillmentOrderAcceptCancellationRequestPayload>
    {
        ///<summary>
        ///The fulfillment order whose cancellation request was accepted.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation.
    ///</summary>
    public class FulfillmentOrderAcceptFulfillmentRequestPayload : GraphQLObject<FulfillmentOrderAcceptFulfillmentRequestPayload>
    {
        ///<summary>
        ///The fulfillment order whose fulfillment request was accepted.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The actions that can be taken on a fulfillment order.
    ///</summary>
    public enum FulfillmentOrderAction
    {
        ///<summary>
        ///Creates a fulfillment for selected line items in the fulfillment order. The corresponding mutation for this action is `fulfillmentCreateV2`.
        ///</summary>
        CREATE_FULFILLMENT,
        ///<summary>
        ///Sends a request for fulfilling selected line items in a fulfillment order to a fulfillment service. The corresponding mutation for this action is `fulfillmentOrderSubmitFulfillmentRequest`.
        ///</summary>
        REQUEST_FULFILLMENT,
        ///<summary>
        ///Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`.
        ///</summary>
        CANCEL_FULFILLMENT_ORDER,
        ///<summary>
        ///Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`.
        ///</summary>
        MOVE,
        ///<summary>
        ///Sends a cancellation request to the fulfillment service of a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSubmitCancellationRequest`.
        ///</summary>
        REQUEST_CANCELLATION,
        ///<summary>
        ///Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`.
        ///</summary>
        MARK_AS_OPEN,
        ///<summary>
        ///Releases the fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderReleaseHold`.
        ///</summary>
        RELEASE_HOLD,
        ///<summary>
        ///Applies a fulfillment hold on an open fulfillment order. The corresponding mutation for this action is `fulfillmentOrderHold`.
        ///</summary>
        HOLD,
        ///<summary>
        ///Opens an external URL to initiate the fulfillment process outside Shopify. This action should be paired with `FulfillmentOrderSupportedAction.externalUrl`.
        ///</summary>
        EXTERNAL,
        ///<summary>
        ///Splits a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSplit`.
        ///</summary>
        SPLIT,
        ///<summary>
        ///Merges a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMerge`.
        ///</summary>
        MERGE,
    }

    ///<summary>
    ///The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
    ///
    /// The fulfillment order's assigned location might change in the following cases:
    ///
    ///  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    ///    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ///    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    ///    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ///    ) field within the mutation's response.
    ///
    ///  - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
    ///      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
    ///      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
    ///      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
    ///      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
    ///
    ///If the [fulfillmentOrderMove](
    ///https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ///) mutation has moved the fulfillment order's line items to a new location,
    ///but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
    ///doesn't change.
    ///This happens if the fulfillment order is being split during the move, or if all line items can be moved
    ///to an existing fulfillment order at a new location.
    ///
    ///Once the fulfillment order has been taken into work or canceled,
    ///which means that the fulfillment order has the
    ///[IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
    ///[CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
    ///[CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
    ///[INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
    ///status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
    ///Up-to-date shop's location data may be queried through [location](
    ///  https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
    ///) connection.
    ///</summary>
    public class FulfillmentOrderAssignedLocation : GraphQLObject<FulfillmentOrderAssignedLocation>
    {
        ///<summary>
        ///The first line of the address for the location.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the address for the location.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The city of the location.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The two-letter country code of the location.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///The location where the fulfillment is expected to happen. This value might be different from
        ///`FulfillmentOrderAssignedLocation` if the location's attributes were updated
        ///after the fulfillment order was taken into work of canceled.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The name of the location.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The phone number of the location.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The province of the location.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The ZIP code of the location.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///The assigment status to be used to filter fulfillment orders.
    ///</summary>
    public enum FulfillmentOrderAssignmentStatus
    {
        ///<summary>
        ///Fulfillment orders for which the merchant has requested cancellation of
        ///the previously accepted fulfillment request.
        ///</summary>
        CANCELLATION_REQUESTED,
        ///<summary>
        ///Fulfillment orders for which the merchant has requested fulfillment.
        ///</summary>
        FULFILLMENT_REQUESTED,
        ///<summary>
        ///Fulfillment orders for which the merchant's fulfillment request has been accepted.
        ///Any number of fulfillments can be created on these fulfillment orders
        ///to completely fulfill the requested items.
        ///</summary>
        FULFILLMENT_ACCEPTED,
    }

    ///<summary>
    ///Return type for `fulfillmentOrderCancel` mutation.
    ///</summary>
    public class FulfillmentOrderCancelPayload : GraphQLObject<FulfillmentOrderCancelPayload>
    {
        ///<summary>
        ///The fulfillment order that was marked as canceled.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The fulfillment order that was created to replace the canceled fulfillment order.
        ///</summary>
        public FulfillmentOrder? replacementFulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderClose` mutation.
    ///</summary>
    public class FulfillmentOrderClosePayload : GraphQLObject<FulfillmentOrderClosePayload>
    {
        ///<summary>
        ///The fulfillment order that was marked as incomplete.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple FulfillmentOrders.
    ///</summary>
    public class FulfillmentOrderConnection : GraphQLObject<FulfillmentOrderConnection>, IConnectionWithNodesAndEdges<FulfillmentOrderEdge, FulfillmentOrder>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<FulfillmentOrderEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in FulfillmentOrderEdge.
        ///</summary>
        public IEnumerable<FulfillmentOrder>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Represents the destination where the items should be sent upon fulfillment.
    ///</summary>
    public class FulfillmentOrderDestination : GraphQLObject<FulfillmentOrderDestination>, INode
    {
        ///<summary>
        ///The first line of the address of the destination.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the address of the destination.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The city of the destination.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The company of the destination.
        ///</summary>
        public string? company { get; set; }
        ///<summary>
        ///The two-letter country code of the destination.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///The email of the customer at the destination.
        ///</summary>
        public string? email { get; set; }
        ///<summary>
        ///The first name of the customer at the destination.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The last name of the customer at the destination.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The phone number of the customer at the destination.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The province of the destination.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The ZIP code of the destination.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
    ///</summary>
    public class FulfillmentOrderEdge : GraphQLObject<FulfillmentOrderEdge>, IEdge<FulfillmentOrder>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of FulfillmentOrderEdge.
        ///</summary>
        public FulfillmentOrder? node { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderHold` mutation.
    ///</summary>
    public class FulfillmentOrderHoldPayload : GraphQLObject<FulfillmentOrderHoldPayload>
    {
        ///<summary>
        ///The fulfillment order on which a fulfillment hold was applied.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The remaining fulfillment order containing the line items to which the hold wasn't applied,
        ///if specific line items were specified to be placed on hold.
        ///</summary>
        public FulfillmentOrder? remainingFulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentOrderHoldUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentOrderHold`.
    ///</summary>
    public class FulfillmentOrderHoldUserError : GraphQLObject<FulfillmentOrderHoldUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentOrderHoldUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentOrderHoldUserError`.
    ///</summary>
    public enum FulfillmentOrderHoldUserErrorCode
    {
        ///<summary>
        ///The fulfillment order could not be found.
        ///</summary>
        FULFILLMENT_ORDER_NOT_FOUND,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The fulfillment order line item quantity must be greater than 0.
        ///</summary>
        GREATER_THAN_ZERO,
        ///<summary>
        ///The fulfillment order line item quantity is invalid.
        ///</summary>
        INVALID_LINE_ITEM_QUANTITY,
    }

    ///<summary>
    ///The international duties relevant to a fulfillment order.
    ///</summary>
    public class FulfillmentOrderInternationalDuties : GraphQLObject<FulfillmentOrderInternationalDuties>
    {
        ///<summary>
        ///The method of duties payment. Example values: `DDP`, `DAP`.
        ///</summary>
        public string? incoterm { get; set; }
    }

    ///<summary>
    ///Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.
    ///</summary>
    public class FulfillmentOrderLineItem : GraphQLObject<FulfillmentOrderLineItem>, INode
    {
        ///<summary>
        ///The financial summary for the Fulfillment Order's Line Items.
        ///</summary>
        public IEnumerable<FulfillmentOrderLineItemFinancialSummary>? financialSummaries { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image associated to the line item's variant.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The ID of the inventory item.
        ///</summary>
        public string? inventoryItemId { get; set; }

        ///<summary>
        ///The associated order line item.
        ///</summary>
        [Obsolete("          As of API version 2023-01, this field has been deprecated. The order line item associated with a `FulfillmentOrderLineItem`\n          shouldn't be used to determine what to fulfill. Use the `FulfillmentOrderLineItem` and `FulfillmentOrder` objects\n          instead. An order `LineItem` represents a single line item on an order, but it doesn't represent what should be fulfilled.")]
        public LineItem? lineItem { get; set; }

        ///<summary>
        ///The variant unit price without discounts applied, in shop and presentment currencies.
        ///</summary>
        [Obsolete("Use `financialSummaries` instead.")]
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///The title of the product.
        ///</summary>
        public string? productTitle { get; set; }
        ///<summary>
        ///The number of units remaining to be fulfilled.
        ///</summary>
        public int? remainingQuantity { get; set; }
        ///<summary>
        ///Whether physical shipping is required for the variant.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///The variant SKU number.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///The total number of units to be fulfilled.
        ///</summary>
        public int? totalQuantity { get; set; }
        ///<summary>
        ///The name of the variant.
        ///</summary>
        public string? variantTitle { get; set; }
        ///<summary>
        ///The name of the vendor who made the variant.
        ///</summary>
        public string? vendor { get; set; }
        ///<summary>
        ///Warning messages for a fulfillment order line item.
        ///</summary>
        public IEnumerable<FulfillmentOrderLineItemWarning>? warnings { get; set; }
        ///<summary>
        ///The weight of a line item unit.
        ///</summary>
        public Weight? weight { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
    ///</summary>
    public class FulfillmentOrderLineItemConnection : GraphQLObject<FulfillmentOrderLineItemConnection>, IConnectionWithNodesAndEdges<FulfillmentOrderLineItemEdge, FulfillmentOrderLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<FulfillmentOrderLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in FulfillmentOrderLineItemEdge.
        ///</summary>
        public IEnumerable<FulfillmentOrderLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
    ///</summary>
    public class FulfillmentOrderLineItemEdge : GraphQLObject<FulfillmentOrderLineItemEdge>, IEdge<FulfillmentOrderLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of FulfillmentOrderLineItemEdge.
        ///</summary>
        public FulfillmentOrderLineItem? node { get; set; }
    }

    ///<summary>
    ///The financial details of a fulfillment order line item.
    ///</summary>
    public class FulfillmentOrderLineItemFinancialSummary : GraphQLObject<FulfillmentOrderLineItemFinancialSummary>
    {
        ///<summary>
        ///The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.For the full picture of applied discounts, see discountAllocations.
        ///</summary>
        public MoneyBag? approximateDiscountedUnitPriceSet { get; set; }
        ///<summary>
        ///The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds.
        ///</summary>
        public IEnumerable<FinancialSummaryDiscountAllocation>? discountAllocations { get; set; }
        ///<summary>
        ///The variant unit price without discounts applied, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///Number of line items that this financial summary applies to.
        ///</summary>
        public int? quantity { get; set; }
    }

    ///<summary>
    ///A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.
    ///</summary>
    public class FulfillmentOrderLineItemWarning : GraphQLObject<FulfillmentOrderLineItemWarning>
    {
        ///<summary>
        ///The description of warning.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The title of warning.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderLineItemsPreparedForPickup` mutation.
    ///</summary>
    public class FulfillmentOrderLineItemsPreparedForPickupPayload : GraphQLObject<FulfillmentOrderLineItemsPreparedForPickupPayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentOrderLineItemsPreparedForPickupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentOrderLineItemsPreparedForPickup`.
    ///</summary>
    public class FulfillmentOrderLineItemsPreparedForPickupUserError : GraphQLObject<FulfillmentOrderLineItemsPreparedForPickupUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentOrderLineItemsPreparedForPickupUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentOrderLineItemsPreparedForPickupUserError`.
    ///</summary>
    public enum FulfillmentOrderLineItemsPreparedForPickupUserErrorCode
    {
        ///<summary>
        ///The fulfillment order does not have any line items that can be prepared.
        ///</summary>
        NO_LINE_ITEMS_TO_PREPARE_FOR_FULFILLMENT_ORDER,
        ///<summary>
        ///Invalid fulfillment order ID provided.
        ///</summary>
        FULFILLMENT_ORDER_INVALID,
        ///<summary>
        ///Unable to prepare quantity.
        ///</summary>
        UNABLE_TO_PREPARE_QUANTITY,
    }

    ///<summary>
    ///A location that a fulfillment order can potentially move to.
    ///</summary>
    public class FulfillmentOrderLocationForMove : GraphQLObject<FulfillmentOrderLocationForMove>
    {
        ///<summary>
        ///Fulfillment order line items that can be moved from their current location to the given location.
        ///</summary>
        public FulfillmentOrderLineItemConnection? availableLineItems { get; set; }
        ///<summary>
        ///Total number of fulfillment order line items that can be moved from their current assigned location to the
        ///given location.
        ///</summary>
        public ulong? availableLineItemsCount { get; set; }
        ///<summary>
        ///The location being considered as the fulfillment order's new assigned location.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
        ///moved to the location.
        ///</summary>
        public string? message { get; set; }
        ///<summary>
        ///Whether the fulfillment order can be moved to the location.
        ///</summary>
        public bool? movable { get; set; }
        ///<summary>
        ///Fulfillment order line items that cannot be moved from their current location to the given location.
        ///</summary>
        public FulfillmentOrderLineItemConnection? unavailableLineItems { get; set; }
        ///<summary>
        ///Total number of fulfillment order line items that can't be moved from their current assigned location to the
        ///given location.
        ///</summary>
        public ulong? unavailableLineItemsCount { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
    ///</summary>
    public class FulfillmentOrderLocationForMoveConnection : GraphQLObject<FulfillmentOrderLocationForMoveConnection>, IConnectionWithNodesAndEdges<FulfillmentOrderLocationForMoveEdge, FulfillmentOrderLocationForMove>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<FulfillmentOrderLocationForMoveEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in FulfillmentOrderLocationForMoveEdge.
        ///</summary>
        public IEnumerable<FulfillmentOrderLocationForMove>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
    ///</summary>
    public class FulfillmentOrderLocationForMoveEdge : GraphQLObject<FulfillmentOrderLocationForMoveEdge>, IEdge<FulfillmentOrderLocationForMove>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of FulfillmentOrderLocationForMoveEdge.
        ///</summary>
        public FulfillmentOrderLocationForMove? node { get; set; }
    }

    ///<summary>
    ///A request made by the merchant or an order management app to a fulfillment service
    ///for a fulfillment order.
    ///</summary>
    public class FulfillmentOrderMerchantRequest : GraphQLObject<FulfillmentOrderMerchantRequest>, INode
    {
        ///<summary>
        ///The fulfillment order associated with the merchant request.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The kind of request made.
        ///</summary>
        public FulfillmentOrderMerchantRequestKind? kind { get; set; }
        ///<summary>
        ///The optional message that the merchant included in the request.
        ///</summary>
        public string? message { get; set; }
        ///<summary>
        ///Additional options requested by the merchant. These depend on the `kind` of the request.
        ///For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
        ///merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
        ///`notifyCustomer` when making calls to `FulfillmentCreateV2`.
        ///</summary>
        public string? requestOptions { get; set; }
        ///<summary>
        ///The response from the fulfillment service.
        ///</summary>
        public string? responseData { get; set; }
        ///<summary>
        ///The timestamp when the request was made.
        ///</summary>
        public DateTime? sentAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
    ///</summary>
    public class FulfillmentOrderMerchantRequestConnection : GraphQLObject<FulfillmentOrderMerchantRequestConnection>, IConnectionWithNodesAndEdges<FulfillmentOrderMerchantRequestEdge, FulfillmentOrderMerchantRequest>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<FulfillmentOrderMerchantRequestEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in FulfillmentOrderMerchantRequestEdge.
        ///</summary>
        public IEnumerable<FulfillmentOrderMerchantRequest>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
    ///</summary>
    public class FulfillmentOrderMerchantRequestEdge : GraphQLObject<FulfillmentOrderMerchantRequestEdge>, IEdge<FulfillmentOrderMerchantRequest>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of FulfillmentOrderMerchantRequestEdge.
        ///</summary>
        public FulfillmentOrderMerchantRequest? node { get; set; }
    }

    ///<summary>
    ///The kinds of request merchants can make to a fulfillment service.
    ///</summary>
    public enum FulfillmentOrderMerchantRequestKind
    {
        ///<summary>
        ///The merchant requests fulfillment for an `OPEN` fulfillment order.
        ///</summary>
        FULFILLMENT_REQUEST,
        ///<summary>
        ///The merchant requests cancellation of an `IN_PROGRESS` fulfillment order.
        ///</summary>
        CANCELLATION_REQUEST,
    }

    ///<summary>
    ///Return type for `fulfillmentOrderMerge` mutation.
    ///</summary>
    public class FulfillmentOrderMergePayload : GraphQLObject<FulfillmentOrderMergePayload>
    {
        ///<summary>
        ///The result of the fulfillment order merges.
        ///</summary>
        public IEnumerable<FulfillmentOrderMergeResult>? fulfillmentOrderMerges { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentOrderMergeUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The result of merging a set of fulfillment orders.
    ///</summary>
    public class FulfillmentOrderMergeResult : GraphQLObject<FulfillmentOrderMergeResult>
    {
        ///<summary>
        ///The new fulfillment order as a result of the merge.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentOrderMerge`.
    ///</summary>
    public class FulfillmentOrderMergeUserError : GraphQLObject<FulfillmentOrderMergeUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentOrderMergeUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentOrderMergeUserError`.
    ///</summary>
    public enum FulfillmentOrderMergeUserErrorCode
    {
        ///<summary>
        ///The fulfillment order could not be found.
        ///</summary>
        FULFILLMENT_ORDER_NOT_FOUND,
        ///<summary>
        ///The fulfillment order line item quantity must be greater than 0.
        ///</summary>
        GREATER_THAN,
        ///<summary>
        ///The fulfillment order line item quantity is invalid.
        ///</summary>
        INVALID_LINE_ITEM_QUANTITY,
    }

    ///<summary>
    ///Return type for `fulfillmentOrderMove` mutation.
    ///</summary>
    public class FulfillmentOrderMovePayload : GraphQLObject<FulfillmentOrderMovePayload>
    {
        ///<summary>
        ///The fulfillment order which now contains the moved line items and is assigned to the destination location.
        ///
        ///**First scenario:** All line items belonging to the original fulfillment order are re-assigned.
        ///
        ///In this case, this will be the original fulfillment order.
        ///
        ///**Second scenario:** A subset of the line items belonging to the original fulfillment order are re-assigned.
        ///
        ///If the new location is already assigned to fulfill line items on the order, then
        ///this will be an existing active fulfillment order.
        ///Otherwise, this will be a new fulfillment order with the moved line items assigned.
        ///</summary>
        public FulfillmentOrder? movedFulfillmentOrder { get; set; }
        ///<summary>
        ///The final state of the original fulfillment order.
        ///
        ///As a result of the move operation, the original fulfillment order might be moved to the new location
        ///or remain in the original location. The original fulfillment order might have the same status or be closed.
        ///</summary>
        public FulfillmentOrder? originalFulfillmentOrder { get; set; }
        ///<summary>
        ///This field is deprecated.
        ///</summary>
        public FulfillmentOrder? remainingFulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderOpen` mutation.
    ///</summary>
    public class FulfillmentOrderOpenPayload : GraphQLObject<FulfillmentOrderOpenPayload>
    {
        ///<summary>
        ///The fulfillment order that was transitioned to open and is fulfillable.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderRejectCancellationRequest` mutation.
    ///</summary>
    public class FulfillmentOrderRejectCancellationRequestPayload : GraphQLObject<FulfillmentOrderRejectCancellationRequestPayload>
    {
        ///<summary>
        ///The fulfillment order whose cancellation request was rejected.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation.
    ///</summary>
    public class FulfillmentOrderRejectFulfillmentRequestPayload : GraphQLObject<FulfillmentOrderRejectFulfillmentRequestPayload>
    {
        ///<summary>
        ///The fulfillment order whose fulfillment request was rejected.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The reason for a fulfillment order rejection.
    ///</summary>
    public enum FulfillmentOrderRejectionReason
    {
        ///<summary>
        ///The fulfillment order was rejected because of an incorrect address.
        ///</summary>
        INCORRECT_ADDRESS,
        ///<summary>
        ///The fulfillment order was rejected because inventory is out of stock.
        ///</summary>
        INVENTORY_OUT_OF_STOCK,
        ///<summary>
        ///The fulfillment order was rejected because of an ineligible product.
        ///</summary>
        INELIGIBLE_PRODUCT,
        ///<summary>
        ///The fulfillment order was rejected because of an undeliverable destination.
        ///</summary>
        UNDELIVERABLE_DESTINATION,
        ///<summary>
        ///The fulfillment order was rejected for another reason.
        ///</summary>
        OTHER,
    }

    ///<summary>
    ///Return type for `fulfillmentOrderReleaseHold` mutation.
    ///</summary>
    public class FulfillmentOrderReleaseHoldPayload : GraphQLObject<FulfillmentOrderReleaseHoldPayload>
    {
        ///<summary>
        ///The fulfillment order on which the hold was released.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentOrderReleaseHoldUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentOrderReleaseHold`.
    ///</summary>
    public class FulfillmentOrderReleaseHoldUserError : GraphQLObject<FulfillmentOrderReleaseHoldUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentOrderReleaseHoldUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentOrderReleaseHoldUserError`.
    ///</summary>
    public enum FulfillmentOrderReleaseHoldUserErrorCode
    {
        ///<summary>
        ///The fulfillment order wasn't found.
        ///</summary>
        FULFILLMENT_ORDER_NOT_FOUND,
        ///<summary>
        ///The fulfillment order line item quantity must be greater than 0.
        ///</summary>
        GREATER_THAN_ZERO,
        ///<summary>
        ///The fulfillment order line item quantity is invalid.
        ///</summary>
        INVALID_LINE_ITEM_QUANTITY,
    }

    ///<summary>
    ///The request status of a fulfillment order.
    ///</summary>
    public enum FulfillmentOrderRequestStatus
    {
        ///<summary>
        ///The initial request status for the newly-created fulfillment orders. This is the only valid
        ///request status for fulfillment orders that aren't assigned to a fulfillment service.
        ///</summary>
        UNSUBMITTED,
        ///<summary>
        ///The merchant requested fulfillment for this fulfillment order.
        ///</summary>
        SUBMITTED,
        ///<summary>
        ///The fulfillment service accepted the merchant's fulfillment request.
        ///</summary>
        ACCEPTED,
        ///<summary>
        ///The fulfillment service rejected the merchant's fulfillment request.
        ///</summary>
        REJECTED,
        ///<summary>
        ///The merchant requested a cancellation of the fulfillment request for this fulfillment order.
        ///</summary>
        CANCELLATION_REQUESTED,
        ///<summary>
        ///The fulfillment service accepted the merchant's fulfillment cancellation request.
        ///</summary>
        CANCELLATION_ACCEPTED,
        ///<summary>
        ///The fulfillment service rejected the merchant's fulfillment cancellation request.
        ///</summary>
        CANCELLATION_REJECTED,
        ///<summary>
        ///The fulfillment service closed the fulfillment order without completing it.
        ///</summary>
        CLOSED,
    }

    ///<summary>
    ///Return type for `fulfillmentOrderReschedule` mutation.
    ///</summary>
    public class FulfillmentOrderReschedulePayload : GraphQLObject<FulfillmentOrderReschedulePayload>
    {
        ///<summary>
        ///A fulfillment order with the rescheduled line items.
        ///
        ///Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
        ///
        ///If the fulfillment order is merged then the resulting fulfillment order will be returned.
        ///Otherwise the original fulfillment order will be returned with an updated `fulfillAt` datetime.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentOrderRescheduleUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentOrderReschedule`.
    ///</summary>
    public class FulfillmentOrderRescheduleUserError : GraphQLObject<FulfillmentOrderRescheduleUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentOrderRescheduleUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentOrderRescheduleUserError`.
    ///</summary>
    public enum FulfillmentOrderRescheduleUserErrorCode
    {
        ///<summary>
        ///Fulfillment order could not be found.
        ///</summary>
        FULFILLMENT_ORDER_NOT_FOUND,
    }

    ///<summary>
    ///The set of valid sort keys for the FulfillmentOrder query.
    ///</summary>
    public enum FulfillmentOrderSortKeys
    {
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `fulfillmentOrderSplit` mutation.
    ///</summary>
    public class FulfillmentOrderSplitPayload : GraphQLObject<FulfillmentOrderSplitPayload>
    {
        ///<summary>
        ///The result of the fulfillment order splits.
        ///</summary>
        public IEnumerable<FulfillmentOrderSplitResult>? fulfillmentOrderSplits { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentOrderSplitUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The result of splitting a fulfillment order.
    ///</summary>
    public class FulfillmentOrderSplitResult : GraphQLObject<FulfillmentOrderSplitResult>
    {
        ///<summary>
        ///The original fulfillment order as a result of the split.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The remaining fulfillment order as a result of the split.
        ///</summary>
        public FulfillmentOrder? remainingFulfillmentOrder { get; set; }
        ///<summary>
        ///The replacement fulfillment order if the original fulfillment order wasn't in a state to be split.
        ///</summary>
        public FulfillmentOrder? replacementFulfillmentOrder { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentOrderSplit`.
    ///</summary>
    public class FulfillmentOrderSplitUserError : GraphQLObject<FulfillmentOrderSplitUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentOrderSplitUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentOrderSplitUserError`.
    ///</summary>
    public enum FulfillmentOrderSplitUserErrorCode
    {
        ///<summary>
        ///The fulfillment order could not be found.
        ///</summary>
        FULFILLMENT_ORDER_NOT_FOUND,
        ///<summary>
        ///The fulfillment order line item quantity must be greater than 0.
        ///</summary>
        GREATER_THAN,
        ///<summary>
        ///The fulfillment order line item quantity is invalid.
        ///</summary>
        INVALID_LINE_ITEM_QUANTITY,
        ///<summary>
        ///The fulfillment order must have at least one line item input to split.
        ///</summary>
        NO_LINE_ITEMS_PROVIDED_TO_SPLIT,
    }

    ///<summary>
    ///The status of a fulfillment order.
    ///</summary>
    public enum FulfillmentOrderStatus
    {
        ///<summary>
        ///The fulfillment order is ready for fulfillment.
        ///</summary>
        OPEN,
        ///<summary>
        ///The fulfillment order is being processed.
        ///</summary>
        IN_PROGRESS,
        ///<summary>
        ///The fulfillment order has been cancelled by the merchant.
        ///</summary>
        CANCELLED,
        ///<summary>
        ///The fulfillment order cannot be completed as requested.
        ///</summary>
        INCOMPLETE,
        ///<summary>
        ///The fulfillment order has been completed and closed.
        ///</summary>
        CLOSED,
        ///<summary>
        ///The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
        ///</summary>
        SCHEDULED,
        ///<summary>
        ///The fulfillment order is on hold. The fulfillment process can't be initiated until the hold on the fulfillment order is released.
        ///</summary>
        ON_HOLD,
    }

    ///<summary>
    ///Return type for `fulfillmentOrderSubmitCancellationRequest` mutation.
    ///</summary>
    public class FulfillmentOrderSubmitCancellationRequestPayload : GraphQLObject<FulfillmentOrderSubmitCancellationRequestPayload>
    {
        ///<summary>
        ///The fulfillment order specified in the cancelation request.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation.
    ///</summary>
    public class FulfillmentOrderSubmitFulfillmentRequestPayload : GraphQLObject<FulfillmentOrderSubmitFulfillmentRequestPayload>
    {
        ///<summary>
        ///The original fulfillment order intended to request fulfillment for.
        ///</summary>
        public FulfillmentOrder? originalFulfillmentOrder { get; set; }
        ///<summary>
        ///The fulfillment order that was submitted to the fulfillment service. This will be the same as
        ///the original fulfillment order field. The exception to this is partial fulfillment requests or
        ///fulfillment request for cancelled or incomplete fulfillment orders.
        ///</summary>
        public FulfillmentOrder? submittedFulfillmentOrder { get; set; }
        ///<summary>
        ///This field will only be present for partial fulfillment requests. This will represent the new
        ///fulfillment order with the remaining line items not submitted to the fulfillment service.
        ///</summary>
        public FulfillmentOrder? unsubmittedFulfillmentOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///One of the actions that the fulfillment order supports in its current state.
    ///</summary>
    public class FulfillmentOrderSupportedAction : GraphQLObject<FulfillmentOrderSupportedAction>
    {
        ///<summary>
        ///The action value.
        ///</summary>
        public FulfillmentOrderAction? action { get; set; }
        ///<summary>
        ///The external URL to be used to initiate the fulfillment process outside Shopify.
        ///Applicable only when the `action` value is `EXTERNAL`.
        ///</summary>
        public string? externalUrl { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentOrdersReleaseHolds` mutation.
    ///</summary>
    public class FulfillmentOrdersReleaseHoldsPayload : GraphQLObject<FulfillmentOrdersReleaseHoldsPayload>
    {
        ///<summary>
        ///The asynchronous job that will release the fulfillment holds.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentOrdersReleaseHoldsUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`.
    ///</summary>
    public class FulfillmentOrdersReleaseHoldsUserError : GraphQLObject<FulfillmentOrdersReleaseHoldsUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentOrdersReleaseHoldsUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`.
    ///</summary>
    public enum FulfillmentOrdersReleaseHoldsUserErrorCode
    {
        ///<summary>
        ///Failed to create release fulfillment order holds job.
        ///</summary>
        FAILED_TO_CREATE_JOB,
    }

    ///<summary>
    ///Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation.
    ///</summary>
    public class FulfillmentOrdersSetFulfillmentDeadlinePayload : GraphQLObject<FulfillmentOrdersSetFulfillmentDeadlinePayload>
    {
        ///<summary>
        ///Whether the fulfillment deadline was successfully set.
        ///</summary>
        public bool? success { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<FulfillmentOrdersSetFulfillmentDeadlineUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`.
    ///</summary>
    public class FulfillmentOrdersSetFulfillmentDeadlineUserError : GraphQLObject<FulfillmentOrdersSetFulfillmentDeadlineUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`.
    ///</summary>
    public enum FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode
    {
        ///<summary>
        ///The fulfillment orders could not be found.
        ///</summary>
        FULFILLMENT_ORDERS_NOT_FOUND,
    }

    ///<summary>
    ///The address at which the fulfillment occurred. This object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead.
    ///</summary>
    public class FulfillmentOriginAddress : GraphQLObject<FulfillmentOriginAddress>
    {
        ///<summary>
        ///The street address of the fulfillment location.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the address. Typically the number of the apartment, suite, or unit.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The city in which the fulfillment location is located.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The country code of the fulfillment location.
        ///</summary>
        public string? countryCode { get; set; }
        ///<summary>
        ///The province code of the fulfillment location.
        ///</summary>
        public string? provinceCode { get; set; }
        ///<summary>
        ///The zip code of the fulfillment location.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///A **Fulfillment Service** is a third party warehouse that prepares and ships orders
    ///on behalf of the store owner. Fulfillment services charge a fee to package and ship items
    ///and update product inventory levels. Some well known fulfillment services with Shopify integrations
    ///include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
    ///Shopify automatically creates a `Location` that's associated to the fulfillment service.
    ///To learn more about fulfillment services, refer to
    ///[Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
    ///guide.
    ///
    ///## Mutations
    ///
    ///You can work with the `FulfillmentService` object with the
    ///[fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
    ///[fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
    ///and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
    ///mutations.
    ///
    ///## Hosted endpoints
    ///
    ///Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
    ///Shopify can query on certain conditions.
    ///These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
    ///in the
    ///[fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
    ///mutation.
    ///
    ///- Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
    ///  to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests,
    ///  if `fulfillment_orders_opt_in` is set to `true`.
    ///
    ///  [As of the 2022-07 API version](https://shopify.dev/changelog/legacy-fulfillment-api-deprecation),
    ///  it's mandatory for a fulfillment service to follow a fulfillment order based workflow by
    ///  having `fulfillment_orders_opt_in` set to `true`,
    ///  hosting the `<callbackUrl>/fulfillment_order_notification` endpoint, and acting on fulfillment requests and cancellations.
    ///
    ///  For more information, refer to
    ///  [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
    ///- Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders,
    ///  if `trackingSupport` is set to `true`.
    ///
    ///  For more information, refer to
    ///  [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).
    ///
    ///  Fulfillment services can also update tracking information with the
    ///  [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2) mutation,
    ///  rather than waiting for Shopify to ask for tracking numbers.
    ///- Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
    ///  if `inventoryManagement` is set to `true`.
    ///
    ///  For more information, refer to
    ///  [Sharing inventory levels with Shopify](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-9-share-inventory-levels-with-shopify-optional).
    ///
    ///To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
    ///in your development store.
    ///
    ///## Resources and webhooks
    ///
    ///There are a variety of objects and webhooks that enable a fulfillment service to work.
    ///To exchange fulfillment information with Shopify, fulfillment services use the
    ///[FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
    ///[Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
    ///[Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
    ///To act on fulfillment process events that happen on the Shopify side,
    ///besides awaiting calls to `callbackUrl`-prefixed endpoints,
    ///fulfillment services can subscribe to the
    ///[fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
    ///and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
    ///webhooks.
    ///</summary>
    public class FulfillmentService : GraphQLObject<FulfillmentService>
    {
        ///<summary>
        ///The callback URL that the fulfillment service has registered for requests. The following considerations apply:
        ///
        ///- Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
        ///    for orders, if `trackingSupport` is set to `true`.
        ///- Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
        ///    if `inventoryManagement` is set to `true`.
        ///- Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
        ///    [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations),
        ///    if the fulfillment service has opted in to the fulfillment order based workflow for managing fulfillments
        ///    (`fulfillmentOrdersOptIn` is set to `true`).
        ///</summary>
        public string? callbackUrl { get; set; }
        ///<summary>
        ///Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments) for managing fulfillments.
        ///</summary>
        public bool? fulfillmentOrdersOptIn { get; set; }
        ///<summary>
        ///Human-readable unique identifier for this fulfillment service.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///The ID of the fulfillment service.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether the fulfillment service tracks product inventory and provides updates to Shopify.
        ///</summary>
        public bool? inventoryManagement { get; set; }
        ///<summary>
        ///Location associated with the fulfillment service.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///Whether the fulfillment service can stock inventory alongside other locations.
        ///</summary>
        public bool? permitsSkuSharing { get; set; }
        ///<summary>
        ///Whether the fulfillment service supports local deliveries.
        ///</summary>
        public bool? productBased { get; set; }
        ///<summary>
        ///The name of the fulfillment service as seen by merchants.
        ///</summary>
        public string? serviceName { get; set; }

        ///<summary>
        ///Shipping methods associated with the fulfillment service provider. Applies only to Fulfill By Amazon fulfillment service.
        ///</summary>
        [Obsolete("The Fulfillment by Amazon feature will no longer be supported from March 30, 2023. To continue using Amazon fulfillment, merchants need to set up a Multi-Channel Fulfillment solution recommended by Amazon: https://help.shopify.com/manual/shipping/fulfillment-services/amazon#activate-fulfillment-by-amazon")]
        public IEnumerable<ShippingMethod>? shippingMethods { get; set; }
        ///<summary>
        ///Type associated with the fulfillment service.
        ///</summary>
        public FulfillmentServiceType? type { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentServiceCreate` mutation.
    ///</summary>
    public class FulfillmentServiceCreatePayload : GraphQLObject<FulfillmentServiceCreatePayload>
    {
        ///<summary>
        ///The created fulfillment service.
        ///</summary>
        public FulfillmentService? fulfillmentService { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentServiceDelete` mutation.
    ///</summary>
    public class FulfillmentServiceDeletePayload : GraphQLObject<FulfillmentServiceDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted fulfillment service.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The type of a fulfillment service.
    ///</summary>
    public enum FulfillmentServiceType
    {
        ///<summary>
        ///Fulfillment by gift card.
        ///</summary>
        GIFT_CARD,
        ///<summary>
        ///Manual fulfillment by the merchant.
        ///</summary>
        MANUAL,
        ///<summary>
        ///Fullfillment by a third-party fulfillment service.
        ///</summary>
        THIRD_PARTY,
    }

    ///<summary>
    ///Return type for `fulfillmentServiceUpdate` mutation.
    ///</summary>
    public class FulfillmentServiceUpdatePayload : GraphQLObject<FulfillmentServiceUpdatePayload>
    {
        ///<summary>
        ///The updated fulfillment service.
        ///</summary>
        public FulfillmentService? fulfillmentService { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The status of a fulfillment.
    ///</summary>
    public enum FulfillmentStatus
    {
        ///<summary>
        ///Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to `open` or `success`.
        ///</summary>
        [Obsolete("This is a legacy status and is due to be deprecated.")]
        PENDING,
        ///<summary>
        ///The third-party fulfillment service has acknowledged the fulfillment and is processing it.
        ///</summary>
        [Obsolete("This is a legacy status and is due to be deprecated.")]
        OPEN,
        ///<summary>
        ///The fulfillment was completed successfully.
        ///</summary>
        SUCCESS,
        ///<summary>
        ///The fulfillment was canceled.
        ///</summary>
        CANCELLED,
        ///<summary>
        ///There was an error with the fulfillment request.
        ///</summary>
        ERROR,
        ///<summary>
        ///The fulfillment request failed.
        ///</summary>
        FAILURE,
    }

    ///<summary>
    ///Represents the tracking information for a fulfillment.
    ///</summary>
    public class FulfillmentTrackingInfo : GraphQLObject<FulfillmentTrackingInfo>
    {
        ///<summary>
        ///The name of the tracking company.
        ///
        ///For tracking company names from the list below
        ///Shopify will automatically build tracking URLs for all provided tracking numbers,
        ///which will make the tracking numbers clickable in the interface.
        ///
        ///Additionally, for the tracking companies listed on the
        ///[Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
        ///Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
        ///
        ///### Supported tracking companies
        ///
        ///The following tracking companies display for shops located in any country:
        ///
        ///  * 4PX
        ///  * AGS
        ///  * Amazon Logistics UK
        ///  * Amazon Logistics US
        ///  * An Post
        ///  * Anjun Logistics
        ///  * APC
        ///  * Asendia USA
        ///  * Australia Post
        ///  * Bonshaw
        ///  * BPost
        ///  * BPost International
        ///  * Canada Post
        ///  * Canpar
        ///  * CDL Last Mile
        ///  * China Post
        ///  * Chronopost
        ///  * Chukou1
        ///  * Colissimo
        ///  * Comingle
        ///  * Coordinadora
        ///  * Correios
        ///  * Correos
        ///  * CTT
        ///  * CTT Express
        ///  * Cyprus Post
        ///  * Delnext
        ///  * Deutsche Post
        ///  * DHL eCommerce
        ///  * DHL eCommerce Asia
        ///  * DHL Express
        ///  * DoorDash
        ///  * DPD
        ///  * DPD Local
        ///  * DPD UK
        ///  * DTD Express
        ///  * DX
        ///  * Eagle
        ///  * Estes
        ///  * Evri
        ///  * FedEx
        ///  * First Global Logistics
        ///  * First Line
        ///  * FSC
        ///  * Fulfilla
        ///  * GLS
        ///  * Guangdong Weisuyi Information Technology (WSE)
        ///  * Heppner Internationale Spedition GmbH & Co.
        ///  * Iceland Post
        ///  * IDEX
        ///  * Israel Post
        ///  * Japan Post (EN)
        ///  * Japan Post (JA)
        ///  * La Poste
        ///  * Lasership
        ///  * Latvia Post
        ///  * Lietuvos Paštas
        ///  * Logisters
        ///  * Lone Star Overnight
        ///  * M3 Logistics
        ///  * Meteor Space
        ///  * Mondial Relay
        ///  * New Zealand Post
        ///  * NinjaVan
        ///  * North Russia Supply Chain (Shenzhen) Co.
        ///  * OnTrac
        ///  * Packeta
        ///  * Pago Logistics
        ///  * Ping An Da Tengfei Express
        ///  * Pitney Bowes
        ///  * Portal PostNord
        ///  * Poste Italiane
        ///  * PostNL
        ///  * PostNord DK
        ///  * PostNord NO
        ///  * PostNord SE
        ///  * Purolator
        ///  * Qxpress
        ///  * Qyun Express
        ///  * Royal Mail
        ///  * Royal Shipments
        ///  * Sagawa (EN)
        ///  * Sagawa (JA)
        ///  * Sendle
        ///  * SF Express
        ///  * SFC Fulfillment
        ///  * SHREE NANDAN COURIER
        ///  * Singapore Post
        ///  * Southwest Air Cargo
        ///  * StarTrack
        ///  * Step Forward Freight
        ///  * Swiss Post
        ///  * TForce Final Mile
        ///  * Tinghao
        ///  * TNT
        ///  * Toll IPEC
        ///  * United Delivery Service
        ///  * UPS
        ///  * USPS
        ///  * Venipak
        ///  * We Post
        ///  * Whistl
        ///  * Wizmo
        ///  * WMYC
        ///  * Xpedigo
        ///  * XPO Logistics
        ///  * Yamato (EN)
        ///  * Yamato (JA)
        ///  * YiFan Express
        ///  * YunExpress
        ///
        ///The following tracking companies are displayed for shops located in specific countries:
        ///
        ///  * **Australia**: Australia Post, Sendle, Aramex Australia, TNT Australia, Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers, Northline, GO Logistics
        ///  * **Austria**: Österreichische Post
        ///  * **Bulgaria**: Speedy
        ///  * **Canada**: Intelcom, BoxKnight, Loomis, GLS
        ///  * **China**: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC
        ///  * **Czechia**: Zásilkovna
        ///  * **Germany**: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS
        ///  * **Spain**: SEUR
        ///  * **France**: Colissimo, Mondial Relay, Colis Privé, GLS
        ///  * **United Kingdom**: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells
        ///  * **Greece**: ACS Courier
        ///  * **Hong Kong SAR**: SF Express
        ///  * **Ireland**: Fastway, DPD Ireland
        ///  * **India**: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers, XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart
        ///  * **Italy**: BRT, GLS Italy
        ///  * **Japan**: エコ配, 西濃運輸, 西濃スーパーエキスプレス, 福山通運, 日本通運, 名鉄運輸, 第一貨物
        ///  * **Netherlands**: DHL Parcel, DPD
        ///  * **Norway**: Bring
        ///  * **Poland**: Inpost
        ///  * **Turkey**: PTT, Yurtiçi Kargo, Aras Kargo, Sürat Kargo
        ///  * **United States**: GLS, Alliance Air Freight, Pilot Freight, LSO, Old Dominion, R+L Carriers, Southwest Air Cargo
        ///  * **South Africa**: Fastway, Skynet.
        ///</summary>
        public string? company { get; set; }
        ///<summary>
        ///The tracking number of the fulfillment.
        ///
        ///The tracking number is clickable in the interface if one of the following applies
        ///(the highest in the list has the highest priority):
        ///
        ///* Tracking url provided in the `url` field.
        ///* [Shopify-known tracking company name](#supported-tracking-companies) specified in the `company` field.
        ///  Shopify will build the tracking URL automatically based on the tracking number specified.
        ///* The tracking number has a Shopify-known format.
        ///  Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
        ///  Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
        ///  This can result in an invalid tracking URL.
        ///  It is highly recommended that you send the tracking company and the tracking URL.
        ///</summary>
        public string? number { get; set; }
        ///<summary>
        ///The URLs to track the fulfillment.
        ///
        ///The tracking URL is displayed in the merchant's admin on the order page.
        ///The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
        ///When accounts are enabled, it's also displayed in the customer's order history.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///Return type for `fulfillmentTrackingInfoUpdateV2` mutation.
    ///</summary>
    public class FulfillmentTrackingInfoUpdateV2Payload : GraphQLObject<FulfillmentTrackingInfoUpdateV2Payload>
    {
        ///<summary>
        ///The updated fulfillment with tracking information.
        ///</summary>
        public Fulfillment? fulfillment { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The App Bridge information for a Shopify Function.
    ///</summary>
    public class FunctionsAppBridge : GraphQLObject<FunctionsAppBridge>
    {
        ///<summary>
        ///The relative path for creating a customization.
        ///</summary>
        public string? createPath { get; set; }
        ///<summary>
        ///The relative path for viewing a customization.
        ///</summary>
        public string? detailsPath { get; set; }
    }

    ///<summary>
    ///The error history from running a Shopify Function.
    ///</summary>
    public class FunctionsErrorHistory : GraphQLObject<FunctionsErrorHistory>
    {
        ///<summary>
        ///The date and time that the first error occurred.
        ///</summary>
        public DateTime? errorsFirstOccurredAt { get; set; }
        ///<summary>
        ///The date and time that the first error occurred.
        ///</summary>
        public DateTime? firstOccurredAt { get; set; }
        ///<summary>
        ///Whether the merchant has shared all the recent errors with the developer.
        ///</summary>
        public bool? hasBeenSharedSinceLastError { get; set; }
        ///<summary>
        ///Whether the merchant has shared all the recent errors with the developer.
        ///</summary>
        public bool? hasSharedRecentErrors { get; set; }
    }

    ///<summary>
    ///Represents any file other than HTML.
    ///</summary>
    public class GenericFile : GraphQLObject<GenericFile>, IFile, INode, IMetafieldReference
    {
        ///<summary>
        ///A word or phrase to describe the contents or the function of a file.
        ///</summary>
        public string? alt { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///Any errors that have occurred on the file.
        ///</summary>
        public IEnumerable<FileError>? fileErrors { get; set; }
        ///<summary>
        ///The status of the file.
        ///</summary>
        public FileStatus? fileStatus { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The generic file's MIME type.
        ///</summary>
        public string? mimeType { get; set; }
        ///<summary>
        ///The generic file's size in bytes.
        ///</summary>
        public int? originalFileSize { get; set; }
        ///<summary>
        ///The preview image for the media.
        ///</summary>
        public MediaPreviewImage? preview { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The generic file's URL.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///Represents an issued gift card.
    ///</summary>
    public class GiftCard : GraphQLObject<GiftCard>, INode
    {
        ///<summary>
        ///The gift card's remaining balance.
        ///</summary>
        public MoneyV2? balance { get; set; }
        ///<summary>
        ///The date and time at which the gift card was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The customer who will receive the gift card.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The date and time at which the gift card was disabled.
        ///</summary>
        public DateTime? disabledAt { get; set; }
        ///<summary>
        ///Whether the gift card is enabled.
        ///</summary>
        public bool? enabled { get; set; }
        ///<summary>
        ///The date at which the gift card will expire.
        ///</summary>
        public DateOnly? expiresOn { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The initial value of the gift card.
        ///</summary>
        public MoneyV2? initialValue { get; set; }
        ///<summary>
        ///The final four characters of the gift card code.
        ///</summary>
        public string? lastCharacters { get; set; }
        ///<summary>
        ///The gift card code. Everything but the final four characters is masked.
        ///</summary>
        public string? maskedCode { get; set; }
        ///<summary>
        ///The note associated with the gift card, which isn't visible to the customer.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The order associated with the gift card. This value is `null` if the gift card was issued manually.
        ///</summary>
        public Order? order { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple GiftCards.
    ///</summary>
    public class GiftCardConnection : GraphQLObject<GiftCardConnection>, IConnectionWithNodesAndEdges<GiftCardEdge, GiftCard>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<GiftCardEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in GiftCardEdge.
        ///</summary>
        public IEnumerable<GiftCard>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `giftCardCreate` mutation.
    ///</summary>
    public class GiftCardCreatePayload : GraphQLObject<GiftCardCreatePayload>
    {
        ///<summary>
        ///The created gift card.
        ///</summary>
        public GiftCard? giftCard { get; set; }
        ///<summary>
        ///The created gift card's code.
        ///</summary>
        public string? giftCardCode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<GiftCardUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `giftCardDisable` mutation.
    ///</summary>
    public class GiftCardDisablePayload : GraphQLObject<GiftCardDisablePayload>
    {
        ///<summary>
        ///The disabled gift card.
        ///</summary>
        public GiftCard? giftCard { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one GiftCard and a cursor during pagination.
    ///</summary>
    public class GiftCardEdge : GraphQLObject<GiftCardEdge>, IEdge<GiftCard>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of GiftCardEdge.
        ///</summary>
        public GiftCard? node { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `GiftCardUserError`.
    ///</summary>
    public enum GiftCardErrorCode
    {
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///Unexpected internal error happened.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Missing a required argument.
        ///</summary>
        MISSING_ARGUMENT,
        ///<summary>
        ///The input value should be greater than the minimum allowed value.
        ///</summary>
        GREATER_THAN,
    }

    ///<summary>
    ///A sale associated with a gift card.
    ///</summary>
    public class GiftCardSale : GraphQLObject<GiftCardSale>, ISale
    {
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; set; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The line item for the associated sale.
        ///</summary>
        public LineItem? lineItem { get; set; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; set; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; set; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; set; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the GiftCard query.
    ///</summary>
    public enum GiftCardSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `customer_name` value.
        ///</summary>
        CUSTOMER_NAME,
        ///<summary>
        ///Sort by the `code` value.
        ///</summary>
        CODE,
        ///<summary>
        ///Sort by the `balance` value.
        ///</summary>
        BALANCE,
        ///<summary>
        ///Sort by the `amount_spent` value.
        ///</summary>
        AMOUNT_SPENT,
        ///<summary>
        ///Sort by the `initial_value` value.
        ///</summary>
        INITIAL_VALUE,
        ///<summary>
        ///Sort by the `disabled_at` value.
        ///</summary>
        DISABLED_AT,
        ///<summary>
        ///Sort by the `expires_on` value.
        ///</summary>
        EXPIRES_ON,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `giftCardUpdate` mutation.
    ///</summary>
    public class GiftCardUpdatePayload : GraphQLObject<GiftCardUpdatePayload>
    {
        ///<summary>
        ///The updated gift card.
        ///</summary>
        public GiftCard? giftCard { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents an error that happens during the execution of a gift card mutation.
    ///</summary>
    public class GiftCardUserError : GraphQLObject<GiftCardUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public GiftCardErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Represents an object that has a list of events.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Company), typeDiscriminator: "Company")]
    [JsonDerivedType(typeof(CompanyLocation), typeDiscriminator: "CompanyLocation")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(DiscountAutomaticBxgy), typeDiscriminator: "DiscountAutomaticBxgy")]
    [JsonDerivedType(typeof(DiscountAutomaticNode), typeDiscriminator: "DiscountAutomaticNode")]
    [JsonDerivedType(typeof(DiscountCodeNode), typeDiscriminator: "DiscountCodeNode")]
    [JsonDerivedType(typeof(DiscountNode), typeDiscriminator: "DiscountNode")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    [JsonDerivedType(typeof(PriceRule), typeDiscriminator: "PriceRule")]
    public interface IHasEvents : IGraphQLObject
    {
        public Company? AsCompany() => this as Company;
        public CompanyLocation? AsCompanyLocation() => this as CompanyLocation;
        public Customer? AsCustomer() => this as Customer;
        public DiscountAutomaticBxgy? AsDiscountAutomaticBxgy() => this as DiscountAutomaticBxgy;
        public DiscountAutomaticNode? AsDiscountAutomaticNode() => this as DiscountAutomaticNode;
        public DiscountCodeNode? AsDiscountCodeNode() => this as DiscountCodeNode;
        public DiscountNode? AsDiscountNode() => this as DiscountNode;
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public Order? AsOrder() => this as Order;
        public PriceRule? AsPriceRule() => this as PriceRule;
        ///<summary>
        ///The paginated list of events associated with the host subject.
        ///</summary>
        public EventConnection? events { get; }
    }

    ///<summary>
    ///Localization extensions associated with the specified resource. For example, the tax id for government invoice.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    public interface IHasLocalizationExtensions : IGraphQLObject
    {
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public Order? AsOrder() => this as Order;
        ///<summary>
        ///List of localization extensions for the resource.
        ///</summary>
        public LocalizationExtensionConnection? localizationExtensions { get; }
    }

    ///<summary>
    ///Resources that metafield definitions can be applied to.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Collection), typeDiscriminator: "Collection")]
    [JsonDerivedType(typeof(Company), typeDiscriminator: "Company")]
    [JsonDerivedType(typeof(CompanyLocation), typeDiscriminator: "CompanyLocation")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(DeliveryCustomization), typeDiscriminator: "DeliveryCustomization")]
    [JsonDerivedType(typeof(DiscountAutomaticNode), typeDiscriminator: "DiscountAutomaticNode")]
    [JsonDerivedType(typeof(DiscountCodeNode), typeDiscriminator: "DiscountCodeNode")]
    [JsonDerivedType(typeof(DiscountNode), typeDiscriminator: "DiscountNode")]
    [JsonDerivedType(typeof(Location), typeDiscriminator: "Location")]
    [JsonDerivedType(typeof(Market), typeDiscriminator: "Market")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    [JsonDerivedType(typeof(PaymentCustomization), typeDiscriminator: "PaymentCustomization")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    [JsonDerivedType(typeof(Validation), typeDiscriminator: "Validation")]
    public interface IHasMetafieldDefinitions : IGraphQLObject
    {
        public Collection? AsCollection() => this as Collection;
        public Company? AsCompany() => this as Company;
        public CompanyLocation? AsCompanyLocation() => this as CompanyLocation;
        public Customer? AsCustomer() => this as Customer;
        public DeliveryCustomization? AsDeliveryCustomization() => this as DeliveryCustomization;
        public DiscountAutomaticNode? AsDiscountAutomaticNode() => this as DiscountAutomaticNode;
        public DiscountCodeNode? AsDiscountCodeNode() => this as DiscountCodeNode;
        public DiscountNode? AsDiscountNode() => this as DiscountNode;
        public Location? AsLocation() => this as Location;
        public Market? AsMarket() => this as Market;
        public Order? AsOrder() => this as Order;
        public PaymentCustomization? AsPaymentCustomization() => this as PaymentCustomization;
        public Product? AsProduct() => this as Product;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        public Validation? AsValidation() => this as Validation;
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; }
    }

    ///<summary>
    ///Represents information about the metafields associated to the specified resource.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AppInstallation), typeDiscriminator: "AppInstallation")]
    [JsonDerivedType(typeof(CartTransform), typeDiscriminator: "CartTransform")]
    [JsonDerivedType(typeof(Collection), typeDiscriminator: "Collection")]
    [JsonDerivedType(typeof(Company), typeDiscriminator: "Company")]
    [JsonDerivedType(typeof(CompanyLocation), typeDiscriminator: "CompanyLocation")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(CustomerSegmentMember), typeDiscriminator: "CustomerSegmentMember")]
    [JsonDerivedType(typeof(DeliveryCustomization), typeDiscriminator: "DeliveryCustomization")]
    [JsonDerivedType(typeof(DiscountAutomaticNode), typeDiscriminator: "DiscountAutomaticNode")]
    [JsonDerivedType(typeof(DiscountCodeNode), typeDiscriminator: "DiscountCodeNode")]
    [JsonDerivedType(typeof(DiscountNode), typeDiscriminator: "DiscountNode")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(FulfillmentConstraintRule), typeDiscriminator: "FulfillmentConstraintRule")]
    [JsonDerivedType(typeof(Image), typeDiscriminator: "Image")]
    [JsonDerivedType(typeof(Location), typeDiscriminator: "Location")]
    [JsonDerivedType(typeof(Market), typeDiscriminator: "Market")]
    [JsonDerivedType(typeof(MediaImage), typeDiscriminator: "MediaImage")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    [JsonDerivedType(typeof(PaymentCustomization), typeDiscriminator: "PaymentCustomization")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    [JsonDerivedType(typeof(Shop), typeDiscriminator: "Shop")]
    [JsonDerivedType(typeof(Validation), typeDiscriminator: "Validation")]
    public interface IHasMetafields : IGraphQLObject
    {
        public AppInstallation? AsAppInstallation() => this as AppInstallation;
        public CartTransform? AsCartTransform() => this as CartTransform;
        public Collection? AsCollection() => this as Collection;
        public Company? AsCompany() => this as Company;
        public CompanyLocation? AsCompanyLocation() => this as CompanyLocation;
        public Customer? AsCustomer() => this as Customer;
        public CustomerSegmentMember? AsCustomerSegmentMember() => this as CustomerSegmentMember;
        public DeliveryCustomization? AsDeliveryCustomization() => this as DeliveryCustomization;
        public DiscountAutomaticNode? AsDiscountAutomaticNode() => this as DiscountAutomaticNode;
        public DiscountCodeNode? AsDiscountCodeNode() => this as DiscountCodeNode;
        public DiscountNode? AsDiscountNode() => this as DiscountNode;
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public FulfillmentConstraintRule? AsFulfillmentConstraintRule() => this as FulfillmentConstraintRule;
        public Image? AsImage() => this as Image;
        public Location? AsLocation() => this as Location;
        public Market? AsMarket() => this as Market;
        public MediaImage? AsMediaImage() => this as MediaImage;
        public Order? AsOrder() => this as Order;
        public PaymentCustomization? AsPaymentCustomization() => this as PaymentCustomization;
        public Product? AsProduct() => this as Product;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        public Shop? AsShop() => this as Shop;
        public Validation? AsValidation() => this as Validation;
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; }
    }

    ///<summary>
    ///Published translations associated with the resource.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Collection), typeDiscriminator: "Collection")]
    [JsonDerivedType(typeof(Link), typeDiscriminator: "Link")]
    [JsonDerivedType(typeof(OnlineStoreArticle), typeDiscriminator: "OnlineStoreArticle")]
    [JsonDerivedType(typeof(OnlineStoreBlog), typeDiscriminator: "OnlineStoreBlog")]
    [JsonDerivedType(typeof(OnlineStorePage), typeDiscriminator: "OnlineStorePage")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductOption), typeDiscriminator: "ProductOption")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    [JsonDerivedType(typeof(SellingPlan), typeDiscriminator: "SellingPlan")]
    [JsonDerivedType(typeof(SellingPlanGroup), typeDiscriminator: "SellingPlanGroup")]
    [JsonDerivedType(typeof(Shop), typeDiscriminator: "Shop")]
    [JsonDerivedType(typeof(ShopPolicy), typeDiscriminator: "ShopPolicy")]
    public interface IHasPublishedTranslations : IGraphQLObject
    {
        public Collection? AsCollection() => this as Collection;
        public Link? AsLink() => this as Link;
        public OnlineStoreArticle? AsOnlineStoreArticle() => this as OnlineStoreArticle;
        public OnlineStoreBlog? AsOnlineStoreBlog() => this as OnlineStoreBlog;
        public OnlineStorePage? AsOnlineStorePage() => this as OnlineStorePage;
        public Product? AsProduct() => this as Product;
        public ProductOption? AsProductOption() => this as ProductOption;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        public SellingPlan? AsSellingPlan() => this as SellingPlan;
        public SellingPlanGroup? AsSellingPlanGroup() => this as SellingPlanGroup;
        public Shop? AsShop() => this as Shop;
        public ShopPolicy? AsShopPolicy() => this as ShopPolicy;
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; }
    }

    ///<summary>
    ///Represents an image resource.
    ///</summary>
    public class Image : GraphQLObject<Image>, IHasMetafields
    {
        ///<summary>
        ///A word or phrase to share the nature or contents of an image.
        ///</summary>
        public string? altText { get; set; }
        ///<summary>
        ///The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
        ///</summary>
        public int? height { get; set; }
        ///<summary>
        ///A unique ID for the image.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///The location of the original image as a URL.
        ///
        ///If there are any existing transformations in the original source URL, they will remain and not be stripped.
        ///</summary>
        [Obsolete("Use `url` instead.")]
        public string? originalSrc { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }

        ///<summary>
        ///The location of the image as a URL.
        ///</summary>
        [Obsolete("Use `url` instead.")]
        public string? src { get; set; }

        ///<summary>
        ///The location of the transformed image as a URL.
        ///
        ///All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
        ///Otherwise any transformations which an image type doesn't support will be ignored.
        ///</summary>
        [Obsolete("Use `url(transform:)` instead")]
        public string? transformedSrc { get; set; }
        ///<summary>
        ///The location of the image as a URL.
        ///
        ///If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
        ///
        ///All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
        ///
        ///If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
        ///</summary>
        public string? url { get; set; }
        ///<summary>
        ///The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
        ///</summary>
        public int? width { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Images.
    ///</summary>
    public class ImageConnection : GraphQLObject<ImageConnection>, IConnectionWithNodesAndEdges<ImageEdge, Image>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ImageEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ImageEdge.
        ///</summary>
        public IEnumerable<Image>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///List of supported image content types.
    ///</summary>
    public enum ImageContentType
    {
        ///<summary>
        ///A PNG image.
        ///</summary>
        PNG,
        ///<summary>
        ///A JPG image.
        ///</summary>
        JPG,
        ///<summary>
        ///A WEBP image.
        ///</summary>
        WEBP,
    }

    ///<summary>
    ///An auto-generated type which holds one Image and a cursor during pagination.
    ///</summary>
    public class ImageEdge : GraphQLObject<ImageEdge>, IEdge<Image>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ImageEdge.
        ///</summary>
        public Image? node { get; set; }
    }

    ///<summary>
    ///A parameter to upload an image.
    ///
    ///Deprecated in favor of
    ///[StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
    ///which is used in
    ///[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
    ///and returned by the
    ///[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
    ///</summary>
    public class ImageUploadParameter : GraphQLObject<ImageUploadParameter>
    {
        ///<summary>
        ///The parameter name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The parameter value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Return type for `inventoryActivate` mutation.
    ///</summary>
    public class InventoryActivatePayload : GraphQLObject<InventoryActivatePayload>
    {
        ///<summary>
        ///The inventory level that was activated.
        ///</summary>
        public InventoryLevel? inventoryLevel { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `inventoryAdjustQuantities` mutation.
    ///</summary>
    public class InventoryAdjustQuantitiesPayload : GraphQLObject<InventoryAdjustQuantitiesPayload>
    {
        ///<summary>
        ///The group of changes made by the operation.
        ///</summary>
        public InventoryAdjustmentGroup? inventoryAdjustmentGroup { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<InventoryAdjustQuantitiesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `InventoryAdjustQuantities`.
    ///</summary>
    public class InventoryAdjustQuantitiesUserError : GraphQLObject<InventoryAdjustQuantitiesUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public InventoryAdjustQuantitiesUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `InventoryAdjustQuantitiesUserError`.
    ///</summary>
    public enum InventoryAdjustQuantitiesUserErrorCode
    {
        ///<summary>
        ///Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API.
        ///</summary>
        INTERNAL_LEDGER_DOCUMENT,
        ///<summary>
        ///A ledger document URI is not allowed when adjusting available.
        ///</summary>
        INVALID_AVAILABLE_DOCUMENT,
        ///<summary>
        ///The specified inventory item could not be found.
        ///</summary>
        INVALID_INVENTORY_ITEM,
        ///<summary>
        ///The specified ledger document is invalid.
        ///</summary>
        INVALID_LEDGER_DOCUMENT,
        ///<summary>
        ///The specified location could not be found.
        ///</summary>
        INVALID_LOCATION,
        ///<summary>
        ///A ledger document URI is required except when adjusting available.
        ///</summary>
        INVALID_QUANTITY_DOCUMENT,
        ///<summary>
        ///The specified quantity name is invalid.
        ///</summary>
        INVALID_QUANTITY_NAME,
        ///<summary>
        ///The quantity can't be lower than -2,000,000,000.
        ///</summary>
        INVALID_QUANTITY_TOO_LOW,
        ///<summary>
        ///The quantity can't be higher than 2,000,000,000.
        ///</summary>
        INVALID_QUANTITY_TOO_HIGH,
        ///<summary>
        ///The specified reason is invalid.
        ///</summary>
        INVALID_REASON,
        ///<summary>
        ///The specified reference document is invalid.
        ///</summary>
        INVALID_REFERENCE_DOCUMENT,
        ///<summary>
        ///The quantities couldn't be adjusted. Try again.
        ///</summary>
        ADJUST_QUANTITIES_FAILED,
        ///<summary>
        ///All changes must have the same ledger document URI or, in the case of adjusting available, no ledger document URI.
        ///</summary>
        MAX_ONE_LEDGER_DOCUMENT,
        ///<summary>
        ///The inventory item is not stocked at the location.
        ///</summary>
        ITEM_NOT_STOCKED_AT_LOCATION,
        ///<summary>
        ///The specified inventory item is not allowed to be adjusted via API.
        ///</summary>
        NON_MUTABLE_INVENTORY_ITEM,
    }

    ///<summary>
    ///Return type for `inventoryAdjustQuantity` mutation.
    ///</summary>
    public class InventoryAdjustQuantityPayload : GraphQLObject<InventoryAdjustQuantityPayload>
    {
        ///<summary>
        ///Represents the updated inventory quantity of an inventory item at a specific location.
        ///</summary>
        public InventoryLevel? inventoryLevel { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a group of adjustments made as part of the same operation.
    ///</summary>
    public class InventoryAdjustmentGroup : GraphQLObject<InventoryAdjustmentGroup>, INode
    {
        ///<summary>
        ///The app that triggered the inventory event, if one exists.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The set of inventory quantity changes that occurred in the inventory event.
        ///</summary>
        public IEnumerable<InventoryChange>? changes { get; set; }
        ///<summary>
        ///The date and time the inventory adjustment group was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The reason for the group of adjustments.
        ///</summary>
        public string? reason { get; set; }
        ///<summary>
        ///The reference document URI for the changes. Denotes what's causing the change.
        ///</summary>
        public string? referenceDocumentUri { get; set; }
        ///<summary>
        ///The staff member associated with the inventory event.
        ///</summary>
        public StaffMember? staffMember { get; set; }
    }

    ///<summary>
    ///Return type for `inventoryBulkAdjustQuantityAtLocation` mutation.
    ///</summary>
    public class InventoryBulkAdjustQuantityAtLocationPayload : GraphQLObject<InventoryBulkAdjustQuantityAtLocationPayload>
    {
        ///<summary>
        ///Represents the updated inventory quantities of an inventory item at the location.
        ///</summary>
        public IEnumerable<InventoryLevel>? inventoryLevels { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `inventoryBulkToggleActivation` mutation.
    ///</summary>
    public class InventoryBulkToggleActivationPayload : GraphQLObject<InventoryBulkToggleActivationPayload>
    {
        ///<summary>
        ///The inventory item that was updated.
        ///</summary>
        public InventoryItem? inventoryItem { get; set; }
        ///<summary>
        ///The activated inventory levels.
        ///</summary>
        public IEnumerable<InventoryLevel>? inventoryLevels { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<InventoryBulkToggleActivationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurred while setting the activation status of an inventory item.
    ///</summary>
    public class InventoryBulkToggleActivationUserError : GraphQLObject<InventoryBulkToggleActivationUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public InventoryBulkToggleActivationUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `InventoryBulkToggleActivationUserError`.
    ///</summary>
    public enum InventoryBulkToggleActivationUserErrorCode
    {
        ///<summary>
        ///An error occurred while setting the activation status.
        ///</summary>
        GENERIC_ERROR,
        ///<summary>
        ///Cannot unstock an inventory item from the only location at which it is stocked.
        ///</summary>
        CANNOT_DEACTIVATE_FROM_ONLY_LOCATION,
        ///<summary>
        ///Cannot unstock this inventory item from this location because it has committed and incoming quantities.
        ///</summary>
        [Obsolete("This error code is deprecated. Both INCOMING_INVENTORY_AT_LOCATION and COMMITTED_INVENTORY_AT_LOCATION codes will be returned as individual errors instead.")]
        COMMITTED_AND_INCOMING_INVENTORY_AT_LOCATION,
        ///<summary>
        ///Cannot unstock this inventory item from this location because it has incoming quantities.
        ///</summary>
        INCOMING_INVENTORY_AT_LOCATION,
        ///<summary>
        ///Cannot unstock this inventory item from this location because it has committed quantities.
        ///</summary>
        COMMITTED_INVENTORY_AT_LOCATION,
        ///<summary>
        ///Cannot unstock this inventory item from this location because it has unavailable quantities.
        ///</summary>
        RESERVED_INVENTORY_AT_LOCATION,
        ///<summary>
        ///Failed to unstock this inventory item from this location.
        ///</summary>
        FAILED_TO_UNSTOCK_FROM_LOCATION,
        ///<summary>
        ///Cannot stock this inventory item at this location because it is managed by a third-party fulfillment service.
        ///</summary>
        INVENTORY_MANAGED_BY_3RD_PARTY,
        ///<summary>
        ///Cannot stock this inventory item at this location because it is managed by Shopify.
        ///</summary>
        INVENTORY_MANAGED_BY_SHOPIFY,
        ///<summary>
        ///Failed to stock this inventory item at this location.
        ///</summary>
        FAILED_TO_STOCK_AT_LOCATION,
        ///<summary>
        ///Cannot stock this inventory item at this location because the variant is missing a SKU.
        ///</summary>
        MISSING_SKU,
        ///<summary>
        ///The location was not found.
        ///</summary>
        LOCATION_NOT_FOUND,
        ///<summary>
        ///The inventory item was not found.
        ///</summary>
        INVENTORY_ITEM_NOT_FOUND,
    }

    ///<summary>
    ///Represents a change in an inventory quantity of an inventory item at a location.
    ///</summary>
    public class InventoryChange : GraphQLObject<InventoryChange>
    {
        ///<summary>
        ///The amount by which the inventory quantity was changed.
        ///</summary>
        public int? delta { get; set; }
        ///<summary>
        ///The inventory item associated with this inventory change.
        ///</summary>
        public InventoryItem? item { get; set; }
        ///<summary>
        ///The ledger document URI for the change. Denotes who the change is applied to.
        ///</summary>
        public string? ledgerDocumentUri { get; set; }
        ///<summary>
        ///The location associated with this inventory change.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
        ///of the inventory quantity that was changed.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The quantity of named inventory after the change.
        ///</summary>
        public int? quantityAfterChange { get; set; }
    }

    ///<summary>
    ///Return type for `inventoryDeactivate` mutation.
    ///</summary>
    public class InventoryDeactivatePayload : GraphQLObject<InventoryDeactivatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents the goods available to be shipped to a customer.
    ///It holds essential information about the goods, including SKU and whether it is tracked.
    ///</summary>
    public class InventoryItem : GraphQLObject<InventoryItem>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The ISO 3166-1 alpha-2 country code of where the item originated from.
        ///</summary>
        public CountryCode? countryCodeOfOrigin { get; set; }
        ///<summary>
        ///A list of country specific harmonized system codes.
        ///</summary>
        public CountryHarmonizedSystemCodeConnection? countryHarmonizedSystemCodes { get; set; }
        ///<summary>
        ///The date and time when the inventory item was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The number of inventory items that share the same SKU with this item.
        ///</summary>
        public int? duplicateSkuCount { get; set; }
        ///<summary>
        ///The harmonized system code of the item.
        ///</summary>
        public string? harmonizedSystemCode { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The URL that points to the inventory history for the item.
        ///</summary>
        public string? inventoryHistoryUrl { get; set; }
        ///<summary>
        ///The inventory item's quantities at the specified location.
        ///</summary>
        public InventoryLevel? inventoryLevel { get; set; }
        ///<summary>
        ///A list of the inventory item's quantities for each location that the inventory item can be stocked at.
        ///</summary>
        public InventoryLevelConnection? inventoryLevels { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The number of locations where this inventory item is stocked.
        ///</summary>
        public int? locationsCount { get; set; }
        ///<summary>
        ///The ISO 3166-2 alpha-2 province code of where the item originated from.
        ///</summary>
        public string? provinceCodeOfOrigin { get; set; }
        ///<summary>
        ///Whether the inventory item requires shipping.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///Inventory item SKU. Case-sensitive string.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///Whether inventory levels are tracked for the item.
        ///</summary>
        public bool? tracked { get; set; }
        ///<summary>
        ///Whether the value of the `tracked` field for the inventory item can be changed.
        ///</summary>
        public EditableProperty? trackedEditable { get; set; }
        ///<summary>
        ///Unit cost associated with the inventory item. Note: the user must have "View product costs" permission granted in order to access this field once product granular permissions are enabled.
        ///</summary>
        public MoneyV2? unitCost { get; set; }
        ///<summary>
        ///The date and time when the inventory item was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The variant that owns this inventory item.
        ///</summary>
        public ProductVariant? variant { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple InventoryItems.
    ///</summary>
    public class InventoryItemConnection : GraphQLObject<InventoryItemConnection>, IConnectionWithNodesAndEdges<InventoryItemEdge, InventoryItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<InventoryItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in InventoryItemEdge.
        ///</summary>
        public IEnumerable<InventoryItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one InventoryItem and a cursor during pagination.
    ///</summary>
    public class InventoryItemEdge : GraphQLObject<InventoryItemEdge>, IEdge<InventoryItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of InventoryItemEdge.
        ///</summary>
        public InventoryItem? node { get; set; }
    }

    ///<summary>
    ///Return type for `inventoryItemUpdate` mutation.
    ///</summary>
    public class InventoryItemUpdatePayload : GraphQLObject<InventoryItemUpdatePayload>
    {
        ///<summary>
        ///The inventory item that was updated.
        ///</summary>
        public InventoryItem? inventoryItem { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The quantities of an inventory item that are related to a specific location.
    ///</summary>
    public class InventoryLevel : GraphQLObject<InventoryLevel>, INode
    {
        ///<summary>
        ///The quantity of inventory items that are available at the inventory level's associated location.
        ///</summary>
        [Obsolete("Use the `quantities` field instead and specify available for names. Example: `quantities(names:[\"available\"]){name quantity}`.")]
        public int? available { get; set; }
        ///<summary>
        ///Whether the inventory items associated with the inventory level can be deactivated.
        ///</summary>
        public bool? canDeactivate { get; set; }
        ///<summary>
        ///The date and time when the inventory level was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
        ///</summary>
        public string? deactivationAlert { get; set; }

        ///<summary>
        ///Describes, in HTML with embedded URLs, either the impact of deactivating the inventory level or why the inventory level can't be deactivated.
        ///</summary>
        [Obsolete("Use `deactivationAlert` instead.")]
        public string? deactivationAlertHtml { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }

        ///<summary>
        ///The quantity of inventory items that are going to the inventory level's associated location.
        ///</summary>
        [Obsolete("Use the `quantities` field instead and specify incoming for names. Example: `quantities(names:[\"incoming\"]){name quantity}`.")]
        public int? incoming { get; set; }
        ///<summary>
        ///Inventory item associated with the inventory level.
        ///</summary>
        public InventoryItem? item { get; set; }
        ///<summary>
        ///The location associated with the inventory level.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///Quantities for the requested names.
        ///</summary>
        public IEnumerable<InventoryQuantity>? quantities { get; set; }
        ///<summary>
        ///Scheduled changes for the requested quantity names.
        ///</summary>
        public InventoryScheduledChangeConnection? scheduledChanges { get; set; }
        ///<summary>
        ///The date and time when the inventory level was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple InventoryLevels.
    ///</summary>
    public class InventoryLevelConnection : GraphQLObject<InventoryLevelConnection>, IConnectionWithNodesAndEdges<InventoryLevelEdge, InventoryLevel>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<InventoryLevelEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in InventoryLevelEdge.
        ///</summary>
        public IEnumerable<InventoryLevel>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one InventoryLevel and a cursor during pagination.
    ///</summary>
    public class InventoryLevelEdge : GraphQLObject<InventoryLevelEdge>, IEdge<InventoryLevel>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of InventoryLevelEdge.
        ///</summary>
        public InventoryLevel? node { get; set; }
    }

    ///<summary>
    ///Return type for `inventoryMoveQuantities` mutation.
    ///</summary>
    public class InventoryMoveQuantitiesPayload : GraphQLObject<InventoryMoveQuantitiesPayload>
    {
        ///<summary>
        ///The group of changes made by the operation.
        ///</summary>
        public InventoryAdjustmentGroup? inventoryAdjustmentGroup { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<InventoryMoveQuantitiesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `InventoryMoveQuantities`.
    ///</summary>
    public class InventoryMoveQuantitiesUserError : GraphQLObject<InventoryMoveQuantitiesUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public InventoryMoveQuantitiesUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `InventoryMoveQuantitiesUserError`.
    ///</summary>
    public enum InventoryMoveQuantitiesUserErrorCode
    {
        ///<summary>
        ///Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API.
        ///</summary>
        INTERNAL_LEDGER_DOCUMENT,
        ///<summary>
        ///A ledger document URI is not allowed when adjusting available.
        ///</summary>
        INVALID_AVAILABLE_DOCUMENT,
        ///<summary>
        ///The specified inventory item could not be found.
        ///</summary>
        INVALID_INVENTORY_ITEM,
        ///<summary>
        ///The specified ledger document is invalid.
        ///</summary>
        INVALID_LEDGER_DOCUMENT,
        ///<summary>
        ///The specified location could not be found.
        ///</summary>
        INVALID_LOCATION,
        ///<summary>
        ///A ledger document URI is required except when adjusting available.
        ///</summary>
        INVALID_QUANTITY_DOCUMENT,
        ///<summary>
        ///The specified quantity name is invalid.
        ///</summary>
        INVALID_QUANTITY_NAME,
        ///<summary>
        ///The quantity can't be negative.
        ///</summary>
        INVALID_QUANTITY_NEGATIVE,
        ///<summary>
        ///The quantity can't be higher than 2,000,000,000.
        ///</summary>
        INVALID_QUANTITY_TOO_HIGH,
        ///<summary>
        ///The specified reason is invalid.
        ///</summary>
        INVALID_REASON,
        ///<summary>
        ///The specified reference document is invalid.
        ///</summary>
        INVALID_REFERENCE_DOCUMENT,
        ///<summary>
        ///The quantities couldn't be moved. Try again.
        ///</summary>
        MOVE_QUANTITIES_FAILED,
        ///<summary>
        ///The quantities can't be moved between different locations.
        ///</summary>
        DIFFERENT_LOCATIONS,
        ///<summary>
        ///The quantity names for each change can't be the same.
        ///</summary>
        SAME_QUANTITY_NAME,
        ///<summary>
        ///Only a maximum of 2 ledger document URIs across all changes is allowed.
        ///</summary>
        MAXIMUM_LEDGER_DOCUMENT_URIS,
        ///<summary>
        ///The inventory item is not stocked at the location.
        ///</summary>
        ITEM_NOT_STOCKED_AT_LOCATION,
        ///<summary>
        ///The specified inventory item is not allowed to be adjusted via API.
        ///</summary>
        NON_MUTABLE_INVENTORY_ITEM,
    }

    ///<summary>
    ///General inventory properties for the shop.
    ///</summary>
    public class InventoryProperties : GraphQLObject<InventoryProperties>
    {
        ///<summary>
        ///All the quantity names.
        ///</summary>
        public IEnumerable<InventoryQuantityName>? quantityNames { get; set; }
    }

    ///<summary>
    ///Represents a quantity of an inventory item at a specific location, for a specific name.
    ///</summary>
    public class InventoryQuantity : GraphQLObject<InventoryQuantity>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
        ///that identifies the inventory quantity.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The quantity for the quantity name.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///When the quantity was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Details about an individual quantity name.
    ///</summary>
    public class InventoryQuantityName : GraphQLObject<InventoryQuantityName>
    {
        ///<summary>
        ///List of quantity names that this quantity name belongs to.
        ///</summary>
        public IEnumerable<string>? belongsTo { get; set; }
        ///<summary>
        ///List of quantity names that comprise this quantity name.
        ///</summary>
        public IEnumerable<string>? comprises { get; set; }
        ///<summary>
        ///The display name for quantity names translated into applicable language.
        ///</summary>
        public string? displayName { get; set; }
        ///<summary>
        ///Whether the quantity name has been used by the merchant.
        ///</summary>
        public bool? isInUse { get; set; }
        ///<summary>
        ///The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states) of
        ///the inventory quantity. Used by
        ///[inventory queries and mutations](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#graphql-queries-and-mutations).
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///Returns the scheduled changes to inventory states related to the ledger document.
    ///</summary>
    public class InventoryScheduledChange : GraphQLObject<InventoryScheduledChange>
    {
        ///<summary>
        ///The date and time that the scheduled change is expected to happen.
        ///</summary>
        public DateTime? expectedAt { get; set; }
        ///<summary>
        ///The quantity
        ///[name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
        ///to transition from.
        ///</summary>
        public string? fromName { get; set; }
        ///<summary>
        ///The quantities of an inventory item that are related to a specific location.
        ///</summary>
        public InventoryLevel? inventoryLevel { get; set; }
        ///<summary>
        ///An active reference document associated with the inventory quantity. Must be a valid URI.
        ///</summary>
        public string? ledgerDocumentUri { get; set; }
        ///<summary>
        ///The quantity of the scheduled change associated with the ledger document in the `from_name` state.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The quantity
        ///[name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
        ///to transition to.
        ///</summary>
        public string? toName { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple InventoryScheduledChanges.
    ///</summary>
    public class InventoryScheduledChangeConnection : GraphQLObject<InventoryScheduledChangeConnection>, IConnectionWithNodesAndEdges<InventoryScheduledChangeEdge, InventoryScheduledChange>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<InventoryScheduledChangeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in InventoryScheduledChangeEdge.
        ///</summary>
        public IEnumerable<InventoryScheduledChange>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one InventoryScheduledChange and a cursor during pagination.
    ///</summary>
    public class InventoryScheduledChangeEdge : GraphQLObject<InventoryScheduledChangeEdge>, IEdge<InventoryScheduledChange>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of InventoryScheduledChangeEdge.
        ///</summary>
        public InventoryScheduledChange? node { get; set; }
    }

    ///<summary>
    ///Return type for `inventorySetOnHandQuantities` mutation.
    ///</summary>
    public class InventorySetOnHandQuantitiesPayload : GraphQLObject<InventorySetOnHandQuantitiesPayload>
    {
        ///<summary>
        ///The group of changes made by the operation.
        ///</summary>
        public InventoryAdjustmentGroup? inventoryAdjustmentGroup { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<InventorySetOnHandQuantitiesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `InventorySetOnHandQuantities`.
    ///</summary>
    public class InventorySetOnHandQuantitiesUserError : GraphQLObject<InventorySetOnHandQuantitiesUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public InventorySetOnHandQuantitiesUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `InventorySetOnHandQuantitiesUserError`.
    ///</summary>
    public enum InventorySetOnHandQuantitiesUserErrorCode
    {
        ///<summary>
        ///The specified inventory item could not be found.
        ///</summary>
        INVALID_INVENTORY_ITEM,
        ///<summary>
        ///The specified location could not be found.
        ///</summary>
        INVALID_LOCATION,
        ///<summary>
        ///The quantity can't be negative.
        ///</summary>
        INVALID_QUANTITY_NEGATIVE,
        ///<summary>
        ///The specified reason is invalid.
        ///</summary>
        INVALID_REASON,
        ///<summary>
        ///The specified reference document is invalid.
        ///</summary>
        INVALID_REFERENCE_DOCUMENT,
        ///<summary>
        ///The on-hand quantities couldn't be set. Try again.
        ///</summary>
        SET_ON_HAND_QUANTITIES_FAILED,
        ///<summary>
        ///The inventory item is not stocked at the location.
        ///</summary>
        ITEM_NOT_STOCKED_AT_LOCATION,
        ///<summary>
        ///The specified inventory item is not allowed to be adjusted via API.
        ///</summary>
        NON_MUTABLE_INVENTORY_ITEM,
        ///<summary>
        ///The total quantity can't be higher than 1,000,000,000.
        ///</summary>
        INVALID_QUANTITY_TOO_HIGH,
    }

    ///<summary>
    ///Return type for `inventorySetScheduledChanges` mutation.
    ///</summary>
    public class InventorySetScheduledChangesPayload : GraphQLObject<InventorySetScheduledChangesPayload>
    {
        ///<summary>
        ///The scheduled changes that were created.
        ///</summary>
        public IEnumerable<InventoryScheduledChange>? scheduledChanges { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<InventorySetScheduledChangesUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `InventorySetScheduledChanges`.
    ///</summary>
    public class InventorySetScheduledChangesUserError : GraphQLObject<InventorySetScheduledChangesUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public InventorySetScheduledChangesUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `InventorySetScheduledChangesUserError`.
    ///</summary>
    public enum InventorySetScheduledChangesUserErrorCode
    {
        ///<summary>
        ///There was an error updating the scheduled changes.
        ///</summary>
        ERROR_UPDATING_SCHEDULED,
        ///<summary>
        ///The from_name and to_name can't be the same.
        ///</summary>
        SAME_FROM_TO_NAMES,
        ///<summary>
        ///The specified fromName is invalid.
        ///</summary>
        INVALID_FROM_NAME,
        ///<summary>
        ///The specified toName is invalid.
        ///</summary>
        INVALID_TO_NAME,
        ///<summary>
        ///The item can only have one scheduled change for %{to_name} as the to_name.
        ///</summary>
        DUPLICATE_TO_NAME,
        ///<summary>
        ///The specified reason is invalid. Valid values: %{reasons}.
        ///</summary>
        INVALID_REASON,
        ///<summary>
        ///The item can only have one scheduled change for %{from_name} as the fromName.
        ///</summary>
        DUPLICATE_FROM_NAME,
        ///<summary>
        ///The location couldn't be found.
        ///</summary>
        LOCATION_NOT_FOUND,
        ///<summary>
        ///The inventory item was not found at the location specified.
        ///</summary>
        INVENTORY_STATE_NOT_FOUND,
        ///<summary>
        ///At least 1 item must be provided.
        ///</summary>
        ITEMS_EMPTY,
        ///<summary>
        ///The inventory item was not found.
        ///</summary>
        INVENTORY_ITEM_NOT_FOUND,
        ///<summary>
        ///The specified field is invalid.
        ///</summary>
        INCLUSION,
    }

    ///<summary>
    ///A job corresponds to some long running task that the client should poll for status.
    ///</summary>
    public class Job : GraphQLObject<Job>
    {
        ///<summary>
        ///This indicates if the job is still queued or has been run.
        ///</summary>
        public bool? done { get; set; }
        ///<summary>
        ///A globally-unique ID that's returned when running an asynchronous mutation.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
        ///</summary>
        public QueryRoot? query { get; set; }
    }

    ///<summary>
    ///A job corresponds to some long running task that the client should poll for status.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CustomerSegmentMembersQuery), typeDiscriminator: "CustomerSegmentMembersQuery")]
    public interface IJobResult : IGraphQLObject
    {
        public CustomerSegmentMembersQuery? AsCustomerSegmentMembersQuery() => this as CustomerSegmentMembersQuery;
        ///<summary>
        ///This indicates if the job is still queued or has been run.
        ///</summary>
        public bool? done { get; }
        ///<summary>
        ///A globally-unique ID that's returned when running an asynchronous mutation.
        ///</summary>
        public string? id { get; }
    }

    ///<summary>
    ///ISO 639-1 language codes supported by Shopify.
    ///</summary>
    public enum LanguageCode
    {
        ///<summary>
        ///Afrikaans.
        ///</summary>
        AF,
        ///<summary>
        ///Akan.
        ///</summary>
        AK,
        ///<summary>
        ///Amharic.
        ///</summary>
        AM,
        ///<summary>
        ///Arabic.
        ///</summary>
        AR,
        ///<summary>
        ///Assamese.
        ///</summary>
        AS,
        ///<summary>
        ///Azerbaijani.
        ///</summary>
        AZ,
        ///<summary>
        ///Belarusian.
        ///</summary>
        BE,
        ///<summary>
        ///Bulgarian.
        ///</summary>
        BG,
        ///<summary>
        ///Bambara.
        ///</summary>
        BM,
        ///<summary>
        ///Bangla.
        ///</summary>
        BN,
        ///<summary>
        ///Tibetan.
        ///</summary>
        BO,
        ///<summary>
        ///Breton.
        ///</summary>
        BR,
        ///<summary>
        ///Bosnian.
        ///</summary>
        BS,
        ///<summary>
        ///Catalan.
        ///</summary>
        CA,
        ///<summary>
        ///Chechen.
        ///</summary>
        CE,
        ///<summary>
        ///Czech.
        ///</summary>
        CS,
        ///<summary>
        ///Welsh.
        ///</summary>
        CY,
        ///<summary>
        ///Danish.
        ///</summary>
        DA,
        ///<summary>
        ///German.
        ///</summary>
        DE,
        ///<summary>
        ///Dzongkha.
        ///</summary>
        DZ,
        ///<summary>
        ///Ewe.
        ///</summary>
        EE,
        ///<summary>
        ///Greek.
        ///</summary>
        EL,
        ///<summary>
        ///English.
        ///</summary>
        EN,
        ///<summary>
        ///Esperanto.
        ///</summary>
        EO,
        ///<summary>
        ///Spanish.
        ///</summary>
        ES,
        ///<summary>
        ///Estonian.
        ///</summary>
        ET,
        ///<summary>
        ///Basque.
        ///</summary>
        EU,
        ///<summary>
        ///Persian.
        ///</summary>
        FA,
        ///<summary>
        ///Fulah.
        ///</summary>
        FF,
        ///<summary>
        ///Finnish.
        ///</summary>
        FI,
        ///<summary>
        ///Faroese.
        ///</summary>
        FO,
        ///<summary>
        ///French.
        ///</summary>
        FR,
        ///<summary>
        ///Western Frisian.
        ///</summary>
        FY,
        ///<summary>
        ///Irish.
        ///</summary>
        GA,
        ///<summary>
        ///Scottish Gaelic.
        ///</summary>
        GD,
        ///<summary>
        ///Galician.
        ///</summary>
        GL,
        ///<summary>
        ///Gujarati.
        ///</summary>
        GU,
        ///<summary>
        ///Manx.
        ///</summary>
        GV,
        ///<summary>
        ///Hausa.
        ///</summary>
        HA,
        ///<summary>
        ///Hebrew.
        ///</summary>
        HE,
        ///<summary>
        ///Hindi.
        ///</summary>
        HI,
        ///<summary>
        ///Croatian.
        ///</summary>
        HR,
        ///<summary>
        ///Hungarian.
        ///</summary>
        HU,
        ///<summary>
        ///Armenian.
        ///</summary>
        HY,
        ///<summary>
        ///Interlingua.
        ///</summary>
        IA,
        ///<summary>
        ///Indonesian.
        ///</summary>
        ID,
        ///<summary>
        ///Igbo.
        ///</summary>
        IG,
        ///<summary>
        ///Sichuan Yi.
        ///</summary>
        II,
        ///<summary>
        ///Icelandic.
        ///</summary>
        IS,
        ///<summary>
        ///Italian.
        ///</summary>
        IT,
        ///<summary>
        ///Japanese.
        ///</summary>
        JA,
        ///<summary>
        ///Javanese.
        ///</summary>
        JV,
        ///<summary>
        ///Georgian.
        ///</summary>
        KA,
        ///<summary>
        ///Kikuyu.
        ///</summary>
        KI,
        ///<summary>
        ///Kazakh.
        ///</summary>
        KK,
        ///<summary>
        ///Kalaallisut.
        ///</summary>
        KL,
        ///<summary>
        ///Khmer.
        ///</summary>
        KM,
        ///<summary>
        ///Kannada.
        ///</summary>
        KN,
        ///<summary>
        ///Korean.
        ///</summary>
        KO,
        ///<summary>
        ///Kashmiri.
        ///</summary>
        KS,
        ///<summary>
        ///Kurdish.
        ///</summary>
        KU,
        ///<summary>
        ///Cornish.
        ///</summary>
        KW,
        ///<summary>
        ///Kyrgyz.
        ///</summary>
        KY,
        ///<summary>
        ///Luxembourgish.
        ///</summary>
        LB,
        ///<summary>
        ///Ganda.
        ///</summary>
        LG,
        ///<summary>
        ///Lingala.
        ///</summary>
        LN,
        ///<summary>
        ///Lao.
        ///</summary>
        LO,
        ///<summary>
        ///Lithuanian.
        ///</summary>
        LT,
        ///<summary>
        ///Luba-Katanga.
        ///</summary>
        LU,
        ///<summary>
        ///Latvian.
        ///</summary>
        LV,
        ///<summary>
        ///Malagasy.
        ///</summary>
        MG,
        ///<summary>
        ///Māori.
        ///</summary>
        MI,
        ///<summary>
        ///Macedonian.
        ///</summary>
        MK,
        ///<summary>
        ///Malayalam.
        ///</summary>
        ML,
        ///<summary>
        ///Mongolian.
        ///</summary>
        MN,
        ///<summary>
        ///Marathi.
        ///</summary>
        MR,
        ///<summary>
        ///Malay.
        ///</summary>
        MS,
        ///<summary>
        ///Maltese.
        ///</summary>
        MT,
        ///<summary>
        ///Burmese.
        ///</summary>
        MY,
        ///<summary>
        ///Norwegian (Bokmål).
        ///</summary>
        NB,
        ///<summary>
        ///North Ndebele.
        ///</summary>
        ND,
        ///<summary>
        ///Nepali.
        ///</summary>
        NE,
        ///<summary>
        ///Dutch.
        ///</summary>
        NL,
        ///<summary>
        ///Norwegian Nynorsk.
        ///</summary>
        NN,
        ///<summary>
        ///Norwegian.
        ///</summary>
        NO,
        ///<summary>
        ///Oromo.
        ///</summary>
        OM,
        ///<summary>
        ///Odia.
        ///</summary>
        OR,
        ///<summary>
        ///Ossetic.
        ///</summary>
        OS,
        ///<summary>
        ///Punjabi.
        ///</summary>
        PA,
        ///<summary>
        ///Polish.
        ///</summary>
        PL,
        ///<summary>
        ///Pashto.
        ///</summary>
        PS,
        ///<summary>
        ///Portuguese (Brazil).
        ///</summary>
        PT_BR,
        ///<summary>
        ///Portuguese (Portugal).
        ///</summary>
        PT_PT,
        ///<summary>
        ///Quechua.
        ///</summary>
        QU,
        ///<summary>
        ///Romansh.
        ///</summary>
        RM,
        ///<summary>
        ///Rundi.
        ///</summary>
        RN,
        ///<summary>
        ///Romanian.
        ///</summary>
        RO,
        ///<summary>
        ///Russian.
        ///</summary>
        RU,
        ///<summary>
        ///Kinyarwanda.
        ///</summary>
        RW,
        ///<summary>
        ///Sindhi.
        ///</summary>
        SD,
        ///<summary>
        ///Northern Sami.
        ///</summary>
        SE,
        ///<summary>
        ///Sango.
        ///</summary>
        SG,
        ///<summary>
        ///Sinhala.
        ///</summary>
        SI,
        ///<summary>
        ///Slovak.
        ///</summary>
        SK,
        ///<summary>
        ///Slovenian.
        ///</summary>
        SL,
        ///<summary>
        ///Shona.
        ///</summary>
        SN,
        ///<summary>
        ///Somali.
        ///</summary>
        SO,
        ///<summary>
        ///Albanian.
        ///</summary>
        SQ,
        ///<summary>
        ///Serbian.
        ///</summary>
        SR,
        ///<summary>
        ///Sundanese.
        ///</summary>
        SU,
        ///<summary>
        ///Swedish.
        ///</summary>
        SV,
        ///<summary>
        ///Swahili.
        ///</summary>
        SW,
        ///<summary>
        ///Tamil.
        ///</summary>
        TA,
        ///<summary>
        ///Telugu.
        ///</summary>
        TE,
        ///<summary>
        ///Tajik.
        ///</summary>
        TG,
        ///<summary>
        ///Thai.
        ///</summary>
        TH,
        ///<summary>
        ///Tigrinya.
        ///</summary>
        TI,
        ///<summary>
        ///Turkmen.
        ///</summary>
        TK,
        ///<summary>
        ///Tongan.
        ///</summary>
        TO,
        ///<summary>
        ///Turkish.
        ///</summary>
        TR,
        ///<summary>
        ///Tatar.
        ///</summary>
        TT,
        ///<summary>
        ///Uyghur.
        ///</summary>
        UG,
        ///<summary>
        ///Ukrainian.
        ///</summary>
        UK,
        ///<summary>
        ///Urdu.
        ///</summary>
        UR,
        ///<summary>
        ///Uzbek.
        ///</summary>
        UZ,
        ///<summary>
        ///Vietnamese.
        ///</summary>
        VI,
        ///<summary>
        ///Wolof.
        ///</summary>
        WO,
        ///<summary>
        ///Xhosa.
        ///</summary>
        XH,
        ///<summary>
        ///Yiddish.
        ///</summary>
        YI,
        ///<summary>
        ///Yoruba.
        ///</summary>
        YO,
        ///<summary>
        ///Chinese (Simplified).
        ///</summary>
        ZH_CN,
        ///<summary>
        ///Chinese (Traditional).
        ///</summary>
        ZH_TW,
        ///<summary>
        ///Zulu.
        ///</summary>
        ZU,
        ///<summary>
        ///Chinese.
        ///</summary>
        ZH,
        ///<summary>
        ///Portuguese.
        ///</summary>
        PT,
        ///<summary>
        ///Church Slavic.
        ///</summary>
        CU,
        ///<summary>
        ///Volapük.
        ///</summary>
        VO,
    }

    ///<summary>
    ///Interoperability metadata for types that directly correspond to a REST Admin API resource.
    ///For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(Fulfillment), typeDiscriminator: "Fulfillment")]
    [JsonDerivedType(typeof(InventoryItem), typeDiscriminator: "InventoryItem")]
    [JsonDerivedType(typeof(Location), typeDiscriminator: "Location")]
    [JsonDerivedType(typeof(MarketingEvent), typeDiscriminator: "MarketingEvent")]
    [JsonDerivedType(typeof(Metafield), typeDiscriminator: "Metafield")]
    [JsonDerivedType(typeof(MetafieldStorefrontVisibility), typeDiscriminator: "MetafieldStorefrontVisibility")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    [JsonDerivedType(typeof(PriceRule), typeDiscriminator: "PriceRule")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    [JsonDerivedType(typeof(Refund), typeDiscriminator: "Refund")]
    [JsonDerivedType(typeof(SavedSearch), typeDiscriminator: "SavedSearch")]
    [JsonDerivedType(typeof(ScriptTag), typeDiscriminator: "ScriptTag")]
    [JsonDerivedType(typeof(ShopifyPaymentsDispute), typeDiscriminator: "ShopifyPaymentsDispute")]
    [JsonDerivedType(typeof(ShopifyPaymentsPayout), typeDiscriminator: "ShopifyPaymentsPayout")]
    [JsonDerivedType(typeof(WebhookSubscription), typeDiscriminator: "WebhookSubscription")]
    public interface ILegacyInteroperability : IGraphQLObject
    {
        public Customer? AsCustomer() => this as Customer;
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public Fulfillment? AsFulfillment() => this as Fulfillment;
        public InventoryItem? AsInventoryItem() => this as InventoryItem;
        public Location? AsLocation() => this as Location;
        public MarketingEvent? AsMarketingEvent() => this as MarketingEvent;
        public Metafield? AsMetafield() => this as Metafield;
        public MetafieldStorefrontVisibility? AsMetafieldStorefrontVisibility() => this as MetafieldStorefrontVisibility;
        public Order? AsOrder() => this as Order;
        public PriceRule? AsPriceRule() => this as PriceRule;
        public Product? AsProduct() => this as Product;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        public Refund? AsRefund() => this as Refund;
        public SavedSearch? AsSavedSearch() => this as SavedSearch;
        public ScriptTag? AsScriptTag() => this as ScriptTag;
        public ShopifyPaymentsDispute? AsShopifyPaymentsDispute() => this as ShopifyPaymentsDispute;
        public ShopifyPaymentsPayout? AsShopifyPaymentsPayout() => this as ShopifyPaymentsPayout;
        public WebhookSubscription? AsWebhookSubscription() => this as WebhookSubscription;
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; }
    }

    ///<summary>
    ///Units of measurement for length.
    ///</summary>
    public enum LengthUnit
    {
        ///<summary>
        ///1000 millimeters equals 1 meter.
        ///</summary>
        MILLIMETERS,
        ///<summary>
        ///100 centimeters equals 1 meter.
        ///</summary>
        CENTIMETERS,
        ///<summary>
        ///Metric system unit of length.
        ///</summary>
        METERS,
        ///<summary>
        ///12 inches equals 1 foot.
        ///</summary>
        INCHES,
        ///<summary>
        ///Imperial system unit of length.
        ///</summary>
        FEET,
        ///<summary>
        ///1 yard equals 3 feet.
        ///</summary>
        YARDS,
    }

    ///<summary>
    ///The total number of pending orders on a shop if less then a maximum, or that maximum.
    ///The atMax field indicates when this maximum has been reached.
    ///</summary>
    public class LimitedPendingOrderCount : GraphQLObject<LimitedPendingOrderCount>
    {
        ///<summary>
        ///This is set when the number of pending orders has reached the maximum.
        ///</summary>
        public bool? atMax { get; set; }
        ///<summary>
        ///The number of pendings orders on the shop.
        ///Limited to a maximum of 10000.
        ///</summary>
        public int? count { get; set; }
    }

    ///<summary>
    ///Represents individual products and quantities purchased in the associated order.
    ///</summary>
    public class LineItem : GraphQLObject<LineItem>, INode
    {
        ///<summary>
        ///Whether the line item can be restocked.
        ///</summary>
        [Obsolete("Use `restockable` instead.")]
        public bool? canRestock { get; set; }
        ///<summary>
        ///The subscription contract associated with this line item.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The line item's quantity, minus the removed quantity.
        ///</summary>
        public int? currentQuantity { get; set; }
        ///<summary>
        ///A list of attributes that represent custom features or special requests.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds.
        ///</summary>
        public IEnumerable<DiscountAllocation>? discountAllocations { get; set; }

        ///<summary>
        ///The total line price after discounts are applied, in shop currency.
        ///</summary>
        [Obsolete("Use `discountedTotalSet` instead.")]
        public decimal? discountedTotal { get; set; }
        ///<summary>
        ///The total line price after discounts are applied, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? discountedTotalSet { get; set; }

        ///<summary>
        ///The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
        ///</summary>
        [Obsolete("Use `discountedUnitPriceSet` instead.")]
        public decimal? discountedUnitPrice { get; set; }
        ///<summary>
        ///The approximate split price of the line item, including any discounts that apply to the entire order.
        ///</summary>
        public MoneyBag? discountedUnitPriceAfterAllDiscountsSet { get; set; }
        ///<summary>
        ///The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
        ///</summary>
        public MoneyBag? discountedUnitPriceSet { get; set; }
        ///<summary>
        ///The duties associated with the line item.
        ///</summary>
        public IEnumerable<Duty>? duties { get; set; }

        ///<summary>
        ///The total number of units to fulfill.
        ///</summary>
        [Obsolete("Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.")]
        public int? fulfillableQuantity { get; set; }

        ///<summary>
        ///The fulfillment service that stocks the product variant belonging to a line item.
        ///
        ///This is a third-party fulfillment service in the following scenarios:
        ///
        ///**Scenario 1**
        ///- The product variant is stocked by a single fulfillment service.
        ///- The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
        ///
        ///**Scenario 2**
        ///- Multiple fulfillment services stock the product variant.
        ///- The last time that the line item was unfulfilled, it was awaiting fulfillment by a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
        ///
        ///If none of the above conditions are met, then the fulfillment service has the `manual` handle.
        ///</summary>
        [Obsolete("\nThe [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.\n\nIf you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.\n\nAltering the locations which stock a product variant won't change the value of this field for existing orders.\n\nLearn about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).")]
        public FulfillmentService? fulfillmentService { get; set; }

        ///<summary>
        ///The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
        ///'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
        ///</summary>
        [Obsolete("Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead")]
        public string? fulfillmentStatus { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image associated to the line item's variant.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The line item group associated to the line item.
        ///</summary>
        public LineItemGroup? lineItemGroup { get; set; }
        ///<summary>
        ///Whether the line item can be edited or not.
        ///</summary>
        public bool? merchantEditable { get; set; }
        ///<summary>
        ///The title of the product, optionally appended with the title of the variant (if applicable).
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip. Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details.
        ///</summary>
        public int? nonFulfillableQuantity { get; set; }

        ///<summary>
        ///The total price without discounts applied, in shop currency.
        ///This value is based on the unit price of the variant x quantity.
        ///</summary>
        [Obsolete("Use `originalTotalSet` instead.")]
        public decimal? originalTotal { get; set; }
        ///<summary>
        ///The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
        ///</summary>
        public MoneyBag? originalTotalSet { get; set; }

        ///<summary>
        ///The variant unit price without discounts applied, in shop currency.
        ///</summary>
        [Obsolete("Use `originalUnitPriceSet` instead.")]
        public decimal? originalUnitPrice { get; set; }
        ///<summary>
        ///The variant unit price without discounts applied, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///The Product object associated with this line item's variant.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The number of variant units ordered.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The line item's quantity, minus the refunded quantity.
        ///</summary>
        public int? refundableQuantity { get; set; }
        ///<summary>
        ///Whether physical shipping is required for the variant.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///Whether the line item can be restocked.
        ///</summary>
        public bool? restockable { get; set; }
        ///<summary>
        ///The selling plan details associated with the line item.
        ///</summary>
        public LineItemSellingPlan? sellingPlan { get; set; }
        ///<summary>
        ///The variant SKU number.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///Staff attributed to the line item.
        ///</summary>
        public StaffMember? staffMember { get; set; }
        ///<summary>
        ///The taxes charged for this line item.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Whether the variant is taxable.
        ///</summary>
        public bool? taxable { get; set; }
        ///<summary>
        ///The title of the product at time of order creation.
        ///</summary>
        public string? title { get; set; }

        ///<summary>
        ///The total amount of the discount allocated to the line item in the shop currency.
        ///</summary>
        [Obsolete("Use `totalDiscountSet` instead.")]
        public decimal? totalDiscount { get; set; }
        ///<summary>
        ///The total amount of the discount that's allocated to the line item, in the shop and presentment currencies. This field must be explicitly set using draft orders, Shopify scripts, or the API.
        ///</summary>
        public MoneyBag? totalDiscountSet { get; set; }

        ///<summary>
        ///The total discounted value of unfulfilled units, in shop currency.
        ///</summary>
        [Obsolete("Use `unfulfilledDiscountedTotalSet` instead.")]
        public decimal? unfulfilledDiscountedTotal { get; set; }
        ///<summary>
        ///The total discounted value of unfulfilled units, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? unfulfilledDiscountedTotalSet { get; set; }

        ///<summary>
        ///The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
        ///</summary>
        [Obsolete("Use `unfulfilledOriginalTotalSet` instead.")]
        public decimal? unfulfilledOriginalTotal { get; set; }
        ///<summary>
        ///The total price, without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? unfulfilledOriginalTotalSet { get; set; }
        ///<summary>
        ///The number of units not yet fulfilled.
        ///</summary>
        public int? unfulfilledQuantity { get; set; }
        ///<summary>
        ///The Variant object associated with this line item.
        ///</summary>
        public ProductVariant? variant { get; set; }
        ///<summary>
        ///The title of the variant at time of order creation.
        ///</summary>
        public string? variantTitle { get; set; }
        ///<summary>
        ///The name of the vendor who made the variant.
        ///</summary>
        public string? vendor { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple LineItems.
    ///</summary>
    public class LineItemConnection : GraphQLObject<LineItemConnection>, IConnectionWithNodesAndEdges<LineItemEdge, LineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<LineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in LineItemEdge.
        ///</summary>
        public IEnumerable<LineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one LineItem and a cursor during pagination.
    ///</summary>
    public class LineItemEdge : GraphQLObject<LineItemEdge>, IEdge<LineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of LineItemEdge.
        ///</summary>
        public LineItem? node { get; set; }
    }

    ///<summary>
    ///A line item group (bundle) to which a line item belongs to.
    ///</summary>
    public class LineItemGroup : GraphQLObject<LineItemGroup>
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Quantity of the line item group on the order.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///Title of the line item group.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///ID of the variant of the line item group.
        ///</summary>
        public string? variantId { get; set; }
        ///<summary>
        ///SKU of the variant of the line item group.
        ///</summary>
        public string? variantSku { get; set; }
    }

    ///<summary>
    ///Represents a single line item on an order.
    ///</summary>
    public class LineItemMutable : GraphQLObject<LineItemMutable>, INode
    {
        ///<summary>
        ///Whether the line item can be restocked.
        ///</summary>
        [Obsolete("Use `restockable` instead.")]
        public bool? canRestock { get; set; }
        ///<summary>
        ///A list of attributes that represent custom features or special requests.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///The discounts that have been allocated onto the line item by discount applications.
        ///</summary>
        public IEnumerable<DiscountAllocation>? discountAllocations { get; set; }

        ///<summary>
        ///The total line price after discounts are applied, in shop currency.
        ///</summary>
        [Obsolete("Use `discountedTotalSet` instead.")]
        public decimal? discountedTotal { get; set; }
        ///<summary>
        ///The total line price after discounts are applied, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? discountedTotalSet { get; set; }

        ///<summary>
        ///The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
        ///</summary>
        [Obsolete("Use `discountedUnitPriceSet` instead.")]
        public decimal? discountedUnitPrice { get; set; }
        ///<summary>
        ///The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
        ///</summary>
        public MoneyBag? discountedUnitPriceSet { get; set; }
        ///<summary>
        ///The total number of units to fulfill.
        ///</summary>
        public int? fulfillableQuantity { get; set; }
        ///<summary>
        ///The service provider that fulfills the line item.
        ///
        ///Deleted fulfillment services will return null.
        ///</summary>
        public FulfillmentService? fulfillmentService { get; set; }
        ///<summary>
        ///The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
        ///'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
        ///</summary>
        public string? fulfillmentStatus { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image associated to the line item's variant.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///Whether the line item can be edited or not.
        ///</summary>
        public bool? merchantEditable { get; set; }
        ///<summary>
        ///The name of the product.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The total number of units that can't be fulfilled. For example, if items have been refunded, or the item isn't something that can be fulfilled, like a tip.
        ///</summary>
        public int? nonFulfillableQuantity { get; set; }

        ///<summary>
        ///The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
        ///</summary>
        [Obsolete("Use `originalTotalSet` instead.")]
        public decimal? originalTotal { get; set; }
        ///<summary>
        ///The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
        ///</summary>
        public MoneyBag? originalTotalSet { get; set; }

        ///<summary>
        ///The variant unit price without discounts applied, in shop currency.
        ///</summary>
        [Obsolete("Use `originalUnitPriceSet` instead.")]
        public decimal? originalUnitPrice { get; set; }
        ///<summary>
        ///The variant unit price without discounts applied, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? originalUnitPriceSet { get; set; }
        ///<summary>
        ///The Product object associated with this line item's variant.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The number of variant units ordered.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The line item's quantity, minus the refunded quantity.
        ///</summary>
        public int? refundableQuantity { get; set; }
        ///<summary>
        ///Whether physical shipping is required for the variant.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///Whether the line item can be restocked.
        ///</summary>
        public bool? restockable { get; set; }
        ///<summary>
        ///The variant SKU number.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///Staff attributed to the line item.
        ///</summary>
        public StaffMember? staffMember { get; set; }
        ///<summary>
        ///The TaxLine object connected to this line item.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Whether the variant is taxable.
        ///</summary>
        public bool? taxable { get; set; }
        ///<summary>
        ///The title of the product.
        ///</summary>
        public string? title { get; set; }

        ///<summary>
        ///The total amount of the discount allocated to the line item in the shop currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
        ///</summary>
        [Obsolete("Use `totalDiscountSet` instead.")]
        public decimal? totalDiscount { get; set; }
        ///<summary>
        ///The total amount of the discount allocated to the line item in the presentment currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
        ///</summary>
        public MoneyBag? totalDiscountSet { get; set; }

        ///<summary>
        ///The total discounted value of unfulfilled units, in shop currency.
        ///</summary>
        [Obsolete("Use `unfulfilledDiscountedTotalSet` instead.")]
        public decimal? unfulfilledDiscountedTotal { get; set; }
        ///<summary>
        ///The total discounted value of unfulfilled units, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? unfulfilledDiscountedTotalSet { get; set; }

        ///<summary>
        ///The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
        ///</summary>
        [Obsolete("Use `unfulfilledOriginalTotalSet` instead.")]
        public decimal? unfulfilledOriginalTotal { get; set; }
        ///<summary>
        ///The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? unfulfilledOriginalTotalSet { get; set; }
        ///<summary>
        ///The number of units not yet fulfilled.
        ///</summary>
        public int? unfulfilledQuantity { get; set; }
        ///<summary>
        ///The Variant object associated with this line item.
        ///</summary>
        public ProductVariant? variant { get; set; }
        ///<summary>
        ///The name of the variant.
        ///</summary>
        public string? variantTitle { get; set; }
        ///<summary>
        ///The name of the vendor who made the variant.
        ///</summary>
        public string? vendor { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple LineItemMutables.
    ///</summary>
    public class LineItemMutableConnection : GraphQLObject<LineItemMutableConnection>, IConnectionWithNodesAndEdges<LineItemMutableEdge, LineItemMutable>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<LineItemMutableEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in LineItemMutableEdge.
        ///</summary>
        public IEnumerable<LineItemMutable>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one LineItemMutable and a cursor during pagination.
    ///</summary>
    public class LineItemMutableEdge : GraphQLObject<LineItemMutableEdge>, IEdge<LineItemMutable>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of LineItemMutableEdge.
        ///</summary>
        public LineItemMutable? node { get; set; }
    }

    ///<summary>
    ///Represents the selling plan for a line item.
    ///</summary>
    public class LineItemSellingPlan : GraphQLObject<LineItemSellingPlan>
    {
        ///<summary>
        ///The name of the selling plan for display purposes.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The ID of the selling plan associated with the line item.
        ///</summary>
        public string? sellingPlanId { get; set; }
    }

    ///<summary>
    ///A link to direct users to.
    ///</summary>
    public class Link : GraphQLObject<Link>, IHasPublishedTranslations
    {
        ///<summary>
        ///A context-sensitive label for the link.
        ///</summary>
        public string? label { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
        ///<summary>
        ///The URL that the link visits.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///A locale.
    ///</summary>
    public class Locale : GraphQLObject<Locale>
    {
        ///<summary>
        ///Locale ISO code.
        ///</summary>
        public string? isoCode { get; set; }
        ///<summary>
        ///Human-readable locale name.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///Specifies the type of the underlying localizable content. This can be used to conditionally render different UI elements such as input fields.
    ///</summary>
    public enum LocalizableContentType
    {
        ///<summary>
        ///A JSON string.
        ///</summary>
        JSON_STRING,
        ///<summary>
        ///A JSON.
        ///</summary>
        JSON,
        ///<summary>
        ///A list of multi-line texts.
        ///</summary>
        LIST_MULTI_LINE_TEXT_FIELD,
        ///<summary>
        ///A list of single-line texts.
        ///</summary>
        LIST_SINGLE_LINE_TEXT_FIELD,
        ///<summary>
        ///A list of URLs.
        ///</summary>
        LIST_URL,
        ///<summary>
        ///A multi-line text.
        ///</summary>
        MULTI_LINE_TEXT_FIELD,
        ///<summary>
        ///A rich text.
        ///</summary>
        RICH_TEXT_FIELD,
        ///<summary>
        ///A single-line text.
        ///</summary>
        SINGLE_LINE_TEXT_FIELD,
        ///<summary>
        ///A string.
        ///</summary>
        STRING,
        ///<summary>
        ///A URL.
        ///</summary>
        URL,
        ///<summary>
        ///A file reference.
        ///</summary>
        FILE_REFERENCE,
        ///<summary>
        ///A list of file references.
        ///</summary>
        LIST_FILE_REFERENCE,
        ///<summary>
        ///An HTML.
        ///</summary>
        HTML,
        ///<summary>
        ///A URI.
        ///</summary>
        URI,
        ///<summary>
        ///An inline rich text.
        ///</summary>
        INLINE_RICH_TEXT,
    }

    ///<summary>
    ///Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.
    ///</summary>
    public class LocalizationExtension : GraphQLObject<LocalizationExtension>
    {
        ///<summary>
        ///Country ISO 3166-1 alpha-2 code.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///The localized extension keys that are allowed.
        ///</summary>
        public LocalizationExtensionKey? key { get; set; }
        ///<summary>
        ///The purpose of this localization extension.
        ///</summary>
        public LocalizationExtensionPurpose? purpose { get; set; }
        ///<summary>
        ///The localized extension title.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The value of the field.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple LocalizationExtensions.
    ///</summary>
    public class LocalizationExtensionConnection : GraphQLObject<LocalizationExtensionConnection>, IConnectionWithNodesAndEdges<LocalizationExtensionEdge, LocalizationExtension>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<LocalizationExtensionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in LocalizationExtensionEdge.
        ///</summary>
        public IEnumerable<LocalizationExtension>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
    ///</summary>
    public class LocalizationExtensionEdge : GraphQLObject<LocalizationExtensionEdge>, IEdge<LocalizationExtension>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of LocalizationExtensionEdge.
        ///</summary>
        public LocalizationExtension? node { get; set; }
    }

    ///<summary>
    ///The key of a localization extension.
    ///</summary>
    public enum LocalizationExtensionKey
    {
        ///<summary>
        ///Extension key 'tax_credential_br' for country BR.
        ///</summary>
        TAX_CREDENTIAL_BR,
        ///<summary>
        ///Extension key 'shipping_credential_br' for country BR.
        ///</summary>
        SHIPPING_CREDENTIAL_BR,
        ///<summary>
        ///Extension key 'shipping_credential_cn' for country CN.
        ///</summary>
        SHIPPING_CREDENTIAL_CN,
        ///<summary>
        ///Extension key 'tax_credential_it' for country IT.
        ///</summary>
        TAX_CREDENTIAL_IT,
        ///<summary>
        ///Extension key 'tax_email_it' for country IT.
        ///</summary>
        TAX_EMAIL_IT,
        ///<summary>
        ///Extension key 'shipping_credential_kr' for country KR.
        ///</summary>
        SHIPPING_CREDENTIAL_KR,
    }

    ///<summary>
    ///The purpose of a localization extension.
    ///</summary>
    public enum LocalizationExtensionPurpose
    {
        ///<summary>
        ///Extensions that are used for shipping purposes, for example, customs clearance.
        ///</summary>
        SHIPPING,
        ///<summary>
        ///Extensions that are used for taxes purposes, for example, invoicing.
        ///</summary>
        TAX,
    }

    ///<summary>
    ///Represents the location where the physical good resides.
    ///</summary>
    public class Location : GraphQLObject<Location>, IHasMetafieldDefinitions, IHasMetafields, ILegacyInteroperability, INode, IMetafieldReferencer
    {
        ///<summary>
        ///Whether this location can be reactivated.
        ///</summary>
        public bool? activatable { get; set; }
        ///<summary>
        ///The address of this location.
        ///</summary>
        public LocationAddress? address { get; set; }
        ///<summary>
        ///Whether the location address has been verified.
        ///</summary>
        public bool? addressVerified { get; set; }
        ///<summary>
        ///Whether this location can be deactivated.
        ///</summary>
        public bool? deactivatable { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`".
        ///</summary>
        public string? deactivatedAt { get; set; }
        ///<summary>
        ///Whether this location can be deleted.
        ///</summary>
        public bool? deletable { get; set; }
        ///<summary>
        ///Name of the service provider that fulfills from this location.
        ///</summary>
        public FulfillmentService? fulfillmentService { get; set; }
        ///<summary>
        ///Whether this location can fulfill online orders.
        ///</summary>
        public bool? fulfillsOnlineOrders { get; set; }
        ///<summary>
        ///Whether this location has active inventory.
        ///</summary>
        public bool? hasActiveInventory { get; set; }
        ///<summary>
        ///Whether this location has orders that need to be fulfilled.
        ///</summary>
        public bool? hasUnfulfilledOrders { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The quantities of an inventory item at this location.
        ///</summary>
        public InventoryLevel? inventoryLevel { get; set; }
        ///<summary>
        ///A list of the quantities of the inventory items that can be stocked at this location.
        ///</summary>
        public InventoryLevelConnection? inventoryLevels { get; set; }
        ///<summary>
        ///Whether the location is active.
        ///</summary>
        public bool? isActive { get; set; }

        ///<summary>
        ///Whether the location is your primary location for shipping inventory.
        ///</summary>
        [Obsolete("The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location")]
        public bool? isPrimary { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///Local pickup settings for the location.
        ///</summary>
        public DeliveryLocalPickupSettings? localPickupSettingsV2 { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The name of the location.
        ///</summary>
        public string? name { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
        ///</summary>
        public bool? shipsInventory { get; set; }
        ///<summary>
        ///List of suggested addresses for this location (empty if none).
        ///</summary>
        public IEnumerable<LocationSuggestedAddress>? suggestedAddresses { get; set; }
    }

    ///<summary>
    ///Return type for `locationActivate` mutation.
    ///</summary>
    public class LocationActivatePayload : GraphQLObject<LocationActivatePayload>
    {
        ///<summary>
        ///The location that was activated.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<LocationActivateUserError>? locationActivateUserErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs while activating a location.
    ///</summary>
    public class LocationActivateUserError : GraphQLObject<LocationActivateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public LocationActivateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `LocationActivateUserError`.
    ///</summary>
    public enum LocationActivateUserErrorCode
    {
        ///<summary>
        ///An error occurred while activating the location.
        ///</summary>
        GENERIC_ERROR,
        ///<summary>
        ///Shop has reached its location limit.
        ///</summary>
        LOCATION_LIMIT,
        ///<summary>
        ///This location currently cannot be activated as inventory, pending orders or transfers are being relocated from this location.
        ///</summary>
        HAS_ONGOING_RELOCATION,
        ///<summary>
        ///Location not found.
        ///</summary>
        LOCATION_NOT_FOUND,
        ///<summary>
        ///There is already an active location with this name.
        ///</summary>
        HAS_NON_UNIQUE_NAME,
    }

    ///<summary>
    ///Return type for `locationAdd` mutation.
    ///</summary>
    public class LocationAddPayload : GraphQLObject<LocationAddPayload>
    {
        ///<summary>
        ///The location that was added.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<LocationAddUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs while adding a location.
    ///</summary>
    public class LocationAddUserError : GraphQLObject<LocationAddUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public LocationAddUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `LocationAddUserError`.
    ///</summary>
    public enum LocationAddUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The ZIP code is not a valid US ZIP code.
        ///</summary>
        INVALID_US_ZIPCODE,
        ///<summary>
        ///An error occurred while adding the location.
        ///</summary>
        GENERIC_ERROR,
        ///<summary>
        ///The type is invalid.
        ///</summary>
        INVALID_TYPE,
        ///<summary>
        ///The value is invalid for the metafield type or for the definition options.
        ///</summary>
        INVALID_VALUE,
        ///<summary>
        ///ApiPermission metafields can only be created or updated by the app owner.
        ///</summary>
        APP_NOT_AUTHORIZED,
        ///<summary>
        ///Unstructured reserved namespace.
        ///</summary>
        UNSTRUCTURED_RESERVED_NAMESPACE,
        ///<summary>
        ///Owner type can't be used in this mutation.
        ///</summary>
        DISALLOWED_OWNER_TYPE,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
    }

    ///<summary>
    ///Represents the address of a location.
    ///</summary>
    public class LocationAddress : GraphQLObject<LocationAddress>
    {
        ///<summary>
        ///The first line of the address for the location.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the address for the location.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The city of the location.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The country of the location.
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The country code of the location.
        ///</summary>
        public string? countryCode { get; set; }
        ///<summary>
        ///A formatted version of the address for the location.
        ///</summary>
        public IEnumerable<string>? formatted { get; set; }
        ///<summary>
        ///The approximate latitude coordinates of the location.
        ///</summary>
        public float? latitude { get; set; }
        ///<summary>
        ///The approximate longitude coordinates of the location.
        ///</summary>
        public float? longitude { get; set; }
        ///<summary>
        ///The phone number of the location.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The province of the location.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The code for the province, state, or district of the address of the location.
        ///</summary>
        public string? provinceCode { get; set; }
        ///<summary>
        ///The ZIP code of the location.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Locations.
    ///</summary>
    public class LocationConnection : GraphQLObject<LocationConnection>, IConnectionWithNodesAndEdges<LocationEdge, Location>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<LocationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in LocationEdge.
        ///</summary>
        public IEnumerable<Location>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `locationDeactivate` mutation.
    ///</summary>
    public class LocationDeactivatePayload : GraphQLObject<LocationDeactivatePayload>
    {
        ///<summary>
        ///The location that was deactivated.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<LocationDeactivateUserError>? locationDeactivateUserErrors { get; set; }
    }

    ///<summary>
    ///The possible errors that can be returned when executing the `locationDeactivate` mutation.
    ///</summary>
    public class LocationDeactivateUserError : GraphQLObject<LocationDeactivateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public LocationDeactivateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `LocationDeactivateUserError`.
    ///</summary>
    public enum LocationDeactivateUserErrorCode
    {
        ///<summary>
        ///Location not found.
        ///</summary>
        LOCATION_NOT_FOUND,
        ///<summary>
        ///Location either has a fulfillment service or is the only location with a shipping address.
        ///</summary>
        PERMANENTLY_BLOCKED_FROM_DEACTIVATION_ERROR,
        ///<summary>
        ///Location has incoming inventory. The location can be deactivated after the inventory has been received.
        ///</summary>
        TEMPORARILY_BLOCKED_FROM_DEACTIVATION_ERROR,
        ///<summary>
        ///Location needs to be removed from Shopify POS for Retail subscription in Point of Sale channel.
        ///</summary>
        HAS_ACTIVE_RETAIL_SUBSCRIPTIONS,
        ///<summary>
        ///Destination location is the same as the location to be deactivated.
        ///</summary>
        DESTINATION_LOCATION_IS_THE_SAME_LOCATION,
        ///<summary>
        ///Destination location is not found or inactive.
        ///</summary>
        DESTINATION_LOCATION_NOT_FOUND_OR_INACTIVE,
        ///<summary>
        ///Location could not be deactivated without specifying where to relocate inventory at the location.
        ///</summary>
        HAS_ACTIVE_INVENTORY_ERROR,
        ///<summary>
        ///Location could not be deactivated because it has pending orders.
        ///</summary>
        HAS_FULFILLMENT_ORDERS_ERROR,
        ///<summary>
        ///Location could not be deactivated because it has open transfers.
        ///</summary>
        HAS_OPEN_TRANSFERS_ERROR,
        ///<summary>
        ///Location could not be deactivated because it has open Shopify Fulfillment Network transfers.
        ///</summary>
        HAS_INCOMING_MOVEMENTS_ERROR,
        ///<summary>
        ///Location could not be deactivated because it has open purchase orders.
        ///</summary>
        HAS_OPEN_PURCHASE_ORDERS_ERROR,
        ///<summary>
        ///Failed to relocate active inventories to the destination location.
        ///</summary>
        FAILED_TO_RELOCATE_ACTIVE_INVENTORIES,
        ///<summary>
        ///Failed to relocate open transfers to the destination location.
        ///</summary>
        FAILED_TO_RELOCATE_OPEN_TRANSFERS,
        ///<summary>
        ///Failed to relocate open purchase orders to the destination location.
        ///</summary>
        FAILED_TO_RELOCATE_OPEN_PURCHASE_ORDERS,
        ///<summary>
        ///Failed to relocate incoming movements to the destination location.
        ///</summary>
        FAILED_TO_RELOCATE_INCOMING_MOVEMENTS,
        ///<summary>
        ///At least one location must fulfill online orders.
        ///</summary>
        CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT,
    }

    ///<summary>
    ///Return type for `locationDelete` mutation.
    ///</summary>
    public class LocationDeletePayload : GraphQLObject<LocationDeletePayload>
    {
        ///<summary>
        ///The ID of the location that was deleted.
        ///</summary>
        public string? deletedLocationId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<LocationDeleteUserError>? locationDeleteUserErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs while deleting a location.
    ///</summary>
    public class LocationDeleteUserError : GraphQLObject<LocationDeleteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public LocationDeleteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `LocationDeleteUserError`.
    ///</summary>
    public enum LocationDeleteUserErrorCode
    {
        ///<summary>
        ///Location not found.
        ///</summary>
        LOCATION_NOT_FOUND,
        ///<summary>
        ///The location cannot be deleted while it is active.
        ///</summary>
        LOCATION_IS_ACTIVE,
        ///<summary>
        ///An error occurred while deleting the location.
        ///</summary>
        GENERIC_ERROR,
        ///<summary>
        ///The location cannot be deleted while it has inventory.
        ///</summary>
        LOCATION_HAS_INVENTORY,
        ///<summary>
        ///The location cannot be deleted while it has pending orders.
        ///</summary>
        LOCATION_HAS_PENDING_ORDERS,
        ///<summary>
        ///The location cannot be deleted while it has any active Retail subscriptions in the Point of Sale channel.
        ///</summary>
        LOCATION_HAS_ACTIVE_RETAIL_SUBSCRIPTION,
    }

    ///<summary>
    ///An auto-generated type which holds one Location and a cursor during pagination.
    ///</summary>
    public class LocationEdge : GraphQLObject<LocationEdge>, IEdge<Location>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of LocationEdge.
        ///</summary>
        public Location? node { get; set; }
    }

    ///<summary>
    ///Return type for `locationEdit` mutation.
    ///</summary>
    public class LocationEditPayload : GraphQLObject<LocationEditPayload>
    {
        ///<summary>
        ///The location that was edited.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<LocationEditUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs while editing a location.
    ///</summary>
    public class LocationEditUserError : GraphQLObject<LocationEditUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public LocationEditUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `LocationEditUserError`.
    ///</summary>
    public enum LocationEditUserErrorCode
    {
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The record with the ID used as the input value couldn't be found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The ZIP code is not a valid US ZIP code.
        ///</summary>
        INVALID_US_ZIPCODE,
        ///<summary>
        ///An error occurred while editing the location.
        ///</summary>
        GENERIC_ERROR,
        ///<summary>
        ///At least one location must fulfill online orders.
        ///</summary>
        CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT,
        ///<summary>
        ///Cannot modify the online order fulfillment preference for fulfillment service locations.
        ///</summary>
        CANNOT_MODIFY_ONLINE_ORDER_FULFILLMENT_FOR_FS_LOCATION,
        ///<summary>
        ///The type is invalid.
        ///</summary>
        INVALID_TYPE,
        ///<summary>
        ///The value is invalid for the metafield type or for the definition options.
        ///</summary>
        INVALID_VALUE,
        ///<summary>
        ///ApiPermission metafields can only be created or updated by the app owner.
        ///</summary>
        APP_NOT_AUTHORIZED,
        ///<summary>
        ///Unstructured reserved namespace.
        ///</summary>
        UNSTRUCTURED_RESERVED_NAMESPACE,
        ///<summary>
        ///Owner type can't be used in this mutation.
        ///</summary>
        DISALLOWED_OWNER_TYPE,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
    }

    ///<summary>
    ///Return type for `locationLocalPickupDisable` mutation.
    ///</summary>
    public class LocationLocalPickupDisablePayload : GraphQLObject<LocationLocalPickupDisablePayload>
    {
        ///<summary>
        ///The ID of the location for which local pickup was disabled.
        ///</summary>
        public string? locationId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DeliveryLocationLocalPickupSettingsError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `locationLocalPickupEnable` mutation.
    ///</summary>
    public class LocationLocalPickupEnablePayload : GraphQLObject<LocationLocalPickupEnablePayload>
    {
        ///<summary>
        ///The local pickup settings that were enabled.
        ///</summary>
        public DeliveryLocalPickupSettings? localPickupSettings { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<DeliveryLocationLocalPickupSettingsError>? userErrors { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the Location query.
    ///</summary>
    public enum LocationSortKeys
    {
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Represents a suggested address for a location.
    ///</summary>
    public class LocationSuggestedAddress : GraphQLObject<LocationSuggestedAddress>
    {
        ///<summary>
        ///The first line of the suggested address.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the suggested address.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The city of the suggested address.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The country of the suggested address.
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The country code of the suggested address.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///A formatted version of the suggested address.
        ///</summary>
        public IEnumerable<string>? formatted { get; set; }
        ///<summary>
        ///The province of the suggested address.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The code for the province, state, or district of the suggested address.
        ///</summary>
        public string? provinceCode { get; set; }
        ///<summary>
        ///The ZIP code of the suggested address.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///Represents a customer mailing address.
    ///
    ///For example, a customer's default address and an order's billing address are both mailling addresses.
    ///</summary>
    public class MailingAddress : GraphQLObject<MailingAddress>, INode
    {
        ///<summary>
        ///The first line of the address. Typically the street address or PO Box number.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the address. Typically the number of the apartment, suite, or unit.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The name of the city, district, village, or town.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The name of the customer's company or organization.
        ///</summary>
        public string? company { get; set; }
        ///<summary>
        ///Whether the address coordinates are valid.
        ///</summary>
        public bool? coordinatesValidated { get; set; }
        ///<summary>
        ///The name of the country.
        ///</summary>
        public string? country { get; set; }

        ///<summary>
        ///The two-letter code for the country of the address.
        ///
        ///For example, US.
        ///</summary>
        [Obsolete("Use `countryCodeV2` instead.")]
        public string? countryCode { get; set; }
        ///<summary>
        ///The two-letter code for the country of the address.
        ///
        ///For example, US.
        ///</summary>
        public CountryCode? countryCodeV2 { get; set; }
        ///<summary>
        ///The first name of the customer.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///A formatted version of the address, customized by the provided arguments.
        ///</summary>
        public IEnumerable<string>? formatted { get; set; }
        ///<summary>
        ///A comma-separated list of the values for city, province, and country.
        ///</summary>
        public string? formattedArea { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The last name of the customer.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The latitude coordinate of the customer address.
        ///</summary>
        public float? latitude { get; set; }
        ///<summary>
        ///The longitude coordinate of the customer address.
        ///</summary>
        public float? longitude { get; set; }
        ///<summary>
        ///The full name of the customer, based on firstName and lastName.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///A unique phone number for the customer.
        ///
        ///Formatted using E.164 standard. For example, _+16135551111_.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The region of the address, such as the province, state, or district.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The two-letter code for the region.
        ///
        ///For example, ON.
        ///</summary>
        public string? provinceCode { get; set; }
        ///<summary>
        ///The time zone of the address.
        ///</summary>
        public string? timeZone { get; set; }
        ///<summary>
        ///The zip or postal code of the address.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MailingAddresses.
    ///</summary>
    public class MailingAddressConnection : GraphQLObject<MailingAddressConnection>, IConnectionWithNodesAndEdges<MailingAddressEdge, MailingAddress>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MailingAddressEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MailingAddressEdge.
        ///</summary>
        public IEnumerable<MailingAddress>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MailingAddress and a cursor during pagination.
    ///</summary>
    public class MailingAddressEdge : GraphQLObject<MailingAddressEdge>, IEdge<MailingAddress>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MailingAddressEdge.
        ///</summary>
        public MailingAddress? node { get; set; }
    }

    ///<summary>
    ///Manual discount applications capture the intentions of a discount that was manually created for an order.
    ///
    ///Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
    ///</summary>
    public class ManualDiscountApplication : GraphQLObject<ManualDiscountApplication>, IDiscountApplication
    {
        ///<summary>
        ///The method by which the discount's value is applied to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///The description of the discount application.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///An ordered index that can be used to identify the discount application and indicate the precedence
        ///of the discount application for calculations.
        ///</summary>
        public int? index { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The title of the discount application.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///A market is a group of one or more regions that you want to target for international sales.
    ///By creating a market, you can configure a distinct, localized shopping experience for
    ///customers from a specific area of the world. For example, you can
    ///[change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
    ///[configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
    ///or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
    ///</summary>
    public class Market : GraphQLObject<Market>, IHasMetafieldDefinitions, IHasMetafields, INode, IMetafieldReferencer
    {
        ///<summary>
        ///The catalogs that belong to the market.
        ///</summary>
        public MarketCatalogConnection? catalogs { get; set; }
        ///<summary>
        ///The market’s currency settings.
        ///</summary>
        public MarketCurrencySettings? currencySettings { get; set; }
        ///<summary>
        ///Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
        ///markets can't be selected on the storefront or in checkout.
        ///</summary>
        public bool? enabled { get; set; }
        ///<summary>
        ///A short, human-readable unique identifier for the market. This is changeable by the merchant.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The name of the market. Not shown to customers.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The market’s price list, which specifies a percentage-based price adjustment as well as
        ///fixed price overrides for specific variants.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///Whether the market is the shop’s primary market.
        ///</summary>
        public bool? primary { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The regions that comprise the market.
        ///</summary>
        public MarketRegionConnection? regions { get; set; }
        ///<summary>
        ///The market’s web presence, which defines its SEO strategy. This can be a different domain,
        ///subdomain, or subfolders of the primary domain. Each web presence comprises one or more
        ///language variants. If a market doesn't have its own web presence, then the market is accessible on the
        ///primary market's domains using [country
        ///selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
        ///If it's the primary market and it has multiple web presences, then this field will return the primary domain web presence.
        ///</summary>
        public MarketWebPresence? webPresence { get; set; }
        ///<summary>
        ///The market’s web presences, which defines its SEO strategy. This can be a different domain,
        ///subdomain, or subfolders of the primary domain. Each web presence comprises one or more
        ///language variants. If a market doesn't have any web presences, then the market is accessible on the
        ///primary market's domains using [country
        ///selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
        ///</summary>
        public MarketWebPresenceConnection? webPresences { get; set; }
    }

    ///<summary>
    ///A list of products with publishing and pricing information associated with markets.
    ///</summary>
    public class MarketCatalog : GraphQLObject<MarketCatalog>, ICatalog, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The markets associated with the catalog.
        ///</summary>
        public MarketConnection? markets { get; set; }
        ///<summary>
        ///Most recent catalog operations.
        ///</summary>
        public IEnumerable<IResourceOperation>? operations { get; set; }
        ///<summary>
        ///The price list associated with the catalog.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///A group of products and collections that's published to a catalog.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The status of the catalog.
        ///</summary>
        public CatalogStatus? status { get; set; }
        ///<summary>
        ///The name of the catalog.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MarketCatalogs.
    ///</summary>
    public class MarketCatalogConnection : GraphQLObject<MarketCatalogConnection>, IConnectionWithNodesAndEdges<MarketCatalogEdge, MarketCatalog>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MarketCatalogEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MarketCatalogEdge.
        ///</summary>
        public IEnumerable<MarketCatalog>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MarketCatalog and a cursor during pagination.
    ///</summary>
    public class MarketCatalogEdge : GraphQLObject<MarketCatalogEdge>, IEdge<MarketCatalog>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MarketCatalogEdge.
        ///</summary>
        public MarketCatalog? node { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Markets.
    ///</summary>
    public class MarketConnection : GraphQLObject<MarketConnection>, IConnectionWithNodesAndEdges<MarketEdge, Market>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MarketEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MarketEdge.
        ///</summary>
        public IEnumerable<Market>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `marketCreate` mutation.
    ///</summary>
    public class MarketCreatePayload : GraphQLObject<MarketCreatePayload>
    {
        ///<summary>
        ///The market object.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A market's currency settings.
    ///</summary>
    public class MarketCurrencySettings : GraphQLObject<MarketCurrencySettings>
    {
        ///<summary>
        ///The currency which this market's prices are defined in, and the
        ///currency which its customers must use if local currencies are disabled.
        ///</summary>
        public CurrencySetting? baseCurrency { get; set; }
        ///<summary>
        ///Whether or not local currencies are enabled. If enabled, then prices will
        ///be converted to give each customer the best experience based on their
        ///region. If disabled, then all customers in this market will see prices
        ///in the market's base currency. For single country markets this will be true when
        ///the market's base currency is the same as the default currency for the region.
        ///</summary>
        public bool? localCurrencies { get; set; }
    }

    ///<summary>
    ///Return type for `marketCurrencySettingsUpdate` mutation.
    ///</summary>
    public class MarketCurrencySettingsUpdatePayload : GraphQLObject<MarketCurrencySettingsUpdatePayload>
    {
        ///<summary>
        ///The market object.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketCurrencySettingsUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed market multi-currency operations.
    ///</summary>
    public class MarketCurrencySettingsUserError : GraphQLObject<MarketCurrencySettingsUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MarketCurrencySettingsUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MarketCurrencySettingsUserError`.
    ///</summary>
    public enum MarketCurrencySettingsUserErrorCode
    {
        ///<summary>
        ///The specified market wasn't found.
        ///</summary>
        MARKET_NOT_FOUND,
        ///<summary>
        ///The currency settings of the given market cannot be changed because the market manager has exclusive control of pricing.
        ///</summary>
        MANAGED_MARKET,
        ///<summary>
        ///The shop's payment gateway does not support enabling more than one currency.
        ///</summary>
        MULTIPLE_CURRENCIES_NOT_SUPPORTED,
        ///<summary>
        ///Can't enable or disable local currencies on a single country market.
        ///</summary>
        NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET,
        ///<summary>
        ///The specified currency is not supported.
        ///</summary>
        UNSUPPORTED_CURRENCY,
        ///<summary>
        ///The primary market must use the shop currency.
        ///</summary>
        PRIMARY_MARKET_USES_SHOP_CURRENCY,
    }

    ///<summary>
    ///Return type for `marketDelete` mutation.
    ///</summary>
    public class MarketDeletePayload : GraphQLObject<MarketDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted market.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Market and a cursor during pagination.
    ///</summary>
    public class MarketEdge : GraphQLObject<MarketEdge>, IEdge<Market>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MarketEdge.
        ///</summary>
        public Market? node { get; set; }
    }

    ///<summary>
    ///The market localizable content of a resource's field.
    ///</summary>
    public class MarketLocalizableContent : GraphQLObject<MarketLocalizableContent>
    {
        ///<summary>
        ///The hash digest representation of the content value.
        ///</summary>
        public string? digest { get; set; }
        ///<summary>
        ///The resource field that's being localized.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The content value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///A resource that has market localizable fields.
    ///</summary>
    public class MarketLocalizableResource : GraphQLObject<MarketLocalizableResource>
    {
        ///<summary>
        ///The market localizable content.
        ///</summary>
        public IEnumerable<MarketLocalizableContent>? marketLocalizableContent { get; set; }
        ///<summary>
        ///Market localizations for the market localizable content.
        ///</summary>
        public IEnumerable<MarketLocalization>? marketLocalizations { get; set; }
        ///<summary>
        ///The GID of the resource.
        ///</summary>
        public string? resourceId { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MarketLocalizableResources.
    ///</summary>
    public class MarketLocalizableResourceConnection : GraphQLObject<MarketLocalizableResourceConnection>, IConnectionWithNodesAndEdges<MarketLocalizableResourceEdge, MarketLocalizableResource>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MarketLocalizableResourceEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MarketLocalizableResourceEdge.
        ///</summary>
        public IEnumerable<MarketLocalizableResource>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination.
    ///</summary>
    public class MarketLocalizableResourceEdge : GraphQLObject<MarketLocalizableResourceEdge>, IEdge<MarketLocalizableResource>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MarketLocalizableResourceEdge.
        ///</summary>
        public MarketLocalizableResource? node { get; set; }
    }

    ///<summary>
    ///The type of resources that are market localizable.
    ///</summary>
    public enum MarketLocalizableResourceType
    {
        ///<summary>
        ///A metafield. Market localizable fields: `value`.
        ///</summary>
        METAFIELD,
        ///<summary>
        ///A Metaobject. Market Localizable fields are determined by the Metaobject type.
        ///</summary>
        METAOBJECT,
    }

    ///<summary>
    ///The market localization of a field within a resource, which is determined by the market ID.
    ///</summary>
    public class MarketLocalization : GraphQLObject<MarketLocalization>
    {
        ///<summary>
        ///A reference to the value being localized on the resource that this market localization belongs to.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The market that the localization is specific to.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///Whether the original content has changed since this market localization was updated.
        ///</summary>
        public bool? outdated { get; set; }
        ///<summary>
        ///The date and time when the market localization was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The value of the market localization.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Return type for `marketLocalizationsRegister` mutation.
    ///</summary>
    public class MarketLocalizationsRegisterPayload : GraphQLObject<MarketLocalizationsRegisterPayload>
    {
        ///<summary>
        ///The market localizations that were created or updated.
        ///</summary>
        public IEnumerable<MarketLocalization>? marketLocalizations { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<TranslationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketLocalizationsRemove` mutation.
    ///</summary>
    public class MarketLocalizationsRemovePayload : GraphQLObject<MarketLocalizationsRemovePayload>
    {
        ///<summary>
        ///The market localizations that were deleted.
        ///</summary>
        public IEnumerable<MarketLocalization>? marketLocalizations { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<TranslationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A geographic region which comprises a market.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(MarketRegionCountry), typeDiscriminator: "MarketRegionCountry")]
    public interface IMarketRegion : IGraphQLObject
    {
        public MarketRegionCountry? AsMarketRegionCountry() => this as MarketRegionCountry;
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; }
        ///<summary>
        ///The name of the region.
        ///</summary>
        public string? name { get; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MarketRegions.
    ///</summary>
    public class MarketRegionConnection : GraphQLObject<MarketRegionConnection>, IConnectionWithNodesAndEdges<MarketRegionEdge, IMarketRegion>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MarketRegionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MarketRegionEdge.
        ///</summary>
        public IEnumerable<IMarketRegion>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///A country which comprises a market.
    ///</summary>
    public class MarketRegionCountry : GraphQLObject<MarketRegionCountry>, IMarketRegion, INode
    {
        ///<summary>
        ///The ISO code identifying the country.
        ///</summary>
        public CountryCode? code { get; set; }
        ///<summary>
        ///The currency which this country uses given its market settings.
        ///</summary>
        public CurrencySetting? currency { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the region.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///Return type for `marketRegionDelete` mutation.
    ///</summary>
    public class MarketRegionDeletePayload : GraphQLObject<MarketRegionDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted market region.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The parent market object of the deleted region.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MarketRegion and a cursor during pagination.
    ///</summary>
    public class MarketRegionEdge : GraphQLObject<MarketRegionEdge>, IEdge<IMarketRegion>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MarketRegionEdge.
        ///</summary>
        public IMarketRegion? node { get; set; }
    }

    ///<summary>
    ///Return type for `marketRegionsCreate` mutation.
    ///</summary>
    public class MarketRegionsCreatePayload : GraphQLObject<MarketRegionsCreatePayload>
    {
        ///<summary>
        ///The market object.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketRegionsDelete` mutation.
    ///</summary>
    public class MarketRegionsDeletePayload : GraphQLObject<MarketRegionsDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted market region.
        ///</summary>
        public IEnumerable<string>? deletedIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketUpdate` mutation.
    ///</summary>
    public class MarketUpdatePayload : GraphQLObject<MarketUpdatePayload>
    {
        ///<summary>
        ///The market object.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Defines errors encountered while managing a Market.
    ///</summary>
    public class MarketUserError : GraphQLObject<MarketUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MarketUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MarketUserError`.
    ///</summary>
    public enum MarketUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The market wasn't found.
        ///</summary>
        MARKET_NOT_FOUND,
        ///<summary>
        ///The market region wasn't found.
        ///</summary>
        REGION_NOT_FOUND,
        ///<summary>
        ///The market web presence wasn't found.
        ///</summary>
        WEB_PRESENCE_NOT_FOUND,
        ///<summary>
        ///Can't add regions to the primary market.
        ///</summary>
        CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET,
        ///<summary>
        ///Can't delete the only region in a market.
        ///</summary>
        CANNOT_DELETE_ONLY_REGION,
        ///<summary>
        ///Exactly one input option is required.
        ///</summary>
        REQUIRES_EXACTLY_ONE_OPTION,
        ///<summary>
        ///Can't delete the primary market.
        ///</summary>
        CANNOT_DELETE_PRIMARY_MARKET,
        ///<summary>
        ///Domain was not found.
        ///</summary>
        DOMAIN_NOT_FOUND,
        ///<summary>
        ///The subfolder suffix must contain only letters.
        ///</summary>
        SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS,
        ///<summary>
        ///The subfolder suffix is invalid, please provide a different value.
        ///</summary>
        SUBFOLDER_SUFFIX_CANNOT_BE_SCRIPT_CODE,
        ///<summary>
        ///No languages selected.
        ///</summary>
        NO_LANGUAGES,
        ///<summary>
        ///Duplicates found in languages.
        ///</summary>
        DUPLICATE_LANGUAGES,
        ///<summary>
        ///Cannot add region-specific language.
        ///</summary>
        REGION_SPECIFIC_LANGUAGE,
        ///<summary>
        ///Can't pass both `subfolderSuffix` and `domainId`.
        ///</summary>
        CANNOT_HAVE_SUBFOLDER_AND_DOMAIN,
        ///<summary>
        ///Can't add the web presence to the primary market.
        ///</summary>
        CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET,
        ///<summary>
        ///Can't add another web presence to the market.
        ///</summary>
        MARKET_REACHED_WEB_PRESENCE_LIMIT,
        ///<summary>
        ///Can't have multiple subfolder web presences per market.
        ///</summary>
        CANNOT_HAVE_MULTIPLE_SUBFOLDERS_PER_MARKET,
        ///<summary>
        ///Can't have both subfolder and domain web presences.
        ///</summary>
        CANNOT_HAVE_BOTH_SUBFOLDER_AND_DOMAIN_WEB_PRESENCES,
        ///<summary>
        ///One of `subfolderSuffix` or `domainId` is required.
        ///</summary>
        REQUIRES_DOMAIN_OR_SUBFOLDER,
        ///<summary>
        ///The primary market must use the primary domain.
        ///</summary>
        PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN,
        ///<summary>
        ///Can't delete the primary market's web presence.
        ///</summary>
        CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE,
        ///<summary>
        ///Can't have more than 50 markets.
        ///</summary>
        SHOP_REACHED_MARKETS_LIMIT,
        ///<summary>
        ///Can't disable the primary market.
        ///</summary>
        CANNOT_DISABLE_PRIMARY_MARKET,
        ///<summary>
        ///The language isn't published to the store.
        ///</summary>
        UNPUBLISHED_LANGUAGE,
        ///<summary>
        ///The language isn't enabled on the store.
        ///</summary>
        DISABLED_LANGUAGE,
        ///<summary>
        ///Can't set default locale to null.
        ///</summary>
        CANNOT_SET_DEFAULT_LOCALE_TO_NULL,
        ///<summary>
        ///Can't add unsupported country or region.
        ///</summary>
        UNSUPPORTED_COUNTRY_REGION,
        ///<summary>
        ///Can't add customer account domain to a market.
        ///</summary>
        CANNOT_ADD_CUSTOMER_DOMAIN,
    }

    ///<summary>
    ///The market’s web presence, which defines its SEO strategy. This can be a different domain
    ///(e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
    ///domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
    ///variants. If a market does not have its own web presence, it is accessible on the shop’s
    ///primary domain via [country
    ///selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
    ///
    ///Note: while the domain/subfolders defined by a market’s web presence are not applicable to
    ///custom storefronts, which must manage their own domains and routing, the languages chosen
    ///here do govern [the languages available on the Storefront
    ///API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
    ///this market.
    ///</summary>
    public class MarketWebPresence : GraphQLObject<MarketWebPresence>, INode
    {
        ///<summary>
        ///The ISO codes for the alternate locales. When a domain is used, these locales will be
        ///available as language-specific subfolders. For example, if English is an
        ///alternate locale, and `example.ca` is the market’s domain, then
        ///`example.ca/en` will load in English.
        ///</summary>
        public IEnumerable<string>? alternateLocales { get; set; }
        ///<summary>
        ///The ISO code for the default locale. When a domain is used, this is the locale that will
        ///be used when the domain root is accessed. For example, if French is the default locale,
        ///and `example.ca` is the market’s domain, then `example.ca` will load in French.
        ///</summary>
        public string? defaultLocale { get; set; }
        ///<summary>
        ///The web presence’s domain.
        ///This field will be null if `subfolderSuffix` isn't null.
        ///</summary>
        public Domain? domain { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The associated market.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of root URLs for each of the web presence’s locales. As of version `2024-04` this value will no longer have a trailing slash.
        ///</summary>
        public IEnumerable<MarketWebPresenceRootUrl>? rootUrls { get; set; }
        ///<summary>
        ///The market-specific suffix of the subfolders defined by the web presence. Example: in `/en-us` the subfolder suffix is `us`. This field will be null if `domain` isn't null.
        ///</summary>
        public string? subfolderSuffix { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MarketWebPresences.
    ///</summary>
    public class MarketWebPresenceConnection : GraphQLObject<MarketWebPresenceConnection>, IConnectionWithNodesAndEdges<MarketWebPresenceEdge, MarketWebPresence>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MarketWebPresenceEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MarketWebPresenceEdge.
        ///</summary>
        public IEnumerable<MarketWebPresence>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `marketWebPresenceCreate` mutation.
    ///</summary>
    public class MarketWebPresenceCreatePayload : GraphQLObject<MarketWebPresenceCreatePayload>
    {
        ///<summary>
        ///The market object.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketWebPresenceDelete` mutation.
    ///</summary>
    public class MarketWebPresenceDeletePayload : GraphQLObject<MarketWebPresenceDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted web presence.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The market for which the web presence was deleted.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MarketWebPresence and a cursor during pagination.
    ///</summary>
    public class MarketWebPresenceEdge : GraphQLObject<MarketWebPresenceEdge>, IEdge<MarketWebPresence>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MarketWebPresenceEdge.
        ///</summary>
        public MarketWebPresence? node { get; set; }
    }

    ///<summary>
    ///The URL for the homepage of the online store in the context of a particular market and a
    ///particular locale.
    ///</summary>
    public class MarketWebPresenceRootUrl : GraphQLObject<MarketWebPresenceRootUrl>
    {
        ///<summary>
        ///The locale that the storefront loads in.
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///The URL.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///Return type for `marketWebPresenceUpdate` mutation.
    ///</summary>
    public class MarketWebPresenceUpdatePayload : GraphQLObject<MarketWebPresenceUpdatePayload>
    {
        ///<summary>
        ///The market object.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketingActivitiesDeleteAllExternal` mutation.
    ///</summary>
    public class MarketingActivitiesDeleteAllExternalPayload : GraphQLObject<MarketingActivitiesDeleteAllExternalPayload>
    {
        ///<summary>
        ///The asynchronous job that performs the deletion. The status of the job may be used to determine when it's safe again to create new activities.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketingActivityUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The marketing activity resource represents marketing that a
    ///        merchant created through an app.
    ///</summary>
    public class MarketingActivity : GraphQLObject<MarketingActivity>, INode
    {
        ///<summary>
        ///The URL of the marketing activity listing page in the marketing section.
        ///</summary>
        public string? activityListUrl { get; set; }
        ///<summary>
        ///The amount spent on the marketing activity.
        ///</summary>
        public MoneyV2? adSpend { get; set; }
        ///<summary>
        ///The app which created this marketing activity.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The errors generated when an app publishes the marketing activity.
        ///</summary>
        public MarketingActivityExtensionAppErrors? appErrors { get; set; }
        ///<summary>
        ///The allocated budget for the marketing activity.
        ///</summary>
        public MarketingBudget? budget { get; set; }
        ///<summary>
        ///The date and time when the marketing activity was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The completed content in the marketing activity creation form.
        ///</summary>
        public string? formData { get; set; }
        ///<summary>
        ///The hierarchy level of the marketing activity.
        ///</summary>
        public MarketingActivityHierarchyLevel? hierarchyLevel { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether the marketing activity is in the main workflow version of the marketing automation.
        ///</summary>
        public bool? inMainWorkflowVersion { get; set; }

        ///<summary>
        ///The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
        ///</summary>
        [Obsolete("Use `marketingChannelType` instead.")]
        public MarketingChannel? marketingChannel { get; set; }
        ///<summary>
        ///The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
        ///</summary>
        public MarketingChannel? marketingChannelType { get; set; }
        ///<summary>
        ///Associated marketing event of this marketing activity.
        ///</summary>
        public MarketingEvent? marketingEvent { get; set; }
        ///<summary>
        ///ID of the parent activity of this marketing activity.
        ///</summary>
        public string? parentActivityId { get; set; }
        ///<summary>
        ///ID of the parent activity of this marketing activity.
        ///</summary>
        public string? parentRemoteId { get; set; }
        ///<summary>
        ///A contextual description of the marketing activity based on the platform and tactic used.
        ///</summary>
        public string? sourceAndMedium { get; set; }
        ///<summary>
        ///The current state of the marketing activity.
        ///</summary>
        public MarketingActivityStatus? status { get; set; }

        ///<summary>
        ///The severity of the marketing activity's status.
        ///</summary>
        [Obsolete("Use `statusBadgeTypeV2` instead.")]
        public MarketingActivityStatusBadgeType? statusBadgeType { get; set; }
        ///<summary>
        ///The severity of the marketing activity's status.
        ///</summary>
        public BadgeType? statusBadgeTypeV2 { get; set; }
        ///<summary>
        ///The rendered status of the marketing activity.
        ///</summary>
        public string? statusLabel { get; set; }
        ///<summary>
        ///The [date and time](
        ///          https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
        ///          ) when the activity's status last changed.
        ///</summary>
        public DateTime? statusTransitionedAt { get; set; }
        ///<summary>
        ///The method of marketing used for this marketing activity.
        ///</summary>
        public MarketingTactic? tactic { get; set; }
        ///<summary>
        ///The status to which the marketing activity is currently transitioning.
        ///</summary>
        public MarketingActivityStatus? targetStatus { get; set; }
        ///<summary>
        ///The marketing activity's title, which is rendered on the marketing listing page.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The date and time when the marketing activity was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///A URL parameter value associated with this marketing activity.
        ///</summary>
        public string? urlParameterValue { get; set; }
        ///<summary>
        ///The set of [Urchin Tracking Module](
        ///          https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
        ///          ) used in the URL for tracking this marketing activity.
        ///</summary>
        public UTMParameters? utmParameters { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MarketingActivities.
    ///</summary>
    public class MarketingActivityConnection : GraphQLObject<MarketingActivityConnection>, IConnectionWithNodesAndEdges<MarketingActivityEdge, MarketingActivity>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MarketingActivityEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MarketingActivityEdge.
        ///</summary>
        public IEnumerable<MarketingActivity>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `marketingActivityCreateExternal` mutation.
    ///</summary>
    public class MarketingActivityCreateExternalPayload : GraphQLObject<MarketingActivityCreateExternalPayload>
    {
        ///<summary>
        ///The external marketing activity that was created.
        ///</summary>
        public MarketingActivity? marketingActivity { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketingActivityUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketingActivityCreate` mutation.
    ///</summary>
    public class MarketingActivityCreatePayload : GraphQLObject<MarketingActivityCreatePayload>
    {
        ///<summary>
        ///The created marketing activity.
        ///</summary>
        public MarketingActivity? marketingActivity { get; set; }
        ///<summary>
        ///The path to return back to shopify admin from embedded editor.
        ///</summary>
        public string? redirectPath { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketingActivityDeleteExternal` mutation.
    ///</summary>
    public class MarketingActivityDeleteExternalPayload : GraphQLObject<MarketingActivityDeleteExternalPayload>
    {
        ///<summary>
        ///The ID of the marketing activity that was deleted, if one was deleted.
        ///</summary>
        public string? deletedMarketingActivityId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketingActivityUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MarketingActivity and a cursor during pagination.
    ///</summary>
    public class MarketingActivityEdge : GraphQLObject<MarketingActivityEdge>, IEdge<MarketingActivity>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MarketingActivityEdge.
        ///</summary>
        public MarketingActivity? node { get; set; }
    }

    ///<summary>
    ///The error code resulted from the marketing activity extension integration.
    ///</summary>
    public enum MarketingActivityExtensionAppErrorCode
    {
        ///<summary>
        ///The shop/user must be onboarded to use the app.
        ///</summary>
        NOT_ONBOARDED_ERROR,
        ///<summary>
        ///The app has returned validation errors.
        ///</summary>
        VALIDATION_ERROR,
        ///<summary>
        ///The app is either not responding or returning unexpected data.
        ///</summary>
        API_ERROR,
        ///<summary>
        ///The app has returned an error when invoking the platform.
        ///</summary>
        PLATFORM_ERROR,
        ///<summary>
        ///The app needs to be installed.
        ///</summary>
        INSTALL_REQUIRED_ERROR,
    }

    ///<summary>
    ///Represents errors returned from apps when using the marketing activity extension.
    ///</summary>
    public class MarketingActivityExtensionAppErrors : GraphQLObject<MarketingActivityExtensionAppErrors>
    {
        ///<summary>
        ///The app error type.
        ///</summary>
        public MarketingActivityExtensionAppErrorCode? code { get; set; }
        ///<summary>
        ///The list of errors returned by the app.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Set of possible statuses for an external marketing activity.
    ///</summary>
    public enum MarketingActivityExternalStatus
    {
        ///<summary>
        ///This marketing activity is currently running.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///This marketing activity has completed running.
        ///</summary>
        INACTIVE,
        ///<summary>
        ///This marketing activity is currently not running.
        ///</summary>
        PAUSED,
        ///<summary>
        ///This marketing activity is scheduled to run.
        ///</summary>
        SCHEDULED,
        ///<summary>
        ///This marketing activity was deleted and it was triggered from outside of Shopify.
        ///</summary>
        DELETED_EXTERNALLY,
        ///<summary>
        ///The marketing activity's status is unknown.
        ///</summary>
        UNDEFINED,
    }

    ///<summary>
    ///Hierarchy levels for external marketing activities.
    ///</summary>
    public enum MarketingActivityHierarchyLevel
    {
        ///<summary>
        ///An advertisement activity. Must be parented by an ad group or a campaign activity, and must be assigned tracking parameters (URL or UTM).
        ///</summary>
        AD,
        ///<summary>
        ///A group of advertisement activities. Must be parented by a campaign activity.
        ///</summary>
        AD_GROUP,
        ///<summary>
        ///A campaign activity. May contain either ad groups or ads as child activities. If childless, then the campaign activity should have tracking parameters assigned (URL or UTM) otherwise it won't appear in marketing reports.
        ///</summary>
        CAMPAIGN,
    }

    ///<summary>
    ///The set of valid sort keys for the MarketingActivity query.
    ///</summary>
    public enum MarketingActivitySortKeys
    {
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Status helps to identify if this marketing activity has been completed, queued, failed etc.
    ///</summary>
    public enum MarketingActivityStatus
    {
        ///<summary>
        ///This marketing activity is currently running.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///This marketing activity is permanently unavailable.
        ///</summary>
        DELETED,
        ///<summary>
        ///This marketing activity was deleted and it was triggered from outside of Shopify.
        ///</summary>
        DELETED_EXTERNALLY,
        ///<summary>
        ///This marketing activity is disconnected and no longer editable.
        ///</summary>
        DISCONNECTED,
        ///<summary>
        ///This marketing activity has been edited, but it is not yet created.
        ///</summary>
        DRAFT,
        ///<summary>
        ///This marketing activity is unable to run.
        ///</summary>
        FAILED,
        ///<summary>
        ///This marketing activity has completed running.
        ///</summary>
        INACTIVE,
        ///<summary>
        ///This marketing activity is currently not running.
        ///</summary>
        PAUSED,
        ///<summary>
        ///This marketing activity is pending creation on the app's marketing platform.
        ///</summary>
        PENDING,
        ///<summary>
        ///This marketing activity is scheduled to run.
        ///</summary>
        SCHEDULED,
        ///<summary>
        ///The marketing activity's status is unknown.
        ///</summary>
        UNDEFINED,
    }

    ///<summary>
    ///StatusBadgeType helps to identify the color of the status badge.
    ///</summary>
    public enum MarketingActivityStatusBadgeType
    {
        ///<summary>
        ///This status badge has type default.
        ///</summary>
        DEFAULT,
        ///<summary>
        ///This status badge has type success.
        ///</summary>
        SUCCESS,
        ///<summary>
        ///This status badge has type attention.
        ///</summary>
        ATTENTION,
        ///<summary>
        ///This status badge has type warning.
        ///</summary>
        WARNING,
        ///<summary>
        ///This status badge has type info.
        ///</summary>
        INFO,
    }

    ///<summary>
    ///Return type for `marketingActivityUpdateExternal` mutation.
    ///</summary>
    public class MarketingActivityUpdateExternalPayload : GraphQLObject<MarketingActivityUpdateExternalPayload>
    {
        ///<summary>
        ///The updated marketing activity.
        ///</summary>
        public MarketingActivity? marketingActivity { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketingActivityUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketingActivityUpdate` mutation.
    ///</summary>
    public class MarketingActivityUpdatePayload : GraphQLObject<MarketingActivityUpdatePayload>
    {
        ///<summary>
        ///The updated marketing activity.
        ///</summary>
        public MarketingActivity? marketingActivity { get; set; }
        ///<summary>
        ///The redirect path from the embedded editor to the Shopify admin.
        ///</summary>
        public string? redirectPath { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketingActivityUpsertExternal` mutation.
    ///</summary>
    public class MarketingActivityUpsertExternalPayload : GraphQLObject<MarketingActivityUpsertExternalPayload>
    {
        ///<summary>
        ///The external marketing activity that was created or updated.
        ///</summary>
        public MarketingActivity? marketingActivity { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketingActivityUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of a Shopify Marketing mutation.
    ///</summary>
    public class MarketingActivityUserError : GraphQLObject<MarketingActivityUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MarketingActivityUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MarketingActivityUserError`.
    ///</summary>
    public enum MarketingActivityUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
    }

    ///<summary>
    ///This type combines budget amount and its marketing budget type.
    ///</summary>
    public class MarketingBudget : GraphQLObject<MarketingBudget>
    {
        ///<summary>
        ///The budget type for a marketing activity.
        ///</summary>
        public MarketingBudgetBudgetType? budgetType { get; set; }
        ///<summary>
        ///The amount of budget for marketing activity.
        ///</summary>
        public MoneyV2? total { get; set; }
    }

    ///<summary>
    ///The budget type for a marketing activity.
    ///</summary>
    public enum MarketingBudgetBudgetType
    {
        ///<summary>
        ///A daily budget.
        ///</summary>
        DAILY,
        ///<summary>
        ///A budget for the lifetime of a marketing activity.
        ///</summary>
        LIFETIME,
    }

    ///<summary>
    ///The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
    ///</summary>
    public enum MarketingChannel
    {
        ///<summary>
        ///Paid search.
        ///</summary>
        SEARCH,
        ///<summary>
        ///Displayed ads.
        ///</summary>
        DISPLAY,
        ///<summary>
        ///Social media.
        ///</summary>
        SOCIAL,
        ///<summary>
        ///Email.
        ///</summary>
        EMAIL,
        ///<summary>
        ///Referral links.
        ///</summary>
        REFERRAL,
    }

    ///<summary>
    ///Marketing engagement represents customer activity taken on a marketing activity or a marketing channel.
    ///</summary>
    public class MarketingEngagement : GraphQLObject<MarketingEngagement>
    {
        ///<summary>
        ///The total ad spend for the marketing content. Recurring weekly, monthly, or yearly spend needs to be divided into daily amounts.
        ///</summary>
        public MoneyV2? adSpend { get; set; }
        ///<summary>
        ///The unique string identifier of the channel to which the engagement metrics are being provided. This should be set when and only when providing channel-level engagements. This should be nil when providing activity-level engagements. For the correct handle for your channel, contact your partner manager.
        ///</summary>
        public string? channelHandle { get; set; }
        ///<summary>
        ///The total number of interactions, such as a button press or a screen touch, that occurred on the marketing content.
        ///</summary>
        public int? clicksCount { get; set; }
        ///<summary>
        ///The total number of comments on the marketing content.
        ///</summary>
        public int? commentsCount { get; set; }
        ///<summary>
        ///The total number of complaints on the marketing content. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were marked as spam. For social media platforms, this represents the number of dislikes or the number of times marketing content was reported.
        ///</summary>
        public int? complaintsCount { get; set; }
        ///<summary>
        ///The total number of fails for the marketing content. For message-based platforms such as email or SMS, this represents the number of bounced marketing emails or messages.
        ///</summary>
        public int? failsCount { get; set; }
        ///<summary>
        ///The total number of favorites, likes, saves, or bookmarks on the marketing content.
        ///</summary>
        public int? favoritesCount { get; set; }
        ///<summary>
        ///The number of customers that have placed their first order. Doesn't include adjustments such as edits, exchanges, or returns.
        ///</summary>
        public decimal? firstTimeCustomers { get; set; }
        ///<summary>
        ///The total number of times marketing content was displayed to users, whether or not an interaction occurred. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were delivered.
        ///</summary>
        public int? impressionsCount { get; set; }
        ///<summary>
        ///Whether the engagements are reported as lifetime totals rather than daily increments.
        ///</summary>
        public bool? isCumulative { get; set; }
        ///<summary>
        ///The marketing activity object related to this engagement. This corresponds to the marketingActivityId passed in on creation of the engagement.
        ///</summary>
        public MarketingActivity? marketingActivity { get; set; }
        ///<summary>
        ///The date that the engagements occurred on.
        ///</summary>
        public DateOnly? occurredOn { get; set; }
        ///<summary>
        ///The number of orders generated from the marketing content.
        ///</summary>
        public decimal? orders { get; set; }
        ///<summary>
        ///The number of returning customers that have placed an order. Doesn't include adjustments such as edits, exchanges, or returns.
        ///</summary>
        public decimal? returningCustomers { get; set; }
        ///<summary>
        ///The amount of sales generated from the marketing content.
        ///</summary>
        public MoneyV2? sales { get; set; }
        ///<summary>
        ///The total number of marketing emails or messages that were sent.
        ///</summary>
        public int? sendsCount { get; set; }
        ///<summary>
        ///The number of online store sessions generated from the marketing content.
        ///</summary>
        public int? sessionsCount { get; set; }
        ///<summary>
        ///The total number of times marketing content was distributed or reposted to either one's own network of followers through a social media platform or other digital channels. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were forwarded.
        ///</summary>
        public int? sharesCount { get; set; }
        ///<summary>
        ///The total number of unique clicks on the marketing content.
        ///</summary>
        public int? uniqueClicksCount { get; set; }
        ///<summary>
        ///The total number of all users who saw marketing content since it was published. For  message-based platforms such as email or SMS, this represents the number of unique users that opened a  marketing email or message. For video-based content, this represents the number of unique users that  played video content.
        ///</summary>
        public int? uniqueViewsCount { get; set; }
        ///<summary>
        ///The total number of unsubscribes on the marketing content. For social media platforms, this represents the number of unfollows.
        ///</summary>
        public int? unsubscribesCount { get; set; }
        ///<summary>
        ///The time difference, in hours, between UTC and the time zone used to aggregate these metrics.
        ///</summary>
        public TimeSpan? utcOffset { get; set; }
        ///<summary>
        ///The total number of views on the marketing content. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were opened. For video-based content, this represents the number of times videos were played.
        ///</summary>
        public int? viewsCount { get; set; }
    }

    ///<summary>
    ///Return type for `marketingEngagementCreate` mutation.
    ///</summary>
    public class MarketingEngagementCreatePayload : GraphQLObject<MarketingEngagementCreatePayload>
    {
        ///<summary>
        ///The marketing engagement that was created. This represents customer activity taken on a marketing activity or a marketing channel.
        ///</summary>
        public MarketingEngagement? marketingEngagement { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `marketingEngagementsDelete` mutation.
    ///</summary>
    public class MarketingEngagementsDeletePayload : GraphQLObject<MarketingEngagementsDeletePayload>
    {
        ///<summary>
        ///Informational message about the engagement data that has been marked for deletion.
        ///</summary>
        public string? result { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MarketingActivityUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents actions that market a merchant's store or products.
    ///</summary>
    public class MarketingEvent : GraphQLObject<MarketingEvent>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The app that the marketing event is attributed to.
        ///</summary>
        public App? app { get; set; }

        ///<summary>
        ///The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
        ///</summary>
        [Obsolete("Use `marketingChannelType` instead.")]
        public MarketingChannel? channel { get; set; }
        ///<summary>
        ///The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager.
        ///</summary>
        public string? channelHandle { get; set; }
        ///<summary>
        ///A human-readable description of the marketing event.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The date and time when the marketing event ended.
        ///</summary>
        public DateTime? endedAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The URL where the marketing event can be managed.
        ///</summary>
        public string? manageUrl { get; set; }
        ///<summary>
        ///The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
        ///</summary>
        public MarketingChannel? marketingChannelType { get; set; }
        ///<summary>
        ///The URL where the marketing event can be previewed.
        ///</summary>
        public string? previewUrl { get; set; }
        ///<summary>
        ///An optional ID that helps Shopify validate engagement data.
        ///</summary>
        public string? remoteId { get; set; }
        ///<summary>
        ///The date and time when the marketing event is scheduled to end.
        ///</summary>
        public DateTime? scheduledToEndAt { get; set; }
        ///<summary>
        ///Where the `MarketingEvent` occurred and what kind of content was used.
        ///Because `utmSource` and `utmMedium` are often used interchangeably, this is
        ///based on a combination of `marketingChannel`, `referringDomain`, and `type` to
        ///provide a consistent representation for any given piece of marketing
        ///regardless of the app that created it.
        ///</summary>
        public string? sourceAndMedium { get; set; }
        ///<summary>
        ///The date and time when the marketing event started.
        ///</summary>
        public DateTime? startedAt { get; set; }

        ///<summary>
        ///The display text for the marketing event type.
        ///</summary>
        [Obsolete("Use `sourceAndMedium` instead.")]
        public string? targetTypeDisplayText { get; set; }
        ///<summary>
        ///The marketing event type.
        ///</summary>
        public MarketingTactic? type { get; set; }
        ///<summary>
        ///The name of the marketing campaign.
        ///</summary>
        public string? utmCampaign { get; set; }
        ///<summary>
        ///The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
        ///</summary>
        public string? utmMedium { get; set; }
        ///<summary>
        ///The referrer of the marketing event. Example values: `google`, `newsletter`.
        ///</summary>
        public string? utmSource { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MarketingEvents.
    ///</summary>
    public class MarketingEventConnection : GraphQLObject<MarketingEventConnection>, IConnectionWithNodesAndEdges<MarketingEventEdge, MarketingEvent>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MarketingEventEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MarketingEventEdge.
        ///</summary>
        public IEnumerable<MarketingEvent>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MarketingEvent and a cursor during pagination.
    ///</summary>
    public class MarketingEventEdge : GraphQLObject<MarketingEventEdge>, IEdge<MarketingEvent>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MarketingEventEdge.
        ///</summary>
        public MarketingEvent? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the MarketingEvent query.
    ///</summary>
    public enum MarketingEventSortKeys
    {
        ///<summary>
        ///Sort by the `started_at` value.
        ///</summary>
        STARTED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The available types of marketing event.
    ///</summary>
    public enum MarketingTactic
    {
        ///<summary>
        ///An abandoned cart recovery email.
        ///</summary>
        ABANDONED_CART,
        ///<summary>
        ///An ad, such as a Facebook ad.
        ///</summary>
        AD,
        ///<summary>
        ///An affiliate link.
        ///</summary>
        AFFILIATE,
        ///<summary>
        ///A link.
        ///</summary>
        LINK,
        ///<summary>
        ///A loyalty program.
        ///</summary>
        LOYALTY,
        ///<summary>
        ///A messaging app, such as Facebook Messenger.
        ///</summary>
        MESSAGE,
        ///<summary>
        ///A newsletter.
        ///</summary>
        NEWSLETTER,
        ///<summary>
        ///A notification in the Shopify admin.
        ///</summary>
        NOTIFICATION,
        ///<summary>
        ///A blog post.
        ///</summary>
        POST,
        ///<summary>
        ///A retargeting ad.
        ///</summary>
        RETARGETING,
        ///<summary>
        ///A transactional email.
        ///</summary>
        TRANSACTIONAL,
        ///<summary>
        ///Search engine optimization.
        ///</summary>
        SEO,
        ///<summary>
        ///A direct visit to the online store.
        ///</summary>
        DIRECT,
        ///<summary>
        ///A popup on the online store.
        ///</summary>
        STOREFRONT_APP,
        ///<summary>
        ///A display ad.
        ///</summary>
        [Obsolete("`DISPLAY` is deprecated. Use `AD` instead.")]
        DISPLAY,
        ///<summary>
        ///Paid search.
        ///</summary>
        [Obsolete("`SEARCH` is deprecated. Use `AD` instead.")]
        SEARCH,
        ///<summary>
        ///A follow-up email.
        ///</summary>
        [Obsolete("'FOLLOW_UP' is deprecated. Use 'TRANSACTIONAL' instead.")]
        FOLLOW_UP,
        ///<summary>
        ///A promotional receipt.
        ///</summary>
        [Obsolete("'RECEIPT' is deprecated. Use 'TRANSACTIONAL' instead.")]
        RECEIPT,
    }

    ///<summary>
    ///Represents a media interface.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(ExternalVideo), typeDiscriminator: "ExternalVideo")]
    [JsonDerivedType(typeof(MediaImage), typeDiscriminator: "MediaImage")]
    [JsonDerivedType(typeof(Model3d), typeDiscriminator: "Model3d")]
    [JsonDerivedType(typeof(Video), typeDiscriminator: "Video")]
    public interface IMedia : IGraphQLObject
    {
        public ExternalVideo? AsExternalVideo() => this as ExternalVideo;
        public MediaImage? AsMediaImage() => this as MediaImage;
        public Model3d? AsModel3d() => this as Model3d;
        public Video? AsVideo() => this as Video;
        ///<summary>
        ///A word or phrase to share the nature or contents of a media.
        ///</summary>
        public string? alt { get; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; }
        ///<summary>
        ///The media content type.
        ///</summary>
        public MediaContentType? mediaContentType { get; }
        ///<summary>
        ///Any errors which have occurred on the media.
        ///</summary>
        public IEnumerable<MediaError>? mediaErrors { get; }
        ///<summary>
        ///The warnings attached to the media.
        ///</summary>
        public IEnumerable<MediaWarning>? mediaWarnings { get; }
        ///<summary>
        ///The preview image for the media.
        ///</summary>
        public MediaPreviewImage? preview { get; }
        ///<summary>
        ///Current status of the media.
        ///</summary>
        public MediaStatus? status { get; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Media.
    ///</summary>
    public class MediaConnection : GraphQLObject<MediaConnection>, IConnectionWithNodesAndEdges<MediaEdge, IMedia>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MediaEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MediaEdge.
        ///</summary>
        public IEnumerable<IMedia>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///The possible content types for a media object.
    ///</summary>
    public enum MediaContentType
    {
        ///<summary>
        ///A Shopify-hosted video.
        ///</summary>
        VIDEO,
        ///<summary>
        ///An externally hosted video.
        ///</summary>
        EXTERNAL_VIDEO,
        ///<summary>
        ///A 3d model.
        ///</summary>
        MODEL_3D,
        ///<summary>
        ///A Shopify-hosted image.
        ///</summary>
        IMAGE,
    }

    ///<summary>
    ///An auto-generated type which holds one Media and a cursor during pagination.
    ///</summary>
    public class MediaEdge : GraphQLObject<MediaEdge>, IEdge<IMedia>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MediaEdge.
        ///</summary>
        public IMedia? node { get; set; }
    }

    ///<summary>
    ///Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
    ///Check the media before attempting to upload again.
    ///</summary>
    public class MediaError : GraphQLObject<MediaError>
    {
        ///<summary>
        ///Code representing the type of error.
        ///</summary>
        public MediaErrorCode? code { get; set; }
        ///<summary>
        ///Additional details regarding the error.
        ///</summary>
        public string? details { get; set; }
        ///<summary>
        ///Translated error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Error types for media.
    ///</summary>
    public enum MediaErrorCode
    {
        ///<summary>
        ///Media error has occured for unknown reason.
        ///</summary>
        UNKNOWN,
        ///<summary>
        ///Media could not be processed because the signed URL was invalid.
        ///</summary>
        INVALID_SIGNED_URL,
        ///<summary>
        ///Media could not be processed because the image could not be downloaded.
        ///</summary>
        IMAGE_DOWNLOAD_FAILURE,
        ///<summary>
        ///Media could not be processed because the image could not be processed.
        ///</summary>
        IMAGE_PROCESSING_FAILURE,
        ///<summary>
        ///Media timed out because it is currently being modified by another operation.
        ///</summary>
        MEDIA_TIMEOUT_ERROR,
        ///<summary>
        ///Media could not be created because the external video could not be found.
        ///</summary>
        EXTERNAL_VIDEO_NOT_FOUND,
        ///<summary>
        ///Media could not be created because the external video is not listed or is private.
        ///</summary>
        EXTERNAL_VIDEO_UNLISTED,
        ///<summary>
        ///Media could not be created because the external video has an invalid aspect ratio.
        ///</summary>
        EXTERNAL_VIDEO_INVALID_ASPECT_RATIO,
        ///<summary>
        ///Media could not be created because embed permissions are disabled for this video.
        ///</summary>
        EXTERNAL_VIDEO_EMBED_DISABLED,
        ///<summary>
        ///Media could not be created because video is either not found or still transcoding.
        ///</summary>
        EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING,
        ///<summary>
        ///File could not be processed because the source could not be downloaded.
        ///</summary>
        GENERIC_FILE_DOWNLOAD_FAILURE,
        ///<summary>
        ///File could not be created because the size is too large.
        ///</summary>
        GENERIC_FILE_INVALID_SIZE,
        ///<summary>
        ///Media could not be created because the metadata could not be read.
        ///</summary>
        VIDEO_METADATA_READ_ERROR,
        ///<summary>
        ///Media could not be created because it has an invalid file type.
        ///</summary>
        VIDEO_INVALID_FILETYPE_ERROR,
        ///<summary>
        ///Media could not be created because it does not meet the minimum width requirement.
        ///</summary>
        VIDEO_MIN_WIDTH_ERROR,
        ///<summary>
        ///Media could not be created because it does not meet the maximum width requirement.
        ///</summary>
        VIDEO_MAX_WIDTH_ERROR,
        ///<summary>
        ///Media could not be created because it does not meet the minimum height requirement.
        ///</summary>
        VIDEO_MIN_HEIGHT_ERROR,
        ///<summary>
        ///Media could not be created because it does not meet the maximum height requirement.
        ///</summary>
        VIDEO_MAX_HEIGHT_ERROR,
        ///<summary>
        ///Media could not be created because it does not meet the minimum duration requirement.
        ///</summary>
        VIDEO_MIN_DURATION_ERROR,
        ///<summary>
        ///Media could not be created because it does not meet the maximum duration requirement.
        ///</summary>
        VIDEO_MAX_DURATION_ERROR,
        ///<summary>
        ///Video failed validation.
        ///</summary>
        VIDEO_VALIDATION_ERROR,
        ///<summary>
        ///Model failed validation.
        ///</summary>
        MODEL3D_VALIDATION_ERROR,
        ///<summary>
        ///Media could not be created because the model's thumbnail generation failed.
        ///</summary>
        MODEL3D_THUMBNAIL_GENERATION_ERROR,
        ///<summary>
        ///There was an issue while trying to generate a new thumbnail.
        ///</summary>
        MODEL3D_THUMBNAIL_REGENERATION_ERROR,
        ///<summary>
        ///Media could not be created because the model can't be converted to USDZ format.
        ///</summary>
        MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR,
        ///<summary>
        ///Media could not be created because the model file failed processing.
        ///</summary>
        MODEL3D_GLB_OUTPUT_CREATION_ERROR,
        ///<summary>
        ///Media could not be created because the model file failed processing.
        ///</summary>
        MODEL3D_PROCESSING_FAILURE,
        ///<summary>
        ///Media could not be created because the image is an unsupported file type.
        ///</summary>
        UNSUPPORTED_IMAGE_FILE_TYPE,
        ///<summary>
        ///Media could not be created because the image size is too large.
        ///</summary>
        INVALID_IMAGE_FILE_SIZE,
        ///<summary>
        ///Media could not be created because the image has an invalid aspect ratio.
        ///</summary>
        INVALID_IMAGE_ASPECT_RATIO,
        ///<summary>
        ///Media could not be created because the image's resolution exceeds the max limit.
        ///</summary>
        INVALID_IMAGE_RESOLUTION,
        ///<summary>
        ///Media could not be created because the cumulative file storage limit would be exceeded.
        ///</summary>
        FILE_STORAGE_LIMIT_EXCEEDED,
        ///<summary>
        ///Media could not be created because a file with the same name already exists.
        ///</summary>
        DUPLICATE_FILENAME_ERROR,
    }

    ///<summary>
    ///Host for a Media Resource.
    ///</summary>
    public enum MediaHost
    {
        ///<summary>
        ///Host for YouTube embedded videos.
        ///</summary>
        YOUTUBE,
        ///<summary>
        ///Host for Vimeo embedded videos.
        ///</summary>
        VIMEO,
    }

    ///<summary>
    ///An image hosted on Shopify.
    ///</summary>
    public class MediaImage : GraphQLObject<MediaImage>, IFile, IHasMetafields, IMedia, INode, IMetafieldReference
    {
        ///<summary>
        ///A word or phrase to share the nature or contents of a media.
        ///</summary>
        public string? alt { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///Any errors that have occurred on the file.
        ///</summary>
        public IEnumerable<FileError>? fileErrors { get; set; }
        ///<summary>
        ///The status of the file.
        ///</summary>
        public FileStatus? fileStatus { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The image for the media. Returns `null` until `status` is `READY`.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The media content type.
        ///</summary>
        public MediaContentType? mediaContentType { get; set; }
        ///<summary>
        ///Any errors which have occurred on the media.
        ///</summary>
        public IEnumerable<MediaError>? mediaErrors { get; set; }
        ///<summary>
        ///The warnings attached to the media.
        ///</summary>
        public IEnumerable<MediaWarning>? mediaWarnings { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The MIME type of the image.
        ///</summary>
        public string? mimeType { get; set; }
        ///<summary>
        ///The original source of the image.
        ///</summary>
        public MediaImageOriginalSource? originalSource { get; set; }
        ///<summary>
        ///The preview image for the media.
        ///</summary>
        public MediaPreviewImage? preview { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///Current status of the media.
        ///</summary>
        public MediaStatus? status { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///The original source for an image.
    ///</summary>
    public class MediaImageOriginalSource : GraphQLObject<MediaImageOriginalSource>
    {
        ///<summary>
        ///The size of the original file in bytes.
        ///</summary>
        public int? fileSize { get; set; }
        ///<summary>
        ///The URL of the original image, valid only for a short period.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///Represents the preview image for a media.
    ///</summary>
    public class MediaPreviewImage : GraphQLObject<MediaPreviewImage>
    {
        ///<summary>
        ///The preview image for the media. Returns `null` until `status` is `READY`.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///Current status of the preview image.
        ///</summary>
        public MediaPreviewImageStatus? status { get; set; }
    }

    ///<summary>
    ///The possible statuses for a media preview image.
    ///</summary>
    public enum MediaPreviewImageStatus
    {
        ///<summary>
        ///Preview image is uploaded but not yet processed.
        ///</summary>
        UPLOADED,
        ///<summary>
        ///Preview image is being processed.
        ///</summary>
        PROCESSING,
        ///<summary>
        ///Preview image is ready to be displayed.
        ///</summary>
        READY,
        ///<summary>
        ///Preview image processing has failed.
        ///</summary>
        FAILED,
    }

    ///<summary>
    ///The possible statuses for a media object.
    ///</summary>
    public enum MediaStatus
    {
        ///<summary>
        ///Media has been uploaded but not yet processed.
        ///</summary>
        UPLOADED,
        ///<summary>
        ///Media is being processed.
        ///</summary>
        PROCESSING,
        ///<summary>
        ///Media is ready to be displayed.
        ///</summary>
        READY,
        ///<summary>
        ///Media processing has failed.
        ///</summary>
        FAILED,
    }

    ///<summary>
    ///Represents an error that happens during execution of a Media query or mutation.
    ///</summary>
    public class MediaUserError : GraphQLObject<MediaUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MediaUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MediaUserError`.
    ///</summary>
    public enum MediaUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///Video validation failed.
        ///</summary>
        VIDEO_VALIDATION_ERROR,
        ///<summary>
        ///Model validation failed.
        ///</summary>
        MODEL3D_VALIDATION_ERROR,
        ///<summary>
        ///Video creation throttle was exceeded.
        ///</summary>
        VIDEO_THROTTLE_EXCEEDED,
        ///<summary>
        ///Model3d creation throttle was exceeded.
        ///</summary>
        MODEL3D_THROTTLE_EXCEEDED,
        ///<summary>
        ///Exceeded the limit of media per product.
        ///</summary>
        PRODUCT_MEDIA_LIMIT_EXCEEDED,
        ///<summary>
        ///Exceeded the limit of media per shop.
        ///</summary>
        SHOP_MEDIA_LIMIT_EXCEEDED,
        ///<summary>
        ///Product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///Media does not exist.
        ///</summary>
        MEDIA_DOES_NOT_EXIST,
        ///<summary>
        ///Media does not exist on the given product.
        ///</summary>
        MEDIA_DOES_NOT_EXIST_ON_PRODUCT,
        ///<summary>
        ///Only one mediaId is allowed per variant-media input pair.
        ///</summary>
        TOO_MANY_MEDIA_PER_INPUT_PAIR,
        ///<summary>
        ///Exceeded the maximum number of 100 variant-media pairs per mutation call.
        ///</summary>
        MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED,
        ///<summary>
        ///Invalid media type.
        ///</summary>
        INVALID_MEDIA_TYPE,
        ///<summary>
        ///Variant specified in more than one pair.
        ///</summary>
        PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES,
        ///<summary>
        ///Variant does not exist on the given product.
        ///</summary>
        PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT,
        ///<summary>
        ///Non-ready media are not supported.
        ///</summary>
        NON_READY_MEDIA,
        ///<summary>
        ///Product variant already has attached media.
        ///</summary>
        PRODUCT_VARIANT_ALREADY_HAS_MEDIA,
        ///<summary>
        ///The specified media is not attached to the specified variant.
        ///</summary>
        MEDIA_IS_NOT_ATTACHED_TO_VARIANT,
        ///<summary>
        ///Media cannot be modified. It is currently being modified by another operation.
        ///</summary>
        MEDIA_CANNOT_BE_MODIFIED,
    }

    ///<summary>
    ///Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
    ///Consider reviewing your media to ensure it is correct and its parameters are as expected.
    ///</summary>
    public class MediaWarning : GraphQLObject<MediaWarning>
    {
        ///<summary>
        ///The code representing the type of warning.
        ///</summary>
        public MediaWarningCode? code { get; set; }
        ///<summary>
        ///Translated warning message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Warning types for media.
    ///</summary>
    public enum MediaWarningCode
    {
        ///<summary>
        ///3D model physical size might be invalid. The dimensions of your model are very small. Consider reviewing your model to ensure they are correct.
        ///</summary>
        MODEL_SMALL_PHYSICAL_SIZE,
        ///<summary>
        ///3D model physical size might be invalid. The dimensions of your model are very large. Consider reviewing your model to ensure they are correct.
        ///</summary>
        MODEL_LARGE_PHYSICAL_SIZE,
    }

    ///<summary>
    ///The class of the discount for combining purposes.
    ///</summary>
    public enum MerchandiseDiscountClass
    {
        ///<summary>
        ///Combined as a product discount.
        ///</summary>
        PRODUCT,
        ///<summary>
        ///Combined as an order discount.
        ///</summary>
        ORDER,
    }

    ///<summary>
    ///Merchant approval for accelerated onboarding to channel integration apps.
    ///</summary>
    public class MerchantApprovalSignals : GraphQLObject<MerchantApprovalSignals>
    {
        ///<summary>
        ///Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account.
        ///</summary>
        public bool? identityVerified { get; set; }
        ///<summary>
        ///Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop isn't marked for verification.
        ///</summary>
        public bool? verifiedByShopify { get; set; }
        ///<summary>
        ///Which tier of the Shopify verification was determined for the merchant's business for onboarding to channel integration apps.
        ///</summary>
        public string? verifiedByShopifyTier { get; set; }
    }

    ///<summary>
    ///Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
    ///For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
    ///Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
    ///Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
    ///</summary>
    public class Metafield : GraphQLObject<Metafield>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The date and time when the metafield was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The metafield definition that the metafield belongs to, if any.
        ///</summary>
        public MetafieldDefinition? definition { get; set; }
        ///<summary>
        ///The description of the metafield.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The unique identifier for the metafield within its namespace.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The container for a group of metafields that the metafield is associated with.
        ///</summary>
        public string? @namespace { get; set; }
        ///<summary>
        ///The resource that the metafield is attached to.
        ///</summary>
        public IHasMetafields? owner { get; set; }
        ///<summary>
        ///The type of resource that the metafield is attached to.
        ///</summary>
        public MetafieldOwnerType? ownerType { get; set; }
        ///<summary>
        ///Returns a reference object if the metafield definition's type is a resource reference.
        ///</summary>
        public IMetafieldReference? reference { get; set; }
        ///<summary>
        ///A list of reference objects if the metafield's type is a resource reference list.
        ///</summary>
        public MetafieldReferenceConnection? references { get; set; }
        ///<summary>
        ///The type of data that is stored in the metafield.
        ///Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
        ///</summary>
        public string? type { get; set; }
        ///<summary>
        ///The date and time when the metafield was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///The access settings for this metafield definition.
    ///</summary>
    public class MetafieldAccess : GraphQLObject<MetafieldAccess>
    {
        ///<summary>
        ///The default admin access setting used for the metafields under this definition.
        ///</summary>
        public MetafieldAdminAccess? admin { get; set; }
        ///<summary>
        ///The explicit grants for this metafield definition, superseding the default admin access
        ///for the specified grantees.
        ///</summary>
        public IEnumerable<MetafieldAccessGrant>? grants { get; set; }
        ///<summary>
        ///The storefront access setting used for the metafields under this definition.
        ///</summary>
        public MetafieldStorefrontAccess? storefront { get; set; }
    }

    ///<summary>
    ///An explicit access grant for the metafields under this definition.
    ///</summary>
    public class MetafieldAccessGrant : GraphQLObject<MetafieldAccessGrant>
    {
        ///<summary>
        ///The level of access the grantee has.
        ///</summary>
        public MetafieldGrantAccessLevel? access { get; set; }
        ///<summary>
        ///The grantee being granted access.
        ///</summary>
        public string? grantee { get; set; }
    }

    ///<summary>
    ///Possible admin access settings for metafields.
    ///</summary>
    public enum MetafieldAdminAccess
    {
        ///<summary>
        ///Owner gets full access. No one else has access rights.
        ///</summary>
        PRIVATE,
        ///<summary>
        ///Owner gets full access. All applications and the merchant have read-only access.
        ///</summary>
        PUBLIC_READ,
        ///<summary>
        ///Owner gets full access. The merchant has read-only access. No one else has access rights.
        ///</summary>
        MERCHANT_READ,
        ///<summary>
        ///Owner gets full access. The merchant has read and write access. No one else has access rights.
        ///</summary>
        MERCHANT_READ_WRITE,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Metafields.
    ///</summary>
    public class MetafieldConnection : GraphQLObject<MetafieldConnection>, IConnectionWithNodesAndEdges<MetafieldEdge, Metafield>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MetafieldEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MetafieldEdge.
        ///</summary>
        public IEnumerable<Metafield>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Metafield definitions enable you to define additional validation constraints for metafields, and enable the
    ///merchant to edit metafield values in context.
    ///</summary>
    public class MetafieldDefinition : GraphQLObject<MetafieldDefinition>, INode
    {
        ///<summary>
        ///The access settings associated with the metafield definition.
        ///</summary>
        public MetafieldAccess? access { get; set; }
        ///<summary>
        ///The description of the metafield definition.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The unique identifier for the metafield definition within its namespace.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The metafields that belong to the metafield definition.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The count of the metafields that belong to the metafield definition.
        ///</summary>
        public int? metafieldsCount { get; set; }
        ///<summary>
        ///The human-readable name of the metafield definition.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The container for a group of metafields that the metafield definition is associated with.
        ///</summary>
        public string? @namespace { get; set; }
        ///<summary>
        ///The resource type that the metafield definition is attached to.
        ///</summary>
        public MetafieldOwnerType? ownerType { get; set; }
        ///<summary>
        ///The position of the metafield definition in the pinned list.
        ///</summary>
        public int? pinnedPosition { get; set; }
        ///<summary>
        ///The standard metafield definition template associated with the metafield definition.
        ///</summary>
        public StandardMetafieldDefinitionTemplate? standardTemplate { get; set; }
        ///<summary>
        ///The type of data that each of the metafields that belong to the metafield definition will store.
        ///Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
        ///</summary>
        public MetafieldDefinitionType? type { get; set; }
        ///<summary>
        ///Whether the metafield definition can be used as a collection condition.
        ///</summary>
        public bool? useAsCollectionCondition { get; set; }
        ///<summary>
        ///The validation status for the metafields that belong to the metafield definition.
        ///</summary>
        public MetafieldDefinitionValidationStatus? validationStatus { get; set; }
        ///<summary>
        ///A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
        ///the metafields that belong to the metafield definition. For example, for a metafield definition with the
        ///type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
        ///store dates after the specified minimum.
        ///</summary>
        public IEnumerable<MetafieldDefinitionValidation>? validations { get; set; }

        ///<summary>
        ///Whether each of the metafields that belong to the metafield definition are visible from the Storefront API.
        ///</summary>
        [Obsolete("Use `access.storefront` instead.")]
        public bool? visibleToStorefrontApi { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MetafieldDefinitions.
    ///</summary>
    public class MetafieldDefinitionConnection : GraphQLObject<MetafieldDefinitionConnection>, IConnectionWithNodesAndEdges<MetafieldDefinitionEdge, MetafieldDefinition>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MetafieldDefinitionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MetafieldDefinitionEdge.
        ///</summary>
        public IEnumerable<MetafieldDefinition>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `metafieldDefinitionCreate` mutation.
    ///</summary>
    public class MetafieldDefinitionCreatePayload : GraphQLObject<MetafieldDefinitionCreatePayload>
    {
        ///<summary>
        ///The metafield definition that was created.
        ///</summary>
        public MetafieldDefinition? createdDefinition { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetafieldDefinitionCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `MetafieldDefinitionCreate`.
    ///</summary>
    public class MetafieldDefinitionCreateUserError : GraphQLObject<MetafieldDefinitionCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MetafieldDefinitionCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MetafieldDefinitionCreateUserError`.
    ///</summary>
    public enum MetafieldDefinitionCreateUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The definition limit per owner type has exceeded.
        ///</summary>
        RESOURCE_TYPE_LIMIT_EXCEEDED,
        ///<summary>
        ///The maximum limit of definitions per owner type has exceeded.
        ///</summary>
        LIMIT_EXCEEDED,
        ///<summary>
        ///An invalid option.
        ///</summary>
        INVALID_OPTION,
        ///<summary>
        ///A duplicate option.
        ///</summary>
        DUPLICATE_OPTION,
        ///<summary>
        ///This namespace and key combination is reserved for standard definitions.
        ///</summary>
        RESERVED_NAMESPACE_KEY,
        ///<summary>
        ///The pinned limit has been reached for the owner type.
        ///</summary>
        PINNED_LIMIT_REACHED,
        ///<summary>
        ///This namespace and key combination is already in use for a set of your metafields.
        ///</summary>
        UNSTRUCTURED_ALREADY_EXISTS,
        ///<summary>
        ///A field contains an invalid character.
        ///</summary>
        INVALID_CHARACTER,
        ///<summary>
        ///The definition type is not eligible to be used as collection condition.
        ///</summary>
        TYPE_NOT_ALLOWED_FOR_CONDITIONS,
        ///<summary>
        ///You have reached the maximum allowed definitions for automated collections.
        ///</summary>
        OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS,
        ///<summary>
        ///The maximum limit of grants per definition type has been exceeded.
        ///</summary>
        GRANT_LIMIT_EXCEEDED,
        ///<summary>
        ///The input combination is invalid.
        ///</summary>
        INVALID_INPUT_COMBINATION,
    }

    ///<summary>
    ///Return type for `metafieldDefinitionDelete` mutation.
    ///</summary>
    public class MetafieldDefinitionDeletePayload : GraphQLObject<MetafieldDefinitionDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted metafield definition.
        ///</summary>
        public string? deletedDefinitionId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetafieldDefinitionDeleteUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `MetafieldDefinitionDelete`.
    ///</summary>
    public class MetafieldDefinitionDeleteUserError : GraphQLObject<MetafieldDefinitionDeleteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MetafieldDefinitionDeleteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MetafieldDefinitionDeleteUserError`.
    ///</summary>
    public enum MetafieldDefinitionDeleteUserErrorCode
    {
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///Definition not found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///An internal error occurred.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Deleting a reference type metafield definition requires deletion of its associated metafields.
        ///</summary>
        REFERENCE_TYPE_DELETION_ERROR,
        ///<summary>
        ///Action cannot proceed. Definition is currently in use.
        ///</summary>
        METAFIELD_DEFINITION_IN_USE,
        ///<summary>
        ///Owner type can't be used in this mutation.
        ///</summary>
        DISALLOWED_OWNER_TYPE,
    }

    ///<summary>
    ///An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
    ///</summary>
    public class MetafieldDefinitionEdge : GraphQLObject<MetafieldDefinitionEdge>, IEdge<MetafieldDefinition>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MetafieldDefinitionEdge.
        ///</summary>
        public MetafieldDefinition? node { get; set; }
    }

    ///<summary>
    ///Return type for `metafieldDefinitionPin` mutation.
    ///</summary>
    public class MetafieldDefinitionPinPayload : GraphQLObject<MetafieldDefinitionPinPayload>
    {
        ///<summary>
        ///The metafield definition that was pinned.
        ///</summary>
        public MetafieldDefinition? pinnedDefinition { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetafieldDefinitionPinUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `MetafieldDefinitionPin`.
    ///</summary>
    public class MetafieldDefinitionPinUserError : GraphQLObject<MetafieldDefinitionPinUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MetafieldDefinitionPinUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MetafieldDefinitionPinUserError`.
    ///</summary>
    public enum MetafieldDefinitionPinUserErrorCode
    {
        ///<summary>
        ///The metafield definition was not found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///The pinned limit has been reached for owner type.
        ///</summary>
        PINNED_LIMIT_REACHED,
        ///<summary>
        ///The metafield definition is already pinned.
        ///</summary>
        ALREADY_PINNED,
        ///<summary>
        ///An internal error occurred.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Owner type can't be used in this mutation.
        ///</summary>
        DISALLOWED_OWNER_TYPE,
    }

    ///<summary>
    ///Possible metafield definition pinned statuses.
    ///</summary>
    public enum MetafieldDefinitionPinnedStatus
    {
        ///<summary>
        ///All metafield definitions.
        ///</summary>
        ANY,
        ///<summary>
        ///Only metafield definitions that are pinned.
        ///</summary>
        PINNED,
        ///<summary>
        ///Only metafield definitions that are not pinned.
        ///</summary>
        UNPINNED,
    }

    ///<summary>
    ///The set of valid sort keys for the MetafieldDefinition query.
    ///</summary>
    public enum MetafieldDefinitionSortKeys
    {
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `pinned_position` value.
        ///</summary>
        PINNED_POSITION,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The type and name for the optional validation configuration of a metafield.
    ///
    ///For example, a supported validation might consist of a `max` name and a `number_integer` type.
    ///This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
    ///</summary>
    public class MetafieldDefinitionSupportedValidation : GraphQLObject<MetafieldDefinitionSupportedValidation>
    {
        ///<summary>
        ///The name of the metafield definition validation.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The type of input for the validation.
        ///</summary>
        public string? type { get; set; }
    }

    ///<summary>
    ///A metafield definition type provides basic foundation and validation for a metafield.
    ///</summary>
    public class MetafieldDefinitionType : GraphQLObject<MetafieldDefinitionType>
    {
        ///<summary>
        ///The category associated with the metafield definition type.
        ///</summary>
        public string? category { get; set; }
        ///<summary>
        ///The name of the type for the metafield definition.
        ///See the list of [supported types](https://shopify.dev/apps/metafields/types).
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The supported validations for a metafield definition type.
        ///</summary>
        public IEnumerable<MetafieldDefinitionSupportedValidation>? supportedValidations { get; set; }
        ///<summary>
        ///Whether metafields without a definition can be migrated to a definition of this type.
        ///</summary>
        public bool? supportsDefinitionMigrations { get; set; }

        ///<summary>
        ///The value type for a metafield created with this definition type.
        ///</summary>
        [Obsolete("`valueType` is deprecated and `name` should be used for type information.")]
        public MetafieldValueType? valueType { get; set; }
    }

    ///<summary>
    ///Return type for `metafieldDefinitionUnpin` mutation.
    ///</summary>
    public class MetafieldDefinitionUnpinPayload : GraphQLObject<MetafieldDefinitionUnpinPayload>
    {
        ///<summary>
        ///The metafield definition that was unpinned.
        ///</summary>
        public MetafieldDefinition? unpinnedDefinition { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetafieldDefinitionUnpinUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `MetafieldDefinitionUnpin`.
    ///</summary>
    public class MetafieldDefinitionUnpinUserError : GraphQLObject<MetafieldDefinitionUnpinUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MetafieldDefinitionUnpinUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MetafieldDefinitionUnpinUserError`.
    ///</summary>
    public enum MetafieldDefinitionUnpinUserErrorCode
    {
        ///<summary>
        ///The metafield definition was not found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///The metafield definition isn't pinned.
        ///</summary>
        NOT_PINNED,
        ///<summary>
        ///An internal error occurred.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Owner type can't be used in this mutation.
        ///</summary>
        DISALLOWED_OWNER_TYPE,
    }

    ///<summary>
    ///Return type for `metafieldDefinitionUpdate` mutation.
    ///</summary>
    public class MetafieldDefinitionUpdatePayload : GraphQLObject<MetafieldDefinitionUpdatePayload>
    {
        ///<summary>
        ///The metafield definition that was updated.
        ///</summary>
        public MetafieldDefinition? updatedDefinition { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetafieldDefinitionUpdateUserError>? userErrors { get; set; }
        ///<summary>
        ///The asynchronous job updating the metafield definition's validation_status.
        ///</summary>
        public Job? validationJob { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `MetafieldDefinitionUpdate`.
    ///</summary>
    public class MetafieldDefinitionUpdateUserError : GraphQLObject<MetafieldDefinitionUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MetafieldDefinitionUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MetafieldDefinitionUpdateUserError`.
    ///</summary>
    public enum MetafieldDefinitionUpdateUserErrorCode
    {
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The metafield definition wasn't found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///An invalid input.
        ///</summary>
        INVALID_INPUT,
        ///<summary>
        ///The pinned limit has been reached for the owner type.
        ///</summary>
        PINNED_LIMIT_REACHED,
        ///<summary>
        ///An internal error occurred.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///The definition type is not eligible to be used as collection condition.
        ///</summary>
        TYPE_NOT_ALLOWED_FOR_CONDITIONS,
        ///<summary>
        ///Action cannot proceed. Definition is currently in use.
        ///</summary>
        METAFIELD_DEFINITION_IN_USE,
        ///<summary>
        ///You have reached the maximum allowed definitions for automated collections.
        ///</summary>
        OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS,
        ///<summary>
        ///You cannot change the metaobject definition pointed to by a metaobject reference metafield definition.
        ///</summary>
        METAOBJECT_DEFINITION_CHANGED,
        ///<summary>
        ///The maximum limit of grants per definition type has been exceeded.
        ///</summary>
        GRANT_LIMIT_EXCEEDED,
        ///<summary>
        ///The input combination is invalid.
        ///</summary>
        INVALID_INPUT_COMBINATION,
    }

    ///<summary>
    ///A configured metafield definition validation.
    ///
    ///For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
    ///and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.
    ///
    ///Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
    ///</summary>
    public class MetafieldDefinitionValidation : GraphQLObject<MetafieldDefinitionValidation>
    {
        ///<summary>
        ///The validation name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The name for the metafield type of this validation.
        ///</summary>
        public string? type { get; set; }
        ///<summary>
        ///The validation value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Possible metafield definition validation statuses.
    ///</summary>
    public enum MetafieldDefinitionValidationStatus
    {
        ///<summary>
        ///All of this definition's metafields are valid.
        ///</summary>
        ALL_VALID,
        ///<summary>
        ///Asynchronous validation of this definition's metafields is in progress.
        ///</summary>
        IN_PROGRESS,
        ///<summary>
        ///Some of this definition's metafields are invalid.
        ///</summary>
        SOME_INVALID,
    }

    ///<summary>
    ///Return type for `metafieldDelete` mutation.
    ///</summary>
    public class MetafieldDeletePayload : GraphQLObject<MetafieldDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted metafield.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Metafield and a cursor during pagination.
    ///</summary>
    public class MetafieldEdge : GraphQLObject<MetafieldEdge>, IEdge<Metafield>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MetafieldEdge.
        ///</summary>
        public Metafield? node { get; set; }
    }

    ///<summary>
    ///Possible access levels for explicit metafield access grants.
    ///</summary>
    public enum MetafieldGrantAccessLevel
    {
        ///<summary>
        ///Read metafield access.
        ///</summary>
        READ,
        ///<summary>
        ///Read and write metafield access.
        ///</summary>
        READ_WRITE,
    }

    ///<summary>
    ///Possible types of a metafield's owner resource.
    ///</summary>
    public enum MetafieldOwnerType
    {
        ///<summary>
        ///The Api Permission metafield owner type.
        ///</summary>
        API_PERMISSION,
        ///<summary>
        ///The Company metafield owner type.
        ///</summary>
        COMPANY,
        ///<summary>
        ///The Company Location metafield owner type.
        ///</summary>
        COMPANY_LOCATION,
        ///<summary>
        ///The Payment Customization metafield owner type.
        ///</summary>
        PAYMENT_CUSTOMIZATION,
        ///<summary>
        ///The Validation metafield owner type.
        ///</summary>
        VALIDATION,
        ///<summary>
        ///The Customer metafield owner type.
        ///</summary>
        CUSTOMER,
        ///<summary>
        ///The Delivery Customization metafield owner type.
        ///</summary>
        DELIVERY_CUSTOMIZATION,
        ///<summary>
        ///The Draft Order metafield owner type.
        ///</summary>
        DRAFTORDER,
        ///<summary>
        ///The Market metafield owner type.
        ///</summary>
        MARKET,
        ///<summary>
        ///The Collection metafield owner type.
        ///</summary>
        COLLECTION,
        ///<summary>
        ///The Media Image metafield owner type.
        ///</summary>
        MEDIA_IMAGE,
        ///<summary>
        ///The Product Image metafield owner type.
        ///</summary>
        [Obsolete("`PRODUCTIMAGE` is deprecated. Use `MEDIA_IMAGE` instead.")]
        PRODUCTIMAGE,
        ///<summary>
        ///The Product metafield owner type.
        ///</summary>
        PRODUCT,
        ///<summary>
        ///The Product Variant metafield owner type.
        ///</summary>
        PRODUCTVARIANT,
        ///<summary>
        ///The Article metafield owner type.
        ///</summary>
        ARTICLE,
        ///<summary>
        ///The Blog metafield owner type.
        ///</summary>
        BLOG,
        ///<summary>
        ///The Page metafield owner type.
        ///</summary>
        PAGE,
        ///<summary>
        ///The Fulfillment Constraint Rule metafield owner type.
        ///</summary>
        FULFILLMENT_CONSTRAINT_RULE,
        ///<summary>
        ///The Order Routing Location Rule metafield owner type.
        ///</summary>
        ORDER_ROUTING_LOCATION_RULE,
        ///<summary>
        ///The Discount metafield owner type.
        ///</summary>
        DISCOUNT,
        ///<summary>
        ///The Order metafield owner type.
        ///</summary>
        ORDER,
        ///<summary>
        ///The Location metafield owner type.
        ///</summary>
        LOCATION,
        ///<summary>
        ///The Shop metafield owner type.
        ///</summary>
        SHOP,
    }

    ///<summary>
    ///The resource referenced by the metafield value.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Collection), typeDiscriminator: "Collection")]
    [JsonDerivedType(typeof(GenericFile), typeDiscriminator: "GenericFile")]
    [JsonDerivedType(typeof(MediaImage), typeDiscriminator: "MediaImage")]
    [JsonDerivedType(typeof(Metaobject), typeDiscriminator: "Metaobject")]
    [JsonDerivedType(typeof(OnlineStorePage), typeDiscriminator: "OnlineStorePage")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    [JsonDerivedType(typeof(Video), typeDiscriminator: "Video")]
    public interface IMetafieldReference : IGraphQLObject
    {
        public Collection? AsCollection() => this as Collection;
        public GenericFile? AsGenericFile() => this as GenericFile;
        public MediaImage? AsMediaImage() => this as MediaImage;
        public Metaobject? AsMetaobject() => this as Metaobject;
        public OnlineStorePage? AsOnlineStorePage() => this as OnlineStorePage;
        public Product? AsProduct() => this as Product;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        public Video? AsVideo() => this as Video;
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MetafieldReferences.
    ///</summary>
    public class MetafieldReferenceConnection : GraphQLObject<MetafieldReferenceConnection>, IConnectionWithNodesAndEdges<MetafieldReferenceEdge, IMetafieldReference>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MetafieldReferenceEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MetafieldReferenceEdge.
        ///</summary>
        public IEnumerable<IMetafieldReference>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MetafieldReference and a cursor during pagination.
    ///</summary>
    public class MetafieldReferenceEdge : GraphQLObject<MetafieldReferenceEdge>, IEdge<IMetafieldReference>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MetafieldReferenceEdge.
        ///</summary>
        public IMetafieldReference? node { get; set; }
    }

    ///<summary>
    ///Types of resources that may use metafields to reference other resources.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AppInstallation), typeDiscriminator: "AppInstallation")]
    [JsonDerivedType(typeof(Collection), typeDiscriminator: "Collection")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(DeliveryCustomization), typeDiscriminator: "DeliveryCustomization")]
    [JsonDerivedType(typeof(DiscountAutomaticNode), typeDiscriminator: "DiscountAutomaticNode")]
    [JsonDerivedType(typeof(DiscountCodeNode), typeDiscriminator: "DiscountCodeNode")]
    [JsonDerivedType(typeof(DiscountNode), typeDiscriminator: "DiscountNode")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(FulfillmentOrder), typeDiscriminator: "FulfillmentOrder")]
    [JsonDerivedType(typeof(Location), typeDiscriminator: "Location")]
    [JsonDerivedType(typeof(Market), typeDiscriminator: "Market")]
    [JsonDerivedType(typeof(Metaobject), typeDiscriminator: "Metaobject")]
    [JsonDerivedType(typeof(OnlineStoreArticle), typeDiscriminator: "OnlineStoreArticle")]
    [JsonDerivedType(typeof(OnlineStoreBlog), typeDiscriminator: "OnlineStoreBlog")]
    [JsonDerivedType(typeof(OnlineStorePage), typeDiscriminator: "OnlineStorePage")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    [JsonDerivedType(typeof(PaymentCustomization), typeDiscriminator: "PaymentCustomization")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    [JsonDerivedType(typeof(Shop), typeDiscriminator: "Shop")]
    public interface IMetafieldReferencer : IGraphQLObject
    {
        public AppInstallation? AsAppInstallation() => this as AppInstallation;
        public Collection? AsCollection() => this as Collection;
        public Customer? AsCustomer() => this as Customer;
        public DeliveryCustomization? AsDeliveryCustomization() => this as DeliveryCustomization;
        public DiscountAutomaticNode? AsDiscountAutomaticNode() => this as DiscountAutomaticNode;
        public DiscountCodeNode? AsDiscountCodeNode() => this as DiscountCodeNode;
        public DiscountNode? AsDiscountNode() => this as DiscountNode;
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public FulfillmentOrder? AsFulfillmentOrder() => this as FulfillmentOrder;
        public Location? AsLocation() => this as Location;
        public Market? AsMarket() => this as Market;
        public Metaobject? AsMetaobject() => this as Metaobject;
        public OnlineStoreArticle? AsOnlineStoreArticle() => this as OnlineStoreArticle;
        public OnlineStoreBlog? AsOnlineStoreBlog() => this as OnlineStoreBlog;
        public OnlineStorePage? AsOnlineStorePage() => this as OnlineStorePage;
        public Order? AsOrder() => this as Order;
        public PaymentCustomization? AsPaymentCustomization() => this as PaymentCustomization;
        public Product? AsProduct() => this as Product;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        public Shop? AsShop() => this as Shop;
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
    }

    ///<summary>
    ///Defines a relation between two resources via a reference metafield.
    ///The referencer owns the joining field with a given namespace and key,
    ///while the target is referenced by the field.
    ///</summary>
    public class MetafieldRelation : GraphQLObject<MetafieldRelation>
    {
        ///<summary>
        ///The key of the field making the reference.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The name of the field making the reference.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The namespace of the metafield making the reference, or type of the metaobject.
        ///</summary>
        public string? @namespace { get; set; }
        ///<summary>
        ///The resource making the reference.
        ///</summary>
        public IMetafieldReferencer? referencer { get; set; }
        ///<summary>
        ///The referenced resource.
        ///</summary>
        public IMetafieldReference? target { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MetafieldRelations.
    ///</summary>
    public class MetafieldRelationConnection : GraphQLObject<MetafieldRelationConnection>, IConnectionWithNodesAndEdges<MetafieldRelationEdge, MetafieldRelation>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MetafieldRelationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MetafieldRelationEdge.
        ///</summary>
        public IEnumerable<MetafieldRelation>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MetafieldRelation and a cursor during pagination.
    ///</summary>
    public class MetafieldRelationEdge : GraphQLObject<MetafieldRelationEdge>, IEdge<MetafieldRelation>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MetafieldRelationEdge.
        ///</summary>
        public MetafieldRelation? node { get; set; }
    }

    ///<summary>
    ///Defines how the metafields of a definition can be accessed in Storefront API surface areas, including Liquid and the GraphQL Storefront API.
    ///</summary>
    public enum MetafieldStorefrontAccess
    {
        ///<summary>
        ///Metafields are accessible in the GraphQL Storefront API and online store Liquid templates.
        ///</summary>
        PUBLIC_READ,
        ///<summary>
        ///Metafields are not accessible in any Storefront API surface area.
        ///</summary>
        NONE,
    }

    ///<summary>
    ///By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
    ///you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
    ///of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.
    ///
    ///Learn about [exposing metafields in the Storefront API]
    ///(https://shopify.dev/custom-storefronts/products-collections/metafields)
    ///for more details.
    ///</summary>
    public class MetafieldStorefrontVisibility : GraphQLObject<MetafieldStorefrontVisibility>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The date and time when the metafield was set to visible in the Storefront API.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The key of a metafield to make visible in the Storefront API.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The namespace of a metafield to make visible in the Storefront API.
        ///</summary>
        public string? @namespace { get; set; }
        ///<summary>
        ///The owner type of a metafield to make visible in the Storefront API.
        ///</summary>
        public MetafieldOwnerType? ownerType { get; set; }
        ///<summary>
        ///The date and time when the `MetafieldStorefrontVisilibty` record was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MetafieldStorefrontVisibilities.
    ///</summary>
    public class MetafieldStorefrontVisibilityConnection : GraphQLObject<MetafieldStorefrontVisibilityConnection>, IConnectionWithNodesAndEdges<MetafieldStorefrontVisibilityEdge, MetafieldStorefrontVisibility>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MetafieldStorefrontVisibilityEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MetafieldStorefrontVisibilityEdge.
        ///</summary>
        public IEnumerable<MetafieldStorefrontVisibility>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `metafieldStorefrontVisibilityCreate` mutation.
    ///</summary>
    public class MetafieldStorefrontVisibilityCreatePayload : GraphQLObject<MetafieldStorefrontVisibilityCreatePayload>
    {
        ///<summary>
        ///The `MetafieldStorefrontVisibility` that was created.
        ///</summary>
        public MetafieldStorefrontVisibility? metafieldStorefrontVisibility { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `metafieldStorefrontVisibilityDelete` mutation.
    ///</summary>
    public class MetafieldStorefrontVisibilityDeletePayload : GraphQLObject<MetafieldStorefrontVisibilityDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted `MetafieldStorefrontVisibility` record.
        ///</summary>
        public string? deletedMetafieldStorefrontVisibilityId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MetafieldStorefrontVisibility and a cursor during pagination.
    ///</summary>
    public class MetafieldStorefrontVisibilityEdge : GraphQLObject<MetafieldStorefrontVisibilityEdge>, IEdge<MetafieldStorefrontVisibility>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MetafieldStorefrontVisibilityEdge.
        ///</summary>
        public MetafieldStorefrontVisibility? node { get; set; }
    }

    ///<summary>
    ///Possible metafield validation statuses.
    ///</summary>
    public enum MetafieldValidationStatus
    {
        ///<summary>
        ///Any validation status (valid or invalid).
        ///</summary>
        ANY,
        ///<summary>
        ///Valid (according to definition).
        ///</summary>
        VALID,
        ///<summary>
        ///Invalid (according to definition).
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///Legacy type information for the stored value.
    ///Replaced by `type`.
    ///</summary>
    public enum MetafieldValueType
    {
        ///<summary>
        ///A text field.
        ///</summary>
        STRING,
        ///<summary>
        ///A whole number.
        ///</summary>
        INTEGER,
        ///<summary>
        ///A JSON string.
        ///</summary>
        JSON_STRING,
        ///<summary>
        ///A `true` or `false` value.
        ///</summary>
        BOOLEAN,
    }

    ///<summary>
    ///Return type for `metafieldsSet` mutation.
    ///</summary>
    public class MetafieldsSetPayload : GraphQLObject<MetafieldsSetPayload>
    {
        ///<summary>
        ///The list of metafields that were set.
        ///</summary>
        public IEnumerable<Metafield>? metafields { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetafieldsSetUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `MetafieldsSet`.
    ///</summary>
    public class MetafieldsSetUserError : GraphQLObject<MetafieldsSetUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MetafieldsSetUserErrorCode? code { get; set; }
        ///<summary>
        ///The index of the array element that's causing the error.
        ///</summary>
        public int? elementIndex { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MetafieldsSetUserError`.
    ///</summary>
    public enum MetafieldsSetUserErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value should be less than or equal to the maximum value allowed.
        ///</summary>
        LESS_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The value is invalid for metafield type or for definition options.
        ///</summary>
        INVALID_VALUE,
        ///<summary>
        ///The type is invalid.
        ///</summary>
        INVALID_TYPE,
        ///<summary>
        ///ApiPermission metafields can only be created or updated by the app owner.
        ///</summary>
        APP_NOT_AUTHORIZED,
        ///<summary>
        ///The metafield violates a capability restriction.
        ///</summary>
        CAPABILITY_VIOLATION,
    }

    ///<summary>
    ///Provides an object instance represented by a MetaobjectDefinition.
    ///</summary>
    public class Metaobject : GraphQLObject<Metaobject>, INode, IMetafieldReference, IMetafieldReferencer
    {
        ///<summary>
        ///Metaobject capabilities for this Metaobject.
        ///</summary>
        public MetaobjectCapabilityData? capabilities { get; set; }
        ///<summary>
        ///The app used to create the object.
        ///</summary>
        public App? createdBy { get; set; }
        ///<summary>
        ///The app used to create the object.
        ///</summary>
        public App? createdByApp { get; set; }
        ///<summary>
        ///The staff member who created the metaobject.
        ///</summary>
        public StaffMember? createdByStaff { get; set; }
        ///<summary>
        ///The MetaobjectDefinition that models this object type.
        ///</summary>
        public MetaobjectDefinition? definition { get; set; }
        ///<summary>
        ///The preferred display name field value of the metaobject.
        ///</summary>
        public string? displayName { get; set; }
        ///<summary>
        ///The field for an object key, or null if the key has no field definition.
        ///</summary>
        public MetaobjectField? field { get; set; }
        ///<summary>
        ///All ordered fields of the metaobject with their definitions and values.
        ///</summary>
        public IEnumerable<MetaobjectField>? fields { get; set; }
        ///<summary>
        ///The unique handle of the object, useful as a custom ID.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///List of back references metafields that belong to the resource.
        ///</summary>
        public MetafieldRelationConnection? referencedBy { get; set; }

        ///<summary>
        ///The staff member who created the metaobject.
        ///</summary>
        [Obsolete("Use `createdByStaff` instead.")]
        public StaffMember? staffMember { get; set; }
        ///<summary>
        ///The recommended field to visually represent this metaobject. May be a file reference or color         field.
        ///</summary>
        public MetaobjectField? thumbnailField { get; set; }
        ///<summary>
        ///The type of the metaobject.
        ///</summary>
        public string? type { get; set; }
        ///<summary>
        ///When the object was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Provides metaobject definition's access configuration.
    ///</summary>
    public class MetaobjectAccess : GraphQLObject<MetaobjectAccess>
    {
        ///<summary>
        ///Access configuration for Admin API surface areas, including the GraphQL Admin API.
        ///</summary>
        public MetaobjectAdminAccess? admin { get; set; }
        ///<summary>
        ///Access configuration for Storefront surface areas, including the GraphQL Storefront API and Liquid.
        ///</summary>
        public MetaobjectStorefrontAccess? storefront { get; set; }
    }

    ///<summary>
    ///Defines how the metaobjects of a definition can be accessed in admin API surface areas.
    ///</summary>
    public enum MetaobjectAdminAccess
    {
        ///<summary>
        ///Only the application that owns a metaobject can read and write to it.
        ///</summary>
        PRIVATE,
        ///<summary>
        ///Applications that act on behalf of merchants can read metaobjects.
        ///Only the owning application can write metaobjects.
        ///</summary>
        MERCHANT_READ,
        ///<summary>
        ///The owning application, as well as applications that act on behalf of merchants can read and write metaobjects.
        ///No other applications can read or write metaobjects.
        ///</summary>
        MERCHANT_READ_WRITE,
        ///<summary>
        ///All applications with the `metaobjects` access scope can read metaobjects.
        ///Only the owning application can write metaobjects.
        ///</summary>
        PUBLIC_READ,
        ///<summary>
        ///All applications with the `metaobjects` access scope can read and write metaobjects.
        ///</summary>
        PUBLIC_READ_WRITE,
    }

    ///<summary>
    ///Return type for `metaobjectBulkDelete` mutation.
    ///</summary>
    public class MetaobjectBulkDeletePayload : GraphQLObject<MetaobjectBulkDeletePayload>
    {
        ///<summary>
        ///The asynchronous job that deletes the metaobjects.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Provides the capabilities of a metaobject definition.
    ///</summary>
    public class MetaobjectCapabilities : GraphQLObject<MetaobjectCapabilities>
    {
        ///<summary>
        ///Indicates whether a metaobject definition can be displayed as a page on the Online Store.
        ///</summary>
        public MetaobjectCapabilitiesOnlineStore? onlineStore { get; set; }
        ///<summary>
        ///Indicate whether a metaobject definition is publishable.
        ///</summary>
        public MetaobjectCapabilitiesPublishable? publishable { get; set; }
        ///<summary>
        ///Indicate whether a metaobject definition is renderable and exposes SEO data.
        ///</summary>
        public MetaobjectCapabilitiesRenderable? renderable { get; set; }
        ///<summary>
        ///Indicate whether a metaobject definition is translatable.
        ///</summary>
        public MetaobjectCapabilitiesTranslatable? translatable { get; set; }
    }

    ///<summary>
    ///The Online Store capability of a metaobject definition.
    ///</summary>
    public class MetaobjectCapabilitiesOnlineStore : GraphQLObject<MetaobjectCapabilitiesOnlineStore>
    {
        ///<summary>
        ///The data associated with the Online Store capability.
        ///</summary>
        public MetaobjectCapabilityDefinitionDataOnlineStore? data { get; set; }
        ///<summary>
        ///Indicates if the capability is enabled.
        ///</summary>
        public bool? enabled { get; set; }
    }

    ///<summary>
    ///The publishable capability of a metaobject definition.
    ///</summary>
    public class MetaobjectCapabilitiesPublishable : GraphQLObject<MetaobjectCapabilitiesPublishable>
    {
        ///<summary>
        ///Indicates if the capability is enabled.
        ///</summary>
        public bool? enabled { get; set; }
    }

    ///<summary>
    ///The renderable capability of a metaobject definition.
    ///</summary>
    public class MetaobjectCapabilitiesRenderable : GraphQLObject<MetaobjectCapabilitiesRenderable>
    {
        ///<summary>
        ///The data associated with the renderable capability.
        ///</summary>
        public MetaobjectCapabilityDefinitionDataRenderable? data { get; set; }
        ///<summary>
        ///Indicates if the capability is enabled.
        ///</summary>
        public bool? enabled { get; set; }
    }

    ///<summary>
    ///The translatable capability of a metaobject definition.
    ///</summary>
    public class MetaobjectCapabilitiesTranslatable : GraphQLObject<MetaobjectCapabilitiesTranslatable>
    {
        ///<summary>
        ///Indicates if the capability is enabled.
        ///</summary>
        public bool? enabled { get; set; }
    }

    ///<summary>
    ///Provides the capabilities of a metaobject.
    ///</summary>
    public class MetaobjectCapabilityData : GraphQLObject<MetaobjectCapabilityData>
    {
        ///<summary>
        ///The Online Store capability for this metaobject.
        ///</summary>
        public MetaobjectCapabilityDataOnlineStore? onlineStore { get; set; }
        ///<summary>
        ///The publishable capability for this metaobject.
        ///</summary>
        public MetaobjectCapabilityDataPublishable? publishable { get; set; }
    }

    ///<summary>
    ///The Online Store capability for the parent metaobject.
    ///</summary>
    public class MetaobjectCapabilityDataOnlineStore : GraphQLObject<MetaobjectCapabilityDataOnlineStore>
    {
        ///<summary>
        ///The theme template used when viewing the metaobject in a store.
        ///</summary>
        public string? templateSuffix { get; set; }
    }

    ///<summary>
    ///The publishable capability for the parent metaobject.
    ///</summary>
    public class MetaobjectCapabilityDataPublishable : GraphQLObject<MetaobjectCapabilityDataPublishable>
    {
        ///<summary>
        ///The visibility status of this metaobject across all channels.
        ///</summary>
        public MetaobjectStatus? status { get; set; }
    }

    ///<summary>
    ///The Online Store capability data for the metaobject definition.
    ///</summary>
    public class MetaobjectCapabilityDefinitionDataOnlineStore : GraphQLObject<MetaobjectCapabilityDefinitionDataOnlineStore>
    {
        ///<summary>
        ///Flag indicating if a sufficient number of redirects are available to redirect all published entries.
        ///</summary>
        public bool? canCreateRedirects { get; set; }
        ///<summary>
        ///The URL handle for accessing pages of this metaobject type in the Online Store.
        ///</summary>
        public string? urlHandle { get; set; }
    }

    ///<summary>
    ///The renderable capability data for the metaobject definition.
    ///</summary>
    public class MetaobjectCapabilityDefinitionDataRenderable : GraphQLObject<MetaobjectCapabilityDefinitionDataRenderable>
    {
        ///<summary>
        ///The metaobject field used as an alias for the SEO page description.
        ///</summary>
        public string? metaDescriptionKey { get; set; }
        ///<summary>
        ///The metaobject field used as an alias for the SEO page title.
        ///</summary>
        public string? metaTitleKey { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Metaobjects.
    ///</summary>
    public class MetaobjectConnection : GraphQLObject<MetaobjectConnection>, IConnectionWithNodesAndEdges<MetaobjectEdge, Metaobject>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MetaobjectEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MetaobjectEdge.
        ///</summary>
        public IEnumerable<Metaobject>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `metaobjectCreate` mutation.
    ///</summary>
    public class MetaobjectCreatePayload : GraphQLObject<MetaobjectCreatePayload>
    {
        ///<summary>
        ///The created metaobject.
        ///</summary>
        public Metaobject? metaobject { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Provides the definition of a generic object structure composed of metafields.
    ///</summary>
    public class MetaobjectDefinition : GraphQLObject<MetaobjectDefinition>, INode
    {
        ///<summary>
        ///Access configuration for the metaobject definition.
        ///</summary>
        public MetaobjectAccess? access { get; set; }
        ///<summary>
        ///The capabilities of the metaobject definition.
        ///</summary>
        public MetaobjectCapabilities? capabilities { get; set; }
        ///<summary>
        ///The app used to create the metaobject definition.
        ///</summary>
        public App? createdByApp { get; set; }
        ///<summary>
        ///The staff member who created the metaobject definition.
        ///</summary>
        public StaffMember? createdByStaff { get; set; }
        ///<summary>
        ///The administrative description.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The key of a field to reference as the display name for each object.
        ///</summary>
        public string? displayNameKey { get; set; }
        ///<summary>
        ///The fields defined for this object type.
        ///</summary>
        public IEnumerable<MetaobjectFieldDefinition>? fieldDefinitions { get; set; }
        ///<summary>
        ///Whether this metaobject definition has field whose type can visually represent a metaobject with        the `thumbnailField`.
        ///</summary>
        public bool? hasThumbnailField { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///A paginated connection to the metaobjects associated with the definition.
        ///</summary>
        public MetaobjectConnection? metaobjects { get; set; }
        ///<summary>
        ///The count of metaobjects created for the definition.
        ///</summary>
        public int? metaobjectsCount { get; set; }
        ///<summary>
        ///The human-readable name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The type of the object definition. Defines the namespace of associated metafields.
        ///</summary>
        public string? type { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple MetaobjectDefinitions.
    ///</summary>
    public class MetaobjectDefinitionConnection : GraphQLObject<MetaobjectDefinitionConnection>, IConnectionWithNodesAndEdges<MetaobjectDefinitionEdge, MetaobjectDefinition>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<MetaobjectDefinitionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in MetaobjectDefinitionEdge.
        ///</summary>
        public IEnumerable<MetaobjectDefinition>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `metaobjectDefinitionCreate` mutation.
    ///</summary>
    public class MetaobjectDefinitionCreatePayload : GraphQLObject<MetaobjectDefinitionCreatePayload>
    {
        ///<summary>
        ///The created metaobject definition.
        ///</summary>
        public MetaobjectDefinition? metaobjectDefinition { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `metaobjectDefinitionDelete` mutation.
    ///</summary>
    public class MetaobjectDefinitionDeletePayload : GraphQLObject<MetaobjectDefinitionDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted metaobjects definition.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination.
    ///</summary>
    public class MetaobjectDefinitionEdge : GraphQLObject<MetaobjectDefinitionEdge>, IEdge<MetaobjectDefinition>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MetaobjectDefinitionEdge.
        ///</summary>
        public MetaobjectDefinition? node { get; set; }
    }

    ///<summary>
    ///Return type for `metaobjectDefinitionUpdate` mutation.
    ///</summary>
    public class MetaobjectDefinitionUpdatePayload : GraphQLObject<MetaobjectDefinitionUpdatePayload>
    {
        ///<summary>
        ///The updated metaobject definition.
        ///</summary>
        public MetaobjectDefinition? metaobjectDefinition { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `metaobjectDelete` mutation.
    ///</summary>
    public class MetaobjectDeletePayload : GraphQLObject<MetaobjectDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted metaobject.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Metaobject and a cursor during pagination.
    ///</summary>
    public class MetaobjectEdge : GraphQLObject<MetaobjectEdge>, IEdge<Metaobject>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of MetaobjectEdge.
        ///</summary>
        public Metaobject? node { get; set; }
    }

    ///<summary>
    ///Provides a field definition and the data value assigned to it.
    ///</summary>
    public class MetaobjectField : GraphQLObject<MetaobjectField>
    {
        ///<summary>
        ///The field definition for this object key.
        ///</summary>
        public MetaobjectFieldDefinition? definition { get; set; }
        ///<summary>
        ///The object key of this field.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///For resource reference fields, provides the referenced object.
        ///</summary>
        public IMetafieldReference? reference { get; set; }
        ///<summary>
        ///For resource reference list fields, provides the list of referenced objects.
        ///</summary>
        public MetafieldReferenceConnection? references { get; set; }
        ///<summary>
        ///For file reference or color fields, provides visual attributes for this field.
        ///</summary>
        public MetaobjectThumbnail? thumbnail { get; set; }
        ///<summary>
        ///The type of the field.
        ///</summary>
        public string? type { get; set; }
        ///<summary>
        ///The assigned field value, always stored as a string regardless of the field type.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Defines a field for a MetaobjectDefinition with properties
    ///such as the field's data type and validations.
    ///</summary>
    public class MetaobjectFieldDefinition : GraphQLObject<MetaobjectFieldDefinition>
    {
        ///<summary>
        ///The administrative description.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A key name used to identify the field within the metaobject composition.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The human-readable name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///Required status of the field within the metaobject composition.
        ///</summary>
        public bool? required { get; set; }
        ///<summary>
        ///The type of data that the field stores.
        ///</summary>
        public MetafieldDefinitionType? type { get; set; }
        ///<summary>
        ///A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
        ///the field. For example, a field with the type `date` can set a minimum date requirement.
        ///</summary>
        public IEnumerable<MetafieldDefinitionValidation>? validations { get; set; }
    }

    ///<summary>
    ///Defines visibility status for metaobjects.
    ///</summary>
    public enum MetaobjectStatus
    {
        ///<summary>
        ///The metaobjects is an internal record.
        ///</summary>
        DRAFT,
        ///<summary>
        ///The metaobjects is active for public use.
        ///</summary>
        ACTIVE,
    }

    ///<summary>
    ///Defines how the metaobjects of a definition can be accessed in Storefront API surface areas, including Liquid and the GraphQL Storefront API.
    ///</summary>
    public enum MetaobjectStorefrontAccess
    {
        ///<summary>
        ///Metaobjects are not accessible in any Storefront API surface area.
        ///</summary>
        NONE,
        ///<summary>
        ///Metaobjects are accessible in the GraphQL Storefront API by any application with the `unauthenticated_read_metaobjects` access scope.
        ///Metaobjects are accessible in online store Liquid templates.
        ///</summary>
        PUBLIC_READ,
    }

    ///<summary>
    ///Provides attributes for visual representation.
    ///</summary>
    public class MetaobjectThumbnail : GraphQLObject<MetaobjectThumbnail>
    {
        ///<summary>
        ///The file to be used for visual representation of this metaobject.
        ///</summary>
        public IFile? file { get; set; }
        ///<summary>
        ///The hexadecimal color code to be used for respresenting this metaobject.
        ///</summary>
        public string? hex { get; set; }
    }

    ///<summary>
    ///Return type for `metaobjectUpdate` mutation.
    ///</summary>
    public class MetaobjectUpdatePayload : GraphQLObject<MetaobjectUpdatePayload>
    {
        ///<summary>
        ///The updated metaobject.
        ///</summary>
        public Metaobject? metaobject { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `metaobjectUpsert` mutation.
    ///</summary>
    public class MetaobjectUpsertPayload : GraphQLObject<MetaobjectUpsertPayload>
    {
        ///<summary>
        ///The created or updated metaobject.
        ///</summary>
        public Metaobject? metaobject { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Defines errors encountered while managing metaobject resources.
    ///</summary>
    public class MetaobjectUserError : GraphQLObject<MetaobjectUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public MetaobjectUserErrorCode? code { get; set; }
        ///<summary>
        ///The index of the failing list element in an array.
        ///</summary>
        public int? elementIndex { get; set; }
        ///<summary>
        ///The key of the failing object element.
        ///</summary>
        public string? elementKey { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `MetaobjectUserError`.
    ///</summary>
    public enum MetaobjectUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The metafield type is invalid.
        ///</summary>
        INVALID_TYPE,
        ///<summary>
        ///The value is invalid for the metafield type or the definition options.
        ///</summary>
        INVALID_VALUE,
        ///<summary>
        ///The value for the metafield definition option was invalid.
        ///</summary>
        INVALID_OPTION,
        ///<summary>
        ///Duplicate inputs were provided for this field key.
        ///</summary>
        DUPLICATE_FIELD_INPUT,
        ///<summary>
        ///No metaobject definition found for this type.
        ///</summary>
        UNDEFINED_OBJECT_TYPE,
        ///<summary>
        ///No field definition found for this key.
        ///</summary>
        UNDEFINED_OBJECT_FIELD,
        ///<summary>
        ///The specified field key is already in use.
        ///</summary>
        OBJECT_FIELD_TAKEN,
        ///<summary>
        ///Missing required fields were found for this object.
        ///</summary>
        OBJECT_FIELD_REQUIRED,
        ///<summary>
        ///The requested record couldn't be found.
        ///</summary>
        RECORD_NOT_FOUND,
        ///<summary>
        ///An unexpected error occurred.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///The maximum number of metaobjects definitions has been exceeded.
        ///</summary>
        MAX_DEFINITIONS_EXCEEDED,
        ///<summary>
        ///The maximum number of metaobjects per shop has been exceeded.
        ///</summary>
        MAX_OBJECTS_EXCEEDED,
        ///<summary>
        ///The targeted object cannot be modified.
        ///</summary>
        IMMUTABLE,
        ///<summary>
        ///Not authorized.
        ///</summary>
        NOT_AUTHORIZED,
        ///<summary>
        ///The provided name is reserved for system use.
        ///</summary>
        RESERVED_NAME,
        ///<summary>
        ///The capability you are using is not enabled.
        ///</summary>
        CAPABILITY_NOT_ENABLED,
        ///<summary>
        ///The Online Store URL handle is already taken.
        ///</summary>
        URL_HANDLE_TAKEN,
        ///<summary>
        ///The Online Store URL handle is invalid.
        ///</summary>
        URL_HANDLE_INVALID,
        ///<summary>
        ///The Online Store URL handle cannot be blank.
        ///</summary>
        URL_HANDLE_BLANK,
        ///<summary>
        ///Renderable data input is referencing an invalid field.
        ///</summary>
        FIELD_TYPE_INVALID,
        ///<summary>
        ///The input is missing required keys.
        ///</summary>
        MISSING_REQUIRED_KEYS,
    }

    ///<summary>
    ///The set of valid sort keys for the MethodDefinition query.
    ///</summary>
    public enum MethodDefinitionSortKeys
    {
        ///<summary>
        ///Sort by the `rate_provider_type` value.
        ///</summary>
        RATE_PROVIDER_TYPE,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Represents a Shopify hosted 3D model.
    ///</summary>
    public class Model3d : GraphQLObject<Model3d>, IMedia, INode
    {
        ///<summary>
        ///A word or phrase to share the nature or contents of a media.
        ///</summary>
        public string? alt { get; set; }
        ///<summary>
        ///The 3d model's bounding box information.
        ///</summary>
        public Model3dBoundingBox? boundingBox { get; set; }
        ///<summary>
        ///The 3d model's filename.
        ///</summary>
        public string? filename { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The media content type.
        ///</summary>
        public MediaContentType? mediaContentType { get; set; }
        ///<summary>
        ///Any errors which have occurred on the media.
        ///</summary>
        public IEnumerable<MediaError>? mediaErrors { get; set; }
        ///<summary>
        ///The warnings attached to the media.
        ///</summary>
        public IEnumerable<MediaWarning>? mediaWarnings { get; set; }
        ///<summary>
        ///The 3d model's original source.
        ///</summary>
        public Model3dSource? originalSource { get; set; }
        ///<summary>
        ///The preview image for the media.
        ///</summary>
        public MediaPreviewImage? preview { get; set; }
        ///<summary>
        ///The 3d model's sources.
        ///</summary>
        public IEnumerable<Model3dSource>? sources { get; set; }
        ///<summary>
        ///Current status of the media.
        ///</summary>
        public MediaStatus? status { get; set; }
    }

    ///<summary>
    ///Bounding box information of a 3d model.
    ///</summary>
    public class Model3dBoundingBox : GraphQLObject<Model3dBoundingBox>
    {
        ///<summary>
        ///Size in meters of the smallest volume which contains the 3d model.
        ///</summary>
        public Vector3? size { get; set; }
    }

    ///<summary>
    ///A source for a Shopify-hosted 3d model.
    ///
    ///Types of sources include GLB and USDZ formatted 3d models, where the former
    ///is an original 3d model and the latter has been converted from the original.
    ///
    ///If the original source is in GLB format and over 15 MBs in size, then both the
    ///original and the USDZ formatted source are optimized to reduce the file size.
    ///</summary>
    public class Model3dSource : GraphQLObject<Model3dSource>
    {
        ///<summary>
        ///The 3d model source's filesize.
        ///</summary>
        public int? filesize { get; set; }
        ///<summary>
        ///The 3d model source's format.
        ///</summary>
        public string? format { get; set; }
        ///<summary>
        ///The 3d model source's MIME type.
        ///</summary>
        public string? mimeType { get; set; }
        ///<summary>
        ///The 3d model source's URL.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
    ///when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
    ///</summary>
    public class MoneyBag : GraphQLObject<MoneyBag>
    {
        ///<summary>
        ///Amount in presentment currency.
        ///</summary>
        public MoneyV2? presentmentMoney { get; set; }
        ///<summary>
        ///Amount in shop currency.
        ///</summary>
        public MoneyV2? shopMoney { get; set; }
    }

    ///<summary>
    ///A monetary value with currency.
    ///</summary>
    public class MoneyV2 : GraphQLObject<MoneyV2>, IDeliveryConditionCriteria, IPricingValue, ISellingPlanCheckoutChargeValue, ISellingPlanPricingPolicyAdjustmentValue
    {
        ///<summary>
        ///Decimal money amount.
        ///</summary>
        public decimal? amount { get; set; }
        ///<summary>
        ///Currency of the money.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
    }

    ///<summary>
    ///The schema's entry point for all mutation operations.
    ///</summary>
    public class Mutation : GraphQLObject<Mutation>
    {
        ///<summary>
        ///Updates the email state value for an abandonment.
        ///</summary>
        [Obsolete("Use `abandonmentUpdateActivitiesDeliveryStatuses` instead.")]
        public AbandonmentEmailStateUpdatePayload? abandonmentEmailStateUpdate { get; set; }
        ///<summary>
        ///Updates the marketing activities delivery statuses for an abandonment.
        ///</summary>
        public AbandonmentUpdateActivitiesDeliveryStatusesPayload? abandonmentUpdateActivitiesDeliveryStatuses { get; set; }
        ///<summary>
        ///Charges a shop for features or services one time.
        ///This type of charge is recommended for apps that aren't billed on a recurring basis.
        ///Test and demo shops aren't charged.
        ///</summary>
        public AppPurchaseOneTimeCreatePayload? appPurchaseOneTimeCreate { get; set; }
        ///<summary>
        ///Cancels an app subscription on a store.
        ///</summary>
        public AppSubscriptionCancelPayload? appSubscriptionCancel { get; set; }
        ///<summary>
        ///Allows an app to charge a store for features or services on a recurring basis.
        ///</summary>
        public AppSubscriptionCreatePayload? appSubscriptionCreate { get; set; }
        ///<summary>
        ///Updates the capped amount on the usage pricing plan of an app subscription line item.
        ///</summary>
        public AppSubscriptionLineItemUpdatePayload? appSubscriptionLineItemUpdate { get; set; }
        ///<summary>
        ///Extends the trial of an app subscription.
        ///</summary>
        public AppSubscriptionTrialExtendPayload? appSubscriptionTrialExtend { get; set; }
        ///<summary>
        ///Enables an app to charge a store for features or services on a per-use basis.
        ///The usage charge value is counted towards the `cappedAmount` limit that was specified in the `appUsagePricingDetails` field when the app subscription was created.
        ///If you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a `Total price exceeds balance remaining` error is returned.
        ///</summary>
        public AppUsageRecordCreatePayload? appUsageRecordCreate { get; set; }
        ///<summary>
        ///Starts the cancelation process of a running bulk operation.
        ///
        ///There may be a short delay from when a cancelation starts until the operation is actually canceled.
        ///</summary>
        public BulkOperationCancelPayload? bulkOperationCancel { get; set; }
        ///<summary>
        ///Creates and runs a bulk operation mutation.
        ///
        ///To learn how to bulk import large volumes of data asynchronously, refer to the
        ///[bulk import data guide](https://shopify.dev/api/usage/bulk-operations/imports).
        ///</summary>
        public BulkOperationRunMutationPayload? bulkOperationRunMutation { get; set; }
        ///<summary>
        ///Creates and runs a bulk operation query.
        ///
        ///See the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
        ///</summary>
        public BulkOperationRunQueryPayload? bulkOperationRunQuery { get; set; }
        ///<summary>
        ///Creates product feedback for multiple products.
        ///</summary>
        public BulkProductResourceFeedbackCreatePayload? bulkProductResourceFeedbackCreate { get; set; }
        ///<summary>
        ///Create a CartTransform function to the Shop.
        ///</summary>
        public CartTransformCreatePayload? cartTransformCreate { get; set; }
        ///<summary>
        ///Destroy a cart transform function from the Shop.
        ///</summary>
        public CartTransformDeletePayload? cartTransformDelete { get; set; }
        ///<summary>
        ///Updates the context of a catalog.
        ///</summary>
        public CatalogContextUpdatePayload? catalogContextUpdate { get; set; }
        ///<summary>
        ///Creates a new catalog.
        ///</summary>
        public CatalogCreatePayload? catalogCreate { get; set; }
        ///<summary>
        ///Delete a catalog.
        ///</summary>
        public CatalogDeletePayload? catalogDelete { get; set; }
        ///<summary>
        ///Updates an existing catalog.
        ///</summary>
        public CatalogUpdatePayload? catalogUpdate { get; set; }
        ///<summary>
        ///Updates the checkout branding settings for a [checkout profile](https://shopify.dev/api/admin-graphql/unstable/queries/checkoutProfile). If the settings don't exist, then new settings are created. The checkout branding settings applied to a published checkout profile will be immediately visible within the store's checkout. The checkout branding settings applied to a draft checkout profile could be previewed within the admin checkout editor.
        ///</summary>
        public CheckoutBrandingUpsertPayload? checkoutBrandingUpsert { get; set; }
        ///<summary>
        ///Adds products to a collection.
        ///</summary>
        public CollectionAddProductsPayload? collectionAddProducts { get; set; }
        ///<summary>
        ///Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled.
        ///</summary>
        public CollectionAddProductsV2Payload? collectionAddProductsV2 { get; set; }
        ///<summary>
        ///Creates a collection.
        ///</summary>
        public CollectionCreatePayload? collectionCreate { get; set; }
        ///<summary>
        ///Deletes a collection.
        ///</summary>
        public CollectionDeletePayload? collectionDelete { get; set; }

        ///<summary>
        ///Publishes a collection to a channel.
        ///</summary>
        [Obsolete("Use `publishablePublish` instead.")]
        public CollectionPublishPayload? collectionPublish { get; set; }
        ///<summary>
        ///Removes a set of products from a given collection. The mutation can take a long time to run. Instead of returning an updated collection the mutation returns a job, which should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). For use with manual collections only.
        ///</summary>
        public CollectionRemoveProductsPayload? collectionRemoveProducts { get; set; }
        ///<summary>
        ///Asynchronously reorders a set of products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). The [`Collection.sortOrder`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-collection-sortorder) must be `MANUAL`. Displaced products will have their position altered in a consistent manner, with no gaps.
        ///</summary>
        public CollectionReorderProductsPayload? collectionReorderProducts { get; set; }

        ///<summary>
        ///Unpublishes a collection.
        ///</summary>
        [Obsolete("Use `publishableUnpublish` instead.")]
        public CollectionUnpublishPayload? collectionUnpublish { get; set; }
        ///<summary>
        ///Updates a collection.
        ///</summary>
        public CollectionUpdatePayload? collectionUpdate { get; set; }
        ///<summary>
        ///Deletes a list of companies.
        ///</summary>
        public CompaniesDeletePayload? companiesDelete { get; set; }
        ///<summary>
        ///Deletes a company address.
        ///</summary>
        public CompanyAddressDeletePayload? companyAddressDelete { get; set; }
        ///<summary>
        ///Assigns the customer as a company contact.
        ///</summary>
        public CompanyAssignCustomerAsContactPayload? companyAssignCustomerAsContact { get; set; }
        ///<summary>
        ///Assigns the main contact for the company.
        ///</summary>
        public CompanyAssignMainContactPayload? companyAssignMainContact { get; set; }
        ///<summary>
        ///Assigns a role to a contact for a location.
        ///</summary>
        public CompanyContactAssignRolePayload? companyContactAssignRole { get; set; }
        ///<summary>
        ///Assigns roles on a company contact.
        ///</summary>
        public CompanyContactAssignRolesPayload? companyContactAssignRoles { get; set; }
        ///<summary>
        ///Creates a company contact.
        ///</summary>
        public CompanyContactCreatePayload? companyContactCreate { get; set; }
        ///<summary>
        ///Deletes a company contact.
        ///</summary>
        public CompanyContactDeletePayload? companyContactDelete { get; set; }
        ///<summary>
        ///Removes a company contact from a Company.
        ///</summary>
        public CompanyContactRemoveFromCompanyPayload? companyContactRemoveFromCompany { get; set; }
        ///<summary>
        ///Revokes a role on a company contact.
        ///</summary>
        public CompanyContactRevokeRolePayload? companyContactRevokeRole { get; set; }
        ///<summary>
        ///Revokes roles on a company contact.
        ///</summary>
        public CompanyContactRevokeRolesPayload? companyContactRevokeRoles { get; set; }
        ///<summary>
        ///Sends the company contact a welcome email.
        ///</summary>
        public CompanyContactSendWelcomeEmailPayload? companyContactSendWelcomeEmail { get; set; }
        ///<summary>
        ///Updates a company contact.
        ///</summary>
        public CompanyContactUpdatePayload? companyContactUpdate { get; set; }
        ///<summary>
        ///Deletes one or more company contacts.
        ///</summary>
        public CompanyContactsDeletePayload? companyContactsDelete { get; set; }
        ///<summary>
        ///Creates a company.
        ///</summary>
        public CompanyCreatePayload? companyCreate { get; set; }
        ///<summary>
        ///Deletes a company.
        ///</summary>
        public CompanyDeletePayload? companyDelete { get; set; }
        ///<summary>
        ///Updates an address on a company location.
        ///</summary>
        public CompanyLocationAssignAddressPayload? companyLocationAssignAddress { get; set; }
        ///<summary>
        ///Assigns roles on a company location.
        ///</summary>
        public CompanyLocationAssignRolesPayload? companyLocationAssignRoles { get; set; }
        ///<summary>
        ///Assigns tax exemptions to the company location.
        ///</summary>
        public CompanyLocationAssignTaxExemptionsPayload? companyLocationAssignTaxExemptions { get; set; }
        ///<summary>
        ///Creates a company location.
        ///</summary>
        public CompanyLocationCreatePayload? companyLocationCreate { get; set; }
        ///<summary>
        ///Creates a tax registration for a company location.
        ///</summary>
        public CompanyLocationCreateTaxRegistrationPayload? companyLocationCreateTaxRegistration { get; set; }
        ///<summary>
        ///Deletes a company location.
        ///</summary>
        public CompanyLocationDeletePayload? companyLocationDelete { get; set; }
        ///<summary>
        ///Revokes roles on a company location.
        ///</summary>
        public CompanyLocationRevokeRolesPayload? companyLocationRevokeRoles { get; set; }
        ///<summary>
        ///Revokes tax exemptions from the company location.
        ///</summary>
        public CompanyLocationRevokeTaxExemptionsPayload? companyLocationRevokeTaxExemptions { get; set; }
        ///<summary>
        ///Revokes tax registration on a company location.
        ///</summary>
        public CompanyLocationRevokeTaxRegistrationPayload? companyLocationRevokeTaxRegistration { get; set; }
        ///<summary>
        ///Updates a company location.
        ///</summary>
        public CompanyLocationUpdatePayload? companyLocationUpdate { get; set; }
        ///<summary>
        ///Deletes a list of company locations.
        ///</summary>
        public CompanyLocationsDeletePayload? companyLocationsDelete { get; set; }
        ///<summary>
        ///Revokes the main contact from the company.
        ///</summary>
        public CompanyRevokeMainContactPayload? companyRevokeMainContact { get; set; }
        ///<summary>
        ///Updates a company.
        ///</summary>
        public CompanyUpdatePayload? companyUpdate { get; set; }
        ///<summary>
        ///Add tax exemptions for the customer.
        ///</summary>
        public CustomerAddTaxExemptionsPayload? customerAddTaxExemptions { get; set; }
        ///<summary>
        ///Cancels a pending erasure of a customer's data.
        ///
        ///To request an erasure of a customer's data use the [customerRequestDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerRequestDataErasure).
        ///</summary>
        public CustomerCancelDataErasurePayload? customerCancelDataErasure { get; set; }
        ///<summary>
        ///Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
        ///</summary>
        public CustomerCreatePayload? customerCreate { get; set; }
        ///<summary>
        ///Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
        ///</summary>
        public CustomerDeletePayload? customerDelete { get; set; }
        ///<summary>
        ///Update a customer's email marketing information information.
        ///</summary>
        public CustomerEmailMarketingConsentUpdatePayload? customerEmailMarketingConsentUpdate { get; set; }
        ///<summary>
        ///Generate an account activation URL for a customer.
        ///</summary>
        public CustomerGenerateAccountActivationUrlPayload? customerGenerateAccountActivationUrl { get; set; }
        ///<summary>
        ///Merges two customers.
        ///</summary>
        public CustomerMergePayload? customerMerge { get; set; }
        ///<summary>
        ///Creates a vaulted payment method for a customer from duplication data.
        ///
        ///This data must be obtained from another shop within the same organization.
        ///
        ///Currently, this only supports Shop Pay payment methods. This is only available for selected partner apps.
        ///</summary>
        public CustomerPaymentMethodCreateFromDuplicationDataPayload? customerPaymentMethodCreateFromDuplicationData { get; set; }
        ///<summary>
        ///Creates a credit card payment method for a customer using a session id.
        ///These values are only obtained through card imports happening from a PCI compliant environment.
        ///Please use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.
        ///</summary>
        public CustomerPaymentMethodCreditCardCreatePayload? customerPaymentMethodCreditCardCreate { get; set; }
        ///<summary>
        ///Updates the credit card payment method for a customer.
        ///</summary>
        public CustomerPaymentMethodCreditCardUpdatePayload? customerPaymentMethodCreditCardUpdate { get; set; }
        ///<summary>
        ///Returns encrypted data that can be used to duplicate the payment method in another shop within the same organization.
        ///
        ///Currently, this only supports Shop Pay payment methods. This is only available for selected partner apps.
        ///</summary>
        public CustomerPaymentMethodGetDuplicationDataPayload? customerPaymentMethodGetDuplicationData { get; set; }
        ///<summary>
        ///Returns a URL that allows the customer to update a specific payment method.
        ///
        ///Currently, `customerPaymentMethodGetUpdateUrl` only supports Shop Pay.
        ///</summary>
        public CustomerPaymentMethodGetUpdateUrlPayload? customerPaymentMethodGetUpdateUrl { get; set; }
        ///<summary>
        ///Creates a PayPal billing agreement for a customer.
        ///</summary>
        public CustomerPaymentMethodPaypalBillingAgreementCreatePayload? customerPaymentMethodPaypalBillingAgreementCreate { get; set; }
        ///<summary>
        ///Updates a PayPal billing agreement for a customer.
        ///</summary>
        public CustomerPaymentMethodPaypalBillingAgreementUpdatePayload? customerPaymentMethodPaypalBillingAgreementUpdate { get; set; }
        ///<summary>
        ///Create a payment method from remote gateway identifiers.
        ///</summary>
        public CustomerPaymentMethodRemoteCreatePayload? customerPaymentMethodRemoteCreate { get; set; }

        ///<summary>
        ///Create a payment method from a credit card stored by Stripe.
        ///</summary>
        [Obsolete("Use `customerPaymentMethodRemoteCreate` instead.")]
        public CustomerPaymentMethodRemoteCreditCardCreatePayload? customerPaymentMethodRemoteCreditCardCreate { get; set; }
        ///<summary>
        ///Revokes a customer's payment method.
        ///</summary>
        public CustomerPaymentMethodRevokePayload? customerPaymentMethodRevoke { get; set; }
        ///<summary>
        ///Sends a link to the customer so they can update a specific payment method.
        ///</summary>
        public CustomerPaymentMethodSendUpdateEmailPayload? customerPaymentMethodSendUpdateEmail { get; set; }
        ///<summary>
        ///Remove tax exemptions from a customer.
        ///</summary>
        public CustomerRemoveTaxExemptionsPayload? customerRemoveTaxExemptions { get; set; }
        ///<summary>
        ///Replace tax exemptions for a customer.
        ///</summary>
        public CustomerReplaceTaxExemptionsPayload? customerReplaceTaxExemptions { get; set; }
        ///<summary>
        ///Enqueues a request to erase customer's data. Read more [here](https://help.shopify.com/manual/privacy-and-security/privacy/processing-customer-data-requests#erase-customer-personal-data).
        ///
        ///To cancel the data erasure request use the [customerCancelDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerCancelDataErasure).
        ///</summary>
        public CustomerRequestDataErasurePayload? customerRequestDataErasure { get; set; }
        ///<summary>
        ///Creates a customer segment members query.
        ///</summary>
        public CustomerSegmentMembersQueryCreatePayload? customerSegmentMembersQueryCreate { get; set; }
        ///<summary>
        ///Update a customer's SMS marketing consent information.
        ///</summary>
        public CustomerSmsMarketingConsentUpdatePayload? customerSmsMarketingConsentUpdate { get; set; }
        ///<summary>
        ///Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
        ///</summary>
        public CustomerUpdatePayload? customerUpdate { get; set; }
        ///<summary>
        ///Updates a customer's default address.
        ///</summary>
        public CustomerUpdateDefaultAddressPayload? customerUpdateDefaultAddress { get; set; }
        ///<summary>
        ///Creates a delegate access token.
        ///
        ///To learn more about creating delegate access tokens, refer to
        ///[Delegate OAuth access tokens to subsystems]
        ///(https://shopify.dev/apps/auth/oauth/delegate-access-tokens).
        ///</summary>
        public DelegateAccessTokenCreatePayload? delegateAccessTokenCreate { get; set; }
        ///<summary>
        ///Destroys a delegate access token.
        ///</summary>
        public DelegateAccessTokenDestroyPayload? delegateAccessTokenDestroy { get; set; }
        ///<summary>
        ///Activates and deactivates delivery customizations.
        ///</summary>
        public DeliveryCustomizationActivationPayload? deliveryCustomizationActivation { get; set; }
        ///<summary>
        ///Creates a delivery customization.
        ///</summary>
        public DeliveryCustomizationCreatePayload? deliveryCustomizationCreate { get; set; }
        ///<summary>
        ///Creates a delivery customization.
        ///</summary>
        public DeliveryCustomizationDeletePayload? deliveryCustomizationDelete { get; set; }
        ///<summary>
        ///Updates a delivery customization.
        ///</summary>
        public DeliveryCustomizationUpdatePayload? deliveryCustomizationUpdate { get; set; }
        ///<summary>
        ///Create a delivery profile.
        ///</summary>
        public deliveryProfileCreatePayload? deliveryProfileCreate { get; set; }
        ///<summary>
        ///Enqueue the removal of a delivery profile.
        ///</summary>
        public deliveryProfileRemovePayload? deliveryProfileRemove { get; set; }
        ///<summary>
        ///Update a delivery profile.
        ///</summary>
        public deliveryProfileUpdatePayload? deliveryProfileUpdate { get; set; }
        ///<summary>
        ///Set the delivery settings for a shop.
        ///</summary>
        public DeliverySettingUpdatePayload? deliverySettingUpdate { get; set; }
        ///<summary>
        ///Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.
        ///</summary>
        public DeliveryShippingOriginAssignPayload? deliveryShippingOriginAssign { get; set; }
        ///<summary>
        ///Activates an automatic discount.
        ///</summary>
        public DiscountAutomaticActivatePayload? discountAutomaticActivate { get; set; }
        ///<summary>
        ///Creates an app discount.
        ///</summary>
        public DiscountAutomaticAppCreatePayload? discountAutomaticAppCreate { get; set; }
        ///<summary>
        ///Updates an automatic app discount.
        ///</summary>
        public DiscountAutomaticAppUpdatePayload? discountAutomaticAppUpdate { get; set; }
        ///<summary>
        ///Creates a basic automatic discount.
        ///</summary>
        public DiscountAutomaticBasicCreatePayload? discountAutomaticBasicCreate { get; set; }
        ///<summary>
        ///Updates a basic automatic discount.
        ///</summary>
        public DiscountAutomaticBasicUpdatePayload? discountAutomaticBasicUpdate { get; set; }
        ///<summary>
        ///Asynchronously delete automatic discounts in bulk if a `search` or `saved_search_id` argument is provided or if a
        ///maximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.
        ///**Warning:** All automatic discounts will be deleted if a blank `search` argument is provided.
        ///</summary>
        public DiscountAutomaticBulkDeletePayload? discountAutomaticBulkDelete { get; set; }
        ///<summary>
        ///Creates a BXGY automatic discount.
        ///</summary>
        public DiscountAutomaticBxgyCreatePayload? discountAutomaticBxgyCreate { get; set; }
        ///<summary>
        ///Updates an existing Buy X, Get Y (BXGY) automatic discount.
        ///</summary>
        public DiscountAutomaticBxgyUpdatePayload? discountAutomaticBxgyUpdate { get; set; }
        ///<summary>
        ///Deactivates an automatic discount.
        ///</summary>
        public DiscountAutomaticDeactivatePayload? discountAutomaticDeactivate { get; set; }
        ///<summary>
        ///Deletes an automatic discount.
        ///</summary>
        public DiscountAutomaticDeletePayload? discountAutomaticDelete { get; set; }
        ///<summary>
        ///Creates a free shipping automatic discount.
        ///</summary>
        public DiscountAutomaticFreeShippingCreatePayload? discountAutomaticFreeShippingCreate { get; set; }
        ///<summary>
        ///Updates a free shipping automatic discount.
        ///</summary>
        public DiscountAutomaticFreeShippingUpdatePayload? discountAutomaticFreeShippingUpdate { get; set; }
        ///<summary>
        ///Activates a code discount.
        ///</summary>
        public DiscountCodeActivatePayload? discountCodeActivate { get; set; }
        ///<summary>
        ///Creates a code app discount.
        ///</summary>
        public DiscountCodeAppCreatePayload? discountCodeAppCreate { get; set; }
        ///<summary>
        ///Updates a code app discount.
        ///</summary>
        public DiscountCodeAppUpdatePayload? discountCodeAppUpdate { get; set; }
        ///<summary>
        ///Creates a basic code discount.
        ///</summary>
        public DiscountCodeBasicCreatePayload? discountCodeBasicCreate { get; set; }
        ///<summary>
        ///Updates a basic code discount.
        ///</summary>
        public DiscountCodeBasicUpdatePayload? discountCodeBasicUpdate { get; set; }
        ///<summary>
        ///Asynchronously activate code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
        ///</summary>
        public DiscountCodeBulkActivatePayload? discountCodeBulkActivate { get; set; }
        ///<summary>
        ///Asynchronously deactivate code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
        ///</summary>
        public DiscountCodeBulkDeactivatePayload? discountCodeBulkDeactivate { get; set; }
        ///<summary>
        ///Asynchronously delete code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
        ///</summary>
        public DiscountCodeBulkDeletePayload? discountCodeBulkDelete { get; set; }
        ///<summary>
        ///Creates a Buy X get Y (BXGY) code discount.
        ///</summary>
        public DiscountCodeBxgyCreatePayload? discountCodeBxgyCreate { get; set; }
        ///<summary>
        ///Updates a Buy X, Get Y (BXGY) code discount.
        ///</summary>
        public DiscountCodeBxgyUpdatePayload? discountCodeBxgyUpdate { get; set; }
        ///<summary>
        ///Deactivates a code discount.
        ///</summary>
        public DiscountCodeDeactivatePayload? discountCodeDeactivate { get; set; }
        ///<summary>
        ///Deletes a code discount.
        ///</summary>
        public DiscountCodeDeletePayload? discountCodeDelete { get; set; }
        ///<summary>
        ///Creates a free shipping code discount.
        ///</summary>
        public DiscountCodeFreeShippingCreatePayload? discountCodeFreeShippingCreate { get; set; }
        ///<summary>
        ///Updates a free shipping code discount.
        ///</summary>
        public DiscountCodeFreeShippingUpdatePayload? discountCodeFreeShippingUpdate { get; set; }
        ///<summary>
        ///Asynchronously delete discount redeem codes in bulk. Specify the redeem codes to delete by providing a
        ///search query, a saved search ID, or a list of redeem code IDs.
        ///</summary>
        public DiscountCodeRedeemCodeBulkDeletePayload? discountCodeRedeemCodeBulkDelete { get; set; }
        ///<summary>
        ///Asynchronously add discount redeem codes in bulk. Specify the codes to add
        ///and the discount code ID that the codes will belong to.
        ///</summary>
        public DiscountRedeemCodeBulkAddPayload? discountRedeemCodeBulkAdd { get; set; }
        ///<summary>
        ///Updates a dispute evidence.
        ///</summary>
        public DisputeEvidenceUpdatePayload? disputeEvidenceUpdate { get; set; }
        ///<summary>
        ///Adds tags to multiple draft orders.
        ///</summary>
        public DraftOrderBulkAddTagsPayload? draftOrderBulkAddTags { get; set; }
        ///<summary>
        ///Deletes multiple draft orders.
        ///</summary>
        public DraftOrderBulkDeletePayload? draftOrderBulkDelete { get; set; }
        ///<summary>
        ///Removes tags from multiple draft orders.
        ///</summary>
        public DraftOrderBulkRemoveTagsPayload? draftOrderBulkRemoveTags { get; set; }
        ///<summary>
        ///Calculates the properties of a draft order. Useful for determining information
        ///such as total taxes or price without actually creating a draft order.
        ///</summary>
        public DraftOrderCalculatePayload? draftOrderCalculate { get; set; }
        ///<summary>
        ///Completes a draft order and creates an order.
        ///</summary>
        public DraftOrderCompletePayload? draftOrderComplete { get; set; }
        ///<summary>
        ///Creates a draft order.
        ///</summary>
        public DraftOrderCreatePayload? draftOrderCreate { get; set; }
        ///<summary>
        ///Creates a Draft Order from Order.
        ///</summary>
        public DraftOrderCreateFromOrderPayload? draftOrderCreateFromOrder { get; set; }
        ///<summary>
        ///Creates a merchant checkout for the given draft order.
        ///</summary>
        public DraftOrderCreateMerchantCheckoutPayload? draftOrderCreateMerchantCheckout { get; set; }
        ///<summary>
        ///Deletes a draft order.
        ///</summary>
        public DraftOrderDeletePayload? draftOrderDelete { get; set; }
        ///<summary>
        ///Duplicates a draft order.
        ///</summary>
        public DraftOrderDuplicatePayload? draftOrderDuplicate { get; set; }
        ///<summary>
        ///Previews a draft order invoice email.
        ///</summary>
        public DraftOrderInvoicePreviewPayload? draftOrderInvoicePreview { get; set; }
        ///<summary>
        ///Sends an email invoice for a draft order.
        ///</summary>
        public DraftOrderInvoiceSendPayload? draftOrderInvoiceSend { get; set; }
        ///<summary>
        ///Updates a draft order.
        ///
        ///If a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts
        ///are created but not immediately completed when opening the merchant credit card modal in the admin, and when a
        ///buyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress
        ///and the draft is updated before the checkout completes. This will not interfere with the checkout and order
        ///creation, but if the link from draft to checkout is broken the draft will remain open even after the order is
        ///created.
        ///</summary>
        public DraftOrderUpdatePayload? draftOrderUpdate { get; set; }
        ///<summary>
        ///Updates the server pixel to connect to an EventBridge endpoint.
        ///Running this mutation deletes any previous subscriptions for the server pixel.
        ///</summary>
        public EventBridgeServerPixelUpdatePayload? eventBridgeServerPixelUpdate { get; set; }
        ///<summary>
        ///Creates a new Amazon EventBridge webhook subscription.
        ///</summary>
        public EventBridgeWebhookSubscriptionCreatePayload? eventBridgeWebhookSubscriptionCreate { get; set; }
        ///<summary>
        ///Updates an Amazon EventBridge webhook subscription.
        ///</summary>
        public EventBridgeWebhookSubscriptionUpdatePayload? eventBridgeWebhookSubscriptionUpdate { get; set; }
        ///<summary>
        ///Acknowledges file update failure by resetting FAILED status to READY and clearing any media errors.
        ///</summary>
        public FileAcknowledgeUpdateFailedPayload? fileAcknowledgeUpdateFailed { get; set; }
        ///<summary>
        ///Creates file assets using an external URL or for files that were previously uploaded using the
        ///[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
        ///These files are added to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin.
        ///</summary>
        public FileCreatePayload? fileCreate { get; set; }
        ///<summary>
        ///Deletes existing file assets that were uploaded to Shopify.
        ///</summary>
        public FileDeletePayload? fileDelete { get; set; }
        ///<summary>
        ///Updates an existing file asset that was uploaded to Shopify.
        ///</summary>
        public FileUpdatePayload? fileUpdate { get; set; }
        ///<summary>
        ///Generates a signature for a Flow action payload.
        ///</summary>
        public FlowGenerateSignaturePayload? flowGenerateSignature { get; set; }
        ///<summary>
        ///Triggers any workflows that begin with the trigger specified in the request body. To learn more, refer to [_Create Shopify Flow triggers_](https://shopify.dev/apps/flow/triggers).
        ///</summary>
        public FlowTriggerReceivePayload? flowTriggerReceive { get; set; }
        ///<summary>
        ///Cancels a fulfillment.
        ///</summary>
        public FulfillmentCancelPayload? fulfillmentCancel { get; set; }
        ///<summary>
        ///Creates a fulfillment constraint rule and its metafield.
        ///</summary>
        public FulfillmentConstraintRuleCreatePayload? fulfillmentConstraintRuleCreate { get; set; }
        ///<summary>
        ///Deletes a fulfillment constraint rule and its metafields.
        ///</summary>
        public FulfillmentConstraintRuleDeletePayload? fulfillmentConstraintRuleDelete { get; set; }
        ///<summary>
        ///Creates a fulfillment for one or many fulfillment orders.
        ///The fulfillment orders are associated with the same order and are assigned to the same location.
        ///</summary>
        public FulfillmentCreateV2Payload? fulfillmentCreateV2 { get; set; }
        ///<summary>
        ///Creates a fulfillment event for a specified fulfillment.
        ///</summary>
        public FulfillmentEventCreatePayload? fulfillmentEventCreate { get; set; }
        ///<summary>
        ///Accept a cancellation request sent to a fulfillment service for a fulfillment order.
        ///</summary>
        public FulfillmentOrderAcceptCancellationRequestPayload? fulfillmentOrderAcceptCancellationRequest { get; set; }
        ///<summary>
        ///Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.
        ///</summary>
        public FulfillmentOrderAcceptFulfillmentRequestPayload? fulfillmentOrderAcceptFulfillmentRequest { get; set; }
        ///<summary>
        ///Marks a fulfillment order as canceled.
        ///</summary>
        public FulfillmentOrderCancelPayload? fulfillmentOrderCancel { get; set; }
        ///<summary>
        ///Marks an in-progress fulfillment order as incomplete, indicating the fulfillment service is unable to ship any remaining items and intends to close the fulfillment order.
        ///</summary>
        public FulfillmentOrderClosePayload? fulfillmentOrderClose { get; set; }
        ///<summary>
        ///Applies a fulfillment hold on an open fulfillment order.
        ///</summary>
        public FulfillmentOrderHoldPayload? fulfillmentOrderHold { get; set; }
        ///<summary>
        ///Mark line items associated with a fulfillment order as being ready for pickup by a customer.
        ///
        ///Sends a Ready For Pickup notification to the customer to let them know that their order is ready
        ///to be picked up.
        ///</summary>
        public FulfillmentOrderLineItemsPreparedForPickupPayload? fulfillmentOrderLineItemsPreparedForPickup { get; set; }
        ///<summary>
        ///Merges a set or multiple sets of fulfillment orders together into one based on
        ///line item inputs and quantities.
        ///</summary>
        public FulfillmentOrderMergePayload? fulfillmentOrderMerge { get; set; }
        ///<summary>
        ///Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.
        ///
        ///Moving a fulfillment order will fail in the following circumstances:
        ///
        ///* The fulfillment order is closed.
        ///* The destination location has never stocked the requested inventory item.
        ///* The API client doesn't have the correct permissions.
        ///
        ///Line items which have already been fulfilled can't be re-assigned
        ///and will always remain assigned to the original location.
        ///
        ///You can't change the assigned location while a fulfillment order has a
        ///[request status](https://shopify.dev/docs/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus)
        ///of `SUBMITTED`, `ACCEPTED`, `CANCELLATION_REQUESTED`, or `CANCELLATION_REJECTED`.
        ///These request statuses mean that a fulfillment order is awaiting action by a fulfillment service
        ///and can't be re-assigned without first having the fulfillment service accept a cancellation request.
        ///This behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.
        ///
        ///### How re-assigning line items affects fulfillment orders
        ///
        ///**First scenario:** Re-assign all line items belonging to a fulfillment order to a new location.
        ///
        ///In this case, the
        ///[assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
        ///of the original fulfillment order will be updated to the new location.
        ///
        ///**Second scenario:** Re-assign a subset of the line items belonging to a fulfillment order to a new location.
        ///You can specify a subset of line items using the `fulfillmentOrderLineItems` parameter
        ///(available as of the `2023-04` API version),
        ///or specify that the original fulfillment order contains line items which have already been fulfilled.
        ///
        ///If the new location is already assigned to another active fulfillment order, on the same order, then
        ///a new fulfillment order is created. The existing fulfillment order is closed and line items are recreated
        ///in a new fulfillment order.
        ///</summary>
        public FulfillmentOrderMovePayload? fulfillmentOrderMove { get; set; }
        ///<summary>
        ///Marks a scheduled fulfillment order as open.
        ///</summary>
        public FulfillmentOrderOpenPayload? fulfillmentOrderOpen { get; set; }
        ///<summary>
        ///Rejects a cancellation request sent to a fulfillment service for a fulfillment order.
        ///</summary>
        public FulfillmentOrderRejectCancellationRequestPayload? fulfillmentOrderRejectCancellationRequest { get; set; }
        ///<summary>
        ///Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.
        ///</summary>
        public FulfillmentOrderRejectFulfillmentRequestPayload? fulfillmentOrderRejectFulfillmentRequest { get; set; }
        ///<summary>
        ///Releases the fulfillment hold on a fulfillment order.
        ///</summary>
        public FulfillmentOrderReleaseHoldPayload? fulfillmentOrderReleaseHold { get; set; }
        ///<summary>
        ///Reschedules a scheduled fulfillment order.
        ///
        ///Updates the value of the `fulfillAt` field on a scheduled fulfillment order.
        ///
        ///The fulfillment order will be marked as ready for fulfillment at this date and time.
        ///</summary>
        public FulfillmentOrderReschedulePayload? fulfillmentOrderReschedule { get; set; }
        ///<summary>
        ///Splits a fulfillment order or orders based on line item inputs and quantities.
        ///</summary>
        public FulfillmentOrderSplitPayload? fulfillmentOrderSplit { get; set; }
        ///<summary>
        ///Sends a cancellation request to the fulfillment service of a fulfillment order.
        ///</summary>
        public FulfillmentOrderSubmitCancellationRequestPayload? fulfillmentOrderSubmitCancellationRequest { get; set; }
        ///<summary>
        ///Sends a fulfillment request to the fulfillment service of a fulfillment order.
        ///</summary>
        public FulfillmentOrderSubmitFulfillmentRequestPayload? fulfillmentOrderSubmitFulfillmentRequest { get; set; }
        ///<summary>
        ///Releases the fulfillment holds on a list of fulfillment orders.
        ///</summary>
        public FulfillmentOrdersReleaseHoldsPayload? fulfillmentOrdersReleaseHolds { get; set; }
        ///<summary>
        ///Sets the latest date and time by which the fulfillment orders need to be fulfilled.
        ///</summary>
        public FulfillmentOrdersSetFulfillmentDeadlinePayload? fulfillmentOrdersSetFulfillmentDeadline { get; set; }
        ///<summary>
        ///Creates a fulfillment service.
        ///
        ///## Fulfillment service location
        ///
        ///When creating a fulfillment service, a new location will be automatically created on the shop
        ///and will be associated with this fulfillment service.
        ///This location will be named after the fulfillment service and inherit the shop's address.
        ///
        ///If you are using API version `2023-10` or later, and you need to specify custom attributes for the fulfillment service location
        ///(for example, to change its address to a country different from the shop's country),
        ///use the
        ///[LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)
        ///mutation after creating the fulfillment service.
        ///</summary>
        public FulfillmentServiceCreatePayload? fulfillmentServiceCreate { get; set; }
        ///<summary>
        ///Deletes a fulfillment service.
        ///</summary>
        public FulfillmentServiceDeletePayload? fulfillmentServiceDelete { get; set; }
        ///<summary>
        ///Updates a fulfillment service.
        ///
        ///If you are using API version `2023-10` or later,
        ///and you need to update the location managed by the fulfillment service
        ///(for example, to change the address of a fulfillment service),
        ///use the
        ///[LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)
        ///mutation.
        ///</summary>
        public FulfillmentServiceUpdatePayload? fulfillmentServiceUpdate { get; set; }
        ///<summary>
        ///Updates tracking information for a fulfillment.
        ///</summary>
        public FulfillmentTrackingInfoUpdateV2Payload? fulfillmentTrackingInfoUpdateV2 { get; set; }
        ///<summary>
        ///Create a gift card.
        ///</summary>
        public GiftCardCreatePayload? giftCardCreate { get; set; }
        ///<summary>
        ///Disable a gift card. A disabled gift card cannot be used by a customer. A disabled gift card cannot be re-enabled.
        ///</summary>
        public GiftCardDisablePayload? giftCardDisable { get; set; }
        ///<summary>
        ///Update a gift card.
        ///</summary>
        public GiftCardUpdatePayload? giftCardUpdate { get; set; }
        ///<summary>
        ///Activate an inventory item at a location.
        ///</summary>
        public InventoryActivatePayload? inventoryActivate { get; set; }
        ///<summary>
        ///Apply changes to inventory quantities.
        ///</summary>
        public InventoryAdjustQuantitiesPayload? inventoryAdjustQuantities { get; set; }

        ///<summary>
        ///Adjusts the inventory by a certain quantity.
        ///</summary>
        [Obsolete("Use `inventoryAdjustQuantities` instead.")]
        public InventoryAdjustQuantityPayload? inventoryAdjustQuantity { get; set; }

        ///<summary>
        ///Adjusts the inventory at a location for multiple inventory items.
        ///</summary>
        [Obsolete("Use `inventoryAdjustQuantities` instead.")]
        public InventoryBulkAdjustQuantityAtLocationPayload? inventoryBulkAdjustQuantityAtLocation { get; set; }
        ///<summary>
        ///Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location.
        ///</summary>
        public InventoryBulkToggleActivationPayload? inventoryBulkToggleActivation { get; set; }
        ///<summary>
        ///Removes an inventory item's quantities from a location, and turns off inventory at the location.
        ///</summary>
        public InventoryDeactivatePayload? inventoryDeactivate { get; set; }
        ///<summary>
        ///Updates an inventory item.
        ///</summary>
        public InventoryItemUpdatePayload? inventoryItemUpdate { get; set; }
        ///<summary>
        ///Moves inventory between inventory quantity names at a single location.
        ///</summary>
        public InventoryMoveQuantitiesPayload? inventoryMoveQuantities { get; set; }
        ///<summary>
        ///Set inventory on-hand quantities using absolute values.
        ///</summary>
        public InventorySetOnHandQuantitiesPayload? inventorySetOnHandQuantities { get; set; }
        ///<summary>
        ///Set up scheduled changes of inventory items.
        ///</summary>
        public InventorySetScheduledChangesPayload? inventorySetScheduledChanges { get; set; }
        ///<summary>
        ///Activates a location.
        ///</summary>
        public LocationActivatePayload? locationActivate { get; set; }
        ///<summary>
        ///Adds a new location.
        ///</summary>
        public LocationAddPayload? locationAdd { get; set; }
        ///<summary>
        ///Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.
        ///</summary>
        public LocationDeactivatePayload? locationDeactivate { get; set; }
        ///<summary>
        ///Deletes a location.
        ///</summary>
        public LocationDeletePayload? locationDelete { get; set; }
        ///<summary>
        ///Edits an existing location.
        ///
        ///[As of the 2023-10 API version](https://shopify.dev/changelog/apps-can-now-change-the-name-and-address-of-their-fulfillment-service-locations), apps can change the name and address of their fulfillment service locations.
        ///</summary>
        public LocationEditPayload? locationEdit { get; set; }
        ///<summary>
        ///Disables local pickup for a location.
        ///</summary>
        public LocationLocalPickupDisablePayload? locationLocalPickupDisable { get; set; }
        ///<summary>
        ///Enables local pickup for a location.
        ///</summary>
        public LocationLocalPickupEnablePayload? locationLocalPickupEnable { get; set; }
        ///<summary>
        ///Creates a new market.
        ///</summary>
        public MarketCreatePayload? marketCreate { get; set; }
        ///<summary>
        ///Updates currency settings of a market.
        ///</summary>
        public MarketCurrencySettingsUpdatePayload? marketCurrencySettingsUpdate { get; set; }
        ///<summary>
        ///Deletes a market definition.
        ///</summary>
        public MarketDeletePayload? marketDelete { get; set; }
        ///<summary>
        ///Creates or updates market localizations.
        ///</summary>
        public MarketLocalizationsRegisterPayload? marketLocalizationsRegister { get; set; }
        ///<summary>
        ///Deletes market localizations.
        ///</summary>
        public MarketLocalizationsRemovePayload? marketLocalizationsRemove { get; set; }
        ///<summary>
        ///Deletes a market region.
        ///</summary>
        public MarketRegionDeletePayload? marketRegionDelete { get; set; }
        ///<summary>
        ///Creates regions that belong to an existing market.
        ///</summary>
        public MarketRegionsCreatePayload? marketRegionsCreate { get; set; }
        ///<summary>
        ///Deletes a list of market regions.
        ///</summary>
        public MarketRegionsDeletePayload? marketRegionsDelete { get; set; }
        ///<summary>
        ///Updates the properties of a market.
        ///</summary>
        public MarketUpdatePayload? marketUpdate { get; set; }
        ///<summary>
        ///Creates a web presence for a market.
        ///</summary>
        public MarketWebPresenceCreatePayload? marketWebPresenceCreate { get; set; }
        ///<summary>
        ///Deletes a market web presence.
        ///</summary>
        public MarketWebPresenceDeletePayload? marketWebPresenceDelete { get; set; }
        ///<summary>
        ///Updates a market web presence.
        ///</summary>
        public MarketWebPresenceUpdatePayload? marketWebPresenceUpdate { get; set; }
        ///<summary>
        ///Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error.
        ///</summary>
        public MarketingActivitiesDeleteAllExternalPayload? marketingActivitiesDeleteAllExternal { get; set; }
        ///<summary>
        ///Create new marketing activity.
        ///</summary>
        public MarketingActivityCreatePayload? marketingActivityCreate { get; set; }
        ///<summary>
        ///Creates a new external marketing activity.
        ///</summary>
        public MarketingActivityCreateExternalPayload? marketingActivityCreateExternal { get; set; }
        ///<summary>
        ///Deletes an external marketing activity.
        ///</summary>
        public MarketingActivityDeleteExternalPayload? marketingActivityDeleteExternal { get; set; }
        ///<summary>
        ///Updates a marketing activity with the latest information.
        ///</summary>
        public MarketingActivityUpdatePayload? marketingActivityUpdate { get; set; }
        ///<summary>
        ///Update an external marketing activity.
        ///</summary>
        public MarketingActivityUpdateExternalPayload? marketingActivityUpdateExternal { get; set; }
        ///<summary>
        ///Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity.
        ///</summary>
        public MarketingActivityUpsertExternalPayload? marketingActivityUpsertExternal { get; set; }
        ///<summary>
        ///Creates a new marketing engagement for a marketing activity or a marketing channel.
        ///</summary>
        public MarketingEngagementCreatePayload? marketingEngagementCreate { get; set; }
        ///<summary>
        ///Marks channel-level engagement data such that it no longer appears in reports.
        ///          Activity-level data cannot be deleted directly, instead the MarketingActivity itself should be deleted to
        ///          hide it from reports.
        ///</summary>
        public MarketingEngagementsDeletePayload? marketingEngagementsDelete { get; set; }
        ///<summary>
        ///Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be
        ///checked against this definition and will have their type updated accordingly. For metafields that are not
        ///valid, they will remain unchanged but any attempts to update them must align with this definition.
        ///</summary>
        public MetafieldDefinitionCreatePayload? metafieldDefinitionCreate { get; set; }
        ///<summary>
        ///Delete a metafield definition.
        ///Optionally deletes all associated metafields asynchronously when specified.
        ///</summary>
        public MetafieldDefinitionDeletePayload? metafieldDefinitionDelete { get; set; }
        ///<summary>
        ///You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
        ///The order of your pinned metafield definitions determines the order in which your metafields are displayed
        ///on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
        ///</summary>
        public MetafieldDefinitionPinPayload? metafieldDefinitionPin { get; set; }
        ///<summary>
        ///You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
        ///The order of your pinned metafield definitions determines the order in which your metafields are displayed
        ///on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
        ///</summary>
        public MetafieldDefinitionUnpinPayload? metafieldDefinitionUnpin { get; set; }
        ///<summary>
        ///Updates a metafield definition.
        ///</summary>
        public MetafieldDefinitionUpdatePayload? metafieldDefinitionUpdate { get; set; }
        ///<summary>
        ///Deletes a metafield.
        ///</summary>
        public MetafieldDeletePayload? metafieldDelete { get; set; }

        ///<summary>
        ///Creates a `MetafieldStorefrontVisibility` record to make all metafields that belong to the specified resource
        ///and have the established `namespace` and `key` combination visible in the Storefront API.
        ///</summary>
        [Obsolete("This mutation will be removed in a future version. Use the `metafieldDefinitionCreate` or `metafieldDefinitionUpdate` mutations with `access.storefront` set instead.")]
        public MetafieldStorefrontVisibilityCreatePayload? metafieldStorefrontVisibilityCreate { get; set; }

        ///<summary>
        ///Deletes a `MetafieldStorefrontVisibility` record. All metafields that belongs to the specified record will no
        ///longer be visible in the Storefront API.
        ///</summary>
        [Obsolete("This mutation will be removed in a future version. Use the `metafieldDefinitionUpdate` mutation with `access.storefront` set instead.")]
        public MetafieldStorefrontVisibilityDeletePayload? metafieldStorefrontVisibilityDelete { get; set; }
        ///<summary>
        ///Sets metafield values. Metafield values will be set regardless if they were previously created or not.
        ///
        ///Allows a maximum of 25 metafields to be set at a time.
        ///
        ///Note that this operation is atomic as of `2023-01`, meaning no changes are persisted if any error is
        ///encountered.
        ///</summary>
        public MetafieldsSetPayload? metafieldsSet { get; set; }
        ///<summary>
        ///Asynchronously delete metaobjects and their associated metafields in bulk.
        ///</summary>
        public MetaobjectBulkDeletePayload? metaobjectBulkDelete { get; set; }
        ///<summary>
        ///Creates a new metaobject.
        ///</summary>
        public MetaobjectCreatePayload? metaobjectCreate { get; set; }
        ///<summary>
        ///Creates a new metaobject definition.
        ///</summary>
        public MetaobjectDefinitionCreatePayload? metaobjectDefinitionCreate { get; set; }
        ///<summary>
        ///Deletes the specified metaobject definition.
        ///Also deletes all related metafield definitions, metaobjects, and metafields asynchronously.
        ///</summary>
        public MetaobjectDefinitionDeletePayload? metaobjectDefinitionDelete { get; set; }
        ///<summary>
        ///Updates a metaobject definition with new settings and metafield definitions.
        ///</summary>
        public MetaobjectDefinitionUpdatePayload? metaobjectDefinitionUpdate { get; set; }
        ///<summary>
        ///Deletes the specified metaobject and its associated metafields.
        ///</summary>
        public MetaobjectDeletePayload? metaobjectDelete { get; set; }
        ///<summary>
        ///Updates an existing metaobject.
        ///</summary>
        public MetaobjectUpdatePayload? metaobjectUpdate { get; set; }
        ///<summary>
        ///Retrieves a metaobject by handle, then updates it with the provided input values.
        ///If no matching metaobject is found, a new metaobject is created with the provided input values.
        ///</summary>
        public MetaobjectUpsertPayload? metaobjectUpsert { get; set; }
        ///<summary>
        ///Cancels an order.
        ///</summary>
        public OrderCancelPayload? orderCancel { get; set; }
        ///<summary>
        ///Captures payment for an authorized transaction on an order. An order can only be captured if it has a successful authorization transaction. Capturing an order will claim the money reserved by the authorization. orderCapture can be used to capture multiple times as long as the OrderTransaction is multicapturable. To capture a partial payment, the included `amount` value should be less than the total order amount. Multicapture is available only to stores on a Shopify Plus plan.
        ///</summary>
        public OrderCapturePayload? orderCapture { get; set; }
        ///<summary>
        ///Closes an open order.
        ///</summary>
        public OrderClosePayload? orderClose { get; set; }
        ///<summary>
        ///Creates a payment for an order by mandate.
        ///</summary>
        public OrderCreateMandatePaymentPayload? orderCreateMandatePayment { get; set; }
        ///<summary>
        ///Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a [custom line item](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing#add-a-custom-line-item). To learn how to edit existing orders, refer to [Edit an existing order with Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
        ///</summary>
        public OrderEditAddCustomItemPayload? orderEditAddCustomItem { get; set; }
        ///<summary>
        ///Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
        ///</summary>
        public OrderEditAddLineItemDiscountPayload? orderEditAddLineItemDiscount { get; set; }
        ///<summary>
        ///Adds a line item from an existing product variant.
        ///</summary>
        public OrderEditAddVariantPayload? orderEditAddVariant { get; set; }
        ///<summary>
        ///Starts editing an order. Mutations are operating on `OrderEdit`.
        ///All order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.
        ///</summary>
        public OrderEditBeginPayload? orderEditBegin { get; set; }
        ///<summary>
        ///Applies and saves staged changes to an order. Mutations are operating on `OrderEdit`.
        ///All order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.
        ///</summary>
        public OrderEditCommitPayload? orderEditCommit { get; set; }
        ///<summary>
        ///Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
        ///</summary>
        public OrderEditRemoveDiscountPayload? orderEditRemoveDiscount { get; set; }
        ///<summary>
        ///Removes a line item discount that was applied as part of an order edit.
        ///</summary>
        public OrderEditRemoveLineItemDiscountPayload? orderEditRemoveLineItemDiscount { get; set; }
        ///<summary>
        ///Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
        ///</summary>
        public OrderEditSetQuantityPayload? orderEditSetQuantity { get; set; }
        ///<summary>
        ///Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
        ///</summary>
        public OrderEditUpdateDiscountPayload? orderEditUpdateDiscount { get; set; }
        ///<summary>
        ///Sends an email invoice for an order.
        ///</summary>
        public OrderInvoiceSendPayload? orderInvoiceSend { get; set; }
        ///<summary>
        ///Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.
        ///</summary>
        public OrderMarkAsPaidPayload? orderMarkAsPaid { get; set; }
        ///<summary>
        ///Opens a closed order.
        ///</summary>
        public OrderOpenPayload? orderOpen { get; set; }
        ///<summary>
        ///Updates the fields of an order.
        ///</summary>
        public OrderUpdatePayload? orderUpdate { get; set; }
        ///<summary>
        ///Activates and deactivates payment customizations.
        ///</summary>
        public PaymentCustomizationActivationPayload? paymentCustomizationActivation { get; set; }
        ///<summary>
        ///Creates a payment customization.
        ///</summary>
        public PaymentCustomizationCreatePayload? paymentCustomizationCreate { get; set; }
        ///<summary>
        ///Deletes a payment customization.
        ///</summary>
        public PaymentCustomizationDeletePayload? paymentCustomizationDelete { get; set; }
        ///<summary>
        ///Updates a payment customization.
        ///</summary>
        public PaymentCustomizationUpdatePayload? paymentCustomizationUpdate { get; set; }
        ///<summary>
        ///Sends an email payment reminder for a payment schedule.
        ///</summary>
        public PaymentReminderSendPayload? paymentReminderSend { get; set; }
        ///<summary>
        ///Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
        ///</summary>
        public PaymentTermsCreatePayload? paymentTermsCreate { get; set; }
        ///<summary>
        ///Delete payment terms for an order. To delete payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
        ///</summary>
        public PaymentTermsDeletePayload? paymentTermsDelete { get; set; }
        ///<summary>
        ///Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
        ///</summary>
        public PaymentTermsUpdatePayload? paymentTermsUpdate { get; set; }
        ///<summary>
        ///Creates a price list. You can use the `priceListCreate` mutation to create a new price list for a country. This enables you to sell your products with international pricing.
        ///</summary>
        public PriceListCreatePayload? priceListCreate { get; set; }
        ///<summary>
        ///Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market.
        ///</summary>
        public PriceListDeletePayload? priceListDelete { get; set; }
        ///<summary>
        ///Creates or updates fixed prices on a price list. You can use the `priceListFixedPricesAdd` mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.
        ///</summary>
        public PriceListFixedPricesAddPayload? priceListFixedPricesAdd { get; set; }
        ///<summary>
        ///Updates the fixed prices for all variants for a product on a price list. You can use the `priceListFixedPricesByProductUpdate` mutation to set or remove a fixed price for all variants of a product associated with the price list.
        ///</summary>
        public PriceListFixedPricesByProductUpdatePayload? priceListFixedPricesByProductUpdate { get; set; }
        ///<summary>
        ///Deletes specific fixed prices from a price list using a product variant ID. You can use the `priceListFixedPricesDelete` mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment.
        ///</summary>
        public PriceListFixedPricesDeletePayload? priceListFixedPricesDelete { get; set; }
        ///<summary>
        ///Updates fixed prices on a price list. You can use the `priceListFixedPricesUpdate` mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.
        ///</summary>
        public PriceListFixedPricesUpdatePayload? priceListFixedPricesUpdate { get; set; }
        ///<summary>
        ///Updates a price list.
        ///If you modify the currency, then any fixed prices set on the price list will be deleted.
        ///</summary>
        public PriceListUpdatePayload? priceListUpdate { get; set; }

        ///<summary>
        ///Activate a price rule.
        ///</summary>
        [Obsolete("Use `discountCodeActivate` instead.")]
        public PriceRuleActivatePayload? priceRuleActivate { get; set; }

        ///<summary>
        ///Create a price rule using the input.
        ///</summary>
        [Obsolete("Use `discountCodeBasicCreate` instead.")]
        public PriceRuleCreatePayload? priceRuleCreate { get; set; }

        ///<summary>
        ///Deactivate a price rule.
        ///</summary>
        [Obsolete("Use `discountCodeDeactivate` instead.")]
        public PriceRuleDeactivatePayload? priceRuleDeactivate { get; set; }

        ///<summary>
        ///Delete a price rule.
        ///</summary>
        [Obsolete("Use `discountCodeDelete` instead.")]
        public PriceRuleDeletePayload? priceRuleDelete { get; set; }

        ///<summary>
        ///Create a discount code for a price rule.
        ///</summary>
        [Obsolete("Use `discountRedeemCodeBulkAdd` instead.")]
        public PriceRuleDiscountCodeCreatePayload? priceRuleDiscountCodeCreate { get; set; }

        ///<summary>
        ///Update a discount code for a price rule.
        ///</summary>
        [Obsolete("Use `discountCodeBasicUpdate` instead.")]
        public PriceRuleDiscountCodeUpdatePayload? priceRuleDiscountCodeUpdate { get; set; }

        ///<summary>
        ///Updates a price rule using its ID and an input.
        ///</summary>
        [Obsolete("Use `discountCodeBasicUpdate` instead.")]
        public PriceRuleUpdatePayload? priceRuleUpdate { get; set; }

        ///<summary>
        ///Deletes a private metafield.
        ///Private metafields are automatically deleted when the app that created them is uninstalled.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldDeletePayload? privateMetafieldDelete { get; set; }

        ///<summary>
        ///Creates or updates a private metafield. Use private metafields when you don't want the metafield data to be accessible by merchants or other apps.
        ///Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
        ///
        ///An application can create a maximum of 10 private metafields per shop resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldUpsertPayload? privateMetafieldUpsert { get; set; }

        ///<summary>
        ///Appends images to a product.
        ///</summary>
        [Obsolete("Use `productCreateMedia` instead.")]
        public ProductAppendImagesPayload? productAppendImages { get; set; }
        ///<summary>
        ///Changes the status of a product. This allows you to set the availability of the product across all channels.
        ///</summary>
        public ProductChangeStatusPayload? productChangeStatus { get; set; }
        ///<summary>
        ///Creates a product.
        ///
        ///If you need to create a product with many
        ///[variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
        ///that are active at several
        ///[locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
        ///especially with a lot of
        ///[collections](https://shopify.dev/api/admin-graphql/latest/mutations/productCreate#field-productinput-collectionstojoin)
        ///and
        ///[tags](https://shopify.dev/api/admin-graphql/latest/mutations/productCreate#field-productinput-tags),
        ///then you should first create the product with just the variants.
        ///
        ///After the product is created, you can activate the variants at locations
        ///and add the other related objects to the product. This reduces the size of each mutation and increases the likelihood that it will
        ///complete before the operation times out.
        ///
        ///The following example shows how you might break up product creation and object association into multiple steps:
        ///
        ///1. Create the product with variants. Don't specify any tags or collections on the product, and don't specify
        ///[inventory quantities](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput#field-productvariantinput-inventoryquantities)
        ///for each variant.
        ///
        ///2. After the product is created, add tags to the product using the
        ///[tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsAdd) mutation, and add collections using the
        ///[collectionsAddProducts](https://shopify.dev/api/admin-graphql/latest/mutations/collectionAddProducts) mutation.
        ///
        ///3. Use the [inventoryBulkToggleActivation](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryBulkToggleActivation) mutation
        ///on each [inventory item](https://shopify.dev/api/admin-graphql/latest/objects/InventoryItem) to activate it at the appropriate locations.
        ///
        ///4. After activating the variants at the locations, adjust inventory quantities at each location using the
        ///[inventoryBulkAdjustQuantityAtLocation](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryBulkAdjustQuantityAtLocation) mutation.
        ///</summary>
        public ProductCreatePayload? productCreate { get; set; }
        ///<summary>
        ///Creates media for a product.
        ///</summary>
        public ProductCreateMediaPayload? productCreateMedia { get; set; }
        ///<summary>
        ///Deletes a product, including all associated variants and media.
        ///
        ///As of API version `2023-01`, if you need to delete a large product, such as one that has many
        ///[variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
        ///that are active at several
        ///[locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
        ///you may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous
        ///[ProductDeleteAsync](https://shopify.dev/api/admin-graphql/latest/mutations/productDeleteAsync)
        ///mutation.
        ///</summary>
        public ProductDeletePayload? productDelete { get; set; }
        ///<summary>
        ///Deletes a product asynchronously, including all associated variants and media.
        ///</summary>
        public ProductDeleteAsyncPayload? productDeleteAsync { get; set; }

        ///<summary>
        ///Removes product images from the product.
        ///</summary>
        [Obsolete("Use `productDeleteMedia` instead.")]
        public ProductDeleteImagesPayload? productDeleteImages { get; set; }
        ///<summary>
        ///Deletes media for a product.
        ///</summary>
        public ProductDeleteMediaPayload? productDeleteMedia { get; set; }
        ///<summary>
        ///Duplicates a product.
        ///
        ///As of API version `2023-01`, if you need to duplicate a large product, such as one that has many
        ///[variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
        ///that are active at several
        ///[locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
        ///you may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous
        ///[ProductDuplicateAsyncV2](https://shopify.dev/api/admin-graphql/latest/mutations/productDuplicateAsyncV2)
        ///mutation.
        ///</summary>
        public ProductDuplicatePayload? productDuplicate { get; set; }

        ///<summary>
        ///Asynchronously duplicate a single product.
        ///</summary>
        [Obsolete("Use `productDuplicateAsyncV2` instead.")]
        public ProductDuplicateAsyncPayload? productDuplicateAsync { get; set; }
        ///<summary>
        ///Asynchronously duplicate a single product.
        ///</summary>
        public ProductDuplicateAsyncV2Payload? productDuplicateAsyncV2 { get; set; }
        ///<summary>
        ///Creates a product feed for a specific publication.
        ///</summary>
        public ProductFeedCreatePayload? productFeedCreate { get; set; }
        ///<summary>
        ///Deletes a product feed for a specific publication.
        ///</summary>
        public ProductFeedDeletePayload? productFeedDelete { get; set; }
        ///<summary>
        ///Runs the full product sync for a given shop.
        ///</summary>
        public ProductFullSyncPayload? productFullSync { get; set; }

        ///<summary>
        ///Updates an image of a product.
        ///</summary>
        [Obsolete("Use `productUpdateMedia` instead.")]
        public ProductImageUpdatePayload? productImageUpdate { get; set; }
        ///<summary>
        ///Adds multiple selling plan groups to a product.
        ///</summary>
        public ProductJoinSellingPlanGroupsPayload? productJoinSellingPlanGroups { get; set; }
        ///<summary>
        ///Removes multiple groups from a product.
        ///</summary>
        public ProductLeaveSellingPlanGroupsPayload? productLeaveSellingPlanGroups { get; set; }

        ///<summary>
        ///Publishes a product. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can only be published on online stores.
        ///</summary>
        [Obsolete("Use `publishablePublish` instead.")]
        public ProductPublishPayload? productPublish { get; set; }

        ///<summary>
        ///Asynchronously reorders a set of images for a given product.
        ///</summary>
        [Obsolete("Use `productReorderMedia` instead.")]
        public ProductReorderImagesPayload? productReorderImages { get; set; }
        ///<summary>
        ///Asynchronously reorders the media attached to a product.
        ///</summary>
        public ProductReorderMediaPayload? productReorderMedia { get; set; }

        ///<summary>
        ///Unpublishes a product.
        ///</summary>
        [Obsolete("Use `publishableUnpublish` instead.")]
        public ProductUnpublishPayload? productUnpublish { get; set; }
        ///<summary>
        ///Updates a product. If you update a product and only include some variants in the update,
        ///then any variants not included will be deleted. To safely manage variants without the risk of
        ///deleting excluded variants, use
        ///[productVariantsBulkUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantsbulkupdate).
        ///If you want to update a single variant, then use
        ///[productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).
        ///</summary>
        public ProductUpdatePayload? productUpdate { get; set; }
        ///<summary>
        ///Updates media for a product.
        ///</summary>
        public ProductUpdateMediaPayload? productUpdateMedia { get; set; }
        ///<summary>
        ///Appends media from a product to variants of the product.
        ///</summary>
        public ProductVariantAppendMediaPayload? productVariantAppendMedia { get; set; }
        ///<summary>
        ///Creates a product variant.
        ///</summary>
        public ProductVariantCreatePayload? productVariantCreate { get; set; }
        ///<summary>
        ///Deletes a product variant.
        ///</summary>
        public ProductVariantDeletePayload? productVariantDelete { get; set; }
        ///<summary>
        ///Detaches media from product variants.
        ///</summary>
        public ProductVariantDetachMediaPayload? productVariantDetachMedia { get; set; }
        ///<summary>
        ///Adds multiple selling plan groups to a product variant.
        ///</summary>
        public ProductVariantJoinSellingPlanGroupsPayload? productVariantJoinSellingPlanGroups { get; set; }
        ///<summary>
        ///Remove multiple groups from a product variant.
        ///</summary>
        public ProductVariantLeaveSellingPlanGroupsPayload? productVariantLeaveSellingPlanGroups { get; set; }
        ///<summary>
        ///Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles.
        ///</summary>
        public ProductVariantRelationshipBulkUpdatePayload? productVariantRelationshipBulkUpdate { get; set; }
        ///<summary>
        ///Updates a product variant.
        ///</summary>
        public ProductVariantUpdatePayload? productVariantUpdate { get; set; }
        ///<summary>
        ///Creates product variants in bulk. If you want to create a single variant, then use
        ///[productVariantCreate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantcreate).
        ///</summary>
        public ProductVariantsBulkCreatePayload? productVariantsBulkCreate { get; set; }
        ///<summary>
        ///Deletes product variants in bulk. If you want to delete a single variant, then use
        ///[productVariantDelete](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantdelete).
        ///</summary>
        public ProductVariantsBulkDeletePayload? productVariantsBulkDelete { get; set; }
        ///<summary>
        ///Reorder product variants in bulk.
        ///</summary>
        public ProductVariantsBulkReorderPayload? productVariantsBulkReorder { get; set; }
        ///<summary>
        ///Updates product variants in bulk. If you want to update a single variant, then use
        ///[productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).
        ///</summary>
        public ProductVariantsBulkUpdatePayload? productVariantsBulkUpdate { get; set; }
        ///<summary>
        ///Updates the server pixel to connect to a Google PubSub endpoint.
        ///Running this mutation deletes any previous subscriptions for the server pixel.
        ///</summary>
        public PubSubServerPixelUpdatePayload? pubSubServerPixelUpdate { get; set; }
        ///<summary>
        ///Creates a new Google Cloud Pub/Sub webhook subscription.
        ///</summary>
        public PubSubWebhookSubscriptionCreatePayload? pubSubWebhookSubscriptionCreate { get; set; }
        ///<summary>
        ///Updates a Google Cloud Pub/Sub webhook subscription.
        ///</summary>
        public PubSubWebhookSubscriptionUpdatePayload? pubSubWebhookSubscriptionUpdate { get; set; }
        ///<summary>
        ///Creates a publication.
        ///</summary>
        public PublicationCreatePayload? publicationCreate { get; set; }
        ///<summary>
        ///Deletes a publication.
        ///</summary>
        public PublicationDeletePayload? publicationDelete { get; set; }
        ///<summary>
        ///Updates a publication.
        ///</summary>
        public PublicationUpdatePayload? publicationUpdate { get; set; }
        ///<summary>
        ///Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores.
        ///</summary>
        public PublishablePublishPayload? publishablePublish { get; set; }
        ///<summary>
        ///Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores.
        ///</summary>
        public PublishablePublishToCurrentChannelPayload? publishablePublishToCurrentChannel { get; set; }
        ///<summary>
        ///Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`.
        ///</summary>
        public PublishableUnpublishPayload? publishableUnpublish { get; set; }
        ///<summary>
        ///Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`.
        ///</summary>
        public PublishableUnpublishToCurrentChannelPayload? publishableUnpublishToCurrentChannel { get; set; }
        ///<summary>
        ///Updates quantity pricing on a price list. You can use the `quantityPricingByVariantUpdate` mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations.
        ///</summary>
        public QuantityPricingByVariantUpdatePayload? quantityPricingByVariantUpdate { get; set; }
        ///<summary>
        ///Creates or updates existing quantity rules on a price list.
        ///You can use the `quantityRulesAdd` mutation to set order level minimums, maximumums and increments for specific product variants.
        ///</summary>
        public QuantityRulesAddPayload? quantityRulesAdd { get; set; }
        ///<summary>
        ///Deletes specific quantity rules from a price list using a product variant ID.
        ///You can use the `quantityRulesDelete` mutation to delete a set of quantity rules from a price list.
        ///</summary>
        public QuantityRulesDeletePayload? quantityRulesDelete { get; set; }
        ///<summary>
        ///Creates a refund.
        ///</summary>
        public RefundCreatePayload? refundCreate { get; set; }
        ///<summary>
        ///Approves a customer's return request.
        ///If this mutation is successful, then the `Return.status` field of the
        ///approved return is set to `OPEN`.
        ///</summary>
        public ReturnApproveRequestPayload? returnApproveRequest { get; set; }
        ///<summary>
        ///Cancels a return and restores the items back to being fulfilled.
        ///Canceling a return is only available before any work has been done
        ///on the return (such as an inspection or refund).
        ///</summary>
        public ReturnCancelPayload? returnCancel { get; set; }
        ///<summary>
        ///Indicates a return is complete, either when a refund has been made and items restocked,
        ///or simply when it has been marked as returned in the system.
        ///</summary>
        public ReturnClosePayload? returnClose { get; set; }
        ///<summary>
        ///Creates a return.
        ///</summary>
        public ReturnCreatePayload? returnCreate { get; set; }
        ///<summary>
        ///Declines a return on an order.
        ///When a return is declined, each `ReturnLineItem.fulfillmentLineItem` can be associated to a new return.
        ///Use the `ReturnCreate` or `ReturnRequest` mutation to initiate a new return.
        ///</summary>
        public ReturnDeclineRequestPayload? returnDeclineRequest { get; set; }
        ///<summary>
        ///Refunds a return when its status is `OPEN` or `CLOSED` and associates it with the related return request.
        ///</summary>
        public ReturnRefundPayload? returnRefund { get; set; }
        ///<summary>
        ///Reopens a closed return.
        ///</summary>
        public ReturnReopenPayload? returnReopen { get; set; }
        ///<summary>
        ///A customer's return request that hasn't been approved or declined.
        ///This mutation sets the value of the `Return.status` field to `REQUESTED`.
        ///To create a return that has the `Return.status` field set to `OPEN`, use the `returnCreate` mutation.
        ///</summary>
        public ReturnRequestPayload? returnRequest { get; set; }
        ///<summary>
        ///Creates a new reverse delivery with associated external shipping information.
        ///</summary>
        public ReverseDeliveryCreateWithShippingPayload? reverseDeliveryCreateWithShipping { get; set; }

        ///<summary>
        ///Disposes reverse delivery line items for a reverse delivery on the same shop.
        ///</summary>
        [Obsolete("`reverseDeliveryDispose` will be removed in API version 2025-01. Use `reverseFulfillmentOrderDispose` instead.")]
        public ReverseDeliveryDisposePayload? reverseDeliveryDispose { get; set; }
        ///<summary>
        ///Updates a reverse delivery with associated external shipping information.
        ///</summary>
        public ReverseDeliveryShippingUpdatePayload? reverseDeliveryShippingUpdate { get; set; }
        ///<summary>
        ///Disposes reverse fulfillment order line items.
        ///</summary>
        public ReverseFulfillmentOrderDisposePayload? reverseFulfillmentOrderDispose { get; set; }
        ///<summary>
        ///Creates a saved search.
        ///</summary>
        public SavedSearchCreatePayload? savedSearchCreate { get; set; }
        ///<summary>
        ///Delete a saved search.
        ///</summary>
        public SavedSearchDeletePayload? savedSearchDelete { get; set; }
        ///<summary>
        ///Updates a saved search.
        ///</summary>
        public SavedSearchUpdatePayload? savedSearchUpdate { get; set; }
        ///<summary>
        ///<div class="note"><h4>Theme app extensions</h4>
        ///  <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
        ///
        ///<div class="note"><h4>Script tag deprecation</h4>
        ///  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
        ///
        ///
        ///Creates a new script tag.
        ///</summary>
        public ScriptTagCreatePayload? scriptTagCreate { get; set; }
        ///<summary>
        ///<div class="note"><h4>Theme app extensions</h4>
        ///  <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
        ///
        ///<div class="note"><h4>Script tag deprecation</h4>
        ///  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
        ///
        ///
        ///Deletes a script tag.
        ///</summary>
        public ScriptTagDeletePayload? scriptTagDelete { get; set; }
        ///<summary>
        ///<div class="note"><h4>Theme app extensions</h4>
        ///  <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
        ///
        ///<div class="note"><h4>Script tag deprecation</h4>
        ///  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
        ///
        ///
        ///Updates a script tag.
        ///</summary>
        public ScriptTagUpdatePayload? scriptTagUpdate { get; set; }
        ///<summary>
        ///Creates a segment.
        ///</summary>
        public SegmentCreatePayload? segmentCreate { get; set; }
        ///<summary>
        ///Deletes a segment.
        ///</summary>
        public SegmentDeletePayload? segmentDelete { get; set; }
        ///<summary>
        ///Updates a segment.
        ///</summary>
        public SegmentUpdatePayload? segmentUpdate { get; set; }
        ///<summary>
        ///Adds multiple product variants to a selling plan group.
        ///</summary>
        public SellingPlanGroupAddProductVariantsPayload? sellingPlanGroupAddProductVariants { get; set; }
        ///<summary>
        ///Adds multiple products to a selling plan group.
        ///</summary>
        public SellingPlanGroupAddProductsPayload? sellingPlanGroupAddProducts { get; set; }
        ///<summary>
        ///Creates a Selling Plan Group.
        ///</summary>
        public SellingPlanGroupCreatePayload? sellingPlanGroupCreate { get; set; }
        ///<summary>
        ///Delete a Selling Plan Group.
        ///</summary>
        public SellingPlanGroupDeletePayload? sellingPlanGroupDelete { get; set; }
        ///<summary>
        ///Removes multiple product variants from a selling plan group.
        ///</summary>
        public SellingPlanGroupRemoveProductVariantsPayload? sellingPlanGroupRemoveProductVariants { get; set; }
        ///<summary>
        ///Removes multiple products from a selling plan group.
        ///</summary>
        public SellingPlanGroupRemoveProductsPayload? sellingPlanGroupRemoveProducts { get; set; }
        ///<summary>
        ///Update a Selling Plan Group.
        ///</summary>
        public SellingPlanGroupUpdatePayload? sellingPlanGroupUpdate { get; set; }
        ///<summary>
        ///Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return.
        ///</summary>
        public ServerPixelCreatePayload? serverPixelCreate { get; set; }
        ///<summary>
        ///Deletes the Server Pixel associated with the current app & shop.
        ///</summary>
        public ServerPixelDeletePayload? serverPixelDelete { get; set; }
        ///<summary>
        ///Deletes a shipping package.
        ///</summary>
        public ShippingPackageDeletePayload? shippingPackageDelete { get; set; }
        ///<summary>
        ///Set a shipping package as the default.
        ///The default shipping package is the one used to calculate shipping costs on checkout.
        ///</summary>
        public ShippingPackageMakeDefaultPayload? shippingPackageMakeDefault { get; set; }
        ///<summary>
        ///Updates a shipping package.
        ///</summary>
        public ShippingPackageUpdatePayload? shippingPackageUpdate { get; set; }
        ///<summary>
        ///Deletes a locale for a shop. This also deletes all translations of this locale.
        ///</summary>
        public ShopLocaleDisablePayload? shopLocaleDisable { get; set; }
        ///<summary>
        ///Adds a locale for a shop. The newly added locale is in the unpublished state.
        ///</summary>
        public ShopLocaleEnablePayload? shopLocaleEnable { get; set; }
        ///<summary>
        ///Updates a locale for a shop.
        ///</summary>
        public ShopLocaleUpdatePayload? shopLocaleUpdate { get; set; }
        ///<summary>
        ///Updates a shop policy.
        ///</summary>
        public ShopPolicyUpdatePayload? shopPolicyUpdate { get; set; }
        ///<summary>
        ///The `ResourceFeedback` object lets your app report the status of shops and their resources. For example, if
        ///your app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.
        ///
        ///Resource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.
        ///
        ///This resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.
        ///
        ///## Sending feedback on a shop
        ///
        ///You can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: `requires_action` or `success`. You need to send a `requires_action` feedback request for each step that the merchant is required to complete.
        ///
        ///If there are multiple set-up steps that require merchant action, then send feedback with a state of `requires_action` as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a `success` feedback request.
        ///
        ///#### Important
        ///Sending feedback replaces previously sent feedback for the shop. Send a new `shopResourceFeedbackCreate` mutation to push the latest state of a shop or its resources to Shopify.
        ///</summary>
        public ShopResourceFeedbackCreatePayload? shopResourceFeedbackCreate { get; set; }

        ///<summary>
        ///Generates the URL and signed paramaters needed to upload an asset to Shopify.
        ///</summary>
        [Obsolete("Use `stagedUploadsCreate` instead.")]
        public StagedUploadTargetGeneratePayload? stagedUploadTargetGenerate { get; set; }

        ///<summary>
        ///Uploads multiple images.
        ///</summary>
        [Obsolete("Use `stagedUploadsCreate` instead.")]
        public StagedUploadTargetsGeneratePayload? stagedUploadTargetsGenerate { get; set; }
        ///<summary>
        ///Creates staged upload targets for each input. This is the first step in the upload process.
        ///The returned staged upload targets' URL and parameter fields can be used to send a request
        ///to upload the file described in the corresponding input.
        ///
        ///For more information on the upload process, refer to
        ///[Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
        ///</summary>
        public StagedUploadsCreatePayload? stagedUploadsCreate { get; set; }
        ///<summary>
        ///Activates the specified standard metafield definition from its template.
        ///
        ///Refer to the [list of standard metafield definition templates](https://shopify.dev/apps/metafields/definitions/standard-definitions).
        ///</summary>
        public StandardMetafieldDefinitionEnablePayload? standardMetafieldDefinitionEnable { get; set; }
        ///<summary>
        ///Enables the specified standard metaobject definition from its template.
        ///</summary>
        public StandardMetaobjectDefinitionEnablePayload? standardMetaobjectDefinitionEnable { get; set; }
        ///<summary>
        ///Creates a storefront access token. An app can have a maximum of 100 active storefront access tokens for each shop.
        ///</summary>
        public StorefrontAccessTokenCreatePayload? storefrontAccessTokenCreate { get; set; }
        ///<summary>
        ///Deletes a storefront access token.
        ///</summary>
        public StorefrontAccessTokenDeletePayload? storefrontAccessTokenDelete { get; set; }
        ///<summary>
        ///Creates a new subscription billing attempt. For more information, refer to [Create a subscription contract](https://shopify.dev/docs/apps/selling-strategies/subscriptions/contracts/create#step-4-create-a-billing-attempt).
        ///</summary>
        public SubscriptionBillingAttemptCreatePayload? subscriptionBillingAttemptCreate { get; set; }
        ///<summary>
        ///Commits the updates of a Subscription Billing Cycle Contract draft.
        ///</summary>
        public SubscriptionBillingCycleContractDraftCommitPayload? subscriptionBillingCycleContractDraftCommit { get; set; }
        ///<summary>
        ///Concatenates a contract to a Subscription Draft.
        ///</summary>
        public SubscriptionBillingCycleContractDraftConcatenatePayload? subscriptionBillingCycleContractDraftConcatenate { get; set; }
        ///<summary>
        ///Edit the contents of a subscription contract for the specified billing cycle.
        ///</summary>
        public SubscriptionBillingCycleContractEditPayload? subscriptionBillingCycleContractEdit { get; set; }
        ///<summary>
        ///Delete the schedule and contract edits of the selected subscription billing cycle.
        ///</summary>
        public SubscriptionBillingCycleEditDeletePayload? subscriptionBillingCycleEditDelete { get; set; }
        ///<summary>
        ///Delete the current and future schedule and contract edits of a list of subscription billing cycles.
        ///</summary>
        public SubscriptionBillingCycleEditsDeletePayload? subscriptionBillingCycleEditsDelete { get; set; }
        ///<summary>
        ///Modify the schedule of a specific billing cycle.
        ///</summary>
        public SubscriptionBillingCycleScheduleEditPayload? subscriptionBillingCycleScheduleEdit { get; set; }
        ///<summary>
        ///Skips a Subscription Billing Cycle.
        ///</summary>
        public SubscriptionBillingCycleSkipPayload? subscriptionBillingCycleSkip { get; set; }
        ///<summary>
        ///Unskips a Subscription Billing Cycle.
        ///</summary>
        public SubscriptionBillingCycleUnskipPayload? subscriptionBillingCycleUnskip { get; set; }
        ///<summary>
        ///Activates a Subscription Contract.
        ///</summary>
        public SubscriptionContractActivatePayload? subscriptionContractActivate { get; set; }
        ///<summary>
        ///Creates a Subscription Contract.
        ///</summary>
        public SubscriptionContractAtomicCreatePayload? subscriptionContractAtomicCreate { get; set; }
        ///<summary>
        ///Cancels a Subscription Contract.
        ///</summary>
        public SubscriptionContractCancelPayload? subscriptionContractCancel { get; set; }
        ///<summary>
        ///Creates a Subscription Contract.
        ///</summary>
        public SubscriptionContractCreatePayload? subscriptionContractCreate { get; set; }
        ///<summary>
        ///Expires a Subscription Contract.
        ///</summary>
        public SubscriptionContractExpirePayload? subscriptionContractExpire { get; set; }
        ///<summary>
        ///Fails a Subscription Contract.
        ///</summary>
        public SubscriptionContractFailPayload? subscriptionContractFail { get; set; }
        ///<summary>
        ///Pauses a Subscription Contract.
        ///</summary>
        public SubscriptionContractPausePayload? subscriptionContractPause { get; set; }
        ///<summary>
        ///Allows for the easy change of a Product in a Contract or a Product price change.
        ///</summary>
        public SubscriptionContractProductChangePayload? subscriptionContractProductChange { get; set; }
        ///<summary>
        ///Sets the next billing date of a Subscription Contract. This field is managed by the apps.
        ///        Alternatively you can utilize our
        ///        [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
        ///        which provide auto-computed billing dates and additional functionalities.
        ///</summary>
        public SubscriptionContractSetNextBillingDatePayload? subscriptionContractSetNextBillingDate { get; set; }
        ///<summary>
        ///Updates a Subscription Contract.
        ///</summary>
        public SubscriptionContractUpdatePayload? subscriptionContractUpdate { get; set; }
        ///<summary>
        ///Commits the updates of a Subscription Contract draft.
        ///</summary>
        public SubscriptionDraftCommitPayload? subscriptionDraftCommit { get; set; }
        ///<summary>
        ///Adds a subscription discount to a subscription draft.
        ///</summary>
        public SubscriptionDraftDiscountAddPayload? subscriptionDraftDiscountAdd { get; set; }
        ///<summary>
        ///Applies a code discount on the subscription draft.
        ///</summary>
        public SubscriptionDraftDiscountCodeApplyPayload? subscriptionDraftDiscountCodeApply { get; set; }
        ///<summary>
        ///Removes a subscription discount from a subscription draft.
        ///</summary>
        public SubscriptionDraftDiscountRemovePayload? subscriptionDraftDiscountRemove { get; set; }
        ///<summary>
        ///Updates a subscription discount on a subscription draft.
        ///</summary>
        public SubscriptionDraftDiscountUpdatePayload? subscriptionDraftDiscountUpdate { get; set; }
        ///<summary>
        ///Adds a subscription free shipping discount to a subscription draft.
        ///</summary>
        public SubscriptionDraftFreeShippingDiscountAddPayload? subscriptionDraftFreeShippingDiscountAdd { get; set; }
        ///<summary>
        ///Updates a subscription free shipping discount on a subscription draft.
        ///</summary>
        public SubscriptionDraftFreeShippingDiscountUpdatePayload? subscriptionDraftFreeShippingDiscountUpdate { get; set; }
        ///<summary>
        ///Adds a subscription line to a subscription draft.
        ///</summary>
        public SubscriptionDraftLineAddPayload? subscriptionDraftLineAdd { get; set; }
        ///<summary>
        ///Removes a subscription line from a subscription draft.
        ///</summary>
        public SubscriptionDraftLineRemovePayload? subscriptionDraftLineRemove { get; set; }
        ///<summary>
        ///Updates a subscription line on a subscription draft.
        ///</summary>
        public SubscriptionDraftLineUpdatePayload? subscriptionDraftLineUpdate { get; set; }
        ///<summary>
        ///Updates a Subscription Draft.
        ///</summary>
        public SubscriptionDraftUpdatePayload? subscriptionDraftUpdate { get; set; }
        ///<summary>
        ///Add tags to an order, a draft order, a customer, a product, or an online store article.
        ///</summary>
        public TagsAddPayload? tagsAdd { get; set; }
        ///<summary>
        ///Remove tags from an order, a draft order, a customer, a product, or an online store article.
        ///</summary>
        public TagsRemovePayload? tagsRemove { get; set; }
        ///<summary>
        ///Allows tax app configurations for tax partners.
        ///</summary>
        public TaxAppConfigurePayload? taxAppConfigure { get; set; }
        ///<summary>
        ///Creates or updates translations.
        ///</summary>
        public TranslationsRegisterPayload? translationsRegister { get; set; }
        ///<summary>
        ///Deletes translations.
        ///</summary>
        public TranslationsRemovePayload? translationsRemove { get; set; }
        ///<summary>
        ///Asynchronously delete [URL redirects](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) in bulk.
        ///</summary>
        public UrlRedirectBulkDeleteAllPayload? urlRedirectBulkDeleteAll { get; set; }
        ///<summary>
        ///Asynchronously delete [URLRedirect](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) 
        ///objects in bulk by IDs.
        ///Learn more about [URLRedirect](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect) 
        ///objects.
        ///</summary>
        public UrlRedirectBulkDeleteByIdsPayload? urlRedirectBulkDeleteByIds { get; set; }
        ///<summary>
        ///Asynchronously delete redirects in bulk.
        ///</summary>
        public UrlRedirectBulkDeleteBySavedSearchPayload? urlRedirectBulkDeleteBySavedSearch { get; set; }
        ///<summary>
        ///Asynchronously delete redirects in bulk.
        ///</summary>
        public UrlRedirectBulkDeleteBySearchPayload? urlRedirectBulkDeleteBySearch { get; set; }
        ///<summary>
        ///Creates a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.
        ///</summary>
        public UrlRedirectCreatePayload? urlRedirectCreate { get; set; }
        ///<summary>
        ///Deletes a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.
        ///</summary>
        public UrlRedirectDeletePayload? urlRedirectDelete { get; set; }
        ///<summary>
        ///Creates a [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.
        ///
        ///After creating the `UrlRedirectImport` object, the `UrlRedirectImport` request can be performed using the [`urlRedirectImportSubmit`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportSubmit) mutation.
        ///</summary>
        public UrlRedirectImportCreatePayload? urlRedirectImportCreate { get; set; }
        ///<summary>
        ///Submits a `UrlRedirectImport` request to be processed.
        ///
        ///The `UrlRedirectImport` request is first created with the [`urlRedirectImportCreate`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate) mutation.
        ///</summary>
        public UrlRedirectImportSubmitPayload? urlRedirectImportSubmit { get; set; }
        ///<summary>
        ///Updates a URL redirect.
        ///</summary>
        public UrlRedirectUpdatePayload? urlRedirectUpdate { get; set; }
        ///<summary>
        ///Creates a validation.
        ///</summary>
        public ValidationCreatePayload? validationCreate { get; set; }
        ///<summary>
        ///Deletes a validation.
        ///</summary>
        public ValidationDeletePayload? validationDelete { get; set; }
        ///<summary>
        ///Update a validation.
        ///</summary>
        public ValidationUpdatePayload? validationUpdate { get; set; }
        ///<summary>
        ///Creates a new web pixel settings.
        ///</summary>
        public WebPixelCreatePayload? webPixelCreate { get; set; }
        ///<summary>
        ///Deletes the web pixel shop settings.
        ///</summary>
        public WebPixelDeletePayload? webPixelDelete { get; set; }
        ///<summary>
        ///Updates the web pixel settings.
        ///</summary>
        public WebPixelUpdatePayload? webPixelUpdate { get; set; }
        ///<summary>
        ///Creates a new webhook subscription.
        ///</summary>
        public WebhookSubscriptionCreatePayload? webhookSubscriptionCreate { get; set; }
        ///<summary>
        ///Deletes a webhook subscription.
        ///</summary>
        public WebhookSubscriptionDeletePayload? webhookSubscriptionDelete { get; set; }
        ///<summary>
        ///Updates a webhook subscription.
        ///</summary>
        public WebhookSubscriptionUpdatePayload? webhookSubscriptionUpdate { get; set; }
    }

    ///<summary>
    ///A signed upload parameter for uploading an asset to Shopify.
    ///
    ///Deprecated in favor of
    ///[StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
    ///which is used in
    ///[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
    ///and returned by the
    ///[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
    ///</summary>
    public class MutationsStagedUploadTargetGenerateUploadParameter : GraphQLObject<MutationsStagedUploadTargetGenerateUploadParameter>
    {
        ///<summary>
        ///The upload parameter name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The upload parameter value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///A default cursor that you can use in queries to paginate your results. Each edge in a connection can
    ///return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
    ///the starting point to retrieve the nodes before or after it in a connection.
    ///
    ///To learn more about using cursor-based pagination, refer to
    ///[Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AbandonedCheckout), typeDiscriminator: "AbandonedCheckout")]
    [JsonDerivedType(typeof(Company), typeDiscriminator: "Company")]
    [JsonDerivedType(typeof(CompanyLocation), typeDiscriminator: "CompanyLocation")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(OnlineStoreArticle), typeDiscriminator: "OnlineStoreArticle")]
    [JsonDerivedType(typeof(OnlineStorePage), typeDiscriminator: "OnlineStorePage")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    public interface INavigable : IGraphQLObject
    {
        public AbandonedCheckout? AsAbandonedCheckout() => this as AbandonedCheckout;
        public Company? AsCompany() => this as Company;
        public CompanyLocation? AsCompanyLocation() => this as CompanyLocation;
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public OnlineStoreArticle? AsOnlineStoreArticle() => this as OnlineStoreArticle;
        public OnlineStorePage? AsOnlineStorePage() => this as OnlineStorePage;
        public Product? AsProduct() => this as Product;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; }
    }

    ///<summary>
    ///A navigation item, holding basic link attributes.
    ///</summary>
    public class NavigationItem : GraphQLObject<NavigationItem>
    {
        ///<summary>
        ///The unique identifier of the navigation item.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the navigation item.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The URL of the page that the navigation item links to.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///An object with an ID field to support global identification, in accordance with the
    ///[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
    ///This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
    ///and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AbandonedCheckout), typeDiscriminator: "AbandonedCheckout")]
    [JsonDerivedType(typeof(AbandonedCheckoutLineItem), typeDiscriminator: "AbandonedCheckoutLineItem")]
    [JsonDerivedType(typeof(Abandonment), typeDiscriminator: "Abandonment")]
    [JsonDerivedType(typeof(AddAllProductsOperation), typeDiscriminator: "AddAllProductsOperation")]
    [JsonDerivedType(typeof(AdditionalFee), typeDiscriminator: "AdditionalFee")]
    [JsonDerivedType(typeof(App), typeDiscriminator: "App")]
    [JsonDerivedType(typeof(AppCatalog), typeDiscriminator: "AppCatalog")]
    [JsonDerivedType(typeof(AppCredit), typeDiscriminator: "AppCredit")]
    [JsonDerivedType(typeof(AppInstallation), typeDiscriminator: "AppInstallation")]
    [JsonDerivedType(typeof(AppPurchaseOneTime), typeDiscriminator: "AppPurchaseOneTime")]
    [JsonDerivedType(typeof(AppRevenueAttributionRecord), typeDiscriminator: "AppRevenueAttributionRecord")]
    [JsonDerivedType(typeof(AppSubscription), typeDiscriminator: "AppSubscription")]
    [JsonDerivedType(typeof(AppUsageRecord), typeDiscriminator: "AppUsageRecord")]
    [JsonDerivedType(typeof(BasicEvent), typeDiscriminator: "BasicEvent")]
    [JsonDerivedType(typeof(BulkOperation), typeDiscriminator: "BulkOperation")]
    [JsonDerivedType(typeof(CalculatedOrder), typeDiscriminator: "CalculatedOrder")]
    [JsonDerivedType(typeof(CartTransform), typeDiscriminator: "CartTransform")]
    [JsonDerivedType(typeof(CatalogCsvOperation), typeDiscriminator: "CatalogCsvOperation")]
    [JsonDerivedType(typeof(Channel), typeDiscriminator: "Channel")]
    [JsonDerivedType(typeof(ChannelDefinition), typeDiscriminator: "ChannelDefinition")]
    [JsonDerivedType(typeof(ChannelInformation), typeDiscriminator: "ChannelInformation")]
    [JsonDerivedType(typeof(CheckoutProfile), typeDiscriminator: "CheckoutProfile")]
    [JsonDerivedType(typeof(Collection), typeDiscriminator: "Collection")]
    [JsonDerivedType(typeof(CommentEvent), typeDiscriminator: "CommentEvent")]
    [JsonDerivedType(typeof(Company), typeDiscriminator: "Company")]
    [JsonDerivedType(typeof(CompanyAddress), typeDiscriminator: "CompanyAddress")]
    [JsonDerivedType(typeof(CompanyContact), typeDiscriminator: "CompanyContact")]
    [JsonDerivedType(typeof(CompanyContactRole), typeDiscriminator: "CompanyContactRole")]
    [JsonDerivedType(typeof(CompanyContactRoleAssignment), typeDiscriminator: "CompanyContactRoleAssignment")]
    [JsonDerivedType(typeof(CompanyLocation), typeDiscriminator: "CompanyLocation")]
    [JsonDerivedType(typeof(CompanyLocationCatalog), typeDiscriminator: "CompanyLocationCatalog")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(CustomerPaymentMethod), typeDiscriminator: "CustomerPaymentMethod")]
    [JsonDerivedType(typeof(CustomerSegmentMembersQuery), typeDiscriminator: "CustomerSegmentMembersQuery")]
    [JsonDerivedType(typeof(CustomerVisit), typeDiscriminator: "CustomerVisit")]
    [JsonDerivedType(typeof(DeliveryCarrierService), typeDiscriminator: "DeliveryCarrierService")]
    [JsonDerivedType(typeof(DeliveryCondition), typeDiscriminator: "DeliveryCondition")]
    [JsonDerivedType(typeof(DeliveryCountry), typeDiscriminator: "DeliveryCountry")]
    [JsonDerivedType(typeof(DeliveryCustomization), typeDiscriminator: "DeliveryCustomization")]
    [JsonDerivedType(typeof(DeliveryLocationGroup), typeDiscriminator: "DeliveryLocationGroup")]
    [JsonDerivedType(typeof(DeliveryMethod), typeDiscriminator: "DeliveryMethod")]
    [JsonDerivedType(typeof(DeliveryMethodDefinition), typeDiscriminator: "DeliveryMethodDefinition")]
    [JsonDerivedType(typeof(DeliveryParticipant), typeDiscriminator: "DeliveryParticipant")]
    [JsonDerivedType(typeof(DeliveryProfile), typeDiscriminator: "DeliveryProfile")]
    [JsonDerivedType(typeof(DeliveryProfileItem), typeDiscriminator: "DeliveryProfileItem")]
    [JsonDerivedType(typeof(DeliveryProvince), typeDiscriminator: "DeliveryProvince")]
    [JsonDerivedType(typeof(DeliveryRateDefinition), typeDiscriminator: "DeliveryRateDefinition")]
    [JsonDerivedType(typeof(DeliveryZone), typeDiscriminator: "DeliveryZone")]
    [JsonDerivedType(typeof(DiscountAutomaticBxgy), typeDiscriminator: "DiscountAutomaticBxgy")]
    [JsonDerivedType(typeof(DiscountAutomaticNode), typeDiscriminator: "DiscountAutomaticNode")]
    [JsonDerivedType(typeof(DiscountCodeNode), typeDiscriminator: "DiscountCodeNode")]
    [JsonDerivedType(typeof(DiscountNode), typeDiscriminator: "DiscountNode")]
    [JsonDerivedType(typeof(DiscountRedeemCodeBulkCreation), typeDiscriminator: "DiscountRedeemCodeBulkCreation")]
    [JsonDerivedType(typeof(Domain), typeDiscriminator: "Domain")]
    [JsonDerivedType(typeof(DraftOrder), typeDiscriminator: "DraftOrder")]
    [JsonDerivedType(typeof(DraftOrderLineItem), typeDiscriminator: "DraftOrderLineItem")]
    [JsonDerivedType(typeof(DraftOrderTag), typeDiscriminator: "DraftOrderTag")]
    [JsonDerivedType(typeof(Duty), typeDiscriminator: "Duty")]
    [JsonDerivedType(typeof(ExchangeV2), typeDiscriminator: "ExchangeV2")]
    [JsonDerivedType(typeof(ExternalVideo), typeDiscriminator: "ExternalVideo")]
    [JsonDerivedType(typeof(Fulfillment), typeDiscriminator: "Fulfillment")]
    [JsonDerivedType(typeof(FulfillmentConstraintRule), typeDiscriminator: "FulfillmentConstraintRule")]
    [JsonDerivedType(typeof(FulfillmentEvent), typeDiscriminator: "FulfillmentEvent")]
    [JsonDerivedType(typeof(FulfillmentLineItem), typeDiscriminator: "FulfillmentLineItem")]
    [JsonDerivedType(typeof(FulfillmentOrder), typeDiscriminator: "FulfillmentOrder")]
    [JsonDerivedType(typeof(FulfillmentOrderDestination), typeDiscriminator: "FulfillmentOrderDestination")]
    [JsonDerivedType(typeof(FulfillmentOrderLineItem), typeDiscriminator: "FulfillmentOrderLineItem")]
    [JsonDerivedType(typeof(FulfillmentOrderMerchantRequest), typeDiscriminator: "FulfillmentOrderMerchantRequest")]
    [JsonDerivedType(typeof(GenericFile), typeDiscriminator: "GenericFile")]
    [JsonDerivedType(typeof(GiftCard), typeDiscriminator: "GiftCard")]
    [JsonDerivedType(typeof(InventoryAdjustmentGroup), typeDiscriminator: "InventoryAdjustmentGroup")]
    [JsonDerivedType(typeof(InventoryItem), typeDiscriminator: "InventoryItem")]
    [JsonDerivedType(typeof(InventoryLevel), typeDiscriminator: "InventoryLevel")]
    [JsonDerivedType(typeof(InventoryQuantity), typeDiscriminator: "InventoryQuantity")]
    [JsonDerivedType(typeof(LineItem), typeDiscriminator: "LineItem")]
    [JsonDerivedType(typeof(LineItemMutable), typeDiscriminator: "LineItemMutable")]
    [JsonDerivedType(typeof(Location), typeDiscriminator: "Location")]
    [JsonDerivedType(typeof(MailingAddress), typeDiscriminator: "MailingAddress")]
    [JsonDerivedType(typeof(Market), typeDiscriminator: "Market")]
    [JsonDerivedType(typeof(MarketCatalog), typeDiscriminator: "MarketCatalog")]
    [JsonDerivedType(typeof(MarketRegionCountry), typeDiscriminator: "MarketRegionCountry")]
    [JsonDerivedType(typeof(MarketWebPresence), typeDiscriminator: "MarketWebPresence")]
    [JsonDerivedType(typeof(MarketingActivity), typeDiscriminator: "MarketingActivity")]
    [JsonDerivedType(typeof(MarketingEvent), typeDiscriminator: "MarketingEvent")]
    [JsonDerivedType(typeof(MediaImage), typeDiscriminator: "MediaImage")]
    [JsonDerivedType(typeof(Metafield), typeDiscriminator: "Metafield")]
    [JsonDerivedType(typeof(MetafieldDefinition), typeDiscriminator: "MetafieldDefinition")]
    [JsonDerivedType(typeof(MetafieldStorefrontVisibility), typeDiscriminator: "MetafieldStorefrontVisibility")]
    [JsonDerivedType(typeof(Metaobject), typeDiscriminator: "Metaobject")]
    [JsonDerivedType(typeof(MetaobjectDefinition), typeDiscriminator: "MetaobjectDefinition")]
    [JsonDerivedType(typeof(Model3d), typeDiscriminator: "Model3d")]
    [JsonDerivedType(typeof(OnlineStoreArticle), typeDiscriminator: "OnlineStoreArticle")]
    [JsonDerivedType(typeof(OnlineStoreBlog), typeDiscriminator: "OnlineStoreBlog")]
    [JsonDerivedType(typeof(OnlineStorePage), typeDiscriminator: "OnlineStorePage")]
    [JsonDerivedType(typeof(Order), typeDiscriminator: "Order")]
    [JsonDerivedType(typeof(OrderDisputeSummary), typeDiscriminator: "OrderDisputeSummary")]
    [JsonDerivedType(typeof(OrderTransaction), typeDiscriminator: "OrderTransaction")]
    [JsonDerivedType(typeof(PaymentCustomization), typeDiscriminator: "PaymentCustomization")]
    [JsonDerivedType(typeof(PaymentMandate), typeDiscriminator: "PaymentMandate")]
    [JsonDerivedType(typeof(PaymentSchedule), typeDiscriminator: "PaymentSchedule")]
    [JsonDerivedType(typeof(PaymentTerms), typeDiscriminator: "PaymentTerms")]
    [JsonDerivedType(typeof(PaymentTermsTemplate), typeDiscriminator: "PaymentTermsTemplate")]
    [JsonDerivedType(typeof(PriceList), typeDiscriminator: "PriceList")]
    [JsonDerivedType(typeof(PriceRule), typeDiscriminator: "PriceRule")]
    [JsonDerivedType(typeof(PriceRuleDiscountCode), typeDiscriminator: "PriceRuleDiscountCode")]
    [JsonDerivedType(typeof(PrivateMetafield), typeDiscriminator: "PrivateMetafield")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    [JsonDerivedType(typeof(ProductFeed), typeDiscriminator: "ProductFeed")]
    [JsonDerivedType(typeof(ProductOption), typeDiscriminator: "ProductOption")]
    [JsonDerivedType(typeof(ProductTaxonomyNode), typeDiscriminator: "ProductTaxonomyNode")]
    [JsonDerivedType(typeof(ProductVariant), typeDiscriminator: "ProductVariant")]
    [JsonDerivedType(typeof(ProductVariantComponent), typeDiscriminator: "ProductVariantComponent")]
    [JsonDerivedType(typeof(Publication), typeDiscriminator: "Publication")]
    [JsonDerivedType(typeof(PublicationResourceOperation), typeDiscriminator: "PublicationResourceOperation")]
    [JsonDerivedType(typeof(QuantityPriceBreak), typeDiscriminator: "QuantityPriceBreak")]
    [JsonDerivedType(typeof(Refund), typeDiscriminator: "Refund")]
    [JsonDerivedType(typeof(Return), typeDiscriminator: "Return")]
    [JsonDerivedType(typeof(ReturnLineItem), typeDiscriminator: "ReturnLineItem")]
    [JsonDerivedType(typeof(ReturnableFulfillment), typeDiscriminator: "ReturnableFulfillment")]
    [JsonDerivedType(typeof(ReverseDelivery), typeDiscriminator: "ReverseDelivery")]
    [JsonDerivedType(typeof(ReverseDeliveryLineItem), typeDiscriminator: "ReverseDeliveryLineItem")]
    [JsonDerivedType(typeof(ReverseFulfillmentOrder), typeDiscriminator: "ReverseFulfillmentOrder")]
    [JsonDerivedType(typeof(ReverseFulfillmentOrderDisposition), typeDiscriminator: "ReverseFulfillmentOrderDisposition")]
    [JsonDerivedType(typeof(ReverseFulfillmentOrderLineItem), typeDiscriminator: "ReverseFulfillmentOrderLineItem")]
    [JsonDerivedType(typeof(SaleAdditionalFee), typeDiscriminator: "SaleAdditionalFee")]
    [JsonDerivedType(typeof(SavedSearch), typeDiscriminator: "SavedSearch")]
    [JsonDerivedType(typeof(ScriptTag), typeDiscriminator: "ScriptTag")]
    [JsonDerivedType(typeof(Segment), typeDiscriminator: "Segment")]
    [JsonDerivedType(typeof(SellingPlan), typeDiscriminator: "SellingPlan")]
    [JsonDerivedType(typeof(SellingPlanGroup), typeDiscriminator: "SellingPlanGroup")]
    [JsonDerivedType(typeof(ServerPixel), typeDiscriminator: "ServerPixel")]
    [JsonDerivedType(typeof(Shop), typeDiscriminator: "Shop")]
    [JsonDerivedType(typeof(ShopAddress), typeDiscriminator: "ShopAddress")]
    [JsonDerivedType(typeof(ShopPolicy), typeDiscriminator: "ShopPolicy")]
    [JsonDerivedType(typeof(ShopifyPaymentsAccount), typeDiscriminator: "ShopifyPaymentsAccount")]
    [JsonDerivedType(typeof(ShopifyPaymentsBalanceTransaction), typeDiscriminator: "ShopifyPaymentsBalanceTransaction")]
    [JsonDerivedType(typeof(ShopifyPaymentsBankAccount), typeDiscriminator: "ShopifyPaymentsBankAccount")]
    [JsonDerivedType(typeof(ShopifyPaymentsDispute), typeDiscriminator: "ShopifyPaymentsDispute")]
    [JsonDerivedType(typeof(ShopifyPaymentsDisputeEvidence), typeDiscriminator: "ShopifyPaymentsDisputeEvidence")]
    [JsonDerivedType(typeof(ShopifyPaymentsDisputeFileUpload), typeDiscriminator: "ShopifyPaymentsDisputeFileUpload")]
    [JsonDerivedType(typeof(ShopifyPaymentsDisputeFulfillment), typeDiscriminator: "ShopifyPaymentsDisputeFulfillment")]
    [JsonDerivedType(typeof(ShopifyPaymentsPayout), typeDiscriminator: "ShopifyPaymentsPayout")]
    [JsonDerivedType(typeof(ShopifyPaymentsVerification), typeDiscriminator: "ShopifyPaymentsVerification")]
    [JsonDerivedType(typeof(StaffMember), typeDiscriminator: "StaffMember")]
    [JsonDerivedType(typeof(StandardMetafieldDefinitionTemplate), typeDiscriminator: "StandardMetafieldDefinitionTemplate")]
    [JsonDerivedType(typeof(StorefrontAccessToken), typeDiscriminator: "StorefrontAccessToken")]
    [JsonDerivedType(typeof(SubscriptionBillingAttempt), typeDiscriminator: "SubscriptionBillingAttempt")]
    [JsonDerivedType(typeof(SubscriptionContract), typeDiscriminator: "SubscriptionContract")]
    [JsonDerivedType(typeof(SubscriptionDraft), typeDiscriminator: "SubscriptionDraft")]
    [JsonDerivedType(typeof(TenderTransaction), typeDiscriminator: "TenderTransaction")]
    [JsonDerivedType(typeof(TransactionFee), typeDiscriminator: "TransactionFee")]
    [JsonDerivedType(typeof(UrlRedirect), typeDiscriminator: "UrlRedirect")]
    [JsonDerivedType(typeof(UrlRedirectImport), typeDiscriminator: "UrlRedirectImport")]
    [JsonDerivedType(typeof(Validation), typeDiscriminator: "Validation")]
    [JsonDerivedType(typeof(Video), typeDiscriminator: "Video")]
    [JsonDerivedType(typeof(WebPixel), typeDiscriminator: "WebPixel")]
    [JsonDerivedType(typeof(WebhookSubscription), typeDiscriminator: "WebhookSubscription")]
    public interface INode : IGraphQLObject
    {
        public AbandonedCheckout? AsAbandonedCheckout() => this as AbandonedCheckout;
        public AbandonedCheckoutLineItem? AsAbandonedCheckoutLineItem() => this as AbandonedCheckoutLineItem;
        public Abandonment? AsAbandonment() => this as Abandonment;
        public AddAllProductsOperation? AsAddAllProductsOperation() => this as AddAllProductsOperation;
        public AdditionalFee? AsAdditionalFee() => this as AdditionalFee;
        public App? AsApp() => this as App;
        public AppCatalog? AsAppCatalog() => this as AppCatalog;
        public AppCredit? AsAppCredit() => this as AppCredit;
        public AppInstallation? AsAppInstallation() => this as AppInstallation;
        public AppPurchaseOneTime? AsAppPurchaseOneTime() => this as AppPurchaseOneTime;
        public AppRevenueAttributionRecord? AsAppRevenueAttributionRecord() => this as AppRevenueAttributionRecord;
        public AppSubscription? AsAppSubscription() => this as AppSubscription;
        public AppUsageRecord? AsAppUsageRecord() => this as AppUsageRecord;
        public BasicEvent? AsBasicEvent() => this as BasicEvent;
        public BulkOperation? AsBulkOperation() => this as BulkOperation;
        public CalculatedOrder? AsCalculatedOrder() => this as CalculatedOrder;
        public CartTransform? AsCartTransform() => this as CartTransform;
        public CatalogCsvOperation? AsCatalogCsvOperation() => this as CatalogCsvOperation;
        public Channel? AsChannel() => this as Channel;
        public ChannelDefinition? AsChannelDefinition() => this as ChannelDefinition;
        public ChannelInformation? AsChannelInformation() => this as ChannelInformation;
        public CheckoutProfile? AsCheckoutProfile() => this as CheckoutProfile;
        public Collection? AsCollection() => this as Collection;
        public CommentEvent? AsCommentEvent() => this as CommentEvent;
        public Company? AsCompany() => this as Company;
        public CompanyAddress? AsCompanyAddress() => this as CompanyAddress;
        public CompanyContact? AsCompanyContact() => this as CompanyContact;
        public CompanyContactRole? AsCompanyContactRole() => this as CompanyContactRole;
        public CompanyContactRoleAssignment? AsCompanyContactRoleAssignment() => this as CompanyContactRoleAssignment;
        public CompanyLocation? AsCompanyLocation() => this as CompanyLocation;
        public CompanyLocationCatalog? AsCompanyLocationCatalog() => this as CompanyLocationCatalog;
        public Customer? AsCustomer() => this as Customer;
        public CustomerPaymentMethod? AsCustomerPaymentMethod() => this as CustomerPaymentMethod;
        public CustomerSegmentMembersQuery? AsCustomerSegmentMembersQuery() => this as CustomerSegmentMembersQuery;
        public CustomerVisit? AsCustomerVisit() => this as CustomerVisit;
        public DeliveryCarrierService? AsDeliveryCarrierService() => this as DeliveryCarrierService;
        public DeliveryCondition? AsDeliveryCondition() => this as DeliveryCondition;
        public DeliveryCountry? AsDeliveryCountry() => this as DeliveryCountry;
        public DeliveryCustomization? AsDeliveryCustomization() => this as DeliveryCustomization;
        public DeliveryLocationGroup? AsDeliveryLocationGroup() => this as DeliveryLocationGroup;
        public DeliveryMethod? AsDeliveryMethod() => this as DeliveryMethod;
        public DeliveryMethodDefinition? AsDeliveryMethodDefinition() => this as DeliveryMethodDefinition;
        public DeliveryParticipant? AsDeliveryParticipant() => this as DeliveryParticipant;
        public DeliveryProfile? AsDeliveryProfile() => this as DeliveryProfile;
        public DeliveryProfileItem? AsDeliveryProfileItem() => this as DeliveryProfileItem;
        public DeliveryProvince? AsDeliveryProvince() => this as DeliveryProvince;
        public DeliveryRateDefinition? AsDeliveryRateDefinition() => this as DeliveryRateDefinition;
        public DeliveryZone? AsDeliveryZone() => this as DeliveryZone;
        public DiscountAutomaticBxgy? AsDiscountAutomaticBxgy() => this as DiscountAutomaticBxgy;
        public DiscountAutomaticNode? AsDiscountAutomaticNode() => this as DiscountAutomaticNode;
        public DiscountCodeNode? AsDiscountCodeNode() => this as DiscountCodeNode;
        public DiscountNode? AsDiscountNode() => this as DiscountNode;
        public DiscountRedeemCodeBulkCreation? AsDiscountRedeemCodeBulkCreation() => this as DiscountRedeemCodeBulkCreation;
        public Domain? AsDomain() => this as Domain;
        public DraftOrder? AsDraftOrder() => this as DraftOrder;
        public DraftOrderLineItem? AsDraftOrderLineItem() => this as DraftOrderLineItem;
        public DraftOrderTag? AsDraftOrderTag() => this as DraftOrderTag;
        public Duty? AsDuty() => this as Duty;
        public ExchangeV2? AsExchangeV2() => this as ExchangeV2;
        public ExternalVideo? AsExternalVideo() => this as ExternalVideo;
        public Fulfillment? AsFulfillment() => this as Fulfillment;
        public FulfillmentConstraintRule? AsFulfillmentConstraintRule() => this as FulfillmentConstraintRule;
        public FulfillmentEvent? AsFulfillmentEvent() => this as FulfillmentEvent;
        public FulfillmentLineItem? AsFulfillmentLineItem() => this as FulfillmentLineItem;
        public FulfillmentOrder? AsFulfillmentOrder() => this as FulfillmentOrder;
        public FulfillmentOrderDestination? AsFulfillmentOrderDestination() => this as FulfillmentOrderDestination;
        public FulfillmentOrderLineItem? AsFulfillmentOrderLineItem() => this as FulfillmentOrderLineItem;
        public FulfillmentOrderMerchantRequest? AsFulfillmentOrderMerchantRequest() => this as FulfillmentOrderMerchantRequest;
        public GenericFile? AsGenericFile() => this as GenericFile;
        public GiftCard? AsGiftCard() => this as GiftCard;
        public InventoryAdjustmentGroup? AsInventoryAdjustmentGroup() => this as InventoryAdjustmentGroup;
        public InventoryItem? AsInventoryItem() => this as InventoryItem;
        public InventoryLevel? AsInventoryLevel() => this as InventoryLevel;
        public InventoryQuantity? AsInventoryQuantity() => this as InventoryQuantity;
        public LineItem? AsLineItem() => this as LineItem;
        public LineItemMutable? AsLineItemMutable() => this as LineItemMutable;
        public Location? AsLocation() => this as Location;
        public MailingAddress? AsMailingAddress() => this as MailingAddress;
        public Market? AsMarket() => this as Market;
        public MarketCatalog? AsMarketCatalog() => this as MarketCatalog;
        public MarketRegionCountry? AsMarketRegionCountry() => this as MarketRegionCountry;
        public MarketWebPresence? AsMarketWebPresence() => this as MarketWebPresence;
        public MarketingActivity? AsMarketingActivity() => this as MarketingActivity;
        public MarketingEvent? AsMarketingEvent() => this as MarketingEvent;
        public MediaImage? AsMediaImage() => this as MediaImage;
        public Metafield? AsMetafield() => this as Metafield;
        public MetafieldDefinition? AsMetafieldDefinition() => this as MetafieldDefinition;
        public MetafieldStorefrontVisibility? AsMetafieldStorefrontVisibility() => this as MetafieldStorefrontVisibility;
        public Metaobject? AsMetaobject() => this as Metaobject;
        public MetaobjectDefinition? AsMetaobjectDefinition() => this as MetaobjectDefinition;
        public Model3d? AsModel3d() => this as Model3d;
        public OnlineStoreArticle? AsOnlineStoreArticle() => this as OnlineStoreArticle;
        public OnlineStoreBlog? AsOnlineStoreBlog() => this as OnlineStoreBlog;
        public OnlineStorePage? AsOnlineStorePage() => this as OnlineStorePage;
        public Order? AsOrder() => this as Order;
        public OrderDisputeSummary? AsOrderDisputeSummary() => this as OrderDisputeSummary;
        public OrderTransaction? AsOrderTransaction() => this as OrderTransaction;
        public PaymentCustomization? AsPaymentCustomization() => this as PaymentCustomization;
        public PaymentMandate? AsPaymentMandate() => this as PaymentMandate;
        public PaymentSchedule? AsPaymentSchedule() => this as PaymentSchedule;
        public PaymentTerms? AsPaymentTerms() => this as PaymentTerms;
        public PaymentTermsTemplate? AsPaymentTermsTemplate() => this as PaymentTermsTemplate;
        public PriceList? AsPriceList() => this as PriceList;
        public PriceRule? AsPriceRule() => this as PriceRule;
        public PriceRuleDiscountCode? AsPriceRuleDiscountCode() => this as PriceRuleDiscountCode;
        public PrivateMetafield? AsPrivateMetafield() => this as PrivateMetafield;
        public Product? AsProduct() => this as Product;
        public ProductFeed? AsProductFeed() => this as ProductFeed;
        public ProductOption? AsProductOption() => this as ProductOption;
        public ProductTaxonomyNode? AsProductTaxonomyNode() => this as ProductTaxonomyNode;
        public ProductVariant? AsProductVariant() => this as ProductVariant;
        public ProductVariantComponent? AsProductVariantComponent() => this as ProductVariantComponent;
        public Publication? AsPublication() => this as Publication;
        public PublicationResourceOperation? AsPublicationResourceOperation() => this as PublicationResourceOperation;
        public QuantityPriceBreak? AsQuantityPriceBreak() => this as QuantityPriceBreak;
        public Refund? AsRefund() => this as Refund;
        public Return? AsReturn() => this as Return;
        public ReturnLineItem? AsReturnLineItem() => this as ReturnLineItem;
        public ReturnableFulfillment? AsReturnableFulfillment() => this as ReturnableFulfillment;
        public ReverseDelivery? AsReverseDelivery() => this as ReverseDelivery;
        public ReverseDeliveryLineItem? AsReverseDeliveryLineItem() => this as ReverseDeliveryLineItem;
        public ReverseFulfillmentOrder? AsReverseFulfillmentOrder() => this as ReverseFulfillmentOrder;
        public ReverseFulfillmentOrderDisposition? AsReverseFulfillmentOrderDisposition() => this as ReverseFulfillmentOrderDisposition;
        public ReverseFulfillmentOrderLineItem? AsReverseFulfillmentOrderLineItem() => this as ReverseFulfillmentOrderLineItem;
        public SaleAdditionalFee? AsSaleAdditionalFee() => this as SaleAdditionalFee;
        public SavedSearch? AsSavedSearch() => this as SavedSearch;
        public ScriptTag? AsScriptTag() => this as ScriptTag;
        public Segment? AsSegment() => this as Segment;
        public SellingPlan? AsSellingPlan() => this as SellingPlan;
        public SellingPlanGroup? AsSellingPlanGroup() => this as SellingPlanGroup;
        public ServerPixel? AsServerPixel() => this as ServerPixel;
        public Shop? AsShop() => this as Shop;
        public ShopAddress? AsShopAddress() => this as ShopAddress;
        public ShopPolicy? AsShopPolicy() => this as ShopPolicy;
        public ShopifyPaymentsAccount? AsShopifyPaymentsAccount() => this as ShopifyPaymentsAccount;
        public ShopifyPaymentsBalanceTransaction? AsShopifyPaymentsBalanceTransaction() => this as ShopifyPaymentsBalanceTransaction;
        public ShopifyPaymentsBankAccount? AsShopifyPaymentsBankAccount() => this as ShopifyPaymentsBankAccount;
        public ShopifyPaymentsDispute? AsShopifyPaymentsDispute() => this as ShopifyPaymentsDispute;
        public ShopifyPaymentsDisputeEvidence? AsShopifyPaymentsDisputeEvidence() => this as ShopifyPaymentsDisputeEvidence;
        public ShopifyPaymentsDisputeFileUpload? AsShopifyPaymentsDisputeFileUpload() => this as ShopifyPaymentsDisputeFileUpload;
        public ShopifyPaymentsDisputeFulfillment? AsShopifyPaymentsDisputeFulfillment() => this as ShopifyPaymentsDisputeFulfillment;
        public ShopifyPaymentsPayout? AsShopifyPaymentsPayout() => this as ShopifyPaymentsPayout;
        public ShopifyPaymentsVerification? AsShopifyPaymentsVerification() => this as ShopifyPaymentsVerification;
        public StaffMember? AsStaffMember() => this as StaffMember;
        public StandardMetafieldDefinitionTemplate? AsStandardMetafieldDefinitionTemplate() => this as StandardMetafieldDefinitionTemplate;
        public StorefrontAccessToken? AsStorefrontAccessToken() => this as StorefrontAccessToken;
        public SubscriptionBillingAttempt? AsSubscriptionBillingAttempt() => this as SubscriptionBillingAttempt;
        public SubscriptionContract? AsSubscriptionContract() => this as SubscriptionContract;
        public SubscriptionDraft? AsSubscriptionDraft() => this as SubscriptionDraft;
        public TenderTransaction? AsTenderTransaction() => this as TenderTransaction;
        public TransactionFee? AsTransactionFee() => this as TransactionFee;
        public UrlRedirect? AsUrlRedirect() => this as UrlRedirect;
        public UrlRedirectImport? AsUrlRedirectImport() => this as UrlRedirectImport;
        public Validation? AsValidation() => this as Validation;
        public Video? AsVideo() => this as Video;
        public WebPixel? AsWebPixel() => this as WebPixel;
        public WebhookSubscription? AsWebhookSubscription() => this as WebhookSubscription;
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; }
    }

    ///<summary>
    ///An article in the blogging system. You can query articles from
    ///[the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)
    ///if you need to access more information about an article. Currently, `OnlineStoreArticle` is
    ///only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
    ///the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
    ///</summary>
    public class OnlineStoreArticle : GraphQLObject<OnlineStoreArticle>, IHasPublishedTranslations, INavigable, INode, IMetafieldReferencer
    {
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
    }

    ///<summary>
    ///Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
    ///to be used as a type of magazine or newsletter for the shop, with content that changes over time.
    ///</summary>
    public class OnlineStoreBlog : GraphQLObject<OnlineStoreBlog>, IHasPublishedTranslations, INode, IMetafieldReferencer
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
    }

    ///<summary>
    ///A custom page on the Online Store.
    ///</summary>
    public class OnlineStorePage : GraphQLObject<OnlineStorePage>, IHasPublishedTranslations, INavigable, INode, IMetafieldReference, IMetafieldReferencer
    {
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
    }

    ///<summary>
    ///Online Store preview URL of the object.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    public interface IOnlineStorePreviewable : IGraphQLObject
    {
        public Product? AsProduct() => this as Product;
        ///<summary>
        ///The online store preview URL.
        ///</summary>
        public string? onlineStorePreviewUrl { get; }
    }

    ///<summary>
    ///An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
    ///Learn more about
    ///[editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
    ///
    ///Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
    ///then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
    ///access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
    ///[Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
    ///
    ///**Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
    ///</summary>
    public class Order : GraphQLObject<Order>, ICommentEventSubject, IHasEvents, IHasLocalizationExtensions, IHasMetafieldDefinitions, IHasMetafields, ILegacyInteroperability, INode, ICommentEventEmbed, IMetafieldReferencer
    {
        ///<summary>
        ///A list of addtional fees applied to the order.
        ///</summary>
        public IEnumerable<AdditionalFee>? additionalFees { get; set; }
        ///<summary>
        ///A list of sales agreements associated with the order.
        ///</summary>
        public SalesAgreementConnection? agreements { get; set; }
        ///<summary>
        ///A list of messages that appear on the order page in the Shopify admin.
        ///</summary>
        public IEnumerable<ResourceAlert>? alerts { get; set; }
        ///<summary>
        ///The application that created the order.
        ///</summary>
        public OrderApp? app { get; set; }
        ///<summary>
        ///The billing address of the customer.
        ///</summary>
        public MailingAddress? billingAddress { get; set; }
        ///<summary>
        ///Whether the billing address matches the shipping address.
        ///</summary>
        public bool? billingAddressMatchesShippingAddress { get; set; }
        ///<summary>
        ///Whether the order can be manually marked as paid.
        ///</summary>
        public bool? canMarkAsPaid { get; set; }
        ///<summary>
        ///Whether a customer email exists for the order.
        ///</summary>
        public bool? canNotifyCustomer { get; set; }
        ///<summary>
        ///The reason provided when the order was canceled.
        ///Returns `null` if the order wasn't canceled.
        ///</summary>
        public OrderCancelReason? cancelReason { get; set; }
        ///<summary>
        ///Cancellation details for the order.
        ///</summary>
        public OrderCancellation? cancellation { get; set; }
        ///<summary>
        ///The date and time when the order was canceled.
        ///Returns `null` if the order wasn't canceled.
        ///</summary>
        public DateTime? cancelledAt { get; set; }
        ///<summary>
        ///Whether payment for the order can be captured.
        ///</summary>
        public bool? capturable { get; set; }

        ///<summary>
        ///The total order-level discount amount, before returns, in shop currency.
        ///</summary>
        [Obsolete("Use `cartDiscountAmountSet` instead.")]
        public decimal? cartDiscountAmount { get; set; }
        ///<summary>
        ///The total order-level discount amount, before returns, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? cartDiscountAmountSet { get; set; }

        ///<summary>
        ///The channel that created the order.
        ///</summary>
        [Obsolete("Use `publication` instead.")]
        public Channel? channel { get; set; }
        ///<summary>
        ///Details about the channel that created the order.
        ///</summary>
        public ChannelInformation? channelInformation { get; set; }
        ///<summary>
        ///The IP address of the API client that created the order.
        ///</summary>
        public string? clientIp { get; set; }
        ///<summary>
        ///Whether the order is closed.
        ///</summary>
        public bool? closed { get; set; }
        ///<summary>
        ///The date and time when the order was closed.
        ///Returns `null` if the order isn't closed.
        ///</summary>
        public DateTime? closedAt { get; set; }
        ///<summary>
        ///A randomly generated alpha-numeric identifier for the order that may be shown to the customer
        ///instead of the sequential order name. For example, "XPAV284CT", "R50KELTJP" or "35PKUN0UJ".
        ///This value isn't guaranteed to be unique.
        ///</summary>
        public string? confirmationNumber { get; set; }
        ///<summary>
        ///Whether inventory has been reserved for the order.
        ///</summary>
        public bool? confirmed { get; set; }
        ///<summary>
        ///Date and time when the order was created in Shopify.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The shop currency when the order was placed.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
        ///<summary>
        ///The current order-level discount amount after all order updates, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? currentCartDiscountAmountSet { get; set; }
        ///<summary>
        ///The sum of the quantities for all line items that contribute to the order's current subtotal price.
        ///</summary>
        public int? currentSubtotalLineItemsQuantity { get; set; }
        ///<summary>
        ///The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
        ///If `taxesIncluded` is `true`, then the subtotal also includes tax.
        ///</summary>
        public MoneyBag? currentSubtotalPriceSet { get; set; }
        ///<summary>
        ///A list of all tax lines applied to line items on the order, after returns.
        ///Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
        ///</summary>
        public IEnumerable<TaxLine>? currentTaxLines { get; set; }
        ///<summary>
        ///The total amount of additional fees after returns, in shop and presentment currencies.
        ///Returns `null` if there are no additional fees for the order.
        ///</summary>
        public MoneyBag? currentTotalAdditionalFeesSet { get; set; }
        ///<summary>
        ///The total amount discounted on the order after returns, in shop and presentment currencies.
        ///This includes both order and line level discounts.
        ///</summary>
        public MoneyBag? currentTotalDiscountsSet { get; set; }
        ///<summary>
        ///The total amount of duties after returns, in shop and presentment currencies.
        ///Returns `null` if duties aren't applicable.
        ///</summary>
        public MoneyBag? currentTotalDutiesSet { get; set; }
        ///<summary>
        ///The total price of the order, after returns, in shop and presentment currencies.
        ///This includes taxes and discounts.
        ///</summary>
        public MoneyBag? currentTotalPriceSet { get; set; }
        ///<summary>
        ///The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? currentTotalTaxSet { get; set; }
        ///<summary>
        ///The total weight of the order after returns, in grams.
        ///</summary>
        public ulong? currentTotalWeight { get; set; }
        ///<summary>
        ///A list of the custom attributes added to the order.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///The customer that placed the order.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///Whether the customer agreed to receive marketing materials.
        ///</summary>
        public bool? customerAcceptsMarketing { get; set; }

        ///<summary>
        ///The customer's visits and interactions with the online store before placing the order.
        ///</summary>
        [Obsolete("Use `customerJourneySummary` instead.")]
        public CustomerJourney? customerJourney { get; set; }
        ///<summary>
        ///The customer's visits and interactions with the online store before placing the order.
        ///</summary>
        public CustomerJourneySummary? customerJourneySummary { get; set; }
        ///<summary>
        ///A two-letter or three-letter language code, optionally followed by a region modifier.
        ///</summary>
        public string? customerLocale { get; set; }
        ///<summary>
        ///A list of discounts that are applied to the order, not including order edits and refunds.
        ///</summary>
        public DiscountApplicationConnection? discountApplications { get; set; }
        ///<summary>
        ///The discount code used for the order.
        ///</summary>
        public string? discountCode { get; set; }
        ///<summary>
        ///The discount codes used for the order.
        ///</summary>
        public IEnumerable<string>? discountCodes { get; set; }
        ///<summary>
        ///The primary address of the customer.
        ///Returns `null` if neither the shipping address nor the billing address was provided.
        ///</summary>
        public MailingAddress? displayAddress { get; set; }
        ///<summary>
        ///The financial status of the order that can be shown to the merchant.
        ///This field doesn't capture all the details of an order's financial state. It should only be used for display summary purposes.
        ///</summary>
        public OrderDisplayFinancialStatus? displayFinancialStatus { get; set; }
        ///<summary>
        ///The fulfillment status for the order that can be shown to the merchant.
        ///This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
        ///For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
        ///</summary>
        public OrderDisplayFulfillmentStatus? displayFulfillmentStatus { get; set; }
        ///<summary>
        ///A list of the disputes associated with the order.
        ///</summary>
        public IEnumerable<OrderDisputeSummary>? disputes { get; set; }
        ///<summary>
        ///Whether the order has had any edits applied.
        ///</summary>
        public bool? edited { get; set; }
        ///<summary>
        ///The email address associated with the customer.
        ///</summary>
        public string? email { get; set; }
        ///<summary>
        ///Whether taxes on the order are estimated.
        ///This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
        ///</summary>
        public bool? estimatedTaxes { get; set; }
        ///<summary>
        ///A list of events associated with the order.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///A list of ExchangeV2s for the order.
        ///</summary>
        public ExchangeV2Connection? exchangeV2s { get; set; }
        ///<summary>
        ///Whether there are line items that can be fulfilled.
        ///This field returns `false` when the order has no fulfillable line items.
        ///For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
        ///</summary>
        public bool? fulfillable { get; set; }
        ///<summary>
        ///A list of fulfillment orders for a specific order.
        ///
        ///[FulfillmentOrder API access scopes](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#api-access-scopes)
        ///govern which fulfillments orders are returned.
        ///An API client will only receive a subset of the fulfillment orders which belong to an order
        ///if they don't have the necessary access scopes to view all of the fulfillment orders.
        ///In the case that an API client does not have the access scopes necessary to view
        ///any of the fulfillment orders that belong to an order, an empty array will be returned.
        ///</summary>
        public FulfillmentOrderConnection? fulfillmentOrders { get; set; }
        ///<summary>
        ///List of shipments for the order.
        ///</summary>
        public IEnumerable<Fulfillment>? fulfillments { get; set; }
        ///<summary>
        ///Whether the order has been paid in full.
        ///</summary>
        public bool? fullyPaid { get; set; }
        ///<summary>
        ///Whether the merchant added a timeline comment to the order.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }

        ///<summary>
        ///The URL of the first page of the online store that the customer visited before they submitted the order.
        ///</summary>
        [Obsolete("Use `customerJourneySummary.lastVisit.landingPageHtml` instead")]
        public string? landingPageDisplayText { get; set; }

        ///<summary>
        ///The first page of the online store that the customer visited before they submitted the order.
        ///</summary>
        [Obsolete("Use `customerJourneySummary.lastVisit.landingPage` instead")]
        public string? landingPageUrl { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///A list of the order's line items.
        ///</summary>
        public LineItemConnection? lineItems { get; set; }

        ///<summary>
        ///A list of the order's line items.
        ///</summary>
        [Obsolete("Use `lineItems` instead.")]
        public LineItemMutableConnection? lineItemsMutable { get; set; }
        ///<summary>
        ///List of localization extensions for the resource.
        ///</summary>
        public LocalizationExtensionConnection? localizationExtensions { get; set; }

        ///<summary>
        ///The fulfillment location that was assigned when the order was created.
        ///Orders can have multiple fulfillment orders. These fulfillment orders can each be assigned to a different location which is responsible for fulfilling a subset of the items in an order. The `Order.location` field will only point to one of these locations.
        ///Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
        ///object for up-to-date fulfillment location information.
        ///</summary>
        [Obsolete("Use `physicalLocation` instead.")]
        public string? location { get; set; }
        ///<summary>
        ///Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
        ///</summary>
        public bool? merchantEditable { get; set; }
        ///<summary>
        ///A list of reasons why the order can't be edited. For example, "Canceled orders can't be edited".
        ///</summary>
        public IEnumerable<string>? merchantEditableErrors { get; set; }
        ///<summary>
        ///The application acting as the Merchant of Record for the order.
        ///</summary>
        public OrderApp? merchantOfRecordApp { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
        ///For example, "#1001", "EN1001", or "1001-A".
        ///This value isn't unique across multiple stores.
        ///</summary>
        public string? name { get; set; }

        ///<summary>
        ///The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
        ///</summary>
        [Obsolete("Use `netPaymentSet` instead.")]
        public decimal? netPayment { get; set; }
        ///<summary>
        ///The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? netPaymentSet { get; set; }
        ///<summary>
        ///A list of line items that can't be fulfilled.
        ///For example, tips and fully refunded line items can't be fulfilled.
        ///For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
        ///</summary>
        public LineItemConnection? nonFulfillableLineItems { get; set; }
        ///<summary>
        ///The contents of the note associated with the order.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The total amount of additional fees after returns, in shop and presentment currencies.
        ///Returns `null` if there are no additional fees for the order.
        ///</summary>
        public MoneyBag? originalTotalAdditionalFeesSet { get; set; }
        ///<summary>
        ///The total amount of duties before returns, in shop and presentment currencies.
        ///Returns `null` if duties aren't applicable.
        ///</summary>
        public MoneyBag? originalTotalDutiesSet { get; set; }
        ///<summary>
        ///The total price of the order at the time of order creation, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? originalTotalPriceSet { get; set; }
        ///<summary>
        ///The payment collection details for the order.
        ///</summary>
        public OrderPaymentCollectionDetails? paymentCollectionDetails { get; set; }
        ///<summary>
        ///A list of the names of all payment gateways used for the order.
        ///For example, "Shopify Payments" and "Cash on Delivery (COD)".
        ///</summary>
        public IEnumerable<string>? paymentGatewayNames { get; set; }
        ///<summary>
        ///The payment terms associated with the order.
        ///</summary>
        public PaymentTerms? paymentTerms { get; set; }
        ///<summary>
        ///The phone number associated with the customer.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The fulfillment location that was assigned when the order was created.
        ///Orders can have multiple fulfillment orders. These fulfillment orders can each be assigned to a different location which is responsible for fulfilling a subset of the items in an order. The `Order.physicalLocation` field will only point to one of these locations.
        ///Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
        ///object for up to date fulfillment location information.
        ///</summary>
        public Location? physicalLocation { get; set; }
        ///<summary>
        ///The PO number associated with the order.
        ///</summary>
        public string? poNumber { get; set; }
        ///<summary>
        ///The payment `CurrencyCode` of the customer for the order.
        ///</summary>
        public CurrencyCode? presentmentCurrencyCode { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The date and time when the order was processed.
        ///This date and time might not match the date and time when the order was created.
        ///</summary>
        public DateTime? processedAt { get; set; }
        ///<summary>
        ///The publication that the order was created from.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The purchasing entity for the order.
        ///</summary>
        public IPurchasingEntity? purchasingEntity { get; set; }

        ///<summary>
        ///The marketing referral code from the link that the customer clicked to visit the store.
        ///Supports the following URL attributes: "ref", "source", or "r".
        ///For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
        ///</summary>
        [Obsolete("Use `customerJourneySummary.lastVisit.referralCode` instead")]
        public string? referralCode { get; set; }

        ///<summary>
        ///A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
        ///</summary>
        [Obsolete("Use `customerJourneySummary.lastVisit.referralInfoHtml` instead")]
        public string? referrerDisplayText { get; set; }

        ///<summary>
        ///The URL of the webpage where the customer clicked a link that sent them to your online store.
        ///</summary>
        [Obsolete("Use `customerJourneySummary.lastVisit.referrerUrl` instead")]
        public string? referrerUrl { get; set; }
        ///<summary>
        ///The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
        ///</summary>
        public MoneyBag? refundDiscrepancySet { get; set; }
        ///<summary>
        ///Whether the order can be refunded.
        ///</summary>
        public bool? refundable { get; set; }
        ///<summary>
        ///A list of refunds that have been applied to the order.
        ///</summary>
        public IEnumerable<Refund>? refunds { get; set; }
        ///<summary>
        ///The URL of the source that the order originated from, if found in the domain registry.
        ///</summary>
        public string? registeredSourceUrl { get; set; }
        ///<summary>
        ///Whether the order has shipping lines or at least one line item on the order that requires shipping.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///Whether any line item on the order can be restocked.
        ///</summary>
        public bool? restockable { get; set; }
        ///<summary>
        ///The order's aggregated return status for display purposes.
        ///</summary>
        public OrderReturnStatus? returnStatus { get; set; }
        ///<summary>
        ///A list of returns for the order.
        ///</summary>
        public ReturnConnection? returns { get; set; }
        ///<summary>
        ///The fraud risk level of the order.
        ///</summary>
        public OrderRiskLevel? riskLevel { get; set; }
        ///<summary>
        ///A list of risks associated with the order.
        ///</summary>
        public IEnumerable<OrderRisk>? risks { get; set; }
        ///<summary>
        ///The mailing address of the customer.
        ///</summary>
        public MailingAddress? shippingAddress { get; set; }
        ///<summary>
        ///A summary of all shipping costs on the order.
        ///</summary>
        public ShippingLine? shippingLine { get; set; }
        ///<summary>
        ///A list of the order's shipping lines.
        ///</summary>
        public ShippingLineConnection? shippingLines { get; set; }
        ///<summary>
        ///The Shopify Protect details for the order. If Shopify Protect is disabled for the shop, then this will be null.
        ///</summary>
        public ShopifyProtectOrderSummary? shopifyProtect { get; set; }
        ///<summary>
        ///A unique POS or third party order identifier.
        ///For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
        ///</summary>
        public string? sourceIdentifier { get; set; }
        ///<summary>
        ///The sum of the quantities for all line items that contribute to the order's subtotal price.
        ///</summary>
        public int? subtotalLineItemsQuantity { get; set; }

        ///<summary>
        ///The sum of the prices for all line items after discounts and before returns, in shop currency.
        ///If `taxesIncluded` is `true`, then the subtotal also includes tax.
        ///</summary>
        [Obsolete("Use `subtotalPriceSet` instead.")]
        public decimal? subtotalPrice { get; set; }
        ///<summary>
        ///The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
        ///If `taxesIncluded` is `true`, then the subtotal also includes tax.
        ///</summary>
        public MoneyBag? subtotalPriceSet { get; set; }
        ///<summary>
        ///A suggested refund for the order.
        ///</summary>
        public SuggestedRefund? suggestedRefund { get; set; }
        ///<summary>
        ///A comma separated list of tags associated with the order. Updating `tags` overwrites
        ///any existing tags that were previously added to the order. To add new tags without overwriting
        ///existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
        ///mutation.
        ///</summary>
        public IEnumerable<string>? tags { get; set; }
        ///<summary>
        ///Whether taxes are exempt on the order.
        ///</summary>
        public bool? taxExempt { get; set; }
        ///<summary>
        ///A list of all tax lines applied to line items on the order, before returns.
        ///Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Whether taxes are included in the subtotal price of the order.
        ///</summary>
        public bool? taxesIncluded { get; set; }
        ///<summary>
        ///Whether the order is a test.
        ///Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
        ///A test order can't be converted into a real order and vice versa.
        ///</summary>
        public bool? test { get; set; }

        ///<summary>
        ///The authorized amount that's uncaptured or undercaptured, in shop currency.
        ///This amount isn't adjusted for returns.
        ///</summary>
        [Obsolete("Use `totalCapturableSet` instead.")]
        public decimal? totalCapturable { get; set; }
        ///<summary>
        ///The authorized amount that's uncaptured or undercaptured, in shop and presentment currencies.
        ///This amount isn't adjusted for returns.
        ///</summary>
        public MoneyBag? totalCapturableSet { get; set; }

        ///<summary>
        ///The total amount discounted on the order before returns, in shop currency.
        ///This includes both order and line level discounts.
        ///</summary>
        [Obsolete("Use `totalDiscountsSet` instead.")]
        public decimal? totalDiscounts { get; set; }
        ///<summary>
        ///The total amount discounted on the order before returns, in shop and presentment currencies.
        ///This includes both order and line level discounts.
        ///</summary>
        public MoneyBag? totalDiscountsSet { get; set; }
        ///<summary>
        ///The total amount not yet transacted for the order, in shop and presentment currencies.
        ///A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
        ///</summary>
        public MoneyBag? totalOutstandingSet { get; set; }

        ///<summary>
        ///The total price of the order, before returns, in shop currency.
        ///This includes taxes and discounts.
        ///</summary>
        [Obsolete("Use `totalPriceSet` instead.")]
        public decimal? totalPrice { get; set; }
        ///<summary>
        ///The total price of the order, before returns, in shop and presentment currencies.
        ///This includes taxes and discounts.
        ///</summary>
        public MoneyBag? totalPriceSet { get; set; }

        ///<summary>
        ///The total amount received from the customer before returns, in shop currency.
        ///</summary>
        [Obsolete("Use `totalReceivedSet` instead.")]
        public decimal? totalReceived { get; set; }
        ///<summary>
        ///The total amount received from the customer before returns, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalReceivedSet { get; set; }

        ///<summary>
        ///The total amount that was refunded, in shop currency.
        ///</summary>
        [Obsolete("Use `totalRefundedSet` instead.")]
        public decimal? totalRefunded { get; set; }
        ///<summary>
        ///The total amount that was refunded, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalRefundedSet { get; set; }
        ///<summary>
        ///The total amount of shipping that was refunded, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalRefundedShippingSet { get; set; }

        ///<summary>
        ///The total shipping amount before discounts and returns, in shop currency.
        ///</summary>
        [Obsolete("Use `totalShippingPriceSet` instead.")]
        public decimal? totalShippingPrice { get; set; }
        ///<summary>
        ///The total shipping amount before discounts and returns, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalShippingPriceSet { get; set; }

        ///<summary>
        ///The total tax amount before returns, in shop currency.
        ///</summary>
        [Obsolete("Use `totalTaxSet` instead.")]
        public decimal? totalTax { get; set; }
        ///<summary>
        ///The total tax amount before returns, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalTaxSet { get; set; }

        ///<summary>
        ///The sum of all tip amounts for the order, in shop currency.
        ///</summary>
        [Obsolete("Use `totalTipReceivedSet` instead.")]
        public MoneyV2? totalTipReceived { get; set; }
        ///<summary>
        ///The sum of all tip amounts for the order, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalTipReceivedSet { get; set; }
        ///<summary>
        ///The total weight of the order before returns, in grams.
        ///</summary>
        public ulong? totalWeight { get; set; }
        ///<summary>
        ///A list of transactions associated with the order.
        ///</summary>
        public IEnumerable<OrderTransaction>? transactions { get; set; }
        ///<summary>
        ///Whether no payments have been made for the order.
        ///</summary>
        public bool? unpaid { get; set; }
        ///<summary>
        ///The date and time when the order was modified last.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///The possible order action types for a
    ///[sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
    ///</summary>
    public enum OrderActionType
    {
        ///<summary>
        ///An order with a purchase or charge.
        ///</summary>
        ORDER,
        ///<summary>
        ///An edit to the order.
        ///</summary>
        ORDER_EDIT,
        ///<summary>
        ///A refund on the order.
        ///</summary>
        REFUND,
        ///<summary>
        ///An unknown agreement action. Represents new actions that may be added in future versions.
        ///</summary>
        UNKNOWN,
    }

    ///<summary>
    ///An agreement associated with an order placement.
    ///</summary>
    public class OrderAgreement : GraphQLObject<OrderAgreement>, ISalesAgreement
    {
        ///<summary>
        ///The application that created the agreement.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The date and time at which the agreement occured.
        ///</summary>
        public DateTime? happenedAt { get; set; }
        ///<summary>
        ///The unique ID for the agreement.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The order associated with the agreement.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The reason the agremeent was created.
        ///</summary>
        public OrderActionType? reason { get; set; }
        ///<summary>
        ///The sales associated with the agreement.
        ///</summary>
        public SaleConnection? sales { get; set; }
        ///<summary>
        ///The staff member associated with the agreement.
        ///</summary>
        public StaffMember? user { get; set; }
    }

    ///<summary>
    ///The [application](https://shopify.dev/apps) that created the order.
    ///</summary>
    public class OrderApp : GraphQLObject<OrderApp>
    {
        ///<summary>
        ///The application icon.
        ///</summary>
        public Image? icon { get; set; }
        ///<summary>
        ///The application ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the application.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///Return type for `orderCancel` mutation.
    ///</summary>
    public class OrderCancelPayload : GraphQLObject<OrderCancelPayload>
    {
        ///<summary>
        ///The job that asynchronously cancels the order.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<OrderCancelUserError>? orderCancelUserErrors { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `orderCancelUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents the reason for the order's cancellation.
    ///</summary>
    public enum OrderCancelReason
    {
        ///<summary>
        ///The customer wanted to cancel the order.
        ///</summary>
        CUSTOMER,
        ///<summary>
        ///Payment was declined.
        ///</summary>
        DECLINED,
        ///<summary>
        ///The order was fraudulent.
        ///</summary>
        FRAUD,
        ///<summary>
        ///There was insufficient inventory.
        ///</summary>
        INVENTORY,
        ///<summary>
        ///Staff made an error.
        ///</summary>
        STAFF,
        ///<summary>
        ///The order was canceled for an unlisted reason.
        ///</summary>
        OTHER,
    }

    ///<summary>
    ///Errors related to order cancellation.
    ///</summary>
    public class OrderCancelUserError : GraphQLObject<OrderCancelUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public OrderCancelUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `OrderCancelUserError`.
    ///</summary>
    public enum OrderCancelUserErrorCode
    {
        ///<summary>
        ///An order refund was requested but the user does not have the refund_orders permission.
        ///</summary>
        NO_REFUND_PERMISSION,
        ///<summary>
        ///The record with the ID used as the input value couldn't be found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///Details about the order cancellation.
    ///</summary>
    public class OrderCancellation : GraphQLObject<OrderCancellation>
    {
        ///<summary>
        ///Staff provided note for the order cancellation.
        ///</summary>
        public string? staffNote { get; set; }
    }

    ///<summary>
    ///Return type for `orderCapture` mutation.
    ///</summary>
    public class OrderCapturePayload : GraphQLObject<OrderCapturePayload>
    {
        ///<summary>
        ///The created capture transaction.
        ///</summary>
        public OrderTransaction? transaction { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `orderClose` mutation.
    ///</summary>
    public class OrderClosePayload : GraphQLObject<OrderClosePayload>
    {
        ///<summary>
        ///The closed order.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Orders.
    ///</summary>
    public class OrderConnection : GraphQLObject<OrderConnection>, IConnectionWithNodesAndEdges<OrderEdge, Order>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<OrderEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in OrderEdge.
        ///</summary>
        public IEnumerable<Order>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `orderCreateMandatePayment` mutation.
    ///</summary>
    public class OrderCreateMandatePaymentPayload : GraphQLObject<OrderCreateMandatePaymentPayload>
    {
        ///<summary>
        ///The async job used for charging the payment.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The Unique ID for the created payment.
        ///</summary>
        public string? paymentReferenceId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<OrderCreateMandatePaymentUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `OrderCreateMandatePayment`.
    ///</summary>
    public class OrderCreateMandatePaymentUserError : GraphQLObject<OrderCreateMandatePaymentUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public OrderCreateMandatePaymentUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `OrderCreateMandatePaymentUserError`.
    ///</summary>
    public enum OrderCreateMandatePaymentUserErrorCode
    {
        ///<summary>
        ///Errors for mandate payment on order.
        ///</summary>
        ORDER_MANDATE_PAYMENT_ERROR_CODE,
    }

    ///<summary>
    ///Represents the order's current financial status.
    ///</summary>
    public enum OrderDisplayFinancialStatus
    {
        ///<summary>
        ///Displayed as **Pending**.
        ///</summary>
        PENDING,
        ///<summary>
        ///Displayed as **Authorized**.
        ///</summary>
        AUTHORIZED,
        ///<summary>
        ///Displayed as **Partially paid**.
        ///</summary>
        PARTIALLY_PAID,
        ///<summary>
        ///Displayed as **Partially refunded**.
        ///</summary>
        PARTIALLY_REFUNDED,
        ///<summary>
        ///Displayed as **Voided**.
        ///</summary>
        VOIDED,
        ///<summary>
        ///Displayed as **Paid**.
        ///</summary>
        PAID,
        ///<summary>
        ///Displayed as **Refunded**.
        ///</summary>
        REFUNDED,
        ///<summary>
        ///Displayed as **Expired**.
        ///</summary>
        EXPIRED,
    }

    ///<summary>
    ///Represents the order's aggregated fulfillment status for display purposes.
    ///</summary>
    public enum OrderDisplayFulfillmentStatus
    {
        ///<summary>
        ///Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
        ///</summary>
        UNFULFILLED,
        ///<summary>
        ///Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
        ///</summary>
        PARTIALLY_FULFILLED,
        ///<summary>
        ///Displayed as **Fulfilled**. All the items in the order have been fulfilled.
        ///</summary>
        FULFILLED,
        ///<summary>
        ///Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status.
        ///</summary>
        RESTOCKED,
        ///<summary>
        ///Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status.
        ///</summary>
        PENDING_FULFILLMENT,
        ///<summary>
        ///Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
        ///</summary>
        OPEN,
        ///<summary>
        ///Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service.
        ///</summary>
        IN_PROGRESS,
        ///<summary>
        ///Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
        ///</summary>
        ON_HOLD,
        ///<summary>
        ///Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
        ///</summary>
        SCHEDULED,
    }

    ///<summary>
    ///A summary of the important details for a dispute on an order.
    ///</summary>
    public class OrderDisputeSummary : GraphQLObject<OrderDisputeSummary>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The type that the dispute was initiated as.
        ///</summary>
        public DisputeType? initiatedAs { get; set; }
        ///<summary>
        ///The current status of the dispute.
        ///</summary>
        public DisputeStatus? status { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Order and a cursor during pagination.
    ///</summary>
    public class OrderEdge : GraphQLObject<OrderEdge>, IEdge<Order>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of OrderEdge.
        ///</summary>
        public Order? node { get; set; }
    }

    ///<summary>
    ///Return type for `orderEditAddCustomItem` mutation.
    ///</summary>
    public class OrderEditAddCustomItemPayload : GraphQLObject<OrderEditAddCustomItemPayload>
    {
        ///<summary>
        ///The custom line item that will be added to the order based on the current edits.
        ///</summary>
        public CalculatedLineItem? calculatedLineItem { get; set; }
        ///<summary>
        ///An order with the edits applied but not saved.
        ///</summary>
        public CalculatedOrder? calculatedOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `orderEditAddLineItemDiscount` mutation.
    ///</summary>
    public class OrderEditAddLineItemDiscountPayload : GraphQLObject<OrderEditAddLineItemDiscountPayload>
    {
        ///<summary>
        ///The discount applied to a line item during this order edit.
        ///</summary>
        public OrderStagedChangeAddLineItemDiscount? addedDiscountStagedChange { get; set; }
        ///<summary>
        ///The line item with the edits applied but not saved.
        ///</summary>
        public CalculatedLineItem? calculatedLineItem { get; set; }
        ///<summary>
        ///An order with the edits applied but not saved.
        ///</summary>
        public CalculatedOrder? calculatedOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `orderEditAddVariant` mutation.
    ///</summary>
    public class OrderEditAddVariantPayload : GraphQLObject<OrderEditAddVariantPayload>
    {
        ///<summary>
        ///The [calculated line item](https://shopify.dev/api/admin-graphql/latest/objects/calculatedlineitem)
        ///that's added during this order edit.
        ///</summary>
        public CalculatedLineItem? calculatedLineItem { get; set; }
        ///<summary>
        ///The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
        ///with the edits applied but not saved.
        ///</summary>
        public CalculatedOrder? calculatedOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An agreement associated with an edit to the order.
    ///</summary>
    public class OrderEditAgreement : GraphQLObject<OrderEditAgreement>, ISalesAgreement
    {
        ///<summary>
        ///The application that created the agreement.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The date and time at which the agreement occured.
        ///</summary>
        public DateTime? happenedAt { get; set; }
        ///<summary>
        ///The unique ID for the agreement.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The reason the agremeent was created.
        ///</summary>
        public OrderActionType? reason { get; set; }
        ///<summary>
        ///The sales associated with the agreement.
        ///</summary>
        public SaleConnection? sales { get; set; }
        ///<summary>
        ///The staff member associated with the agreement.
        ///</summary>
        public StaffMember? user { get; set; }
    }

    ///<summary>
    ///Return type for `orderEditBegin` mutation.
    ///</summary>
    public class OrderEditBeginPayload : GraphQLObject<OrderEditBeginPayload>
    {
        ///<summary>
        ///The order that will be edited.
        ///</summary>
        public CalculatedOrder? calculatedOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `orderEditCommit` mutation.
    ///</summary>
    public class OrderEditCommitPayload : GraphQLObject<OrderEditCommitPayload>
    {
        ///<summary>
        ///The order with changes applied.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `orderEditRemoveDiscount` mutation.
    ///</summary>
    public class OrderEditRemoveDiscountPayload : GraphQLObject<OrderEditRemoveDiscountPayload>
    {
        ///<summary>
        ///An order with the edits applied but not saved.
        ///</summary>
        public CalculatedOrder? calculatedOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<OrderEditRemoveDiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `OrderEditRemoveDiscount`.
    ///</summary>
    public class OrderEditRemoveDiscountUserError : GraphQLObject<OrderEditRemoveDiscountUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public OrderEditRemoveDiscountUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `OrderEditRemoveDiscountUserError`.
    ///</summary>
    public enum OrderEditRemoveDiscountUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///Return type for `orderEditRemoveLineItemDiscount` mutation.
    ///</summary>
    public class OrderEditRemoveLineItemDiscountPayload : GraphQLObject<OrderEditRemoveLineItemDiscountPayload>
    {
        ///<summary>
        ///The calculated line item after removal of the discount.
        ///</summary>
        public CalculatedLineItem? calculatedLineItem { get; set; }
        ///<summary>
        ///An order with the edits applied but not saved.
        ///</summary>
        public CalculatedOrder? calculatedOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `orderEditSetQuantity` mutation.
    ///</summary>
    public class OrderEditSetQuantityPayload : GraphQLObject<OrderEditSetQuantityPayload>
    {
        ///<summary>
        ///The calculated line item with the edits applied but not saved.
        ///</summary>
        public CalculatedLineItem? calculatedLineItem { get; set; }
        ///<summary>
        ///The calculated order with the edits applied but not saved.
        ///</summary>
        public CalculatedOrder? calculatedOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `orderEditUpdateDiscount` mutation.
    ///</summary>
    public class OrderEditUpdateDiscountPayload : GraphQLObject<OrderEditUpdateDiscountPayload>
    {
        ///<summary>
        ///An order with the edits applied but not saved.
        ///</summary>
        public CalculatedOrder? calculatedOrder { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<OrderEditUpdateDiscountUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `OrderEditUpdateDiscount`.
    ///</summary>
    public class OrderEditUpdateDiscountUserError : GraphQLObject<OrderEditUpdateDiscountUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public OrderEditUpdateDiscountUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `OrderEditUpdateDiscountUserError`.
    ///</summary>
    public enum OrderEditUpdateDiscountUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///Return type for `orderInvoiceSend` mutation.
    ///</summary>
    public class OrderInvoiceSendPayload : GraphQLObject<OrderInvoiceSendPayload>
    {
        ///<summary>
        ///The order associated with the invoice email.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<OrderInvoiceSendUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `OrderInvoiceSend`.
    ///</summary>
    public class OrderInvoiceSendUserError : GraphQLObject<OrderInvoiceSendUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public OrderInvoiceSendUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `OrderInvoiceSendUserError`.
    ///</summary>
    public enum OrderInvoiceSendUserErrorCode
    {
        ///<summary>
        ///An error occurred while sending the invoice.
        ///</summary>
        ORDER_INVOICE_SEND_UNSUCCESSFUL,
    }

    ///<summary>
    ///Return type for `orderMarkAsPaid` mutation.
    ///</summary>
    public class OrderMarkAsPaidPayload : GraphQLObject<OrderMarkAsPaidPayload>
    {
        ///<summary>
        ///The order marked as paid.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `orderOpen` mutation.
    ///</summary>
    public class OrderOpenPayload : GraphQLObject<OrderOpenPayload>
    {
        ///<summary>
        ///The opened order.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The payment collection details for an order that requires additional payment following an edit to the order.
    ///</summary>
    public class OrderPaymentCollectionDetails : GraphQLObject<OrderPaymentCollectionDetails>
    {
        ///<summary>
        ///The URL to use for collecting an additional payment on the order.
        ///</summary>
        public string? additionalPaymentCollectionUrl { get; set; }
        ///<summary>
        ///The list of vaulted payment methods for the order with their permissions.
        ///</summary>
        public IEnumerable<PaymentMandate>? vaultedPaymentMethods { get; set; }
    }

    ///<summary>
    ///The status of a customer's payment for an order.
    ///</summary>
    public class OrderPaymentStatus : GraphQLObject<OrderPaymentStatus>
    {
        ///<summary>
        ///A message describing an error during the asynchronous processing of a payment.
        ///</summary>
        public string? errorMessage { get; set; }
        ///<summary>
        ///The ID of the payment, initially returned by an `orderCreateMandatePayment` or `orderCreatePayment` mutation.
        ///</summary>
        public string? paymentReferenceId { get; set; }
        ///<summary>
        ///The status of the payment.
        ///</summary>
        public OrderPaymentStatusResult? status { get; set; }
        ///<summary>
        ///A translated message describing an error during the asynchronous processing of a payment.
        ///</summary>
        public string? translatedErrorMessage { get; set; }
    }

    ///<summary>
    ///The type of a payment status.
    ///</summary>
    public enum OrderPaymentStatusResult
    {
        ///<summary>
        ///The payment succeeded.
        ///</summary>
        SUCCESS,
        ///<summary>
        ///The payment is authorized.
        ///</summary>
        AUTHORIZED,
        ///<summary>
        ///The payment is voided.
        ///</summary>
        VOIDED,
        ///<summary>
        ///The payment is refunded.
        ///</summary>
        REFUNDED,
        ///<summary>
        ///The payment is captured.
        ///</summary>
        CAPTURED,
        ///<summary>
        ///The payment is in purchased status.
        ///</summary>
        PURCHASED,
        ///<summary>
        ///There was an error initiating the payment.
        ///</summary>
        ERROR,
        ///<summary>
        ///The payment is still being processed.
        ///</summary>
        PROCESSING,
        ///<summary>
        ///Redirect required.
        ///</summary>
        REDIRECT_REQUIRED,
        ///<summary>
        ///Payment can be retried.
        ///</summary>
        RETRYABLE,
        ///<summary>
        ///Status is unknown.
        ///</summary>
        UNKNOWN,
        ///<summary>
        ///The payment is awaiting processing.
        ///</summary>
        INITIATED,
        ///<summary>
        ///The payment is pending with the provider, and may take a while.
        ///</summary>
        PENDING,
    }

    ///<summary>
    ///The order's aggregated return status that's used for display purposes.
    ///An order might have multiple returns, so this field communicates the prioritized return status.
    ///The `OrderReturnStatus` enum is a supported filter parameter in the [`orders` query](https://shopify.dev/api/admin-graphql/latest/queries/orders#:~:text=reference_location_id-,return_status,-risk_level).
    ///</summary>
    public enum OrderReturnStatus
    {
        ///<summary>
        ///Some items in the order are being returned.
        ///</summary>
        IN_PROGRESS,
        ///<summary>
        ///All return shipments from a return in this order were inspected.
        ///</summary>
        INSPECTION_COMPLETE,
        ///<summary>
        ///No items in the order were returned.
        ///</summary>
        NO_RETURN,
        ///<summary>
        ///Some items in the order were returned.
        ///</summary>
        RETURNED,
        ///<summary>
        ///Some returns in the order were not completed successfully.
        ///</summary>
        RETURN_FAILED,
        ///<summary>
        ///A return was requested for some items in the order.
        ///</summary>
        RETURN_REQUESTED,
    }

    ///<summary>
    ///Represents a fraud check on an order.
    ///</summary>
    public class OrderRisk : GraphQLObject<OrderRisk>
    {
        ///<summary>
        ///Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
        ///</summary>
        public bool? display { get; set; }
        ///<summary>
        ///The likelihood that an order is fraudulent, based on this order risk.
        ///
        ///The level can be set by Shopify risk analysis or by an app.
        ///</summary>
        public OrderRiskLevel? level { get; set; }
        ///<summary>
        ///The risk message that's shown to the merchant in the Shopify admin.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///The likelihood that an order is fraudulent.
    ///</summary>
    public enum OrderRiskLevel
    {
        ///<summary>
        ///There is a low level of risk that this order is fraudulent.
        ///</summary>
        LOW,
        ///<summary>
        ///There is a medium level of risk that this order is fraudulent.
        ///</summary>
        MEDIUM,
        ///<summary>
        ///There is a high level of risk that this order is fraudulent.
        ///</summary>
        HIGH,
    }

    ///<summary>
    ///The set of valid sort keys for the Order query.
    ///</summary>
    public enum OrderSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `customer_name` value.
        ///</summary>
        CUSTOMER_NAME,
        ///<summary>
        ///Sort orders by their shipping address country and city.
        ///</summary>
        DESTINATION,
        ///<summary>
        ///Sort by the `financial_status` value.
        ///</summary>
        FINANCIAL_STATUS,
        ///<summary>
        ///Sort by the `fulfillment_status` value.
        ///</summary>
        FULFILLMENT_STATUS,
        ///<summary>
        ///Sort by the `order_number` value.
        ///</summary>
        ORDER_NUMBER,
        ///<summary>
        ///Sort by the `processed_at` value.
        ///</summary>
        PROCESSED_AT,
        ///<summary>
        ///Sort orders by the total quantity of all line items.
        ///</summary>
        TOTAL_ITEMS_QUANTITY,
        ///<summary>
        ///Sort by the `total_price` value.
        ///</summary>
        TOTAL_PRICE,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort orders by their purchase order number.
        ///</summary>
        PO_NUMBER,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///A change that has been applied to an order.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(OrderStagedChangeAddCustomItem), typeDiscriminator: "OrderStagedChangeAddCustomItem")]
    [JsonDerivedType(typeof(OrderStagedChangeAddLineItemDiscount), typeDiscriminator: "OrderStagedChangeAddLineItemDiscount")]
    [JsonDerivedType(typeof(OrderStagedChangeAddShippingLine), typeDiscriminator: "OrderStagedChangeAddShippingLine")]
    [JsonDerivedType(typeof(OrderStagedChangeAddVariant), typeDiscriminator: "OrderStagedChangeAddVariant")]
    [JsonDerivedType(typeof(OrderStagedChangeDecrementItem), typeDiscriminator: "OrderStagedChangeDecrementItem")]
    [JsonDerivedType(typeof(OrderStagedChangeIncrementItem), typeDiscriminator: "OrderStagedChangeIncrementItem")]
    public interface IOrderStagedChange : IGraphQLObject
    {
        public OrderStagedChangeAddCustomItem? AsOrderStagedChangeAddCustomItem() => this as OrderStagedChangeAddCustomItem;
        public OrderStagedChangeAddLineItemDiscount? AsOrderStagedChangeAddLineItemDiscount() => this as OrderStagedChangeAddLineItemDiscount;
        public OrderStagedChangeAddShippingLine? AsOrderStagedChangeAddShippingLine() => this as OrderStagedChangeAddShippingLine;
        public OrderStagedChangeAddVariant? AsOrderStagedChangeAddVariant() => this as OrderStagedChangeAddVariant;
        public OrderStagedChangeDecrementItem? AsOrderStagedChangeDecrementItem() => this as OrderStagedChangeDecrementItem;
        public OrderStagedChangeIncrementItem? AsOrderStagedChangeIncrementItem() => this as OrderStagedChangeIncrementItem;
    }

    ///<summary>
    ///A change to the order representing the addition of a
    ///custom line item. For example, you might want to add gift wrapping service
    ///as a custom line item.
    ///</summary>
    public class OrderStagedChangeAddCustomItem : GraphQLObject<OrderStagedChangeAddCustomItem>, IOrderStagedChange
    {
        ///<summary>
        ///The price of an individual item without any discounts applied. This value can't be negative.
        ///</summary>
        public MoneyV2? originalUnitPrice { get; set; }
        ///<summary>
        ///The quantity of the custom item to add to the order. This value must be greater than zero.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The title of the custom item.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///The discount applied to an item that was added during the current order edit.
    ///</summary>
    public class OrderStagedChangeAddLineItemDiscount : GraphQLObject<OrderStagedChangeAddLineItemDiscount>, IOrderStagedChange
    {
        ///<summary>
        ///The description of the discount.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The pricing value of the discount.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
    ///added as part of an order edit.
    ///</summary>
    public class OrderStagedChangeAddShippingLine : GraphQLObject<OrderStagedChangeAddShippingLine>, IOrderStagedChange
    {
        ///<summary>
        ///The phone number at the shipping address.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The shipping line's title that's shown to the buyer.
        ///</summary>
        public string? presentmentTitle { get; set; }
        ///<summary>
        ///The price that applies to the shipping line.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///The title of the shipping line.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///A change to the order representing the addition of an existing product variant.
    ///</summary>
    public class OrderStagedChangeAddVariant : GraphQLObject<OrderStagedChangeAddVariant>, IOrderStagedChange
    {
        ///<summary>
        ///The quantity of the product variant that was added.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The product variant that was added.
        ///</summary>
        public ProductVariant? variant { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple OrderStagedChanges.
    ///</summary>
    public class OrderStagedChangeConnection : GraphQLObject<OrderStagedChangeConnection>, IConnectionWithNodesAndEdges<OrderStagedChangeEdge, IOrderStagedChange>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<OrderStagedChangeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in OrderStagedChangeEdge.
        ///</summary>
        public IEnumerable<IOrderStagedChange>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An removal of items from an existing line item on the order.
    ///</summary>
    public class OrderStagedChangeDecrementItem : GraphQLObject<OrderStagedChangeDecrementItem>, IOrderStagedChange
    {
        ///<summary>
        ///The number of items removed.
        ///</summary>
        public int? delta { get; set; }
        ///<summary>
        ///The original line item.
        ///</summary>
        public LineItem? lineItem { get; set; }
        ///<summary>
        ///The intention to restock the removed items.
        ///</summary>
        public bool? restock { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
    ///</summary>
    public class OrderStagedChangeEdge : GraphQLObject<OrderStagedChangeEdge>, IEdge<IOrderStagedChange>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of OrderStagedChangeEdge.
        ///</summary>
        public IOrderStagedChange? node { get; set; }
    }

    ///<summary>
    ///An addition of items to an existing line item on the order.
    ///</summary>
    public class OrderStagedChangeIncrementItem : GraphQLObject<OrderStagedChangeIncrementItem>, IOrderStagedChange
    {
        ///<summary>
        ///The number of items added.
        ///</summary>
        public int? delta { get; set; }
        ///<summary>
        ///The original line item.
        ///</summary>
        public LineItem? lineItem { get; set; }
    }

    ///<summary>
    ///A payment transaction in the context of an order.
    ///</summary>
    public class OrderTransaction : GraphQLObject<OrderTransaction>, INode
    {
        ///<summary>
        ///The masked account number associated with the payment method.
        ///</summary>
        public string? accountNumber { get; set; }

        ///<summary>
        ///The amount of money.
        ///</summary>
        [Obsolete("Use `amountSet` instead.")]
        public decimal? amount { get; set; }
        ///<summary>
        ///The amount and currency of the transaction in shop and presentment currencies.
        ///</summary>
        public MoneyBag? amountSet { get; set; }

        ///<summary>
        ///The amount and currency of the transaction.
        ///</summary>
        [Obsolete("Use `amountSet` instead.")]
        public MoneyV2? amountV2 { get; set; }
        ///<summary>
        ///Authorization code associated with the transaction.
        ///</summary>
        public string? authorizationCode { get; set; }
        ///<summary>
        ///The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.
        ///</summary>
        public DateTime? authorizationExpiresAt { get; set; }
        ///<summary>
        ///Date and time when the transaction was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A standardized error code, independent of the payment provider.
        ///</summary>
        public OrderTransactionErrorCode? errorCode { get; set; }
        ///<summary>
        ///The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
        ///</summary>
        public IEnumerable<TransactionFee>? fees { get; set; }
        ///<summary>
        ///The human-readable payment gateway name used to process the transaction.
        ///</summary>
        public string? formattedGateway { get; set; }
        ///<summary>
        ///The payment gateway used to process the transaction.
        ///</summary>
        public string? gateway { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The kind of transaction.
        ///</summary>
        public OrderTransactionKind? kind { get; set; }
        ///<summary>
        ///Whether the transaction can be manually captured.
        ///</summary>
        public bool? manuallyCapturable { get; set; }

        ///<summary>
        ///Specifies the available amount to refund on the gateway.
        ///This value is only available for transactions of type `SuggestedRefund`.
        ///</summary>
        [Obsolete("Use `maximumRefundableV2` instead.")]
        public decimal? maximumRefundable { get; set; }
        ///<summary>
        ///Specifies the available amount with currency to refund on the gateway.
        ///This value is only available for transactions of type `SuggestedRefund`.
        ///</summary>
        public MoneyV2? maximumRefundableV2 { get; set; }
        ///<summary>
        ///Whether the transaction can be captured multiple times.
        ///</summary>
        public bool? multiCapturable { get; set; }
        ///<summary>
        ///The associated order.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The associated parent transaction, for example the authorization of a capture.
        ///</summary>
        public OrderTransaction? parentTransaction { get; set; }
        ///<summary>
        ///The payment details for the transaction.
        ///</summary>
        public IPaymentDetails? paymentDetails { get; set; }
        ///<summary>
        ///The payment icon to display for the transaction.
        ///</summary>
        public Image? paymentIcon { get; set; }
        ///<summary>
        ///The payment ID associated with the transaction.
        ///</summary>
        public string? paymentId { get; set; }

        ///<summary>
        ///The payment method used for the transaction. This value is `null` if the payment method is unknown.
        ///</summary>
        [Obsolete("Use `paymentIcon` instead.")]
        public PaymentMethods? paymentMethod { get; set; }
        ///<summary>
        ///Date and time when the transaction was processed.
        ///</summary>
        public DateTime? processedAt { get; set; }

        ///<summary>
        ///The transaction receipt that the payment gateway attaches to the transaction.
        ///The value of this field depends on which payment gateway processed the transaction.
        ///</summary>
        [Obsolete("Use `receiptJson` instead.")]
        public string? receipt { get; set; }
        ///<summary>
        ///The transaction receipt that the payment gateway attaches to the transaction.
        ///The value of this field depends on which payment gateway processed the transaction.
        ///</summary>
        public string? receiptJson { get; set; }
        ///<summary>
        ///The settlement currency.
        ///</summary>
        public CurrencyCode? settlementCurrency { get; set; }
        ///<summary>
        ///The rate used when converting the transaction amount to settlement currency.
        ///</summary>
        public decimal? settlementCurrencyRate { get; set; }
        ///<summary>
        ///Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
        ///</summary>
        public ShopifyPaymentsTransactionSet? shopifyPaymentsSet { get; set; }
        ///<summary>
        ///The status of this transaction.
        ///</summary>
        public OrderTransactionStatus? status { get; set; }
        ///<summary>
        ///Whether the transaction is a test transaction.
        ///</summary>
        public bool? test { get; set; }

        ///<summary>
        ///Specifies the available amount to capture on the gateway.
        ///Only available when an amount is capturable or manually mark as paid.
        ///</summary>
        [Obsolete("Use `totalUnsettledSet` instead.")]
        public decimal? totalUnsettled { get; set; }
        ///<summary>
        ///Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
        ///Only available when an amount is capturable or manually mark as paid.
        ///</summary>
        public MoneyBag? totalUnsettledSet { get; set; }

        ///<summary>
        ///Specifies the available amount with currency to capture on the gateway.
        ///Only available when an amount is capturable or manually mark as paid.
        ///</summary>
        [Obsolete("Use `totalUnsettledSet` instead.")]
        public MoneyV2? totalUnsettledV2 { get; set; }
        ///<summary>
        ///Staff member who was logged into the Shopify POS device when the transaction was processed.
        ///</summary>
        public StaffMember? user { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple OrderTransactions.
    ///</summary>
    public class OrderTransactionConnection : GraphQLObject<OrderTransactionConnection>, IConnectionWithNodesAndEdges<OrderTransactionEdge, OrderTransaction>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<OrderTransactionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in OrderTransactionEdge.
        ///</summary>
        public IEnumerable<OrderTransaction>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one OrderTransaction and a cursor during pagination.
    ///</summary>
    public class OrderTransactionEdge : GraphQLObject<OrderTransactionEdge>, IEdge<OrderTransaction>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of OrderTransactionEdge.
        ///</summary>
        public OrderTransaction? node { get; set; }
    }

    ///<summary>
    ///A standardized error code, independent of the payment provider.
    ///</summary>
    public enum OrderTransactionErrorCode
    {
        ///<summary>
        ///The card number is incorrect.
        ///</summary>
        INCORRECT_NUMBER,
        ///<summary>
        ///The format of the card number is incorrect.
        ///</summary>
        INVALID_NUMBER,
        ///<summary>
        ///The format of the expiry date is incorrect.
        ///</summary>
        INVALID_EXPIRY_DATE,
        ///<summary>
        ///The format of the CVC is incorrect.
        ///</summary>
        INVALID_CVC,
        ///<summary>
        ///The card is expired.
        ///</summary>
        EXPIRED_CARD,
        ///<summary>
        ///The CVC does not match the card number.
        ///</summary>
        INCORRECT_CVC,
        ///<summary>
        ///The ZIP or postal code does not match the card number.
        ///</summary>
        INCORRECT_ZIP,
        ///<summary>
        ///The address does not match the card number.
        ///</summary>
        INCORRECT_ADDRESS,
        ///<summary>
        ///The entered PIN is incorrect.
        ///</summary>
        INCORRECT_PIN,
        ///<summary>
        ///The card was declined.
        ///</summary>
        CARD_DECLINED,
        ///<summary>
        ///There was an error while processing the payment.
        ///</summary>
        PROCESSING_ERROR,
        ///<summary>
        ///Call the card issuer.
        ///</summary>
        CALL_ISSUER,
        ///<summary>
        ///The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.
        ///</summary>
        PICK_UP_CARD,
        ///<summary>
        ///There is an error in the gateway or merchant configuration.
        ///</summary>
        CONFIG_ERROR,
        ///<summary>
        ///A real card was used but the gateway was in test mode.
        ///</summary>
        TEST_MODE_LIVE_CARD,
        ///<summary>
        ///The gateway or merchant configuration doesn't support a feature, such as network tokenization.
        ///</summary>
        UNSUPPORTED_FEATURE,
        ///<summary>
        ///There was an unknown error with processing the payment.
        ///</summary>
        GENERIC_ERROR,
        ///<summary>
        ///The payment method is not available in the customer's country.
        ///</summary>
        INVALID_COUNTRY,
        ///<summary>
        ///The amount is either too high or too low for the provider.
        ///</summary>
        INVALID_AMOUNT,
        ///<summary>
        ///The payment method is momentarily unavailable.
        ///</summary>
        PAYMENT_METHOD_UNAVAILABLE,
        ///<summary>
        ///The payment method was invalid.
        ///</summary>
        AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD,
        ///<summary>
        ///The maximum amount has been captured.
        ///</summary>
        AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED,
        ///<summary>
        ///The maximum amount has been refunded.
        ///</summary>
        AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED,
        ///<summary>
        ///The maximum of 10 authorizations has been captured for an order.
        ///</summary>
        AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED,
        ///<summary>
        ///The maximum of 10 refunds has been processed for an order.
        ///</summary>
        AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED,
        ///<summary>
        ///The order was canceled, which canceled all open authorizations.
        ///</summary>
        AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED,
        ///<summary>
        ///The order was not confirmed within three hours.
        ///</summary>
        AMAZON_PAYMENTS_STALE,
    }

    ///<summary>
    ///The different kinds of order transactions.
    ///</summary>
    public enum OrderTransactionKind
    {
        ///<summary>
        ///An authorization and capture performed together in a single step.
        ///</summary>
        SALE,
        ///<summary>
        ///A transfer of the money that was reserved by an authorization.
        ///</summary>
        CAPTURE,
        ///<summary>
        ///An amount reserved against the cardholder's funding source.
        ///Money does not change hands until the authorization is captured.
        ///</summary>
        AUTHORIZATION,
        ///<summary>
        ///A cancelation of an authorization transaction.
        ///</summary>
        VOID,
        ///<summary>
        ///A partial or full return of captured funds to the cardholder.
        ///A refund can happen only after a capture is processed.
        ///</summary>
        REFUND,
        ///<summary>
        ///The money returned to the customer when they've paid too much during a cash transaction.
        ///</summary>
        CHANGE,
        ///<summary>
        ///An authorization for a payment taken with an EMV credit card reader.
        ///</summary>
        EMV_AUTHORIZATION,
        ///<summary>
        ///A suggested refund transaction that can be used to create a refund.
        ///</summary>
        SUGGESTED_REFUND,
    }

    ///<summary>
    ///The different states that an `OrderTransaction` can have.
    ///</summary>
    public enum OrderTransactionStatus
    {
        ///<summary>
        ///The transaction succeeded.
        ///</summary>
        SUCCESS,
        ///<summary>
        ///The transaction failed.
        ///</summary>
        FAILURE,
        ///<summary>
        ///The transaction is pending.
        ///</summary>
        PENDING,
        ///<summary>
        ///There was an error while processing the transaction.
        ///</summary>
        ERROR,
        ///<summary>
        ///Awaiting a response.
        ///</summary>
        AWAITING_RESPONSE,
        ///<summary>
        ///The transaction status is unknown.
        ///</summary>
        UNKNOWN,
    }

    ///<summary>
    ///Return type for `orderUpdate` mutation.
    ///</summary>
    public class OrderUpdatePayload : GraphQLObject<OrderUpdatePayload>
    {
        ///<summary>
        ///The updated order.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Returns information about pagination in a connection, in accordance with the
    ///[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
    ///For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
    ///</summary>
    public class PageInfo : GraphQLObject<PageInfo>
    {
        ///<summary>
        ///The cursor corresponding to the last node in edges.
        ///</summary>
        public string? endCursor { get; set; }
        ///<summary>
        ///Whether there are more pages to fetch following the current page.
        ///</summary>
        public bool? hasNextPage { get; set; }
        ///<summary>
        ///Whether there are any pages prior to the current page.
        ///</summary>
        public bool? hasPreviousPage { get; set; }
        ///<summary>
        ///The cursor corresponding to the first node in edges.
        ///</summary>
        public string? startCursor { get; set; }
    }

    ///<summary>
    ///A ShopifyQL parsing error.
    ///</summary>
    public class ParseError : GraphQLObject<ParseError>
    {
        ///<summary>
        ///An error code for the error.
        ///</summary>
        public ParseErrorCode? code { get; set; }
        ///<summary>
        ///The description of the parsing error.
        ///</summary>
        public string? message { get; set; }
        ///<summary>
        ///The start and end range for the error.
        ///</summary>
        public ParseErrorRange? range { get; set; }
    }

    ///<summary>
    ///ShopifyQL parsing errors.
    ///</summary>
    public enum ParseErrorCode
    {
        ///<summary>
        ///Syntax not recognized.
        ///</summary>
        SYNTAX_NOT_RECOGNIZED,
        ///<summary>
        ///Semantically invalid.
        ///</summary>
        SEMANTICALLY_INVALID,
        ///<summary>
        ///Table not found.
        ///</summary>
        TABLE_NOT_FOUND,
        ///<summary>
        ///Column not found.
        ///</summary>
        COLUMN_NOT_FOUND,
        ///<summary>
        ///Value isn't parsable.
        ///</summary>
        VALUE_NOT_PARSABLE,
        ///<summary>
        ///Date isn't parsable.
        ///</summary>
        DATE_NOT_PARSABLE,
        ///<summary>
        ///Datetime value isn't parsable.
        ///</summary>
        DATE_TIME_NOT_PARSABLE,
        ///<summary>
        ///Date interval not found.
        ///</summary>
        DATE_INTERVAL_NOT_FOUND,
        ///<summary>
        ///Named date not found.
        ///</summary>
        NAMED_DATE_NOT_FOUND,
        ///<summary>
        ///Sort field not found.
        ///</summary>
        SORT_FIELD_NOT_FOUND,
        ///<summary>
        ///Limit is invalid.
        ///</summary>
        LIMIT_INVALID,
        ///<summary>
        ///The type of visualization is invalid. Acceptable types: bar, line.
        ///</summary>
        VISUALIZE_CHART_TYPE_NOT_FOUND,
        ///<summary>
        ///Function does not have any valid modifiers.
        ///</summary>
        FUNCTION_MODIFIER_NOT_FOUND,
        ///<summary>
        ///Function is missing required argument(s).
        ///</summary>
        FUNCTION_ARGUMENTS_NOT_FOUND,
        ///<summary>
        ///Function has too many arguments.
        ///</summary>
        FUNCTION_EXCESS_ARGUMENTS,
        ///<summary>
        ///Keyword `FROM` not found.
        ///</summary>
        FROM_NOT_FOUND,
        ///<summary>
        ///Query is missing `SHOW` or `VISUALIZE`.
        ///</summary>
        PRESENTMENT_NOT_FOUND,
        ///<summary>
        ///Use the correct syntax for either `SHOW` or `VISUALIZE`.
        ///</summary>
        EXCESS_PRESENTMENTS,
        ///<summary>
        ///Function has incompatible types.
        ///</summary>
        FUNCTION_INCOMPATIBLE_TYPES,
        ///<summary>
        ///Visualize has too many projections.
        ///</summary>
        VISUALIZE_EXCESS_PROJECTIONS,
        ///<summary>
        ///Unknown error.
        ///</summary>
        UNKNOWN,
        ///<summary>
        ///Invalid arguments for operator.
        ///</summary>
        OPERATOR_INCOMPATIBLE_TYPES,
        ///<summary>
        ///Function `VISUALIZE` contains a data type which cannot be plotted.
        ///</summary>
        VISUALIZE_INCOMPATIBLE_TYPES,
        ///<summary>
        ///Function `VISUALIZE` requires `GROUP BY`.
        ///</summary>
        VISUALIZE_GROUP_BY_NOT_FOUND,
        ///<summary>
        ///Function `VISUALIZE` can only use `GROUP BY` or `GROUP BY` with the `ALL` modifier, not both.
        ///</summary>
        VISUALIZE_GROUP_BY_MIXED_BACKFILL,
        ///<summary>
        ///Mixing an aggregate expression and a non-aggregate expression is not allowed.
        ///</summary>
        MIXED_AGGREGATE_AND_NON_AGGREGATE,
        ///<summary>
        ///An aggregate function received a nested aggregate argument, which is not allowed.
        ///</summary>
        FUNCTION_NESTED_AGGREGATE,
        ///<summary>
        ///Time function is incompatible in a `GROUP BY` clause with the `ALL` modifier.
        ///</summary>
        TIME_FUNCTION_NOT_FOUND,
        ///<summary>
        ///Mixing of `IN` list arguments of different data types is not allowed.
        ///</summary>
        LIST_MIXED_ARGUMENT_TYPES,
        ///<summary>
        ///Mixing of `SINCE` and/or `UNTIL` with `DURING` is not allowed.
        ///</summary>
        EXCESS_PERIODS,
        ///<summary>
        ///Invalid entry.
        ///</summary>
        SYNTAX_INVALID_TOKEN,
        ///<summary>
        ///Identifier after `SHOW` is not valid in its current position.
        ///</summary>
        SYNTAX_NO_VIABLE_ALTERNATIVE,
        ///<summary>
        ///Invalid `COMPARE TO` period specified. Make sure it's not the same as the `DURING` clause.
        ///</summary>
        COMPARE_TO_INVALID_PERIOD,
        ///<summary>
        ///The time period for `COMPARE TO` must be the same length as `DURING`.
        ///</summary>
        COMPARE_TO_INCOMPATIBLE_PERIOD,
        ///<summary>
        ///When using `COMPARE TO` with a time-based `GROUP BY`, `ALL` must be used.
        ///</summary>
        UNBACKFILLED_TIME_GROUP_BY_COMPARISON,
        ///<summary>
        ///Comparison queries must only contain aggregated fields.
        ///</summary>
        COMPARISON_WITH_NON_AGGREGATE_FIELDS,
        ///<summary>
        ///Column must include `GROUP BY` arg1.
        ///</summary>
        REQUIRED_GROUP_BY_NOT_FOUND,
        ///<summary>
        ///Identifier or function out of place.
        ///</summary>
        SYNTAX_INPUT_MISMATCH,
        ///<summary>
        ///Identifier or function out of place.
        ///</summary>
        SYNTAX_UNWANTED_TOKEN,
        ///<summary>
        ///Query is incomplete.
        ///</summary>
        SYNTAX_MISSING_TOKEN,
        ///<summary>
        ///Function not found.
        ///</summary>
        FUNCTION_NOT_FOUND,
        ///<summary>
        ///The `SINCE` date must be before or the same as the `UNTIL` date.
        ///</summary>
        INVALID_DATE_RANGE,
        ///<summary>
        ///The `GROUP BY` function is limited to one parameter with the `ALL` modifier.
        ///</summary>
        EXCESS_BACKFILL_DIMENSIONS,
        ///<summary>
        ///When using `GROUP BY` with the `ALL` modifier, `SINCE` or `DURING` must be defined.
        ///</summary>
        BACKFILL_DATE_RANGE_NOT_FOUND,
        ///<summary>
        ///Cannot use a `COMPARE TO` clause without `DURING` or `SINCE`.
        ///</summary>
        COMPARE_TO_MISSING_PERIOD,
        ///<summary>
        ///The `GROUP BY` function has too many parameters.
        ///When using `VISUALIZE` with `COMPARE TO` use only one `GROUP BY` parameter.
        ///</summary>
        EXCESS_DIMENSIONS,
        ///<summary>
        ///A semantic predicate failed during validation.
        ///</summary>
        SYNTAX_FAILED_PREDICATE,
    }

    ///<summary>
    ///A range of ShopifyQL parsing errors.
    ///</summary>
    public class ParseErrorRange : GraphQLObject<ParseErrorRange>
    {
        ///<summary>
        ///The ending position of the error.
        ///</summary>
        public ErrorPosition? end { get; set; }
        ///<summary>
        ///The starting position of the error.
        ///</summary>
        public ErrorPosition? start { get; set; }
    }

    ///<summary>
    ///A payment customization.
    ///</summary>
    public class PaymentCustomization : GraphQLObject<PaymentCustomization>, IHasMetafieldDefinitions, IHasMetafields, INode, IMetafieldReferencer
    {
        ///<summary>
        ///The enabled status of the payment customization.
        ///</summary>
        public bool? enabled { get; set; }
        ///<summary>
        ///The error history on the most recent version of the payment customization.
        ///</summary>
        public FunctionsErrorHistory? errorHistory { get; set; }
        ///<summary>
        ///The ID of the Shopify Function implementing the payment customization.
        ///</summary>
        public string? functionId { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The Shopify Function implementing the payment customization.
        ///</summary>
        public ShopifyFunction? shopifyFunction { get; set; }
        ///<summary>
        ///The title of the payment customization.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///Return type for `paymentCustomizationActivation` mutation.
    ///</summary>
    public class PaymentCustomizationActivationPayload : GraphQLObject<PaymentCustomizationActivationPayload>
    {
        ///<summary>
        ///The IDs of the updated payment customizations.
        ///</summary>
        public IEnumerable<string>? ids { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PaymentCustomizationError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple PaymentCustomizations.
    ///</summary>
    public class PaymentCustomizationConnection : GraphQLObject<PaymentCustomizationConnection>, IConnectionWithNodesAndEdges<PaymentCustomizationEdge, PaymentCustomization>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<PaymentCustomizationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in PaymentCustomizationEdge.
        ///</summary>
        public IEnumerable<PaymentCustomization>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `paymentCustomizationCreate` mutation.
    ///</summary>
    public class PaymentCustomizationCreatePayload : GraphQLObject<PaymentCustomizationCreatePayload>
    {
        ///<summary>
        ///Returns the created payment customization.
        ///</summary>
        public PaymentCustomization? paymentCustomization { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PaymentCustomizationError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `paymentCustomizationDelete` mutation.
    ///</summary>
    public class PaymentCustomizationDeletePayload : GraphQLObject<PaymentCustomizationDeletePayload>
    {
        ///<summary>
        ///Returns the deleted payment customization ID.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PaymentCustomizationError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one PaymentCustomization and a cursor during pagination.
    ///</summary>
    public class PaymentCustomizationEdge : GraphQLObject<PaymentCustomizationEdge>, IEdge<PaymentCustomization>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of PaymentCustomizationEdge.
        ///</summary>
        public PaymentCustomization? node { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of a payment customization mutation.
    ///</summary>
    public class PaymentCustomizationError : GraphQLObject<PaymentCustomizationError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PaymentCustomizationErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PaymentCustomizationError`.
    ///</summary>
    public enum PaymentCustomizationErrorCode
    {
        ///<summary>
        ///Shop plan not eligible to use Functions from a custom app.
        ///</summary>
        CUSTOM_APP_FUNCTION_NOT_ELIGIBLE,
        ///<summary>
        ///Function does not implement the required interface.
        ///</summary>
        FUNCTION_DOES_NOT_IMPLEMENT,
        ///<summary>
        ///Function not found.
        ///</summary>
        FUNCTION_NOT_FOUND,
        ///<summary>
        ///Function is pending deletion.
        ///</summary>
        FUNCTION_PENDING_DELETION,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///Payment customization not found.
        ///</summary>
        PAYMENT_CUSTOMIZATION_NOT_FOUND,
        ///<summary>
        ///Shop must be on a Shopify Plus plan to activate payment customizations from a custom app.
        ///</summary>
        PAYMENT_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE,
        ///<summary>
        ///Maximum payment customizations are already enabled.
        ///</summary>
        MAXIMUM_ACTIVE_PAYMENT_CUSTOMIZATIONS,
        ///<summary>
        ///Required input field must be present.
        ///</summary>
        REQUIRED_INPUT_FIELD,
        ///<summary>
        ///Could not create or update metafields.
        ///</summary>
        INVALID_METAFIELDS,
        ///<summary>
        ///Function ID cannot be changed.
        ///</summary>
        FUNCTION_ID_CANNOT_BE_CHANGED,
    }

    ///<summary>
    ///Return type for `paymentCustomizationUpdate` mutation.
    ///</summary>
    public class PaymentCustomizationUpdatePayload : GraphQLObject<PaymentCustomizationUpdatePayload>
    {
        ///<summary>
        ///Returns the updated payment customization.
        ///</summary>
        public PaymentCustomization? paymentCustomization { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PaymentCustomizationError>? userErrors { get; set; }
    }

    ///<summary>
    ///Payment details related to a transaction.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(CardPaymentDetails), typeDiscriminator: "CardPaymentDetails")]
    [JsonDerivedType(typeof(ShopPayInstallmentsPaymentDetails), typeDiscriminator: "ShopPayInstallmentsPaymentDetails")]
    public interface IPaymentDetails : IGraphQLObject
    {
        public CardPaymentDetails? AsCardPaymentDetails() => this as CardPaymentDetails;
        public ShopPayInstallmentsPaymentDetails? AsShopPayInstallmentsPaymentDetails() => this as ShopPayInstallmentsPaymentDetails;
        ///<summary>
        ///The name of payment method used by the buyer.
        ///</summary>
        public string? paymentMethodName { get; set; }
    }

    ///<summary>
    ///All possible instrument outputs for Payment Mandates.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(VaultCreditCard), typeDiscriminator: "VaultCreditCard")]
    [JsonDerivedType(typeof(VaultPaypalBillingAgreement), typeDiscriminator: "VaultPaypalBillingAgreement")]
    public interface IPaymentInstrument : IGraphQLObject
    {
        public VaultCreditCard? AsVaultCreditCard() => this as VaultCreditCard;
        public VaultPaypalBillingAgreement? AsVaultPaypalBillingAgreement() => this as VaultPaypalBillingAgreement;
        ///<summary>
        ///The name of the card holder.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///A payment instrument and the permission
    ///the owner of the instrument gives to the merchant to debit it.
    ///</summary>
    public class PaymentMandate : GraphQLObject<PaymentMandate>, INode
    {
        ///<summary>
        ///The unique ID of a payment mandate.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The outputs details of the payment instrument.
        ///</summary>
        public IPaymentInstrument? paymentInstrument { get; set; }
    }

    ///<summary>
    ///Some of the payment methods used in Shopify.
    ///</summary>
    public enum PaymentMethods
    {
        VISA,
        MASTERCARD,
        DISCOVER,
        AMERICAN_EXPRESS,
        DINERS_CLUB,
        JCB,
        ///<summary>
        ///The payment method for UnionPay payment.
        ///</summary>
        UNIONPAY,
        ///<summary>
        ///The payment method for Elo payment.
        ///</summary>
        ELO,
        DANKORT,
        MAESTRO,
        FORBRUGSFORENINGEN,
        PAYPAL,
        BOGUS,
        BITCOIN,
        LITECOIN,
        DOGECOIN,
        ///<summary>
        ///The payment method for Interac payment.
        ///</summary>
        INTERAC,
        ///<summary>
        ///The payment method for eftpos_au payment.
        ///</summary>
        EFTPOS,
    }

    ///<summary>
    ///Return type for `paymentReminderSend` mutation.
    ///</summary>
    public class PaymentReminderSendPayload : GraphQLObject<PaymentReminderSendPayload>
    {
        ///<summary>
        ///Whether the payment reminder email was successfully sent.
        ///</summary>
        public bool? success { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PaymentReminderSendUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `PaymentReminderSend`.
    ///</summary>
    public class PaymentReminderSendUserError : GraphQLObject<PaymentReminderSendUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PaymentReminderSendUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PaymentReminderSendUserError`.
    ///</summary>
    public enum PaymentReminderSendUserErrorCode
    {
        ///<summary>
        ///An error occurred while sending the payment reminder.
        ///</summary>
        PAYMENT_REMINDER_SEND_UNSUCCESSFUL,
    }

    ///<summary>
    ///Represents the payment schedule for a single payment defined in the payment terms.
    ///</summary>
    public class PaymentSchedule : GraphQLObject<PaymentSchedule>, INode
    {
        ///<summary>
        ///Amount owed for this payment schedule.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///Date and time when the payment schedule is paid or fulfilled.
        ///</summary>
        public DateTime? completedAt { get; set; }
        ///<summary>
        ///Date and time when the payment schedule is due.
        ///</summary>
        public DateTime? dueAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Date and time when the invoice is sent.
        ///</summary>
        public DateTime? issuedAt { get; set; }
        ///<summary>
        ///The payment terms the payment schedule belongs to.
        ///</summary>
        public PaymentTerms? paymentTerms { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple PaymentSchedules.
    ///</summary>
    public class PaymentScheduleConnection : GraphQLObject<PaymentScheduleConnection>, IConnectionWithNodesAndEdges<PaymentScheduleEdge, PaymentSchedule>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<PaymentScheduleEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in PaymentScheduleEdge.
        ///</summary>
        public IEnumerable<PaymentSchedule>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
    ///</summary>
    public class PaymentScheduleEdge : GraphQLObject<PaymentScheduleEdge>, IEdge<PaymentSchedule>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of PaymentScheduleEdge.
        ///</summary>
        public PaymentSchedule? node { get; set; }
    }

    ///<summary>
    ///Settings related to payments.
    ///</summary>
    public class PaymentSettings : GraphQLObject<PaymentSettings>
    {
        ///<summary>
        ///List of the digital wallets which the shop supports.
        ///</summary>
        public IEnumerable<DigitalWallet>? supportedDigitalWallets { get; set; }
    }

    ///<summary>
    ///Represents the payment terms for an order or draft order.
    ///</summary>
    public class PaymentTerms : GraphQLObject<PaymentTerms>, INode
    {
        ///<summary>
        ///The draft order associated with the payment terms.
        ///</summary>
        public DraftOrder? draftOrder { get; set; }
        ///<summary>
        ///Duration of payment terms in days based on the payment terms template used to create the payment terms.
        ///</summary>
        public int? dueInDays { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The order associated with the payment terms.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///Whether the payment terms have overdue payment schedules.
        ///</summary>
        public bool? overdue { get; set; }
        ///<summary>
        ///List of schedules for the payment terms.
        ///</summary>
        public PaymentScheduleConnection? paymentSchedules { get; set; }
        ///<summary>
        ///The name of the payment terms template used to create the payment terms.
        ///</summary>
        public string? paymentTermsName { get; set; }
        ///<summary>
        ///The payment terms template type used to create the payment terms.
        ///</summary>
        public PaymentTermsType? paymentTermsType { get; set; }
        ///<summary>
        ///The payment terms name, translated into the shop admin's preferred language.
        ///</summary>
        public string? translatedName { get; set; }
    }

    ///<summary>
    ///Return type for `paymentTermsCreate` mutation.
    ///</summary>
    public class PaymentTermsCreatePayload : GraphQLObject<PaymentTermsCreatePayload>
    {
        ///<summary>
        ///The created payment terms.
        ///</summary>
        public PaymentTerms? paymentTerms { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PaymentTermsCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `PaymentTermsCreate`.
    ///</summary>
    public class PaymentTermsCreateUserError : GraphQLObject<PaymentTermsCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PaymentTermsCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PaymentTermsCreateUserError`.
    ///</summary>
    public enum PaymentTermsCreateUserErrorCode
    {
        ///<summary>
        ///An error occurred while creating payment terms.
        ///</summary>
        PAYMENT_TERMS_CREATION_UNSUCCESSFUL,
    }

    ///<summary>
    ///Return type for `paymentTermsDelete` mutation.
    ///</summary>
    public class PaymentTermsDeletePayload : GraphQLObject<PaymentTermsDeletePayload>
    {
        ///<summary>
        ///The deleted payment terms ID.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PaymentTermsDeleteUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `PaymentTermsDelete`.
    ///</summary>
    public class PaymentTermsDeleteUserError : GraphQLObject<PaymentTermsDeleteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PaymentTermsDeleteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PaymentTermsDeleteUserError`.
    ///</summary>
    public enum PaymentTermsDeleteUserErrorCode
    {
        ///<summary>
        ///An error occurred while deleting payment terms.
        ///</summary>
        PAYMENT_TERMS_DELETE_UNSUCCESSFUL,
    }

    ///<summary>
    ///Represents the payment terms template object.
    ///</summary>
    public class PaymentTermsTemplate : GraphQLObject<PaymentTermsTemplate>, INode
    {
        ///<summary>
        ///The description of the payment terms template.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The number of days between the issued date and due date if this is the net type of payment terms.
        ///</summary>
        public int? dueInDays { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the payment terms template.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The type of the payment terms template.
        ///</summary>
        public PaymentTermsType? paymentTermsType { get; set; }
        ///<summary>
        ///The translated payment terms template name.
        ///</summary>
        public string? translatedName { get; set; }
    }

    ///<summary>
    ///The type of a payment terms or a payment terms template.
    ///</summary>
    public enum PaymentTermsType
    {
        ///<summary>
        ///The payment terms or payment terms template is due on receipt.
        ///</summary>
        RECEIPT,
        ///<summary>
        ///The payment terms or payment terms template is a net type. It's due a number of days after issue.
        ///</summary>
        NET,
        ///<summary>
        ///The payment terms or payment terms template is a fixed type. It's due on a specified date.
        ///</summary>
        FIXED,
        ///<summary>
        ///The payment terms or payment terms template is due on fulfillment.
        ///</summary>
        FULFILLMENT,
        ///<summary>
        ///The type of the payment terms or payment terms template is unknown.
        ///</summary>
        UNKNOWN,
    }

    ///<summary>
    ///Return type for `paymentTermsUpdate` mutation.
    ///</summary>
    public class PaymentTermsUpdatePayload : GraphQLObject<PaymentTermsUpdatePayload>
    {
        ///<summary>
        ///The updated payment terms.
        ///</summary>
        public PaymentTerms? paymentTerms { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PaymentTermsUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `PaymentTermsUpdate`.
    ///</summary>
    public class PaymentTermsUpdateUserError : GraphQLObject<PaymentTermsUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PaymentTermsUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PaymentTermsUpdateUserError`.
    ///</summary>
    public enum PaymentTermsUpdateUserErrorCode
    {
        ///<summary>
        ///An error occurred while updating payment terms.
        ///</summary>
        PAYMENT_TERMS_UPDATE_UNSUCCESSFUL,
    }

    ///<summary>
    ///Represents a valid PayPal Express subscriptions gateway status.
    ///</summary>
    public enum PaypalExpressSubscriptionsGatewayStatus
    {
        ///<summary>
        ///The status is enabled.
        ///</summary>
        ENABLED,
        ///<summary>
        ///The status is disabled.
        ///</summary>
        DISABLED,
        ///<summary>
        ///The status is pending.
        ///</summary>
        PENDING,
    }

    ///<summary>
    ///A PolarisViz data point structure for ShopifyQL query.
    ///</summary>
    public class PolarisVizDataPoint : GraphQLObject<PolarisVizDataPoint>
    {
        ///<summary>
        ///The data key. Typically a category, dimension, or other qualitative data.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The data value is numeric and quantitative.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///The data series used for PolarisViz visualization.
    ///</summary>
    public class PolarisVizDataSeries : GraphQLObject<PolarisVizDataSeries>
    {
        ///<summary>
        ///An array of data points.
        ///</summary>
        public IEnumerable<PolarisVizDataPoint>? data { get; set; }
        ///<summary>
        ///Whether the series represents comparison data.
        ///</summary>
        public bool? isComparison { get; set; }
        ///<summary>
        ///The name of the series.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///A PolarisViz response to a ShopifyQL query.
    ///</summary>
    public class PolarisVizResponse : GraphQLObject<PolarisVizResponse>, IShopifyqlResponse
    {
        ///<summary>
        ///The PolarisViz visualization of data.
        ///</summary>
        public IEnumerable<PolarisVizDataSeries>? data { get; set; }
        ///<summary>
        ///A list of parse errors, if parsing fails.
        ///</summary>
        public IEnumerable<ParseError>? parseErrors { get; set; }
        ///<summary>
        ///The result in a tabular format with schema and row data.
        ///                It's always present even if query has a `VISUALIZE` keyword.
        ///</summary>
        public TableData? tableData { get; set; }
        ///<summary>
        ///The type of visualization. For example, a line chart.
        ///</summary>
        public VisualizationType? vizType { get; set; }
    }

    ///<summary>
    ///How to caluclate the parent product variant's price while bulk updating variant relationships.
    ///</summary>
    public enum PriceCalculationType
    {
        ///<summary>
        ///The price of the parent will be the sum of the components price times their quantity.
        ///</summary>
        COMPONENTS_SUM,
        ///<summary>
        ///The price of the parent will be set to the price provided.
        ///</summary>
        FIXED,
        ///<summary>
        ///The price of the parent will not be adjusted.
        ///</summary>
        NONE,
    }

    ///<summary>
    ///Represents a price list, including information about related prices and eligibility rules.
    ///You can use price lists to specify either fixed prices or adjusted relative prices that
    ///override initial product variant prices. Price lists are applied to customers
    ///using context rules, which determine price list eligibility.
    ///
    ///  For more information on price lists, refer to
    ///  [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
    ///</summary>
    public class PriceList : GraphQLObject<PriceList>, INode
    {
        ///<summary>
        ///The catalog that the price list is associated with.
        ///</summary>
        public ICatalog? catalog { get; set; }
        ///<summary>
        ///The currency for fixed prices associated with this price list.
        ///</summary>
        public CurrencyCode? currency { get; set; }
        ///<summary>
        ///The number of fixed prices on the price list.
        ///</summary>
        public int? fixedPricesCount { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The unique name of the price list, used as a human-readable identifier.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///Relative adjustments to other prices.
        ///</summary>
        public PriceListParent? parent { get; set; }
        ///<summary>
        ///A list of prices associated with the price list.
        ///</summary>
        public PriceListPriceConnection? prices { get; set; }
        ///<summary>
        ///A list of quantity rules associated with the price list, ordered by product variants.
        ///</summary>
        public QuantityRuleConnection? quantityRules { get; set; }
    }

    ///<summary>
    ///The type and value of a price list adjustment.
    ///
    ///For more information on price lists, refer to
    ///[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
    ///</summary>
    public class PriceListAdjustment : GraphQLObject<PriceListAdjustment>
    {
        ///<summary>
        ///The type of price adjustment, such as percentage increase or decrease.
        ///</summary>
        public PriceListAdjustmentType? type { get; set; }
        ///<summary>
        ///The value of price adjustment, where positive numbers reduce the prices and negative numbers
        ///increase them.
        ///</summary>
        public float? value { get; set; }
    }

    ///<summary>
    ///Represents the settings of price list adjustments.
    ///</summary>
    public class PriceListAdjustmentSettings : GraphQLObject<PriceListAdjustmentSettings>
    {
        ///<summary>
        ///The type of price list adjustment setting for compare at price.
        ///</summary>
        public PriceListCompareAtMode? compareAtMode { get; set; }
    }

    ///<summary>
    ///Represents a percentage price adjustment type.
    ///</summary>
    public enum PriceListAdjustmentType
    {
        ///<summary>
        ///Percentage decrease type. Prices will have a lower value.
        ///</summary>
        PERCENTAGE_DECREASE,
        ///<summary>
        ///Percentage increase type. Prices will have a higher value.
        ///</summary>
        PERCENTAGE_INCREASE,
    }

    ///<summary>
    ///Represents how the compare at price will be determined for a price list.
    ///</summary>
    public enum PriceListCompareAtMode
    {
        ///<summary>
        ///The compare at price is adjusted based on percentage specified in price list.
        ///</summary>
        ADJUSTED,
        ///<summary>
        ///The compare at prices are set to `null` unless explicitly defined by a fixed price value.
        ///</summary>
        NULLIFY,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple PriceLists.
    ///</summary>
    public class PriceListConnection : GraphQLObject<PriceListConnection>, IConnectionWithNodesAndEdges<PriceListEdge, PriceList>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<PriceListEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in PriceListEdge.
        ///</summary>
        public IEnumerable<PriceList>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `priceListCreate` mutation.
    ///</summary>
    public class PriceListCreatePayload : GraphQLObject<PriceListCreatePayload>
    {
        ///<summary>
        ///The newly created price list.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceListUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `priceListDelete` mutation.
    ///</summary>
    public class PriceListDeletePayload : GraphQLObject<PriceListDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted price list.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceListUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one PriceList and a cursor during pagination.
    ///</summary>
    public class PriceListEdge : GraphQLObject<PriceListEdge>, IEdge<PriceList>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of PriceListEdge.
        ///</summary>
        public PriceList? node { get; set; }
    }

    ///<summary>
    ///Return type for `priceListFixedPricesAdd` mutation.
    ///</summary>
    public class PriceListFixedPricesAddPayload : GraphQLObject<PriceListFixedPricesAddPayload>
    {
        ///<summary>
        ///The list of fixed prices that were added to or updated in the price list.
        ///</summary>
        public IEnumerable<PriceListPrice>? prices { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceListPriceUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed price list fixed prices by product bulk update operations.
    ///</summary>
    public class PriceListFixedPricesByProductBulkUpdateUserError : GraphQLObject<PriceListFixedPricesByProductBulkUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PriceListFixedPricesByProductBulkUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PriceListFixedPricesByProductBulkUpdateUserError`.
    ///</summary>
    public enum PriceListFixedPricesByProductBulkUpdateUserErrorCode
    {
        ///<summary>
        ///No update operations specified.
        ///</summary>
        NO_UPDATE_OPERATIONS_SPECIFIED,
        ///<summary>
        ///The currency specified does not match the price list's currency.
        ///</summary>
        PRICES_TO_ADD_CURRENCY_MISMATCH,
        ///<summary>
        ///Price list does not exist.
        ///</summary>
        PRICE_LIST_DOES_NOT_EXIST,
        ///<summary>
        ///Duplicate ID in input.
        ///</summary>
        DUPLICATE_ID_IN_INPUT,
        ///<summary>
        ///IDs must be mutually exclusive across add or delete operations.
        ///</summary>
        ID_MUST_BE_MUTUALLY_EXCLUSIVE,
        ///<summary>
        ///Product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///Exceeded the 10000 prices to add limit.
        ///</summary>
        PRICE_LIMIT_EXCEEDED,
    }

    ///<summary>
    ///Return type for `priceListFixedPricesByProductUpdate` mutation.
    ///</summary>
    public class PriceListFixedPricesByProductUpdatePayload : GraphQLObject<PriceListFixedPricesByProductUpdatePayload>
    {
        ///<summary>
        ///The price list for which the fixed prices were modified.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///The product for which the fixed prices were added.
        ///</summary>
        public IEnumerable<Product>? pricesToAddProducts { get; set; }
        ///<summary>
        ///The product for which the fixed prices were deleted.
        ///</summary>
        public IEnumerable<Product>? pricesToDeleteProducts { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceListFixedPricesByProductBulkUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `priceListFixedPricesDelete` mutation.
    ///</summary>
    public class PriceListFixedPricesDeletePayload : GraphQLObject<PriceListFixedPricesDeletePayload>
    {
        ///<summary>
        ///A list of product variant IDs whose fixed prices were removed from the price list.
        ///</summary>
        public IEnumerable<string>? deletedFixedPriceVariantIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceListPriceUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `priceListFixedPricesUpdate` mutation.
    ///</summary>
    public class PriceListFixedPricesUpdatePayload : GraphQLObject<PriceListFixedPricesUpdatePayload>
    {
        ///<summary>
        ///A list of deleted variant IDs for prices.
        ///</summary>
        public IEnumerable<string>? deletedFixedPriceVariantIds { get; set; }
        ///<summary>
        ///The price list for which the fixed prices were modified.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///The prices that were added to the price list.
        ///</summary>
        public IEnumerable<PriceListPrice>? pricesAdded { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceListPriceUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents relative adjustments from one price list to other prices.
    ///  You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
    ///  adjustment. Adjusted prices work in conjunction with exchange rules and rounding.
    ///
    ///  [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
    ///  support both percentage increases and decreases.
    ///</summary>
    public class PriceListParent : GraphQLObject<PriceListParent>
    {
        ///<summary>
        ///A price list adjustment.
        ///</summary>
        public PriceListAdjustment? adjustment { get; set; }
        ///<summary>
        ///A price list's settings for adjustment.
        ///</summary>
        public PriceListAdjustmentSettings? settings { get; set; }
    }

    ///<summary>
    ///Represents information about pricing for a product variant
    ///        as defined on a price list, such as the price, compare at price, and origin type. You can use a PriceListPrice to specify a fixed price for a specific product variant.
    ///</summary>
    public class PriceListPrice : GraphQLObject<PriceListPrice>
    {
        ///<summary>
        ///The compare-at price of the product variant on this price list.
        ///</summary>
        public MoneyV2? compareAtPrice { get; set; }
        ///<summary>
        ///The origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).
        ///</summary>
        public PriceListPriceOriginType? originType { get; set; }
        ///<summary>
        ///The price of the product variant on this price list.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///A list of quantity breaks for the product variant.
        ///</summary>
        public QuantityPriceBreakConnection? quantityPriceBreaks { get; set; }
        ///<summary>
        ///The product variant associated with this price.
        ///</summary>
        public ProductVariant? variant { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple PriceListPrices.
    ///</summary>
    public class PriceListPriceConnection : GraphQLObject<PriceListPriceConnection>, IConnectionWithNodesAndEdges<PriceListPriceEdge, PriceListPrice>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<PriceListPriceEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in PriceListPriceEdge.
        ///</summary>
        public IEnumerable<PriceListPrice>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one PriceListPrice and a cursor during pagination.
    ///</summary>
    public class PriceListPriceEdge : GraphQLObject<PriceListPriceEdge>, IEdge<PriceListPrice>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of PriceListPriceEdge.
        ///</summary>
        public PriceListPrice? node { get; set; }
    }

    ///<summary>
    ///Represents the origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).
    ///</summary>
    public enum PriceListPriceOriginType
    {
        ///<summary>
        ///The price is defined on the price list.
        ///</summary>
        FIXED,
        ///<summary>
        ///The price is relative to the adjustment type and value.
        ///</summary>
        RELATIVE,
    }

    ///<summary>
    ///An error for a failed price list price operation.
    ///</summary>
    public class PriceListPriceUserError : GraphQLObject<PriceListPriceUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PriceListPriceUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PriceListPriceUserError`.
    ///</summary>
    public enum PriceListPriceUserErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The price list doesn't exist.
        ///</summary>
        PRICE_LIST_NOT_FOUND,
        ///<summary>
        ///The specified currency doesn't match the price list's currency.
        ///</summary>
        PRICE_LIST_CURRENCY_MISMATCH,
        ///<summary>
        ///A fixed price for the specified product variant doesn't exist.
        ///</summary>
        VARIANT_NOT_FOUND,
        ///<summary>
        ///Only fixed prices can be deleted.
        ///</summary>
        PRICE_NOT_FIXED,
    }

    ///<summary>
    ///The set of valid sort keys for the PriceList query.
    ///</summary>
    public enum PriceListSortKeys
    {
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `priceListUpdate` mutation.
    ///</summary>
    public class PriceListUpdatePayload : GraphQLObject<PriceListUpdatePayload>
    {
        ///<summary>
        ///The updated price list.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceListUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed contextual pricing operations.
    ///</summary>
    public class PriceListUserError : GraphQLObject<PriceListUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PriceListUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PriceListUserError`.
    ///</summary>
    public enum PriceListUserErrorCode
    {
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The specified price list doesn't exist.
        ///</summary>
        PRICE_LIST_NOT_FOUND,
        ///<summary>
        ///The price list is currently being modified. Please try again later.
        ///</summary>
        PRICE_LIST_LOCKED,
        ///<summary>
        ///Cannot save the price list with context rule because the limit of context rules per shop was reached.
        ///</summary>
        [Obsolete("The limit is removed.")]
        CONTEXT_RULE_LIMIT_REACHED,
        ///<summary>
        ///A price list context rule cannot have more than one country.
        ///</summary>
        CONTEXT_RULE_COUNTRIES_LIMIT,
        ///<summary>
        ///A price list’s currency must be of the pricing rule’s country.
        ///</summary>
        CURRENCY_COUNTRY_MISMATCH,
        ///<summary>
        ///A country in a context rule must use a valid currency.
        ///</summary>
        COUNTRY_CURRENCY_MISMATCH,
        ///<summary>
        ///A price list’s currency must be the market currency.
        ///</summary>
        CURRENCY_MARKET_MISMATCH,
        ///<summary>
        ///The context rule's market does not use the price list currency.
        ///</summary>
        MARKET_CURRENCY_MISMATCH,
        ///<summary>
        ///The adjustment value must be a positive value and not be greater than 100% for `type` `PERCENTAGE_DECREASE` and not be greater than 1000% for `type` `PERCENTAGE_INCREASE`.
        ///</summary>
        INVALID_ADJUSTMENT_VALUE,
        ///<summary>
        ///The adjustment value must not be greater than 100% for `type` `PERCENTAGE_DECREASE`.
        ///</summary>
        INVALID_ADJUSTMENT_MIN_VALUE,
        ///<summary>
        ///The adjustment value must not be greater than 1000% for `type` `PERCENTAGE_INCREASE`.
        ///</summary>
        INVALID_ADJUSTMENT_MAX_VALUE,
        ///<summary>
        ///A price list for this country is already taken.
        ///</summary>
        CONTEXT_RULE_COUNTRY_TAKEN,
        ///<summary>
        ///Quantity rules can be associated only with company location catalogs.
        ///</summary>
        CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES,
        ///<summary>
        ///Quantity price breaks can be associated only with company location catalogs.
        ///</summary>
        CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS,
        ///<summary>
        ///Only one context rule option may be specified.
        ///</summary>
        CONTEXT_RULE_LIMIT_ONE_OPTION,
        ///<summary>
        ///The specified market wasn't found.
        ///</summary>
        CONTEXT_RULE_MARKET_NOT_FOUND,
        ///<summary>
        ///A price list for this market is already taken.
        ///</summary>
        CONTEXT_RULE_MARKET_TAKEN,
        ///<summary>
        ///The price list currency is not supported by the shop's payment gateway.
        ///</summary>
        CURRENCY_NOT_SUPPORTED,
        ///<summary>
        ///Cannot create price list for a primary market.
        ///</summary>
        PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET,
        ///<summary>
        ///Cannot assign a catalog to a price list that also has context rules.
        ///</summary>
        CATALOG_ASSIGNMENT_NOT_ALLOWED,
        ///<summary>
        ///The specified catalog does not exist.
        ///</summary>
        CATALOG_DOES_NOT_EXIST,
        ///<summary>
        ///The context type of a catalog cannot be changed.
        ///</summary>
        CATALOG_CANNOT_CHANGE_CONTEXT_TYPE,
        ///<summary>
        ///The price list currency must match the market catalog currency.
        ///</summary>
        CATALOG_MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH,
        ///<summary>
        ///Catalog has a price list already assigned.
        ///</summary>
        CATALOG_TAKEN,
        ///<summary>
        ///A country catalog cannot be assigned to a price list.
        ///</summary>
        COUNTRY_PRICE_LIST_ASSIGNMENT,
        ///<summary>
        ///An app catalog cannot be assigned to a price list.
        ///</summary>
        APP_CATALOG_PRICE_LIST_ASSIGNMENT,
        ///<summary>
        ///Something went wrong when trying to save the price list. Please try again.
        ///</summary>
        GENERIC_ERROR,
    }

    ///<summary>
    ///Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
    ///
    ///We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
    ///</summary>
    public class PriceRule : GraphQLObject<PriceRule>, ICommentEventSubject, IHasEvents, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The maximum number of times that the price rule can be allocated onto an order.
        ///</summary>
        public int? allocationLimit { get; set; }
        ///<summary>
        ///The method by which the price rule's value is allocated to its entitled items.
        ///</summary>
        public PriceRuleAllocationMethod? allocationMethod { get; set; }
        ///<summary>
        ///The application that created the price rule.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///Determines which discount classes the discount can combine with.
        ///</summary>
        public DiscountCombinesWith? combinesWith { get; set; }
        ///<summary>
        ///The date and time when the price rule was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The customers that can use this price rule.
        ///</summary>
        public PriceRuleCustomerSelection? customerSelection { get; set; }
        ///<summary>
        ///The class of the discount for combining purposes.
        ///</summary>
        public DiscountClass? discountClass { get; set; }
        ///<summary>
        ///List of the price rule's discount codes.
        ///</summary>
        public PriceRuleDiscountCodeConnection? discountCodes { get; set; }
        ///<summary>
        ///How many discount codes associated with the price rule.
        ///</summary>
        public int? discountCodesCount { get; set; }
        ///<summary>
        ///The date and time when the price rule ends. For open-ended price rules, use `null`.
        ///</summary>
        public DateTime? endsAt { get; set; }

        ///<summary>
        ///Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
        ///</summary>
        [Obsolete("Use `prerequisiteToEntitlementQuantityRatio` instead.")]
        public PriceRuleEntitlementToPrerequisiteQuantityRatio? entitlementToPrerequisiteQuantityRatio { get; set; }
        ///<summary>
        ///The paginated list of events associated with the price rule.
        ///</summary>
        public EventConnection? events { get; set; }
        ///<summary>
        ///A list of the price rule's features.
        ///</summary>
        public IEnumerable<PriceRuleFeature>? features { get; set; }
        ///<summary>
        ///Indicates whether there are any timeline comments on the price rule.
        ///</summary>
        public bool? hasTimelineComment { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The items to which the price rule applies.
        ///</summary>
        public PriceRuleItemEntitlements? itemEntitlements { get; set; }
        ///<summary>
        ///The items required for the price rule to be applicable.
        ///</summary>
        public PriceRuleLineItemPrerequisites? itemPrerequisites { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///Whether the price rule can be applied only once per customer.
        ///</summary>
        public bool? oncePerCustomer { get; set; }
        ///<summary>
        ///The number of the entitled items must fall within this range for the price rule to be applicable.
        ///</summary>
        public PriceRuleQuantityRange? prerequisiteQuantityRange { get; set; }
        ///<summary>
        ///The shipping cost must fall within this range for the price rule to be applicable.
        ///</summary>
        public PriceRuleMoneyRange? prerequisiteShippingPriceRange { get; set; }
        ///<summary>
        ///The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
        ///</summary>
        public PriceRuleMoneyRange? prerequisiteSubtotalRange { get; set; }
        ///<summary>
        ///Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
        ///</summary>
        public PriceRulePrerequisiteToEntitlementQuantityRatio? prerequisiteToEntitlementQuantityRatio { get; set; }
        ///<summary>
        ///URLs that can be used to share the discount.
        ///</summary>
        public IEnumerable<PriceRuleShareableUrl>? shareableUrls { get; set; }
        ///<summary>
        ///The shipping lines to which the price rule applies.
        ///</summary>
        public PriceRuleShippingLineEntitlements? shippingEntitlements { get; set; }
        ///<summary>
        ///The date and time when the price rule starts.
        ///</summary>
        public DateTime? startsAt { get; set; }
        ///<summary>
        ///The status of the price rule.
        ///</summary>
        public PriceRuleStatus? status { get; set; }
        ///<summary>
        ///A detailed summary of the price rule.
        ///</summary>
        public string? summary { get; set; }
        ///<summary>
        ///The type of lines (line_item or shipping_line) to which the price rule applies.
        ///</summary>
        public PriceRuleTarget? target { get; set; }
        ///<summary>
        ///The title of the price rule.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The total sales from orders where the price rule was used.
        ///</summary>
        public MoneyV2? totalSales { get; set; }

        ///<summary>
        ///A list of the price rule's features.
        ///</summary>
        [Obsolete("Use `features` instead.")]
        public IEnumerable<PriceRuleTrait>? traits { get; set; }
        ///<summary>
        ///The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? usageCount { get; set; }
        ///<summary>
        ///The maximum number of times that the price rule can be used in total.
        ///</summary>
        public int? usageLimit { get; set; }
        ///<summary>
        ///A time period during which a price rule is applicable.
        ///</summary>
        public PriceRuleValidityPeriod? validityPeriod { get; set; }

        ///<summary>
        ///The value of the price rule.
        ///</summary>
        [Obsolete("Use `valueV2` instead.")]
        public IPriceRuleValue? value { get; set; }
        ///<summary>
        ///The value of the price rule.
        ///</summary>
        public IPricingValue? valueV2 { get; set; }
    }

    ///<summary>
    ///Return type for `priceRuleActivate` mutation.
    ///</summary>
    public class PriceRuleActivatePayload : GraphQLObject<PriceRuleActivatePayload>
    {
        ///<summary>
        ///The activated price rule.
        ///</summary>
        public PriceRule? priceRule { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceRuleUserError>? priceRuleUserErrors { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `priceRuleUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The method by which the price rule's value is allocated to its entitled items.
    ///</summary>
    public enum PriceRuleAllocationMethod
    {
        ///<summary>
        ///The value will be applied to each of the entitled items.
        ///</summary>
        EACH,
        ///<summary>
        ///The value will be applied once across the entitled items.
        ///</summary>
        ACROSS,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple PriceRules.
    ///</summary>
    public class PriceRuleConnection : GraphQLObject<PriceRuleConnection>, IConnectionWithNodesAndEdges<PriceRuleEdge, PriceRule>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<PriceRuleEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in PriceRuleEdge.
        ///</summary>
        public IEnumerable<PriceRule>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `priceRuleCreate` mutation.
    ///</summary>
    public class PriceRuleCreatePayload : GraphQLObject<PriceRuleCreatePayload>
    {
        ///<summary>
        ///The newly created price rule.
        ///</summary>
        public PriceRule? priceRule { get; set; }
        ///<summary>
        ///The newly created discount code.
        ///</summary>
        public PriceRuleDiscountCode? priceRuleDiscountCode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceRuleUserError>? priceRuleUserErrors { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `priceRuleUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A selection of customers for whom the price rule applies.
    ///</summary>
    public class PriceRuleCustomerSelection : GraphQLObject<PriceRuleCustomerSelection>
    {
        ///<summary>
        ///List of customers to whom the price rule applies.
        ///</summary>
        public CustomerConnection? customers { get; set; }
        ///<summary>
        ///Whether the price rule applies to all customers.
        ///</summary>
        public bool? forAllCustomers { get; set; }
        ///<summary>
        ///A list of customer segments that contain the customers who can use the price rule.
        ///</summary>
        public IEnumerable<Segment>? segments { get; set; }
    }

    ///<summary>
    ///Return type for `priceRuleDeactivate` mutation.
    ///</summary>
    public class PriceRuleDeactivatePayload : GraphQLObject<PriceRuleDeactivatePayload>
    {
        ///<summary>
        ///The deactivated price rule.
        ///</summary>
        public PriceRule? priceRule { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceRuleUserError>? priceRuleUserErrors { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `priceRuleUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `priceRuleDelete` mutation.
    ///</summary>
    public class PriceRuleDeletePayload : GraphQLObject<PriceRuleDeletePayload>
    {
        ///<summary>
        ///The ID price of the deleted price rule.
        ///</summary>
        public string? deletedPriceRuleId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceRuleUserError>? priceRuleUserErrors { get; set; }
        ///<summary>
        ///The shop of the deleted price rule.
        ///</summary>
        public Shop? shop { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `priceRuleUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A discount code of a price rule.
    ///</summary>
    public class PriceRuleDiscountCode : GraphQLObject<PriceRuleDiscountCode>, INode
    {
        ///<summary>
        ///The application that created the discount code.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The code to apply the discount.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
        ///</summary>
        public int? usageCount { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
    ///</summary>
    public class PriceRuleDiscountCodeConnection : GraphQLObject<PriceRuleDiscountCodeConnection>, IConnectionWithNodesAndEdges<PriceRuleDiscountCodeEdge, PriceRuleDiscountCode>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<PriceRuleDiscountCodeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in PriceRuleDiscountCodeEdge.
        ///</summary>
        public IEnumerable<PriceRuleDiscountCode>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `priceRuleDiscountCodeCreate` mutation.
    ///</summary>
    public class PriceRuleDiscountCodeCreatePayload : GraphQLObject<PriceRuleDiscountCodeCreatePayload>
    {
        ///<summary>
        ///The updated price rule.
        ///</summary>
        public PriceRule? priceRule { get; set; }
        ///<summary>
        ///The newly created discount code.
        ///</summary>
        public PriceRuleDiscountCode? priceRuleDiscountCode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceRuleUserError>? priceRuleUserErrors { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `priceRuleUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
    ///</summary>
    public class PriceRuleDiscountCodeEdge : GraphQLObject<PriceRuleDiscountCodeEdge>, IEdge<PriceRuleDiscountCode>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of PriceRuleDiscountCodeEdge.
        ///</summary>
        public PriceRuleDiscountCode? node { get; set; }
    }

    ///<summary>
    ///Return type for `priceRuleDiscountCodeUpdate` mutation.
    ///</summary>
    public class PriceRuleDiscountCodeUpdatePayload : GraphQLObject<PriceRuleDiscountCodeUpdatePayload>
    {
        ///<summary>
        ///The updated price rule.
        ///</summary>
        public PriceRule? priceRule { get; set; }
        ///<summary>
        ///The updated discount code.
        ///</summary>
        public PriceRuleDiscountCode? priceRuleDiscountCode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceRuleUserError>? priceRuleUserErrors { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `priceRuleUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one PriceRule and a cursor during pagination.
    ///</summary>
    public class PriceRuleEdge : GraphQLObject<PriceRuleEdge>, IEdge<PriceRule>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of PriceRuleEdge.
        ///</summary>
        public PriceRule? node { get; set; }
    }

    ///<summary>
    ///Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
    ///</summary>
    public class PriceRuleEntitlementToPrerequisiteQuantityRatio : GraphQLObject<PriceRuleEntitlementToPrerequisiteQuantityRatio>
    {
        ///<summary>
        ///The quantity of entitled items in the ratio.
        ///</summary>
        public int? entitlementQuantity { get; set; }
        ///<summary>
        ///The quantity of prerequisite items in the ratio.
        ///</summary>
        public int? prerequisiteQuantity { get; set; }
    }

    ///<summary>
    ///Possible error codes that could be returned by a price rule mutation.
    ///</summary>
    public enum PriceRuleErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value should be equal to the value allowed.
        ///</summary>
        EQUAL_TO,
        ///<summary>
        ///The input value should be greater than the minimum allowed value.
        ///</summary>
        GREATER_THAN,
        ///<summary>
        ///The input value should be greater than or equal to the minimum value allowed.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value should be less than the maximum value allowed.
        ///</summary>
        LESS_THAN,
        ///<summary>
        ///The input value should be less than or equal to the maximum value allowed.
        ///</summary>
        LESS_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///Unexpected internal error happened.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Too many arguments provided.
        ///</summary>
        TOO_MANY_ARGUMENTS,
        ///<summary>
        ///Missing a required argument.
        ///</summary>
        MISSING_ARGUMENT,
        ///<summary>
        ///Can't exceed the maximum number.
        ///</summary>
        EXCEEDED_MAX,
        ///<summary>
        ///The allocation limit can only be set on Buy x, get y (BXGY) discounts.
        ///</summary>
        PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO,
        ///<summary>
        ///The allocation limit must be a non-zero positive number.
        ///</summary>
        PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO,
        ///<summary>
        ///The number of discount codes in the shop has reached its limit.
        ///</summary>
        PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE,
        ///<summary>
        ///The number of discounts in the shop has reached its limit.
        ///</summary>
        SHOP_EXCEEDED_MAX_PRICE_RULES,
        ///<summary>
        ///The discount end date must be after the start date.
        ///</summary>
        END_DATE_BEFORE_START_DATE,
        ///<summary>
        ///The percentage value must be between 0 and -100.
        ///</summary>
        PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE,
        ///<summary>
        ///Only one of the minimum subtotal or minimum quantity condition can be defined.
        ///</summary>
        PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT,
        ///<summary>
        ///The allocation method must be `ACROSS` for the provided target selection.
        ///</summary>
        ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION,
        ///<summary>
        ///The discount must apply on either one-time purchase or subscription items, or both.
        ///</summary>
        APPLIES_ON_NOTHING,
        ///<summary>
        ///The recurring cycle limit must be 1 when a discount doesn't apply on subscription items.
        ///</summary>
        MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS,
        ///<summary>
        ///Invalid BOGO target selection.
        ///</summary>
        BOGO_INVALID_TARGET_SELECTION,
        ///<summary>
        ///Invalid BOGO target type.
        ///</summary>
        BOGO_INVALID_TARGET_TYPE,
        ///<summary>
        ///Invalid BOGO value type.
        ///</summary>
        BOGO_INVALID_VALUE_TYPE,
        ///<summary>
        ///A duplicate discount code exists.
        ///</summary>
        DISCOUNT_CODE_DUPLICATE,
        ///<summary>
        ///Can't use both prerequisite customers and saved search.
        ///</summary>
        BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED,
        ///<summary>
        ///A duplicate customer saved search exists.
        ///</summary>
        CUSTOMER_SAVED_SEARCH_DUPLICATE,
        ///<summary>
        ///The customer saved search exceeded the maximum number.
        ///</summary>
        CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX,
        ///<summary>
        ///Invalid customer saved search.
        ///</summary>
        CUSTOMER_SAVED_SEARCH_INVALID,
        ///<summary>
        ///The customer prerequisites exceeded the maximum number.
        ///</summary>
        CUSTOMER_PREREQUISITES_EXCEEDED_MAX,
        ///<summary>
        ///Invalid customer prerequisites selection.
        ///</summary>
        CUSTOMER_PREREQUISITES_INVALID_SELECTION,
        ///<summary>
        ///A duplicate customer prerequisite ID exists.
        ///</summary>
        CUSTOMER_PREREQUISITE_DUPLICATE,
        ///<summary>
        ///Customer prerequisites are missing.
        ///</summary>
        CUSTOMER_PREREQUISITES_MISSING,
        ///<summary>
        ///Can't have both prerequisite customers and prerequisite segments.
        ///</summary>
        BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED,
        ///<summary>
        ///Can't have both saved searches and segments prerequisites.
        ///</summary>
        BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED,
        ///<summary>
        ///The customer segment prerequisites exceeded the maximum number.
        ///</summary>
        CUSTOMER_SEGMENT_EXCEEDED_MAX,
        ///<summary>
        ///The customer segment prerequisite ID is invalid.
        ///</summary>
        CUSTOMER_SEGMENT_INVALID,
        ///<summary>
        ///A duplicate customer segment prerequisite ID exists.
        ///</summary>
        CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE,
        ///<summary>
        ///Can't use collections as a prequisite in combination with product variants or products.
        ///</summary>
        CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS,
        ///<summary>
        ///Can't add the same collection twice.
        ///</summary>
        ITEM_PREREQUISITES_DUPLICATE_COLLECTION,
        ///<summary>
        ///Can't add the same product twice.
        ///</summary>
        ITEM_PREREQUISITES_DUPLICATE_PRODUCT,
        ///<summary>
        ///Can't add the same variant twice.
        ///</summary>
        ITEM_PREREQUISITES_DUPLICATE_VARIANT,
        ///<summary>
        ///Can't exceed the maximum number of item prerequisites.
        ///</summary>
        ITEM_PREREQUISITES_EXCEEDED_MAX,
        ///<summary>
        ///Invalid collection.
        ///</summary>
        ITEM_PREREQUISITES_INVALID_COLLECTION,
        ///<summary>
        ///Invalid type.
        ///</summary>
        ITEM_PREREQUISITES_INVALID_TYPE,
        ///<summary>
        ///Invalid product.
        ///</summary>
        ITEM_PREREQUISITES_INVALID_PRODUCT,
        ///<summary>
        ///Invalid variant.
        ///</summary>
        ITEM_PREREQUISITES_INVALID_VARIANT,
        ///<summary>
        ///Item prerequisites must be empty if the prerequisite quantity ratio isn't defined.
        ///</summary>
        ITEM_PREREQUISITES_MUST_BE_EMPTY,
        ///<summary>
        ///Item prerequisites must have at least one item prerequisite if the prerequisite quantity ratio is defined.
        ///</summary>
        ITEM_PREREQUISITES_MISSING,
        ///<summary>
        ///Can't entitle collections in combination with product variants or products.
        ///</summary>
        CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS,
        ///<summary>
        ///Can't add the same collection twice.
        ///</summary>
        ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION,
        ///<summary>
        ///Can't add the same product twice.
        ///</summary>
        ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT,
        ///<summary>
        ///Can't add the same collection twice.
        ///</summary>
        ITEM_ENTITLEMENTS_DUPLICATE_VARIANT,
        ///<summary>
        ///Can't exceed the maximum number of collection entitlements.
        ///</summary>
        ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION,
        ///<summary>
        ///Can't exceed the maximum number of product entitlements.
        ///</summary>
        ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT,
        ///<summary>
        ///Can't exceed the maximum number of variant entitlements.
        ///</summary>
        ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT,
        ///<summary>
        ///Invalid entitlement type.
        ///</summary>
        ITEM_ENTITLEMENT_INVALID_TYPE,
        ///<summary>
        ///Invalid collection.
        ///</summary>
        ITEM_ENTITLEMENTS_INVALID_COLLECTION,
        ///<summary>
        ///Invalid product.
        ///</summary>
        ITEM_ENTITLEMENTS_INVALID_PRODUCT,
        ///<summary>
        ///Invalid variant.
        ///</summary>
        ITEM_ENTITLEMENTS_INVALID_VARIANT,
        ///<summary>
        ///Invalid combination of target type and selection.
        ///</summary>
        ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION,
        ///<summary>
        ///Entitlements are missing.
        ///</summary>
        ITEM_ENTITLEMENTS_MISSING,
        ///<summary>
        ///The variant is already entitled through a product.
        ///</summary>
        VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT,
        ///<summary>
        ///A duplicate country code exists.
        ///</summary>
        SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY,
        ///<summary>
        ///Can't exceed the maximum number of entitlements.
        ///</summary>
        SHIPPING_ENTITLEMENTS_EXCEEDED_MAX,
        ///<summary>
        ///The country is unknown.
        ///</summary>
        SHIPPING_ENTITLEMENTS_INVALID_COUNTRY,
        ///<summary>
        ///Invalid target type or selection.
        ///</summary>
        SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION,
        ///<summary>
        ///Missing entitlements.
        ///</summary>
        SHIPPING_ENTITLEMENTS_MISSING,
        ///<summary>
        ///Unsupported destination type.
        ///</summary>
        SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE,
        ///<summary>
        ///The target type is invalid when defining a prerequisite shipping price range.
        ///</summary>
        INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE,
        ///<summary>
        ///The `combinesWith` settings are invalid for the discount class.
        ///</summary>
        INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS,
        ///<summary>
        ///The discountClass is invalid for the price rule.
        ///</summary>
        INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE,
    }

    ///<summary>
    ///The list of features that can be supported by a price rule.
    ///</summary>
    public enum PriceRuleFeature
    {
        ///<summary>
        ///The price rule supports Buy X, Get Y (BXGY) discounts.
        ///</summary>
        BUY_ONE_GET_ONE,
        ///<summary>
        ///The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
        ///</summary>
        BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT,
        ///<summary>
        ///The price rule supports bulk discounts.
        ///</summary>
        BULK,
        ///<summary>
        ///The price rule targets specific customers.
        ///</summary>
        SPECIFIC_CUSTOMERS,
        ///<summary>
        ///The price rule supports discounts that require a quantity.
        ///</summary>
        QUANTITY_DISCOUNTS,
    }

    ///<summary>
    ///The value of a fixed amount price rule.
    ///</summary>
    public class PriceRuleFixedAmountValue : GraphQLObject<PriceRuleFixedAmountValue>, IPriceRuleValue
    {
        ///<summary>
        ///The monetary value of the price rule.
        ///</summary>
        public decimal? amount { get; set; }
    }

    ///<summary>
    ///The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.
    ///</summary>
    public class PriceRuleItemEntitlements : GraphQLObject<PriceRuleItemEntitlements>
    {
        ///<summary>
        ///The collections to which the price rule applies.
        ///</summary>
        public CollectionConnection? collections { get; set; }
        ///<summary>
        ///The product variants to which the price rule applies.
        ///</summary>
        public ProductVariantConnection? productVariants { get; set; }
        ///<summary>
        ///The products to which the price rule applies.
        ///</summary>
        public ProductConnection? products { get; set; }
        ///<summary>
        ///Whether the price rule applies to all line items.
        ///</summary>
        public bool? targetAllLineItems { get; set; }
    }

    ///<summary>
    ///Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.
    ///</summary>
    public class PriceRuleLineItemPrerequisites : GraphQLObject<PriceRuleLineItemPrerequisites>
    {
        ///<summary>
        ///The collections required for the price rule to be applicable.
        ///</summary>
        public CollectionConnection? collections { get; set; }
        ///<summary>
        ///The product variants required for the price rule to be applicable.
        ///</summary>
        public ProductVariantConnection? productVariants { get; set; }
        ///<summary>
        ///The products required for the price rule to be applicable.
        ///</summary>
        public ProductConnection? products { get; set; }
    }

    ///<summary>
    ///A money range within which the price rule is applicable.
    ///</summary>
    public class PriceRuleMoneyRange : GraphQLObject<PriceRuleMoneyRange>
    {
        ///<summary>
        ///The lower bound of the money range.
        ///</summary>
        public decimal? greaterThan { get; set; }
        ///<summary>
        ///The lower bound or equal of the money range.
        ///</summary>
        public decimal? greaterThanOrEqualTo { get; set; }
        ///<summary>
        ///The upper bound of the money range.
        ///</summary>
        public decimal? lessThan { get; set; }
        ///<summary>
        ///The upper bound or equal of the money range.
        ///</summary>
        public decimal? lessThanOrEqualTo { get; set; }
    }

    ///<summary>
    ///The value of a percent price rule.
    ///</summary>
    public class PriceRulePercentValue : GraphQLObject<PriceRulePercentValue>, IPriceRuleValue
    {
        ///<summary>
        ///The percent value of the price rule.
        ///</summary>
        public float? percentage { get; set; }
    }

    ///<summary>
    ///Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
    ///</summary>
    public class PriceRulePrerequisiteToEntitlementQuantityRatio : GraphQLObject<PriceRulePrerequisiteToEntitlementQuantityRatio>
    {
        ///<summary>
        ///The quantity of entitled items in the ratio.
        ///</summary>
        public int? entitlementQuantity { get; set; }
        ///<summary>
        ///The quantity of prerequisite items in the ratio.
        ///</summary>
        public int? prerequisiteQuantity { get; set; }
    }

    ///<summary>
    ///A quantity range within which the price rule is applicable.
    ///</summary>
    public class PriceRuleQuantityRange : GraphQLObject<PriceRuleQuantityRange>
    {
        ///<summary>
        ///The lower bound of the quantity range.
        ///</summary>
        public int? greaterThan { get; set; }
        ///<summary>
        ///The lower bound or equal of the quantity range.
        ///</summary>
        public int? greaterThanOrEqualTo { get; set; }
        ///<summary>
        ///The upper bound of the quantity range.
        ///</summary>
        public int? lessThan { get; set; }
        ///<summary>
        ///The upper bound or equal of the quantity range.
        ///</summary>
        public int? lessThanOrEqualTo { get; set; }
    }

    ///<summary>
    ///Shareable URL for the discount code associated with the price rule.
    ///</summary>
    public class PriceRuleShareableUrl : GraphQLObject<PriceRuleShareableUrl>
    {
        ///<summary>
        ///The image URL of the item (product or collection) to which the discount applies.
        ///</summary>
        public Image? targetItemImage { get; set; }
        ///<summary>
        ///The type of page that's associated with the URL.
        ///</summary>
        public PriceRuleShareableUrlTargetType? targetType { get; set; }
        ///<summary>
        ///The title of the page that's associated with the URL.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The URL for the discount code.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The type of page where a shareable price rule URL lands.
    ///</summary>
    public enum PriceRuleShareableUrlTargetType
    {
        ///<summary>
        ///The URL lands on a home page.
        ///</summary>
        HOME,
        ///<summary>
        ///The URL lands on a product page.
        ///</summary>
        PRODUCT,
        ///<summary>
        ///The URL lands on a collection page.
        ///</summary>
        COLLECTION,
    }

    ///<summary>
    ///The shipping lines to which the price rule applies to.
    ///</summary>
    public class PriceRuleShippingLineEntitlements : GraphQLObject<PriceRuleShippingLineEntitlements>
    {
        ///<summary>
        ///The codes for the countries to which the price rule applies to.
        ///</summary>
        public IEnumerable<CountryCode>? countryCodes { get; set; }
        ///<summary>
        ///Whether the price rule is applicable to countries that haven't been defined in the shop's shipping zones.
        ///</summary>
        public bool? includeRestOfWorld { get; set; }
        ///<summary>
        ///Whether the price rule applies to all shipping lines.
        ///</summary>
        public bool? targetAllShippingLines { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the PriceRule query.
    ///</summary>
    public enum PriceRuleSortKeys
    {
        ///<summary>
        ///Sort by the `starts_at` value.
        ///</summary>
        STARTS_AT,
        ///<summary>
        ///Sort by the `ends_at` value.
        ///</summary>
        ENDS_AT,
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The status of the price rule.
    ///</summary>
    public enum PriceRuleStatus
    {
        ///<summary>
        ///The price rule is active.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The price rule is expired.
        ///</summary>
        EXPIRED,
        ///<summary>
        ///The price rule is scheduled.
        ///</summary>
        SCHEDULED,
    }

    ///<summary>
    ///The type of lines (line_item or shipping_line) to which the price rule applies.
    ///</summary>
    public enum PriceRuleTarget
    {
        ///<summary>
        ///The price rule applies to line items.
        ///</summary>
        LINE_ITEM,
        ///<summary>
        ///The price rule applies to shipping lines.
        ///</summary>
        SHIPPING_LINE,
    }

    ///<summary>
    ///The list of features that can be supported by a price rule.
    ///</summary>
    public enum PriceRuleTrait
    {
        ///<summary>
        ///The price rule supports Buy X, Get Y (BXGY) discounts.
        ///</summary>
        BUY_ONE_GET_ONE,
        ///<summary>
        ///The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
        ///</summary>
        BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT,
        ///<summary>
        ///The price rule supports bulk discounts.
        ///</summary>
        BULK,
        ///<summary>
        ///The price rule targets specific customers.
        ///</summary>
        SPECIFIC_CUSTOMERS,
        ///<summary>
        ///The price rule supports discounts that require a quantity.
        ///</summary>
        QUANTITY_DISCOUNTS,
    }

    ///<summary>
    ///Return type for `priceRuleUpdate` mutation.
    ///</summary>
    public class PriceRuleUpdatePayload : GraphQLObject<PriceRuleUpdatePayload>
    {
        ///<summary>
        ///The updated price rule.
        ///</summary>
        public PriceRule? priceRule { get; set; }
        ///<summary>
        ///The updated discount code.
        ///</summary>
        public PriceRuleDiscountCode? priceRuleDiscountCode { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PriceRuleUserError>? priceRuleUserErrors { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `priceRuleUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents an error that happens during execution of a price rule mutation.
    ///</summary>
    public class PriceRuleUserError : GraphQLObject<PriceRuleUserError>, IDisplayableError
    {
        ///<summary>
        ///Error code to uniquely identify the error.
        ///</summary>
        public PriceRuleErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///A time period during which a price rule is applicable.
    ///</summary>
    public class PriceRuleValidityPeriod : GraphQLObject<PriceRuleValidityPeriod>
    {
        ///<summary>
        ///The time after which the price rule becomes invalid.
        ///</summary>
        public DateTime? end { get; set; }
        ///<summary>
        ///The time after which the price rule is valid.
        ///</summary>
        public DateTime? start { get; set; }
    }

    ///<summary>
    ///The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(PriceRuleFixedAmountValue), typeDiscriminator: "PriceRuleFixedAmountValue")]
    [JsonDerivedType(typeof(PriceRulePercentValue), typeDiscriminator: "PriceRulePercentValue")]
    public interface IPriceRuleValue : IGraphQLObject
    {
        public PriceRuleFixedAmountValue? AsPriceRuleFixedAmountValue() => this as PriceRuleFixedAmountValue;
        public PriceRulePercentValue? AsPriceRulePercentValue() => this as PriceRulePercentValue;
    }

    ///<summary>
    ///One type of value given to a customer when a discount is applied to an order.
    ///The application of a discount with this value gives the customer the specified percentage off a specified item.
    ///</summary>
    public class PricingPercentageValue : GraphQLObject<PricingPercentageValue>, IPricingValue
    {
        ///<summary>
        ///The percentage value of the object. This is a number between -100 (free) and 0 (no discount).
        ///</summary>
        public float? percentage { get; set; }
    }

    ///<summary>
    ///The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(MoneyV2), typeDiscriminator: "MoneyV2")]
    [JsonDerivedType(typeof(PricingPercentageValue), typeDiscriminator: "PricingPercentageValue")]
    public interface IPricingValue : IGraphQLObject
    {
        public MoneyV2? AsMoneyV2() => this as MoneyV2;
        public PricingPercentageValue? AsPricingPercentageValue() => this as PricingPercentageValue;
    }

    ///<summary>
    ///Private metafields represent custom metadata that is attached to a resource.
    ///Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
    ///
    ///An application can create a maximum of 10 private metafields per shop resource.
    ///</summary>
    public class PrivateMetafield : GraphQLObject<PrivateMetafield>, INode
    {
        ///<summary>
        ///The date and time when the private metafield was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The ID of the private metafield.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The key name of the private metafield.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The namespace of the private metafield.
        ///</summary>
        public string? @namespace { get; set; }
        ///<summary>
        ///The date and time when the private metafield was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The value of a private metafield.
        ///</summary>
        public string? value { get; set; }
        ///<summary>
        ///Represents the private metafield value type.
        ///</summary>
        public PrivateMetafieldValueType? valueType { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple PrivateMetafields.
    ///</summary>
    public class PrivateMetafieldConnection : GraphQLObject<PrivateMetafieldConnection>, IConnectionWithNodesAndEdges<PrivateMetafieldEdge, PrivateMetafield>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<PrivateMetafieldEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in PrivateMetafieldEdge.
        ///</summary>
        public IEnumerable<PrivateMetafield>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `privateMetafieldDelete` mutation.
    ///</summary>
    public class PrivateMetafieldDeletePayload : GraphQLObject<PrivateMetafieldDeletePayload>
    {
        ///<summary>
        ///The ID of private metafield that was deleted.
        ///</summary>
        public string? deletedPrivateMetafieldId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
    ///</summary>
    public class PrivateMetafieldEdge : GraphQLObject<PrivateMetafieldEdge>, IEdge<PrivateMetafield>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of PrivateMetafieldEdge.
        ///</summary>
        public PrivateMetafield? node { get; set; }
    }

    ///<summary>
    ///Return type for `privateMetafieldUpsert` mutation.
    ///</summary>
    public class PrivateMetafieldUpsertPayload : GraphQLObject<PrivateMetafieldUpsertPayload>
    {
        ///<summary>
        ///The private metafield that was created or updated.
        ///</summary>
        public PrivateMetafield? privateMetafield { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Supported private metafield value types.
    ///</summary>
    public enum PrivateMetafieldValueType
    {
        ///<summary>
        ///A string metafield.
        ///</summary>
        STRING,
        ///<summary>
        ///An integer metafield.
        ///</summary>
        INTEGER,
        ///<summary>
        ///A JSON string metafield.
        ///</summary>
        JSON_STRING,
    }

    ///<summary>
    ///The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
    ///</summary>
    public class Product : GraphQLObject<Product>, IHasMetafieldDefinitions, IHasMetafields, IHasPublishedTranslations, ILegacyInteroperability, INavigable, INode, IOnlineStorePreviewable, IPublishable, ICommentEventEmbed, IMetafieldReference, IMetafieldReferencer
    {
        ///<summary>
        ///The number of publications a resource is published to without feedback errors.
        ///</summary>
        public int? availablePublicationCount { get; set; }

        ///<summary>
        ///The description of the product, complete with HTML formatting.
        ///</summary>
        [Obsolete("Use `descriptionHtml` instead.")]
        public string? bodyHtml { get; set; }
        ///<summary>
        ///A list of the collections that include the product.
        ///</summary>
        public CollectionConnection? collections { get; set; }
        ///<summary>
        ///The compare-at price range of the product in the default shop currency.
        ///</summary>
        public ProductCompareAtPriceRange? compareAtPriceRange { get; set; }
        ///<summary>
        ///The pricing that applies for a customer in a given context.
        ///</summary>
        public ProductContextualPricing? contextualPricing { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
        ///</summary>
        public DateTime? createdAt { get; set; }

        ///<summary>
        ///The custom product type specified by the merchant.
        ///</summary>
        [Obsolete("Deprecated in API version 2022-10. Use `productType` instead.")]
        public string? customProductType { get; set; }
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; set; }
        ///<summary>
        ///A stripped description of the product, single line with HTML tags removed.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The description of the product, complete with HTML formatting.
        ///</summary>
        public string? descriptionHtml { get; set; }

        ///<summary>
        ///Stripped description of the product, single line with HTML tags removed.
        ///Truncated to 60 characters.
        ///</summary>
        [Obsolete("Use `description` instead.")]
        public string? descriptionPlainSummary { get; set; }
        ///<summary>
        ///The featured image for the product.
        ///</summary>
        public Image? featuredImage { get; set; }
        ///<summary>
        ///The featured media for the product.
        ///</summary>
        public IMedia? featuredMedia { get; set; }
        ///<summary>
        ///Information about the product that's provided through resource feedback.
        ///</summary>
        public ResourceFeedback? feedback { get; set; }
        ///<summary>
        ///The theme template used when viewing the gift card in a store.
        ///</summary>
        public string? giftCardTemplateSuffix { get; set; }
        ///<summary>
        ///A unique human-friendly string of the product's title.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///Whether the product has only a single variant with the default option and value.
        ///</summary>
        public bool? hasOnlyDefaultVariant { get; set; }
        ///<summary>
        ///Whether the product has out of stock variants.
        ///</summary>
        public bool? hasOutOfStockVariants { get; set; }
        ///<summary>
        ///Determines if at least one of the product variant requires components. The default value is `false`.
        ///</summary>
        public bool? hasVariantsThatRequiresComponents { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The images associated with the product.
        ///</summary>
        public ImageConnection? images { get; set; }
        ///<summary>
        ///Whether the product is in a given collection.
        ///</summary>
        public bool? inCollection { get; set; }
        ///<summary>
        ///Whether the product is a gift card.
        ///</summary>
        public bool? isGiftCard { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The media associated with the product. This can include images, 3D models, or videos.
        ///</summary>
        public MediaConnection? media { get; set; }
        ///<summary>
        ///Total count of media belonging to a product.
        ///</summary>
        public int? mediaCount { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The online store preview URL.
        ///</summary>
        public string? onlineStorePreviewUrl { get; set; }
        ///<summary>
        ///The online store URL for the product.
        ///A value of `null` indicates that the product isn't published to the Online Store sales channel.
        ///</summary>
        public string? onlineStoreUrl { get; set; }
        ///<summary>
        ///A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
        ///</summary>
        public IEnumerable<ProductOption>? options { get; set; }

        ///<summary>
        ///The price range of the product.
        ///</summary>
        [Obsolete("Deprecated in API version 2020-10. Use `priceRangeV2` instead.")]
        public ProductPriceRange? priceRange { get; set; }
        ///<summary>
        ///The price range of the product with prices formatted as decimals.
        ///</summary>
        public ProductPriceRangeV2? priceRangeV2 { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The product category specified by the merchant.
        ///</summary>
        public ProductCategory? productCategory { get; set; }

        ///<summary>
        ///A list of the channels where the product is published.
        ///</summary>
        [Obsolete("Use `resourcePublications` instead.")]
        public ProductPublicationConnection? productPublications { get; set; }
        ///<summary>
        ///The product type specified by the merchant.
        ///</summary>
        public string? productType { get; set; }
        ///<summary>
        ///The number of publications a resource is published on.
        ///</summary>
        public int? publicationCount { get; set; }

        ///<summary>
        ///A list of the channels where the product is published.
        ///</summary>
        [Obsolete("Use `resourcePublications` instead.")]
        public ProductPublicationConnection? publications { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store.
        ///</summary>
        public DateTime? publishedAt { get; set; }
        ///<summary>
        ///Whether or not the product is published for a customer in the given context.
        ///</summary>
        public bool? publishedInContext { get; set; }

        ///<summary>
        ///Check to see whether the resource is published to a given channel.
        ///</summary>
        [Obsolete("Use `publishedOnPublication` instead.")]
        public bool? publishedOnChannel { get; set; }

        ///<summary>
        ///Check to see whether the resource is published to the calling app's channel.
        ///</summary>
        [Obsolete("Use `publishedOnCurrentPublication` instead.")]
        public bool? publishedOnCurrentChannel { get; set; }
        ///<summary>
        ///Check to see whether the resource is published to the calling app's publication.
        ///</summary>
        public bool? publishedOnCurrentPublication { get; set; }
        ///<summary>
        ///Check to see whether the resource is published to a given publication.
        ///</summary>
        public bool? publishedOnPublication { get; set; }
        ///<summary>
        ///Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store.
        ///</summary>
        public bool? requiresSellingPlan { get; set; }
        ///<summary>
        ///The resource that's either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope.
        ///</summary>
        public ResourcePublicationV2? resourcePublicationOnCurrentPublication { get; set; }
        ///<summary>
        ///The list of resources that are published to a publication.
        ///</summary>
        public ResourcePublicationConnection? resourcePublications { get; set; }
        ///<summary>
        ///The list of resources that are either published or staged to be published to a publication.
        ///</summary>
        public ResourcePublicationV2Connection? resourcePublicationsV2 { get; set; }
        ///<summary>
        ///Count of selling plan groups associated with the product.
        ///</summary>
        public int? sellingPlanGroupCount { get; set; }
        ///<summary>
        ///A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants.
        ///</summary>
        public SellingPlanGroupConnection? sellingPlanGroups { get; set; }
        ///<summary>
        ///SEO information of the product.
        ///</summary>
        public SEO? seo { get; set; }

        ///<summary>
        ///The standardized product type in the Shopify product taxonomy.
        ///</summary>
        [Obsolete("Deprecated in API version 2022-10. Use `productCategory` instead.")]
        public StandardizedProductType? standardizedProductType { get; set; }
        ///<summary>
        ///The product status. This controls visibility across all channels.
        ///</summary>
        public ProductStatus? status { get; set; }

        ///<summary>
        ///The Storefront GraphQL API ID of the `Product`.
        ///
        ///As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
        ///</summary>
        [Obsolete("Use `id` instead.")]
        public string? storefrontId { get; set; }
        ///<summary>
        ///A comma separated list of tags associated with the product. Updating `tags` overwrites
        ///any existing tags that were previously added to the product. To add new tags without overwriting
        ///existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
        ///mutation.
        ///</summary>
        public IEnumerable<string>? tags { get; set; }
        ///<summary>
        ///The theme template used when viewing the product in a store.
        ///</summary>
        public string? templateSuffix { get; set; }
        ///<summary>
        ///The title of the product.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The quantity of inventory in stock.
        ///</summary>
        public int? totalInventory { get; set; }
        ///<summary>
        ///The number of variants that are associated with the product.
        ///</summary>
        public int? totalVariants { get; set; }
        ///<summary>
        ///Whether inventory tracking has been enabled for the product.
        ///</summary>
        public bool? tracksInventory { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }

        ///<summary>
        ///The list of channels that the resource is not published to.
        ///</summary>
        [Obsolete("Use `unpublishedPublications` instead.")]
        public ChannelConnection? unpublishedChannels { get; set; }
        ///<summary>
        ///The list of publications that the resource is not published to.
        ///</summary>
        public PublicationConnection? unpublishedPublications { get; set; }
        ///<summary>
        ///The date and time when the product was last modified.
        ///A product's `updatedAt` value can change for different reasons. For example, if an order
        ///is placed for a product that has inventory tracking set up, then the inventory adjustment
        ///is counted as an update.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///A list of variants associated with the product.
        ///</summary>
        public ProductVariantConnection? variants { get; set; }
        ///<summary>
        ///The name of the product's vendor.
        ///</summary>
        public string? vendor { get; set; }
    }

    ///<summary>
    ///Return type for `productAppendImages` mutation.
    ///</summary>
    public class ProductAppendImagesPayload : GraphQLObject<ProductAppendImagesPayload>
    {
        ///<summary>
        ///List of new images appended to the product.
        ///</summary>
        public IEnumerable<Image>? newImages { get; set; }
        ///<summary>
        ///The product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The details of a specific product category within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
    ///</summary>
    public class ProductCategory : GraphQLObject<ProductCategory>
    {
        ///<summary>
        ///The product taxonomy node associated with the product category.
        ///</summary>
        public ProductTaxonomyNode? productTaxonomyNode { get; set; }
    }

    ///<summary>
    ///Return type for `productChangeStatus` mutation.
    ///</summary>
    public class ProductChangeStatusPayload : GraphQLObject<ProductChangeStatusPayload>
    {
        ///<summary>
        ///The product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductChangeStatusUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `ProductChangeStatus`.
    ///</summary>
    public class ProductChangeStatusUserError : GraphQLObject<ProductChangeStatusUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductChangeStatusUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductChangeStatusUserError`.
    ///</summary>
    public enum ProductChangeStatusUserErrorCode
    {
        ///<summary>
        ///Product could not be found.
        ///</summary>
        PRODUCT_NOT_FOUND,
    }

    ///<summary>
    ///The set of valid sort keys for the ProductCollection query.
    ///</summary>
    public enum ProductCollectionSortKeys
    {
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `price` value.
        ///</summary>
        PRICE,
        ///<summary>
        ///Sort by the `best-selling` value.
        ///</summary>
        BEST_SELLING,
        ///<summary>
        ///Sort by the `created` value.
        ///</summary>
        CREATED,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by the `manual` value.
        ///</summary>
        MANUAL,
        ///<summary>
        ///Sort by the `collection-default` value.
        ///</summary>
        COLLECTION_DEFAULT,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The compare-at price range of the product.
    ///</summary>
    public class ProductCompareAtPriceRange : GraphQLObject<ProductCompareAtPriceRange>
    {
        ///<summary>
        ///The highest variant's compare-at price.
        ///</summary>
        public MoneyV2? maxVariantCompareAtPrice { get; set; }
        ///<summary>
        ///The lowest variant's compare-at price.
        ///</summary>
        public MoneyV2? minVariantCompareAtPrice { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Products.
    ///</summary>
    public class ProductConnection : GraphQLObject<ProductConnection>, IConnectionWithNodesAndEdges<ProductEdge, Product>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ProductEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ProductEdge.
        ///</summary>
        public IEnumerable<Product>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///The price of a product in a specific country.
    ///Prices vary between countries.
    ///</summary>
    public class ProductContextualPricing : GraphQLObject<ProductContextualPricing>
    {
        ///<summary>
        ///The number of fixed quantity rules for the product's variants on the price list.
        ///</summary>
        public int? fixedQuantityRulesCount { get; set; }
        ///<summary>
        ///The pricing of the variant with the highest price in the given context.
        ///</summary>
        public ProductVariantContextualPricing? maxVariantPricing { get; set; }
        ///<summary>
        ///The pricing of the variant with the lowest price in the given context.
        ///</summary>
        public ProductVariantContextualPricing? minVariantPricing { get; set; }
        ///<summary>
        ///The price range of the product with prices formatted as decimals.
        ///</summary>
        public ProductPriceRangeV2? priceRange { get; set; }
    }

    ///<summary>
    ///Return type for `productCreateMedia` mutation.
    ///</summary>
    public class ProductCreateMediaPayload : GraphQLObject<ProductCreateMediaPayload>
    {
        ///<summary>
        ///The newly created media.
        ///</summary>
        public IEnumerable<IMedia>? media { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MediaUserError>? mediaUserErrors { get; set; }
        ///<summary>
        ///The product associated with the media.
        ///</summary>
        public Product? product { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `mediaUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productCreate` mutation.
    ///</summary>
    public class ProductCreatePayload : GraphQLObject<ProductCreatePayload>
    {
        ///<summary>
        ///The product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The shop associated with the product.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productDeleteAsync` mutation.
    ///</summary>
    public class ProductDeleteAsyncPayload : GraphQLObject<ProductDeleteAsyncPayload>
    {
        ///<summary>
        ///The ID of the product that was requested to be deleted.
        ///</summary>
        public string? deleteProductId { get; set; }
        ///<summary>
        ///The background job that will delete the product and its associated variants and media.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductDeleteUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productDeleteImages` mutation.
    ///</summary>
    public class ProductDeleteImagesPayload : GraphQLObject<ProductDeleteImagesPayload>
    {
        ///<summary>
        ///The array of image IDs to delete.
        ///</summary>
        public IEnumerable<string>? deletedImageIds { get; set; }
        ///<summary>
        ///The product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productDeleteMedia` mutation.
    ///</summary>
    public class ProductDeleteMediaPayload : GraphQLObject<ProductDeleteMediaPayload>
    {
        ///<summary>
        ///List of media IDs which were deleted.
        ///</summary>
        public IEnumerable<string>? deletedMediaIds { get; set; }
        ///<summary>
        ///List of product image IDs which were deleted.
        ///</summary>
        public IEnumerable<string>? deletedProductImageIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MediaUserError>? mediaUserErrors { get; set; }
        ///<summary>
        ///The product associated with the deleted media.
        ///</summary>
        public Product? product { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `mediaUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productDelete` mutation.
    ///</summary>
    public class ProductDeletePayload : GraphQLObject<ProductDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted product.
        ///</summary>
        public string? deletedProductId { get; set; }
        ///<summary>
        ///The shop associated with the product.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurred while setting the activation status of an inventory item.
    ///</summary>
    public class ProductDeleteUserError : GraphQLObject<ProductDeleteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductDeleteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductDeleteUserError`.
    ///</summary>
    public enum ProductDeleteUserErrorCode
    {
        ///<summary>
        ///Product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///Something went wrong, please try again.
        ///</summary>
        GENERIC_ERROR,
    }

    ///<summary>
    ///Return type for `productDuplicateAsync` mutation.
    ///</summary>
    public class ProductDuplicateAsyncPayload : GraphQLObject<ProductDuplicateAsyncPayload>
    {
        ///<summary>
        ///The duplicated product ID.
        ///</summary>
        public string? duplicatedProductId { get; set; }
        ///<summary>
        ///The asynchronous job for duplicating the products.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductDuplicateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productDuplicateAsyncV2` mutation.
    ///</summary>
    public class ProductDuplicateAsyncV2Payload : GraphQLObject<ProductDuplicateAsyncV2Payload>
    {
        ///<summary>
        ///The duplicated product ID.
        ///</summary>
        public string? duplicatedProductId { get; set; }
        ///<summary>
        ///The asynchronous job for duplicating the product.
        ///</summary>
        public string? productDuplicateJobId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductDuplicateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a product duplication job.
    ///</summary>
    public class ProductDuplicateJob : GraphQLObject<ProductDuplicateJob>
    {
        ///<summary>
        ///This indicates if the job is still queued or has been run.
        ///</summary>
        public bool? done { get; set; }
        ///<summary>
        ///A globally-unique ID that's returned when running an asynchronous mutation.
        ///</summary>
        public string? id { get; set; }
    }

    ///<summary>
    ///Return type for `productDuplicate` mutation.
    ///</summary>
    public class ProductDuplicatePayload : GraphQLObject<ProductDuplicatePayload>
    {
        ///<summary>
        ///The asynchronous job that duplicates the product images.
        ///</summary>
        public Job? imageJob { get; set; }
        ///<summary>
        ///The duplicated product.
        ///</summary>
        public Product? newProduct { get; set; }
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurred while duplicating the product.
    ///</summary>
    public class ProductDuplicateUserError : GraphQLObject<ProductDuplicateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductDuplicateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductDuplicateUserError`.
    ///</summary>
    public enum ProductDuplicateUserErrorCode
    {
        ///<summary>
        ///The product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///Cannot duplicate a product which has no variants.
        ///</summary>
        EMPTY_VARIANT,
        ///<summary>
        ///The title cannot be empty.
        ///</summary>
        EMPTY_TITLE,
        ///<summary>
        ///Cannot duplicate a bundle product.
        ///</summary>
        BUNDLES_ERROR,
        ///<summary>
        ///Something went wrong, please try again.
        ///</summary>
        GENERIC_ERROR,
        ///<summary>
        ///Something went wrong when saving the product, please try again.
        ///</summary>
        FAILED_TO_SAVE,
    }

    ///<summary>
    ///An auto-generated type which holds one Product and a cursor during pagination.
    ///</summary>
    public class ProductEdge : GraphQLObject<ProductEdge>, IEdge<Product>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ProductEdge.
        ///</summary>
        public Product? node { get; set; }
    }

    ///<summary>
    ///A product feed.
    ///</summary>
    public class ProductFeed : GraphQLObject<ProductFeed>, INode
    {
        ///<summary>
        ///The country of the product feed.
        ///</summary>
        public CountryCode? country { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The language of the product feed.
        ///</summary>
        public LanguageCode? language { get; set; }
        ///<summary>
        ///The status of the product feed.
        ///</summary>
        public ProductFeedStatus? status { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ProductFeeds.
    ///</summary>
    public class ProductFeedConnection : GraphQLObject<ProductFeedConnection>, IConnectionWithNodesAndEdges<ProductFeedEdge, ProductFeed>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ProductFeedEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ProductFeedEdge.
        ///</summary>
        public IEnumerable<ProductFeed>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `productFeedCreate` mutation.
    ///</summary>
    public class ProductFeedCreatePayload : GraphQLObject<ProductFeedCreatePayload>
    {
        ///<summary>
        ///The newly created product feed.
        ///</summary>
        public ProductFeed? productFeed { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductFeedCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `ProductFeedCreate`.
    ///</summary>
    public class ProductFeedCreateUserError : GraphQLObject<ProductFeedCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductFeedCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductFeedCreateUserError`.
    ///</summary>
    public enum ProductFeedCreateUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
    }

    ///<summary>
    ///Return type for `productFeedDelete` mutation.
    ///</summary>
    public class ProductFeedDeletePayload : GraphQLObject<ProductFeedDeletePayload>
    {
        ///<summary>
        ///The ID of the product feed that was deleted.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductFeedDeleteUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `ProductFeedDelete`.
    ///</summary>
    public class ProductFeedDeleteUserError : GraphQLObject<ProductFeedDeleteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductFeedDeleteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductFeedDeleteUserError`.
    ///</summary>
    public enum ProductFeedDeleteUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///An auto-generated type which holds one ProductFeed and a cursor during pagination.
    ///</summary>
    public class ProductFeedEdge : GraphQLObject<ProductFeedEdge>, IEdge<ProductFeed>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ProductFeedEdge.
        ///</summary>
        public ProductFeed? node { get; set; }
    }

    ///<summary>
    ///The valid values for the status of product feed.
    ///</summary>
    public enum ProductFeedStatus
    {
        ///<summary>
        ///The product feed is active.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The product feed is inactive.
        ///</summary>
        INACTIVE,
    }

    ///<summary>
    ///Return type for `productFullSync` mutation.
    ///</summary>
    public class ProductFullSyncPayload : GraphQLObject<ProductFullSyncPayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductFullSyncUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `ProductFullSync`.
    ///</summary>
    public class ProductFullSyncUserError : GraphQLObject<ProductFullSyncUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductFullSyncUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductFullSyncUserError`.
    ///</summary>
    public enum ProductFullSyncUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///The set of valid sort keys for the ProductImage query.
    ///</summary>
    public enum ProductImageSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `position` value.
        ///</summary>
        POSITION,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `productImageUpdate` mutation.
    ///</summary>
    public class ProductImageUpdatePayload : GraphQLObject<ProductImageUpdatePayload>
    {
        ///<summary>
        ///The image that has been updated.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productJoinSellingPlanGroups` mutation.
    ///</summary>
    public class ProductJoinSellingPlanGroupsPayload : GraphQLObject<ProductJoinSellingPlanGroupsPayload>
    {
        ///<summary>
        ///The product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productLeaveSellingPlanGroups` mutation.
    ///</summary>
    public class ProductLeaveSellingPlanGroupsPayload : GraphQLObject<ProductLeaveSellingPlanGroupsPayload>
    {
        ///<summary>
        ///The product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the ProductMedia query.
    ///</summary>
    public enum ProductMediaSortKeys
    {
        ///<summary>
        ///Sort by the `position` value.
        ///</summary>
        POSITION,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The product property names. For example, "Size", "Color", and "Material".
    ///Variants are selected based on permutations of these options.
    ///The limit for each product property name is 255 characters.
    ///</summary>
    public class ProductOption : GraphQLObject<ProductOption>, IHasPublishedTranslations, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The product option’s name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The product option's position.
        ///</summary>
        public int? position { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
        ///<summary>
        ///The corresponding value to the product option name.
        ///</summary>
        public IEnumerable<string>? values { get; set; }
    }

    ///<summary>
    ///The price range of the product.
    ///</summary>
    public class ProductPriceRange : GraphQLObject<ProductPriceRange>
    {
        ///<summary>
        ///The highest variant's price.
        ///</summary>
        public MoneyV2? maxVariantPrice { get; set; }
        ///<summary>
        ///The lowest variant's price.
        ///</summary>
        public MoneyV2? minVariantPrice { get; set; }
    }

    ///<summary>
    ///The price range of the product.
    ///</summary>
    public class ProductPriceRangeV2 : GraphQLObject<ProductPriceRangeV2>
    {
        ///<summary>
        ///The highest variant's price.
        ///</summary>
        public MoneyV2? maxVariantPrice { get; set; }
        ///<summary>
        ///The lowest variant's price.
        ///</summary>
        public MoneyV2? minVariantPrice { get; set; }
    }

    ///<summary>
    ///Represents the channels where a product is published.
    ///</summary>
    public class ProductPublication : GraphQLObject<ProductPublication>
    {
        ///<summary>
        ///The channel where the product was or is published.
        ///</summary>
        public Channel? channel { get; set; }
        ///<summary>
        ///Whether the publication is published or not.
        ///</summary>
        public bool? isPublished { get; set; }
        ///<summary>
        ///The product that was or is going to be published on the channel.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The date that the product was or is going to be published on the channel.
        ///</summary>
        public DateTime? publishDate { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ProductPublications.
    ///</summary>
    public class ProductPublicationConnection : GraphQLObject<ProductPublicationConnection>, IConnectionWithNodesAndEdges<ProductPublicationEdge, ProductPublication>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ProductPublicationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ProductPublicationEdge.
        ///</summary>
        public IEnumerable<ProductPublication>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ProductPublication and a cursor during pagination.
    ///</summary>
    public class ProductPublicationEdge : GraphQLObject<ProductPublicationEdge>, IEdge<ProductPublication>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ProductPublicationEdge.
        ///</summary>
        public ProductPublication? node { get; set; }
    }

    ///<summary>
    ///Return type for `productPublish` mutation.
    ///</summary>
    public class ProductPublishPayload : GraphQLObject<ProductPublishPayload>
    {
        ///<summary>
        ///The product that has been published.
        ///</summary>
        public Product? product { get; set; }

        ///<summary>
        ///The channels where the product is published.
        ///</summary>
        [Obsolete("Use Product.publications instead.")]
        public IEnumerable<ProductPublication>? productPublications { get; set; }
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productReorderImages` mutation.
    ///</summary>
    public class ProductReorderImagesPayload : GraphQLObject<ProductReorderImagesPayload>
    {
        ///<summary>
        ///The asynchronous job which reorders the images.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productReorderMedia` mutation.
    ///</summary>
    public class ProductReorderMediaPayload : GraphQLObject<ProductReorderMediaPayload>
    {
        ///<summary>
        ///The asynchronous job which reorders the media.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MediaUserError>? mediaUserErrors { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `mediaUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Reports the status of product for a Sales Channel or Storefront API.
    ///This might include why a product is not available in a Sales Channel
    ///and how a merchant might fix this.
    ///</summary>
    public class ProductResourceFeedback : GraphQLObject<ProductResourceFeedback>
    {
        ///<summary>
        ///The time when the feedback was generated. Used to help determine whether
        ///incoming feedback is outdated compared to existing feedback.
        ///</summary>
        public DateTime? feedbackGeneratedAt { get; set; }
        ///<summary>
        ///The feedback messages presented to the merchant.
        ///</summary>
        public IEnumerable<string>? messages { get; set; }
        ///<summary>
        ///The ID of the product associated with the feedback.
        ///</summary>
        public string? productId { get; set; }
        ///<summary>
        ///The timestamp of the product associated with the feedback.
        ///</summary>
        public DateTime? productUpdatedAt { get; set; }
        ///<summary>
        ///Conveys the state of the feedback and whether it requires merchant action or not.
        ///</summary>
        public ResourceFeedbackState? state { get; set; }
    }

    ///<summary>
    ///A sale associated with a product.
    ///</summary>
    public class ProductSale : GraphQLObject<ProductSale>, ISale
    {
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; set; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The line item for the associated sale.
        ///</summary>
        public LineItem? lineItem { get; set; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; set; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; set; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; set; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the Product query.
    ///</summary>
    public enum ProductSortKeys
    {
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `product_type` value.
        ///</summary>
        PRODUCT_TYPE,
        ///<summary>
        ///Sort by the `vendor` value.
        ///</summary>
        VENDOR,
        ///<summary>
        ///Sort by the `inventory_total` value.
        ///</summary>
        INVENTORY_TOTAL,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `published_at` value.
        ///</summary>
        PUBLISHED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///Pagination isn't supported when using this sort key.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The possible product statuses.
    ///</summary>
    public enum ProductStatus
    {
        ///<summary>
        ///The product is ready to sell and can be published to sales channels and apps. Products with an active status aren't automatically published to sales channels, such as the online store, or apps. By default, existing products are set to active.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The product is no longer being sold and isn't available to customers on sales channels and apps.
        ///</summary>
        ARCHIVED,
        ///<summary>
        ///The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.
        ///</summary>
        DRAFT,
    }

    ///<summary>
    ///Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
    ///</summary>
    public class ProductTaxonomyNode : GraphQLObject<ProductTaxonomyNode>, INode
    {
        ///<summary>
        ///The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
        ///</summary>
        public string? fullName { get; set; }
        ///<summary>
        ///The ID of the product taxonomy node.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Whether the node is a leaf node.
        ///</summary>
        public bool? isLeaf { get; set; }
        ///<summary>
        ///Whether the node is a root node.
        ///</summary>
        public bool? isRoot { get; set; }
        ///<summary>
        ///The name of the product taxonomy node. For example, Dog Beds.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///Return type for `productUnpublish` mutation.
    ///</summary>
    public class ProductUnpublishPayload : GraphQLObject<ProductUnpublishPayload>
    {
        ///<summary>
        ///The product that has been unpublished.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productUpdateMedia` mutation.
    ///</summary>
    public class ProductUpdateMediaPayload : GraphQLObject<ProductUpdateMediaPayload>
    {
        ///<summary>
        ///The updated media object.
        ///</summary>
        public IEnumerable<IMedia>? media { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MediaUserError>? mediaUserErrors { get; set; }
        ///<summary>
        ///The product on which media was updated.
        ///</summary>
        public Product? product { get; set; }

        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        [Obsolete("Use `mediaUserErrors` instead.")]
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productUpdate` mutation.
    ///</summary>
    public class ProductUpdatePayload : GraphQLObject<ProductUpdatePayload>
    {
        ///<summary>
        ///The updated product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a product variant.
    ///</summary>
    public class ProductVariant : GraphQLObject<ProductVariant>, IHasMetafieldDefinitions, IHasMetafields, IHasPublishedTranslations, ILegacyInteroperability, INavigable, INode, ICommentEventEmbed, IMetafieldReference, IMetafieldReferencer
    {
        ///<summary>
        ///Whether the product variant is available for sale.
        ///</summary>
        public bool? availableForSale { get; set; }
        ///<summary>
        ///The value of the barcode associated with the product.
        ///</summary>
        public string? barcode { get; set; }
        ///<summary>
        ///The compare-at price of the variant in the default shop currency.
        ///</summary>
        public decimal? compareAtPrice { get; set; }
        ///<summary>
        ///The pricing that applies for a customer in a given context.
        ///</summary>
        public ProductVariantContextualPricing? contextualPricing { get; set; }
        ///<summary>
        ///The date and time when the variant was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A default cursor that returns the single next record, sorted ascending by ID.
        ///</summary>
        public string? defaultCursor { get; set; }
        ///<summary>
        ///The delivery profile for the variant.
        ///</summary>
        public DeliveryProfile? deliveryProfile { get; set; }
        ///<summary>
        ///Display name of the variant, based on product's title + variant's title.
        ///</summary>
        public string? displayName { get; set; }

        ///<summary>
        ///The fulfillment service that stocks a product variant.
        ///
        ///This is a third-party fulfillment service if the following conditions are met:
        ///- The product variant is stocked by a single fulfillment service.
        ///- The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
        ///- The fulfillment service hasn't [opted into SKU sharing](/api/admin-graphql/latest/objects/FulfillmentService#field-fulfillmentservice-permitsskusharing).
        ///
        ///If the conditions aren't met, then the fulfillment service has the `manual` handle.
        ///</summary>
        [Obsolete("\nThe [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.\n\nIf you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.\n\nLearn more about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).")]
        public FulfillmentService? fulfillmentService { get; set; }
        ///<summary>
        ///Whether changes to the fulfillment service for the product variant are allowed.
        ///</summary>
        public EditableProperty? fulfillmentServiceEditable { get; set; }

        ///<summary>
        ///The Harmonized System Code (or HS Tariff Code) for the variant.
        ///</summary>
        [Obsolete("Use `InventoryItem.harmonizedSystemCode` instead.")]
        public string? harmonizedSystemCode { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The featured image for the variant.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///The inventory item, which is used to query for inventory information.
        ///</summary>
        public InventoryItem? inventoryItem { get; set; }

        ///<summary>
        ///The fulfillment service that tracks the number of items in stock for the product variant.
        ///</summary>
        [Obsolete("Use tracked attribute on `inventoryItem` instead.")]
        public ProductVariantInventoryManagement? inventoryManagement { get; set; }
        ///<summary>
        ///Whether customers are allowed to place an order for the product variant when it's out of stock.
        ///</summary>
        public ProductVariantInventoryPolicy? inventoryPolicy { get; set; }
        ///<summary>
        ///The total sellable quantity of the variant.
        ///</summary>
        public int? inventoryQuantity { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The media associated with the product variant.
        ///</summary>
        public MediaConnection? media { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The order of the product variant in the list of product variants. The first position in the list is 1.
        ///</summary>
        public int? position { get; set; }

        ///<summary>
        ///List of prices and compare-at prices in the presentment currencies for this shop.
        ///</summary>
        [Obsolete("Use `contextualPricing` instead.")]
        public ProductVariantPricePairConnection? presentmentPrices { get; set; }
        ///<summary>
        ///The price of the product variant in the default shop currency.
        ///</summary>
        public decimal? price { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The product that this variant belongs to.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///A list of the product variant components.
        ///</summary>
        public ProductVariantComponentConnection? productVariantComponents { get; set; }
        ///<summary>
        ///Whether a product variant requires components. The default value is `false`.
        ///If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
        ///from channels that don't support bundles.
        ///</summary>
        public bool? requiresComponents { get; set; }

        ///<summary>
        ///Whether a customer needs to provide a shipping address when placing an order for the product variant.
        ///</summary>
        [Obsolete("Use `InventoryItem.requiresShipping` instead.")]
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///List of product options applied to the variant.
        ///</summary>
        public IEnumerable<SelectedOption>? selectedOptions { get; set; }
        ///<summary>
        ///The total sellable quantity of the variant for online channels.
        ///This doesn't represent the total available inventory or capture
        ///[limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
        ///</summary>
        public int? sellableOnlineQuantity { get; set; }
        ///<summary>
        ///Count of selling plan groups associated with the product variant.
        ///</summary>
        public int? sellingPlanGroupCount { get; set; }
        ///<summary>
        ///A list of all selling plan groups defined in the current shop associated with the product variant.
        ///</summary>
        public SellingPlanGroupConnection? sellingPlanGroups { get; set; }
        ///<summary>
        ///A case-sensitive identifier for the product variant in the shop.
        ///Required in order to connect to a fulfillment service.
        ///</summary>
        public string? sku { get; set; }

        ///<summary>
        ///The Storefront GraphQL API ID of the `ProductVariant`.
        ///
        ///As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
        ///</summary>
        [Obsolete("Use `id` instead.")]
        public string? storefrontId { get; set; }
        ///<summary>
        ///The tax code for the product variant.
        ///</summary>
        public string? taxCode { get; set; }
        ///<summary>
        ///Whether a tax is charged when the product variant is sold.
        ///</summary>
        public bool? taxable { get; set; }
        ///<summary>
        ///The title of the product variant.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
        ///<summary>
        ///The date and time (ISO 8601 format) when the product variant was last modified.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///The weight of the product variant in the unit system specified with weight_unit.
        ///</summary>
        public float? weight { get; set; }
        ///<summary>
        ///The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
        ///</summary>
        public WeightUnit? weightUnit { get; set; }
    }

    ///<summary>
    ///Return type for `productVariantAppendMedia` mutation.
    ///</summary>
    public class ProductVariantAppendMediaPayload : GraphQLObject<ProductVariantAppendMediaPayload>
    {
        ///<summary>
        ///The product associated with the variants and media.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The product variants that were updated.
        ///</summary>
        public IEnumerable<ProductVariant>? productVariants { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MediaUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A product variant component associated with a product variant.
    ///</summary>
    public class ProductVariantComponent : GraphQLObject<ProductVariantComponent>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The product variant associated with the component.
        ///</summary>
        public ProductVariant? productVariant { get; set; }
        ///<summary>
        ///The required quantity of the component.
        ///</summary>
        public int? quantity { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ProductVariantComponents.
    ///</summary>
    public class ProductVariantComponentConnection : GraphQLObject<ProductVariantComponentConnection>, IConnectionWithNodesAndEdges<ProductVariantComponentEdge, ProductVariantComponent>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ProductVariantComponentEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ProductVariantComponentEdge.
        ///</summary>
        public IEnumerable<ProductVariantComponent>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.
    ///</summary>
    public class ProductVariantComponentEdge : GraphQLObject<ProductVariantComponentEdge>, IEdge<ProductVariantComponent>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ProductVariantComponentEdge.
        ///</summary>
        public ProductVariantComponent? node { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ProductVariants.
    ///</summary>
    public class ProductVariantConnection : GraphQLObject<ProductVariantConnection>, IConnectionWithNodesAndEdges<ProductVariantEdge, ProductVariant>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ProductVariantEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ProductVariantEdge.
        ///</summary>
        public IEnumerable<ProductVariant>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///The price of a product variant in a specific country.
    ///Prices vary between countries.
    ///</summary>
    public class ProductVariantContextualPricing : GraphQLObject<ProductVariantContextualPricing>
    {
        ///<summary>
        ///The final compare-at price after all adjustments are applied.
        ///</summary>
        public MoneyV2? compareAtPrice { get; set; }
        ///<summary>
        ///The final price after all adjustments are applied.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///A list of quantity breaks for the product variant.
        ///</summary>
        public QuantityPriceBreakConnection? quantityPriceBreaks { get; set; }
        ///<summary>
        ///The quantity rule applied for a given context.
        ///</summary>
        public QuantityRule? quantityRule { get; set; }
    }

    ///<summary>
    ///Return type for `productVariantCreate` mutation.
    ///</summary>
    public class ProductVariantCreatePayload : GraphQLObject<ProductVariantCreatePayload>
    {
        ///<summary>
        ///The product associated with the variant.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The successfully created variant.
        ///</summary>
        public ProductVariant? productVariant { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productVariantDelete` mutation.
    ///</summary>
    public class ProductVariantDeletePayload : GraphQLObject<ProductVariantDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted product variant.
        ///</summary>
        public string? deletedProductVariantId { get; set; }
        ///<summary>
        ///The product associated with the deleted product variant.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productVariantDetachMedia` mutation.
    ///</summary>
    public class ProductVariantDetachMediaPayload : GraphQLObject<ProductVariantDetachMediaPayload>
    {
        ///<summary>
        ///The product associated with the variants and media.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The product variants that were updated.
        ///</summary>
        public IEnumerable<ProductVariant>? productVariants { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MediaUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ProductVariant and a cursor during pagination.
    ///</summary>
    public class ProductVariantEdge : GraphQLObject<ProductVariantEdge>, IEdge<ProductVariant>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ProductVariantEdge.
        ///</summary>
        public ProductVariant? node { get; set; }
    }

    ///<summary>
    ///The valid values for the method of inventory tracking for a product variant.
    ///</summary>
    public enum ProductVariantInventoryManagement
    {
        ///<summary>
        ///This product variant's inventory is tracked by Shopify. Inventory can be tracked by store location(s) and/or third-party fulfillment service(s).
        ///</summary>
        SHOPIFY,
        ///<summary>
        ///This product variant's inventory is not tracked.
        ///</summary>
        NOT_MANAGED,
        ///<summary>
        ///This product variant's inventory is tracked by a third-party fulfillment service.
        ///</summary>
        FULFILLMENT_SERVICE,
    }

    ///<summary>
    ///The valid values for the inventory policy of a product variant once it is out of stock.
    ///</summary>
    public enum ProductVariantInventoryPolicy
    {
        ///<summary>
        ///Customers can't buy this product variant after it's out of stock.
        ///</summary>
        DENY,
        ///<summary>
        ///Customers can buy this product variant after it's out of stock.
        ///</summary>
        CONTINUE,
    }

    ///<summary>
    ///Return type for `productVariantJoinSellingPlanGroups` mutation.
    ///</summary>
    public class ProductVariantJoinSellingPlanGroupsPayload : GraphQLObject<ProductVariantJoinSellingPlanGroupsPayload>
    {
        ///<summary>
        ///The product variant object.
        ///</summary>
        public ProductVariant? productVariant { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productVariantLeaveSellingPlanGroups` mutation.
    ///</summary>
    public class ProductVariantLeaveSellingPlanGroupsPayload : GraphQLObject<ProductVariantLeaveSellingPlanGroupsPayload>
    {
        ///<summary>
        ///The product variant object.
        ///</summary>
        public ProductVariant? productVariant { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The compare-at price and price of a variant sharing a currency.
    ///</summary>
    public class ProductVariantPricePair : GraphQLObject<ProductVariantPricePair>
    {
        ///<summary>
        ///The compare-at price of the variant with associated currency.
        ///</summary>
        public MoneyV2? compareAtPrice { get; set; }
        ///<summary>
        ///The price of the variant with associated currency.
        ///</summary>
        public MoneyV2? price { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ProductVariantPricePairs.
    ///</summary>
    public class ProductVariantPricePairConnection : GraphQLObject<ProductVariantPricePairConnection>, IConnectionWithNodesAndEdges<ProductVariantPricePairEdge, ProductVariantPricePair>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ProductVariantPricePairEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ProductVariantPricePairEdge.
        ///</summary>
        public IEnumerable<ProductVariantPricePair>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
    ///</summary>
    public class ProductVariantPricePairEdge : GraphQLObject<ProductVariantPricePairEdge>, IEdge<ProductVariantPricePair>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ProductVariantPricePairEdge.
        ///</summary>
        public ProductVariantPricePair? node { get; set; }
    }

    ///<summary>
    ///Return type for `productVariantRelationshipBulkUpdate` mutation.
    ///</summary>
    public class ProductVariantRelationshipBulkUpdatePayload : GraphQLObject<ProductVariantRelationshipBulkUpdatePayload>
    {
        ///<summary>
        ///The product variants with successfully updated product variant relationships.
        ///</summary>
        public IEnumerable<ProductVariant>? parentProductVariants { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductVariantRelationshipBulkUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `ProductVariantRelationshipBulkUpdate`.
    ///</summary>
    public class ProductVariantRelationshipBulkUpdateUserError : GraphQLObject<ProductVariantRelationshipBulkUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductVariantRelationshipBulkUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductVariantRelationshipBulkUpdateUserError`.
    ///</summary>
    public enum ProductVariantRelationshipBulkUpdateUserErrorCode
    {
        ///<summary>
        ///A parent product variant ID or product ID must be provided.
        ///</summary>
        PARENT_REQUIRED,
        ///<summary>
        ///Unable to create parent product variant.
        ///</summary>
        FAILED_TO_CREATE,
        ///<summary>
        ///The product variants were not found.
        ///</summary>
        PRODUCT_VARIANTS_NOT_FOUND,
        ///<summary>
        ///A parent product variant cannot contain itself as a component.
        ///</summary>
        CIRCULAR_REFERENCE,
        ///<summary>
        ///Nested parent product variants aren't supported.
        ///</summary>
        NESTED_PARENT_PRODUCT_VARIANT,
        ///<summary>
        ///Product variant relationships must have a quantity greater than 0.
        ///</summary>
        INVALID_QUANTITY,
        ///<summary>
        ///A parent product variant must not contain duplicate product variant relationships.
        ///</summary>
        DUPLICATE_PRODUCT_VARIANT_RELATIONSHIP,
        ///<summary>
        ///Exceeded the maximum allowable product variant relationships in a parent product variant.
        ///</summary>
        EXCEEDED_PRODUCT_VARIANT_RELATIONSHIP_LIMIT,
        ///<summary>
        ///A Core type relationship cannot be added to a composite product variant with SFN type relationships.
        ///</summary>
        PRODUCT_VARIANT_RELATIONSHIP_TYPE_CONFLICT,
        ///<summary>
        ///Unexpected error.
        ///</summary>
        UNEXPECTED_ERROR,
        ///<summary>
        ///Unable to remove product variant relationships.
        ///</summary>
        FAILED_TO_REMOVE,
        ///<summary>
        ///The product variant relationships to remove must be specified if all the parent product variant's components aren't being removed.
        ///</summary>
        MUST_SPECIFY_COMPONENTS,
        ///<summary>
        ///Unable to update product variant relationships.
        ///</summary>
        FAILED_TO_UPDATE,
        ///<summary>
        ///Unable to update parent product variant price.
        ///</summary>
        FAILED_TO_UPDATE_PARENT_PRODUCT_VARIANT_PRICE,
        ///<summary>
        ///A price must be provided for a parent product variant if the price calucation is set to fixed.
        ///</summary>
        UPDATE_PARENT_VARIANT_PRICE_REQUIRED,
        ///<summary>
        ///Some of the provided product variants are not components of the specified parent product variant.
        ///</summary>
        PRODUCT_VARIANTS_NOT_COMPONENTS,
        ///<summary>
        ///The products for these product variants are already owned by another App.
        ///</summary>
        PRODUCT_EXPANDER_APP_OWNERSHIP_ALREADY_EXISTS,
        ///<summary>
        ///Multipack bundles are not supported.
        ///</summary>
        UNSUPPORTED_MULTIPACK_RELATIONSHIP,
        ///<summary>
        ///Gift cards cannot be parent product variants.
        ///</summary>
        PARENT_PRODUCT_VARIANT_CANNOT_BE_GIFT_CARD,
        ///<summary>
        ///Parent product variants cannot require a selling plan.
        ///</summary>
        PARENT_PRODUCT_VARIANT_CANNOT_REQUIRE_SELLING_PLAN,
    }

    ///<summary>
    ///The set of valid sort keys for the ProductVariant query.
    ///</summary>
    public enum ProductVariantSortKeys
    {
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `sku` value.
        ///</summary>
        SKU,
        ///<summary>
        ///Sort by the `inventory_quantity` value.
        ///</summary>
        INVENTORY_QUANTITY,
        ///<summary>
        ///Sort by the `inventory_management` value.
        ///</summary>
        INVENTORY_MANAGEMENT,
        ///<summary>
        ///Sort by available inventory quantity in the location specified by the `query:"location_id:"` argument.
        ///Don't use this sort key when no `location_id` in query is specified.
        ///</summary>
        INVENTORY_LEVELS_AVAILABLE,
        ///<summary>
        ///Sort by the `inventory_policy` value.
        ///</summary>
        INVENTORY_POLICY,
        ///<summary>
        ///Sort by the `full_title` value.
        ///</summary>
        FULL_TITLE,
        ///<summary>
        ///Sort by the `popular` value.
        ///</summary>
        POPULAR,
        ///<summary>
        ///Sort by the `position` value.
        ///</summary>
        POSITION,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `productVariantUpdate` mutation.
    ///</summary>
    public class ProductVariantUpdatePayload : GraphQLObject<ProductVariantUpdatePayload>
    {
        ///<summary>
        ///The product associated with the variant.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The updated variant.
        ///</summary>
        public ProductVariant? productVariant { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `productVariantsBulkCreate` mutation.
    ///</summary>
    public class ProductVariantsBulkCreatePayload : GraphQLObject<ProductVariantsBulkCreatePayload>
    {
        ///<summary>
        ///The updated product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The newly created variants.
        ///</summary>
        public IEnumerable<ProductVariant>? productVariants { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductVariantsBulkCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed product variant bulk create mutations.
    ///</summary>
    public class ProductVariantsBulkCreateUserError : GraphQLObject<ProductVariantsBulkCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductVariantsBulkCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductVariantsBulkCreateUserError`.
    ///</summary>
    public enum ProductVariantsBulkCreateUserErrorCode
    {
        ///<summary>
        ///Product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///On create, this key cannot be used.
        ///</summary>
        NO_KEY_ON_CREATE,
        ///<summary>
        ///Variant already exists.
        ///</summary>
        VARIANT_ALREADY_EXISTS,
        ///<summary>
        ///Variant price must be greater than or equal to zero.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///Variant options are not enough.
        ///</summary>
        NEED_TO_ADD_OPTION_VALUES,
        ///<summary>
        ///Variant options are more than the product options.
        ///</summary>
        OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS,
        ///<summary>
        ///Inventory locations cannot exceed the allowed resource limit or 10.
        ///</summary>
        TOO_MANY_INVENTORY_LOCATIONS,
        ///<summary>
        ///You reached the limit of available SKUs in your current plan.
        ///</summary>
        SUBSCRIPTION_VIOLATION,
        ///<summary>
        ///Variant options already exist. Please change the variant option(s).
        ///</summary>
        VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE,
        ///<summary>
        ///Quantity could not be set. The location was not found.
        ///</summary>
        TRACKED_VARIANT_LOCATION_NOT_FOUND,
        ///<summary>
        ///Input must be for this product.
        ///</summary>
        MUST_BE_FOR_THIS_PRODUCT,
        ///<summary>
        ///Input is not defined for this shop.
        ///</summary>
        NOT_DEFINED_FOR_SHOP,
        ///<summary>
        ///Invalid input detected.
        ///</summary>
        INVALID,
        ///<summary>
        ///Price cannot take a negative value.
        ///</summary>
        NEGATIVE_PRICE_VALUE,
    }

    ///<summary>
    ///Return type for `productVariantsBulkDelete` mutation.
    ///</summary>
    public class ProductVariantsBulkDeletePayload : GraphQLObject<ProductVariantsBulkDeletePayload>
    {
        ///<summary>
        ///The updated product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductVariantsBulkDeleteUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed bulk variant delete mutations.
    ///</summary>
    public class ProductVariantsBulkDeleteUserError : GraphQLObject<ProductVariantsBulkDeleteUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductVariantsBulkDeleteUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductVariantsBulkDeleteUserError`.
    ///</summary>
    public enum ProductVariantsBulkDeleteUserErrorCode
    {
        ///<summary>
        ///Product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///Cannot delete default variant.
        ///</summary>
        CANNOT_DELETE_LAST_VARIANT,
        ///<summary>
        ///The variant does not exist.
        ///</summary>
        AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT,
    }

    ///<summary>
    ///Return type for `productVariantsBulkReorder` mutation.
    ///</summary>
    public class ProductVariantsBulkReorderPayload : GraphQLObject<ProductVariantsBulkReorderPayload>
    {
        ///<summary>
        ///The updated product.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductVariantsBulkReorderUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed bulk product variants reorder operation.
    ///</summary>
    public class ProductVariantsBulkReorderUserError : GraphQLObject<ProductVariantsBulkReorderUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductVariantsBulkReorderUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductVariantsBulkReorderUserError`.
    ///</summary>
    public enum ProductVariantsBulkReorderUserErrorCode
    {
        ///<summary>
        ///Product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///Product variant does not exist.
        ///</summary>
        MISSING_VARIANT,
        ///<summary>
        ///Product variant position cannot be zero or negative number.
        ///</summary>
        INVALID_POSITION,
        ///<summary>
        ///Product variant IDs must be unique.
        ///</summary>
        DUPLICATED_VARIANT_ID,
    }

    ///<summary>
    ///Return type for `productVariantsBulkUpdate` mutation.
    ///</summary>
    public class ProductVariantsBulkUpdatePayload : GraphQLObject<ProductVariantsBulkUpdatePayload>
    {
        ///<summary>
        ///The updated product object.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///The updated variants.
        ///</summary>
        public IEnumerable<ProductVariant>? productVariants { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ProductVariantsBulkUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed variant bulk update mutations.
    ///</summary>
    public class ProductVariantsBulkUpdateUserError : GraphQLObject<ProductVariantsBulkUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ProductVariantsBulkUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ProductVariantsBulkUpdateUserError`.
    ///</summary>
    public enum ProductVariantsBulkUpdateUserErrorCode
    {
        ///<summary>
        ///Product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///Product variant is missing ID attribute.
        ///</summary>
        PRODUCT_VARIANT_ID_MISSING,
        ///<summary>
        ///Product variant does not exist.
        ///</summary>
        PRODUCT_VARIANT_DOES_NOT_EXIST,
        ///<summary>
        ///Inventory quantities cannot be updated with variants API.
        ///</summary>
        NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE,
        ///<summary>
        ///The variant already exists.
        ///</summary>
        VARIANT_ALREADY_EXISTS,
        ///<summary>
        ///The price of the variant must be greater than or equal to zero.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///Variant options are not enough.
        ///</summary>
        NEED_TO_ADD_OPTION_VALUES,
        ///<summary>
        ///Variant options are more than the product options.
        ///</summary>
        OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS,
        ///<summary>
        ///You reached the limit of available SKUs in your current plan.
        ///</summary>
        SUBSCRIPTION_VIOLATION,
        ///<summary>
        ///Inventory quantities cannot be provided during update.
        ///</summary>
        NO_INVENTORY_QUANTITES_DURING_UPDATE,
        ///<summary>
        ///Price cannot take a negative value.
        ///</summary>
        NEGATIVE_PRICE_VALUE,
    }

    ///<summary>
    ///The set of valid sort keys for the ProfileItem query.
    ///</summary>
    public enum ProfileItemSortKeys
    {
        ///<summary>
        ///Sort by the `title` value.
        ///</summary>
        TITLE,
        ///<summary>
        ///Sort by the `product_type` value.
        ///</summary>
        PRODUCT_TYPE,
        ///<summary>
        ///Sort by the `vendor` value.
        ///</summary>
        VENDOR,
        ///<summary>
        ///Sort by the `inventory_total` value.
        ///</summary>
        INVENTORY_TOTAL,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `published_at` value.
        ///</summary>
        PUBLISHED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `pubSubServerPixelUpdate` mutation.
    ///</summary>
    public class PubSubServerPixelUpdatePayload : GraphQLObject<PubSubServerPixelUpdatePayload>
    {
        ///<summary>
        ///The server pixel as configured by the mutation.
        ///</summary>
        public ServerPixel? serverPixel { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ErrorsServerPixelUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `pubSubWebhookSubscriptionCreate` mutation.
    ///</summary>
    public class PubSubWebhookSubscriptionCreatePayload : GraphQLObject<PubSubWebhookSubscriptionCreatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PubSubWebhookSubscriptionCreateUserError>? userErrors { get; set; }
        ///<summary>
        ///The webhook subscription that was created.
        ///</summary>
        public WebhookSubscription? webhookSubscription { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`.
    ///</summary>
    public class PubSubWebhookSubscriptionCreateUserError : GraphQLObject<PubSubWebhookSubscriptionCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PubSubWebhookSubscriptionCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PubSubWebhookSubscriptionCreateUserError`.
    ///</summary>
    public enum PubSubWebhookSubscriptionCreateUserErrorCode
    {
        ///<summary>
        ///Invalid parameters provided.
        ///</summary>
        INVALID_PARAMETERS,
    }

    ///<summary>
    ///Return type for `pubSubWebhookSubscriptionUpdate` mutation.
    ///</summary>
    public class PubSubWebhookSubscriptionUpdatePayload : GraphQLObject<PubSubWebhookSubscriptionUpdatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PubSubWebhookSubscriptionUpdateUserError>? userErrors { get; set; }
        ///<summary>
        ///The webhook subscription that was updated.
        ///</summary>
        public WebhookSubscription? webhookSubscription { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`.
    ///</summary>
    public class PubSubWebhookSubscriptionUpdateUserError : GraphQLObject<PubSubWebhookSubscriptionUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PubSubWebhookSubscriptionUpdateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PubSubWebhookSubscriptionUpdateUserError`.
    ///</summary>
    public enum PubSubWebhookSubscriptionUpdateUserErrorCode
    {
        ///<summary>
        ///Invalid parameters provided.
        ///</summary>
        INVALID_PARAMETERS,
    }

    ///<summary>
    ///A publication is a group of products and collections that is published to an app.
    ///</summary>
    public class Publication : GraphQLObject<Publication>, INode
    {
        ///<summary>
        ///The app associated with the publication.
        ///</summary>
        [Obsolete("Use [AppCatalog.apps](https://shopify.dev/api/admin-graphql/unstable/objects/AppCatalog#connection-appcatalog-apps) instead.")]
        public App? app { get; set; }
        ///<summary>
        ///Whether new products are automatically published to this publication.
        ///</summary>
        public bool? autoPublish { get; set; }
        ///<summary>
        ///The catalog associated with the publication.
        ///</summary>
        public ICatalog? catalog { get; set; }
        ///<summary>
        ///The collection publications for the list of collections published to the publication.
        ///</summary>
        public ResourcePublicationConnection? collectionPublicationsV3 { get; set; }
        ///<summary>
        ///The list of collections published to the publication.
        ///</summary>
        public CollectionConnection? collections { get; set; }
        ///<summary>
        ///Whether the collection is available to the publication.
        ///</summary>
        public bool? hasCollection { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }

        ///<summary>
        ///Name of the publication.
        ///</summary>
        [Obsolete("Use [Catalog.title](https://shopify.dev/api/admin-graphql/unstable/interfaces/Catalog#field-catalog-title) instead.")]
        public string? name { get; set; }
        ///<summary>
        ///A background operation associated with this publication.
        ///</summary>
        public IPublicationOperation? operation { get; set; }
        ///<summary>
        ///The product publications for the list of products published to the publication.
        ///</summary>
        public ResourcePublicationConnection? productPublicationsV3 { get; set; }
        ///<summary>
        ///The list of products published to the publication.
        ///</summary>
        public ProductConnection? products { get; set; }
        ///<summary>
        ///Whether the publication supports future publishing.
        ///</summary>
        public bool? supportsFuturePublishing { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Publications.
    ///</summary>
    public class PublicationConnection : GraphQLObject<PublicationConnection>, IConnectionWithNodesAndEdges<PublicationEdge, Publication>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<PublicationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in PublicationEdge.
        ///</summary>
        public IEnumerable<Publication>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///The input fields for the possible values for the default state of a publication.
    ///</summary>
    public enum PublicationCreateInputPublicationDefaultState
    {
        ///<summary>
        ///The publication is empty.
        ///</summary>
        EMPTY,
        ///<summary>
        ///The publication is populated with all products.
        ///</summary>
        ALL_PRODUCTS,
    }

    ///<summary>
    ///Return type for `publicationCreate` mutation.
    ///</summary>
    public class PublicationCreatePayload : GraphQLObject<PublicationCreatePayload>
    {
        ///<summary>
        ///The publication that's been created.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PublicationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `publicationDelete` mutation.
    ///</summary>
    public class PublicationDeletePayload : GraphQLObject<PublicationDeletePayload>
    {
        ///<summary>
        ///The ID of the publication that was deleted.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PublicationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Publication and a cursor during pagination.
    ///</summary>
    public class PublicationEdge : GraphQLObject<PublicationEdge>, IEdge<Publication>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of PublicationEdge.
        ///</summary>
        public Publication? node { get; set; }
    }

    ///<summary>
    ///The possible types of publication operations.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AddAllProductsOperation), typeDiscriminator: "AddAllProductsOperation")]
    [JsonDerivedType(typeof(CatalogCsvOperation), typeDiscriminator: "CatalogCsvOperation")]
    [JsonDerivedType(typeof(PublicationResourceOperation), typeDiscriminator: "PublicationResourceOperation")]
    public interface IPublicationOperation : IGraphQLObject
    {
        public AddAllProductsOperation? AsAddAllProductsOperation() => this as AddAllProductsOperation;
        public CatalogCsvOperation? AsCatalogCsvOperation() => this as CatalogCsvOperation;
        public PublicationResourceOperation? AsPublicationResourceOperation() => this as PublicationResourceOperation;
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The count of processed rows, summing imported, failed, and skipped rows.
        ///</summary>
        public int? processedRowCount { get; set; }
        ///<summary>
        ///Represents a rows objects within this background operation.
        ///</summary>
        public RowCount? rowCount { get; set; }
        ///<summary>
        ///The status of this operation.
        ///</summary>
        public ResourceOperationStatus? status { get; set; }
    }

    ///<summary>
    ///A bulk update operation on a publication.
    ///</summary>
    public class PublicationResourceOperation : GraphQLObject<PublicationResourceOperation>, INode, IResourceOperation, IPublicationOperation
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The count of processed rows, summing imported, failed, and skipped rows.
        ///</summary>
        public int? processedRowCount { get; set; }
        ///<summary>
        ///Represents a rows objects within this background operation.
        ///</summary>
        public RowCount? rowCount { get; set; }
        ///<summary>
        ///The status of this operation.
        ///</summary>
        public ResourceOperationStatus? status { get; set; }
    }

    ///<summary>
    ///Return type for `publicationUpdate` mutation.
    ///</summary>
    public class PublicationUpdatePayload : GraphQLObject<PublicationUpdatePayload>
    {
        ///<summary>
        ///The publication that's been updated.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<PublicationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Defines errors encountered while managing a publication.
    ///</summary>
    public class PublicationUserError : GraphQLObject<PublicationUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public PublicationUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `PublicationUserError`.
    ///</summary>
    public enum PublicationUserErrorCode
    {
        ///<summary>
        ///Can't perform this action on a publication.
        ///</summary>
        UNSUPPORTED_PUBLICATION_ACTION,
        ///<summary>
        ///Publication not found.
        ///</summary>
        PUBLICATION_NOT_FOUND,
        ///<summary>
        ///The publication is currently being modified. Please try again later.
        ///</summary>
        PUBLICATION_LOCKED,
        ///<summary>
        ///A catalog publication can only contain products.
        ///</summary>
        UNSUPPORTED_PUBLISHABLE_TYPE,
        ///<summary>
        ///Publishable ID not found.
        ///</summary>
        INVALID_PUBLISHABLE_ID,
        ///<summary>
        ///Market does not exist.
        ///</summary>
        MARKET_NOT_FOUND,
        ///<summary>
        ///Catalog does not exist.
        ///</summary>
        CATALOG_NOT_FOUND,
        ///<summary>
        ///Can't modify a publication that belongs to an app catalog.
        ///</summary>
        CANNOT_MODIFY_APP_CATALOG_PUBLICATION,
        ///<summary>
        ///Can't modify a publication that belongs to a market catalog.
        ///</summary>
        CANNOT_MODIFY_MARKET_CATALOG_PUBLICATION,
        ///<summary>
        ///Cannot modify a catalog for an app.
        ///</summary>
        CANNOT_MODIFY_APP_CATALOG,
        ///<summary>
        ///Cannot modify a catalog for a market.
        ///</summary>
        CANNOT_MODIFY_MARKET_CATALOG,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///A product publication cannot be created because the catalog type associated with this publication does not permit publications of this product type.
        ///</summary>
        PRODUCT_TYPE_INCOMPATIBLE_WITH_CATALOG_TYPE,
        ///<summary>
        ///The limit for simultaneous publication updates has been exceeded.
        ///</summary>
        PUBLICATION_UPDATE_LIMIT_EXCEEDED,
    }

    ///<summary>
    ///Represents a resource that can be published to a channel.
    ///A publishable resource can be either a Product or Collection.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Collection), typeDiscriminator: "Collection")]
    [JsonDerivedType(typeof(Product), typeDiscriminator: "Product")]
    public interface IPublishable : IGraphQLObject
    {
        public Collection? AsCollection() => this as Collection;
        public Product? AsProduct() => this as Product;
        ///<summary>
        ///The number of publications a resource is published to without feedback errors.
        ///</summary>
        public int? availablePublicationCount { get; }
        ///<summary>
        ///The number of publications a resource is published on.
        ///</summary>
        public int? publicationCount { get; }

        ///<summary>
        ///Check to see whether the resource is published to a given channel.
        ///</summary>
        [Obsolete("Use `publishedOnPublication` instead.")]
        public bool? publishedOnChannel { get; }

        ///<summary>
        ///Check to see whether the resource is published to the calling app's channel.
        ///</summary>
        [Obsolete("Use `publishedOnCurrentPublication` instead.")]
        public bool? publishedOnCurrentChannel { get; }
        ///<summary>
        ///Check to see whether the resource is published to the calling app's publication.
        ///</summary>
        public bool? publishedOnCurrentPublication { get; }
        ///<summary>
        ///Check to see whether the resource is published to a given publication.
        ///</summary>
        public bool? publishedOnPublication { get; }
        ///<summary>
        ///The list of resources that are published to a publication.
        ///</summary>
        public ResourcePublicationConnection? resourcePublications { get; }
        ///<summary>
        ///The list of resources that are either published or staged to be published to a publication.
        ///</summary>
        public ResourcePublicationV2Connection? resourcePublicationsV2 { get; }

        ///<summary>
        ///The list of channels that the resource is not published to.
        ///</summary>
        [Obsolete("Use `unpublishedPublications` instead.")]
        public ChannelConnection? unpublishedChannels { get; }
        ///<summary>
        ///The list of publications that the resource is not published to.
        ///</summary>
        public PublicationConnection? unpublishedPublications { get; }
    }

    ///<summary>
    ///Return type for `publishablePublish` mutation.
    ///</summary>
    public class PublishablePublishPayload : GraphQLObject<PublishablePublishPayload>
    {
        ///<summary>
        ///Resource that has been published.
        ///</summary>
        public IPublishable? publishable { get; set; }
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `publishablePublishToCurrentChannel` mutation.
    ///</summary>
    public class PublishablePublishToCurrentChannelPayload : GraphQLObject<PublishablePublishToCurrentChannelPayload>
    {
        ///<summary>
        ///Resource that has been published.
        ///</summary>
        public IPublishable? publishable { get; set; }
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `publishableUnpublish` mutation.
    ///</summary>
    public class PublishableUnpublishPayload : GraphQLObject<PublishableUnpublishPayload>
    {
        ///<summary>
        ///Resource that has been unpublished.
        ///</summary>
        public IPublishable? publishable { get; set; }
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `publishableUnpublishToCurrentChannel` mutation.
    ///</summary>
    public class PublishableUnpublishToCurrentChannelPayload : GraphQLObject<PublishableUnpublishToCurrentChannelPayload>
    {
        ///<summary>
        ///Resource that has been unpublished.
        ///</summary>
        public IPublishable? publishable { get; set; }
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents information about the purchasing company for the order or draft order.
    ///</summary>
    public class PurchasingCompany : GraphQLObject<PurchasingCompany>, IPurchasingEntity
    {
        ///<summary>
        ///The company associated to the order or draft order.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///The company contact associated to the order or draft order.
        ///</summary>
        public CompanyContact? contact { get; set; }
        ///<summary>
        ///The company location associated to the order or draft order.
        ///</summary>
        public CompanyLocation? location { get; set; }
    }

    ///<summary>
    ///Represents information about the purchasing entity for the order or draft order.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(Customer), typeDiscriminator: "Customer")]
    [JsonDerivedType(typeof(PurchasingCompany), typeDiscriminator: "PurchasingCompany")]
    public interface IPurchasingEntity : IGraphQLObject
    {
        public Customer? AsCustomer() => this as Customer;
        public PurchasingCompany? AsPurchasingCompany() => this as PurchasingCompany;
    }

    ///<summary>
    ///Quantity price breaks lets you offer different rates that are based on the
    ///amount of a specific variant being ordered.
    ///</summary>
    public class QuantityPriceBreak : GraphQLObject<QuantityPriceBreak>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Minimum quantity required to reach new quantity break price.
        ///</summary>
        public int? minimumQuantity { get; set; }
        ///<summary>
        ///The price of variant after reaching the minimum quanity.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///The price list associated with this quantity break.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///The product variant associated with this quantity break.
        ///</summary>
        public ProductVariant? variant { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple QuantityPriceBreaks.
    ///</summary>
    public class QuantityPriceBreakConnection : GraphQLObject<QuantityPriceBreakConnection>, IConnectionWithNodesAndEdges<QuantityPriceBreakEdge, QuantityPriceBreak>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<QuantityPriceBreakEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in QuantityPriceBreakEdge.
        ///</summary>
        public IEnumerable<QuantityPriceBreak>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
        ///<summary>
        ///The total count of QuantityPriceBreaks.
        ///</summary>
        public ulong? totalCount { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination.
    ///</summary>
    public class QuantityPriceBreakEdge : GraphQLObject<QuantityPriceBreakEdge>, IEdge<QuantityPriceBreak>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of QuantityPriceBreakEdge.
        ///</summary>
        public QuantityPriceBreak? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the QuantityPriceBreak query.
    ///</summary>
    public enum QuantityPriceBreakSortKeys
    {
        ///<summary>
        ///Sort by the `minimum_quantity` value.
        ///</summary>
        MINIMUM_QUANTITY,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `quantityPricingByVariantUpdate` mutation.
    ///</summary>
    public class QuantityPricingByVariantUpdatePayload : GraphQLObject<QuantityPricingByVariantUpdatePayload>
    {
        ///<summary>
        ///The variants for which quantity pricing was created successfully in the price list.
        ///</summary>
        public IEnumerable<ProductVariant>? productVariants { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<QuantityPricingByVariantUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Error codes for failed volume pricing operations.
    ///</summary>
    public class QuantityPricingByVariantUserError : GraphQLObject<QuantityPricingByVariantUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public QuantityPricingByVariantUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `QuantityPricingByVariantUserError`.
    ///</summary>
    public enum QuantityPricingByVariantUserErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///Price List does not exist.
        ///</summary>
        PRICE_LIST_NOT_FOUND,
        ///<summary>
        ///Something went wrong when trying to update quantity pricing. Please try again later.
        ///</summary>
        GENERIC_ERROR,
        ///<summary>
        ///Invalid quantity price break.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_INVALID,
        ///<summary>
        ///Quantity price break's fixed price not found.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_PRICE_LIST_PRICE_NOT_FOUND,
        ///<summary>
        ///Exceeded the allowed number of quantity price breaks per variant.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_LIMIT_EXCEEDED,
        ///<summary>
        ///Price list and quantity price break currency mismatch.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_CURRENCY_MISMATCH,
        ///<summary>
        ///Failed to save quantity price break.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_FAILED_TO_SAVE,
        ///<summary>
        ///Quantity price break miniumum is less than the quantity rule minimum.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_MIN_LOWER_THAN_QUANTITY_RULES_MIN,
        ///<summary>
        ///Quantity price break miniumum is higher than the quantity rule maximum.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_MIN_HIGHER_THAN_QUANTITY_RULES_MAX,
        ///<summary>
        ///Quantity price break miniumum is not multiple of the quantity rule increment.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_MIN_NOT_A_MULTIPLE_OF_QUANTITY_RULES_INCREMENT,
        ///<summary>
        ///Quantity price break variant not found.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_VARIANT_NOT_FOUND,
        ///<summary>
        ///Quantity price breaks to add inputs must be unique by variant id and minimum quantity.
        ///</summary>
        QUANTITY_PRICE_BREAK_ADD_DUPLICATE_INPUT_FOR_VARIANT_AND_MIN,
        ///<summary>
        ///Quantity price break not found.
        ///</summary>
        QUANTITY_PRICE_BREAK_DELETE_NOT_FOUND,
        ///<summary>
        ///Failed to delete quantity price break.
        ///</summary>
        QUANTITY_PRICE_BREAK_DELETE_FAILED,
        ///<summary>
        ///Quantity rule variant not found.
        ///</summary>
        QUANTITY_RULE_ADD_VARIANT_NOT_FOUND,
        ///<summary>
        ///Quantity rule minimum is higher than the quantity price break minimum.
        ///</summary>
        QUANTITY_RULE_ADD_MIN_HIGHER_THAN_QUANTITY_PRICE_BREAK_MIN,
        ///<summary>
        ///Quantity rule maximum is less than the quantity price break minimum.
        ///</summary>
        QUANTITY_RULE_ADD_MAX_LOWER_THAN_QUANTITY_PRICE_BREAK_MIN,
        ///<summary>
        ///Quantity rule increment must be a multiple of the quantity price break minimum.
        ///</summary>
        QUANTITY_RULE_ADD_INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MIN,
        ///<summary>
        ///Quantity rule catalog context not supported.
        ///</summary>
        QUANTITY_RULE_ADD_CATALOG_CONTEXT_NOT_SUPPORTED,
        ///<summary>
        ///Quantity rule increment is greater than minimum.
        ///</summary>
        QUANTITY_RULE_ADD_INCREMENT_IS_GREATER_THAN_MINIMUM,
        ///<summary>
        ///Quantity rule minimum is not a multiple of increment.
        ///</summary>
        QUANTITY_RULE_ADD_MINIMUM_NOT_A_MULTIPLE_OF_INCREMENT,
        ///<summary>
        ///Quantity rule maximum is not a multiple of increment.
        ///</summary>
        QUANTITY_RULE_ADD_MAXIMUM_NOT_A_MULTIPLE_OF_INCREMENT,
        ///<summary>
        ///Quantity rule minimum is greater than maximum.
        ///</summary>
        QUANTITY_RULE_ADD_MINIMUM_GREATER_THAN_MAXIMUM,
        ///<summary>
        ///Quantity rule increment is less than one.
        ///</summary>
        QUANTITY_RULE_ADD_INCREMENT_IS_LESS_THAN_ONE,
        ///<summary>
        ///Quantity rule minimum is less than one.
        ///</summary>
        QUANTITY_RULE_ADD_MINIMUM_IS_LESS_THAN_ONE,
        ///<summary>
        ///Quantity rule maximum is less than one.
        ///</summary>
        QUANTITY_RULE_ADD_MAXIMUM_IS_LESS_THAN_ONE,
        ///<summary>
        ///Quantity rules to add inputs must be unique by variant id.
        ///</summary>
        QUANTITY_RULE_ADD_DUPLICATE_INPUT_FOR_VARIANT,
        ///<summary>
        ///Quantity rule not found.
        ///</summary>
        QUANTITY_RULE_DELETE_RULE_NOT_FOUND,
        ///<summary>
        ///Quantity rule variant not found.
        ///</summary>
        QUANTITY_RULE_DELETE_VARIANT_NOT_FOUND,
        ///<summary>
        ///Price list and fixed price currency mismatch.
        ///</summary>
        PRICE_ADD_CURRENCY_MISMATCH,
        ///<summary>
        ///Fixed price's variant not found.
        ///</summary>
        PRICE_ADD_VARIANT_NOT_FOUND,
        ///<summary>
        ///Prices to add inputs must be unique by variant id.
        ///</summary>
        PRICE_ADD_DUPLICATE_INPUT_FOR_VARIANT,
        ///<summary>
        ///Price is not fixed.
        ///</summary>
        PRICE_DELETE_PRICE_NOT_FIXED,
        ///<summary>
        ///Fixed price's variant not found.
        ///</summary>
        PRICE_DELETE_VARIANT_NOT_FOUND,
    }

    ///<summary>
    ///The quantity rule for the product variant in a given context.
    ///</summary>
    public class QuantityRule : GraphQLObject<QuantityRule>
    {
        ///<summary>
        ///The value that specifies the quantity increment between minimum and maximum of the rule.
        ///Only quantities divisible by this value will be considered valid.
        ///
        ///The increment must be lower than or equal to the minimum and the maximum, and both minimum and maximum
        ///must be divisible by this value.
        ///</summary>
        public int? increment { get; set; }
        ///<summary>
        ///Whether the quantity rule fields match one increment, one minimum and no maximum.
        ///</summary>
        public bool? isDefault { get; set; }
        ///<summary>
        ///An optional value that defines the highest allowed quantity purchased by the customer.
        ///If defined, maximum must be lower than or equal to the minimum and must be a multiple of the increment.
        ///</summary>
        public int? maximum { get; set; }
        ///<summary>
        ///The value that defines the lowest allowed quantity purchased by the customer.
        ///The minimum must be a multiple of the quantity rule's increment.
        ///</summary>
        public int? minimum { get; set; }
        ///<summary>
        ///Whether the values of the quantity rule were explicitly set.
        ///</summary>
        public QuantityRuleOriginType? originType { get; set; }
        ///<summary>
        ///The product variant for which the quantity rule is applied.
        ///</summary>
        public ProductVariant? productVariant { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple QuantityRules.
    ///</summary>
    public class QuantityRuleConnection : GraphQLObject<QuantityRuleConnection>, IConnectionWithNodesAndEdges<QuantityRuleEdge, QuantityRule>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<QuantityRuleEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in QuantityRuleEdge.
        ///</summary>
        public IEnumerable<QuantityRule>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
        ///<summary>
        ///The total count of QuantityRules.
        ///</summary>
        public ulong? totalCount { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one QuantityRule and a cursor during pagination.
    ///</summary>
    public class QuantityRuleEdge : GraphQLObject<QuantityRuleEdge>, IEdge<QuantityRule>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of QuantityRuleEdge.
        ///</summary>
        public QuantityRule? node { get; set; }
    }

    ///<summary>
    ///The origin of quantity rule on a price list.
    ///</summary>
    public enum QuantityRuleOriginType
    {
        ///<summary>
        ///Quantity rule is explicitly defined.
        ///</summary>
        FIXED,
        ///<summary>
        ///Quantity rule falls back to the relative rule.
        ///</summary>
        RELATIVE,
    }

    ///<summary>
    ///An error for a failed quantity rule operation.
    ///</summary>
    public class QuantityRuleUserError : GraphQLObject<QuantityRuleUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public QuantityRuleUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `QuantityRuleUserError`.
    ///</summary>
    public enum QuantityRuleUserErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///Product variant ID does not exist.
        ///</summary>
        PRODUCT_VARIANT_DOES_NOT_EXIST,
        ///<summary>
        ///Price list does not exist.
        ///</summary>
        PRICE_LIST_DOES_NOT_EXIST,
        ///<summary>
        ///Quantity rule for variant associated with the price list provided does not exist.
        ///</summary>
        VARIANT_QUANTITY_RULE_DOES_NOT_EXIST,
        ///<summary>
        ///Minimum must be lower than or equal to the maximum.
        ///</summary>
        MINIMUM_IS_GREATER_THAN_MAXIMUM,
        ///<summary>
        ///Minimum must be less than or equal to all quantity price break minimums associated with this variant in the specified price list.
        ///</summary>
        MINIMUM_IS_HIGHER_THAN_QUANTITY_PRICE_BREAK_MINIMUM,
        ///<summary>
        ///Maximum must be greater than or equal to all quantity price break minimums associated with this variant in the specified price list.
        ///</summary>
        MAXIMUM_IS_LOWER_THAN_QUANTITY_PRICE_BREAK_MINIMUM,
        ///<summary>
        ///Increment must be a multiple of all quantity price break minimums associated with this variant in the specified price list.
        ///</summary>
        INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MINIMUM,
        ///<summary>
        ///Increment must be lower than or equal to the minimum.
        ///</summary>
        INCREMENT_IS_GREATER_THAN_MINIMUM,
        ///<summary>
        ///Value must be greater than or equal to 1.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The maximum must be a multiple of the increment.
        ///</summary>
        MAXIMUM_NOT_MULTIPLE_OF_INCREMENT,
        ///<summary>
        ///The minimum must be a multiple of the increment.
        ///</summary>
        MINIMUM_NOT_MULTIPLE_OF_INCREMENT,
        ///<summary>
        ///Quantity rules can be associated only with company location catalogs.
        ///</summary>
        CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES,
        ///<summary>
        ///Quantity rule inputs must be unique by variant id.
        ///</summary>
        DUPLICATE_INPUT_FOR_VARIANT,
        ///<summary>
        ///Something went wrong when trying to save the quantity rule. Please try again later.
        ///</summary>
        GENERIC_ERROR,
    }

    ///<summary>
    ///Return type for `quantityRulesAdd` mutation.
    ///</summary>
    public class QuantityRulesAddPayload : GraphQLObject<QuantityRulesAddPayload>
    {
        ///<summary>
        ///The list of quantity rules that were added to or updated in the price list.
        ///</summary>
        public IEnumerable<QuantityRule>? quantityRules { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<QuantityRuleUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `quantityRulesDelete` mutation.
    ///</summary>
    public class QuantityRulesDeletePayload : GraphQLObject<QuantityRulesDeletePayload>
    {
        ///<summary>
        ///A list of product variant IDs whose quantity rules were removed from the price list.
        ///</summary>
        public IEnumerable<string>? deletedQuantityRulesVariantIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<QuantityRuleUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
    ///</summary>
    public class QueryRoot : GraphQLObject<QueryRoot>
    {
        ///<summary>
        ///Returns an abandonment by ID.
        ///</summary>
        public Abandonment? abandonment { get; set; }
        ///<summary>
        ///Returns an Abandonment by the Abandoned Checkout ID.
        ///</summary>
        public Abandonment? abandonmentByAbandonedCheckoutId { get; set; }
        ///<summary>
        ///Lookup an App by ID or return the currently authenticated App.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///Fetches app by handle.
        ///Returns null if the app doesn't exist.
        ///</summary>
        public App? appByHandle { get; set; }
        ///<summary>
        ///Fetches an app by its client ID.
        ///Returns null if the app doesn't exist.
        ///</summary>
        public App? appByKey { get; set; }
        ///<summary>
        ///An app discount type.
        ///</summary>
        public AppDiscountType? appDiscountType { get; set; }
        ///<summary>
        ///A list of app discount types installed by apps.
        ///</summary>
        public IEnumerable<AppDiscountType>? appDiscountTypes { get; set; }
        ///<summary>
        ///Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
        ///</summary>
        public AppInstallation? appInstallation { get; set; }
        ///<summary>
        ///A list of app installations. To use this query, you need to contact [Shopify Support](https://partners.shopify.com/current/support/) to grant your custom app the `read_apps` access scope. Public apps can't be granted this access scope.
        ///</summary>
        public AppInstallationConnection? appInstallations { get; set; }

        ///<summary>
        ///Returns an automatic discount resource by ID.
        ///</summary>
        [Obsolete("Use `automaticDiscountNode` instead.")]
        public IDiscountAutomatic? automaticDiscount { get; set; }
        ///<summary>
        ///Returns an automatic discount resource by ID.
        ///</summary>
        public DiscountAutomaticNode? automaticDiscountNode { get; set; }
        ///<summary>
        ///List of automatic discounts.
        ///</summary>
        public DiscountAutomaticNodeConnection? automaticDiscountNodes { get; set; }
        ///<summary>
        ///List of the shop's automatic discount saved searches.
        ///</summary>
        public SavedSearchConnection? automaticDiscountSavedSearches { get; set; }

        ///<summary>
        ///List of automatic discounts.
        ///</summary>
        [Obsolete("Use `automaticDiscountNodes` instead.")]
        public DiscountAutomaticConnection? automaticDiscounts { get; set; }
        ///<summary>
        ///Returns a list of activated carrier services and associated shop locations that support them.
        ///</summary>
        public IEnumerable<DeliveryCarrierServiceAndLocations>? availableCarrierServices { get; set; }
        ///<summary>
        ///A list of available locales.
        ///</summary>
        public IEnumerable<Locale>? availableLocales { get; set; }
        ///<summary>
        ///Returns a `DeliveryCarrierService` object by ID.
        ///</summary>
        public DeliveryCarrierService? carrierService { get; set; }
        ///<summary>
        ///List of Cart transform objects owned by the current API client.
        ///</summary>
        public CartTransformConnection? cartTransforms { get; set; }
        ///<summary>
        ///Returns a Catalog resource by ID.
        ///</summary>
        public ICatalog? catalog { get; set; }
        ///<summary>
        ///Returns the most recent catalog operations for the shop.
        ///</summary>
        public IEnumerable<IResourceOperation>? catalogOperations { get; set; }
        ///<summary>
        ///The catalogs belonging to the shop.
        ///</summary>
        public CatalogConnection? catalogs { get; set; }

        ///<summary>
        ///Lookup a channel by ID.
        ///</summary>
        [Obsolete("Use `publication` instead.")]
        public Channel? channel { get; set; }

        ///<summary>
        ///List of the active sales channels.
        ///</summary>
        [Obsolete("Use `publications` instead.")]
        public ChannelConnection? channels { get; set; }
        ///<summary>
        ///Returns the checkout branding settings for a checkout profile.
        ///</summary>
        public CheckoutBranding? checkoutBranding { get; set; }
        ///<summary>
        ///A checkout profile on a shop.
        ///</summary>
        public CheckoutProfile? checkoutProfile { get; set; }
        ///<summary>
        ///List of checkout profiles on a shop.
        ///</summary>
        public CheckoutProfileConnection? checkoutProfiles { get; set; }
        ///<summary>
        ///Returns a code discount resource by ID.
        ///</summary>
        public DiscountCodeNode? codeDiscountNode { get; set; }
        ///<summary>
        ///Returns a code discount identified by its discount code.
        ///</summary>
        public DiscountCodeNode? codeDiscountNodeByCode { get; set; }
        ///<summary>
        ///List of code discounts. Special fields for query params:
        /// * status: active, expired, scheduled
        /// * discount_type: bogo, fixed_amount, free_shipping, percentage.
        ///</summary>
        public DiscountCodeNodeConnection? codeDiscountNodes { get; set; }
        ///<summary>
        ///List of the shop's code discount saved searches.
        ///</summary>
        public SavedSearchConnection? codeDiscountSavedSearches { get; set; }
        ///<summary>
        ///Returns a Collection resource by ID.
        ///</summary>
        public Collection? collection { get; set; }
        ///<summary>
        ///Return a collection by its handle.
        ///</summary>
        public Collection? collectionByHandle { get; set; }
        ///<summary>
        ///Lists all rules that can be used to create smart collections.
        ///</summary>
        public IEnumerable<CollectionRuleConditions>? collectionRulesConditions { get; set; }
        ///<summary>
        ///Returns a list of the shop's collection saved searches.
        ///</summary>
        public SavedSearchConnection? collectionSavedSearches { get; set; }
        ///<summary>
        ///Returns a list of collections.
        ///</summary>
        public CollectionConnection? collections { get; set; }
        ///<summary>
        ///Returns the list of companies in the shop.
        ///</summary>
        public CompanyConnection? companies { get; set; }
        ///<summary>
        ///Returns a `Company` object by ID.
        ///</summary>
        public Company? company { get; set; }
        ///<summary>
        ///Returns a `CompanyContact` object by ID.
        ///</summary>
        public CompanyContact? companyContact { get; set; }
        ///<summary>
        ///Returns a `CompanyContactRole` object by ID.
        ///</summary>
        public CompanyContactRole? companyContactRole { get; set; }
        ///<summary>
        ///The number of companies for a shop.
        ///</summary>
        public int? companyCount { get; set; }
        ///<summary>
        ///Returns a `CompanyLocation` object by ID.
        ///</summary>
        public CompanyLocation? companyLocation { get; set; }
        ///<summary>
        ///Returns the list of company locations in the shop.
        ///</summary>
        public CompanyLocationConnection? companyLocations { get; set; }
        ///<summary>
        ///Return the AppInstallation for the currently authenticated App.
        ///</summary>
        public AppInstallation? currentAppInstallation { get; set; }
        ///<summary>
        ///Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.
        ///</summary>
        public BulkOperation? currentBulkOperation { get; set; }
        ///<summary>
        ///Returns a Customer resource by ID.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///Returns the status of a customer merge request job.
        ///</summary>
        public CustomerMergeRequest? customerMergeJobStatus { get; set; }
        ///<summary>
        ///Returns a preview of a customer merge request.
        ///</summary>
        public CustomerMergePreview? customerMergePreview { get; set; }
        ///<summary>
        ///Returns a CustomerPaymentMethod resource by its ID.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The list of members, such as customers, that's associated with an individual segment.
        ///</summary>
        public CustomerSegmentMemberConnection? customerSegmentMembers { get; set; }
        ///<summary>
        ///Returns a segment members query resource by ID.
        ///</summary>
        public CustomerSegmentMembersQuery? customerSegmentMembersQuery { get; set; }
        ///<summary>
        ///Whether a member, which is a customer, belongs to a segment.
        ///</summary>
        public SegmentMembershipResponse? customerSegmentMembership { get; set; }
        ///<summary>
        ///List of customers.
        ///</summary>
        public CustomerConnection? customers { get; set; }
        ///<summary>
        ///The paginated list of deletion events.
        ///</summary>
        public DeletionEventConnection? deletionEvents { get; set; }
        ///<summary>
        ///The delivery customization.
        ///</summary>
        public DeliveryCustomization? deliveryCustomization { get; set; }
        ///<summary>
        ///The delivery customizations.
        ///</summary>
        public DeliveryCustomizationConnection? deliveryCustomizations { get; set; }
        ///<summary>
        ///Returns a Delivery Profile resource by ID.
        ///</summary>
        public DeliveryProfile? deliveryProfile { get; set; }
        ///<summary>
        ///Returns a list of saved delivery profiles.
        ///</summary>
        public DeliveryProfileConnection? deliveryProfiles { get; set; }
        ///<summary>
        ///Returns the shop-wide shipping settings.
        ///</summary>
        public DeliverySetting? deliverySettings { get; set; }
        ///<summary>
        ///The total number of discount codes for the shop.
        ///</summary>
        public int? discountCodeCount { get; set; }
        ///<summary>
        ///Returns a discount resource by ID.
        ///</summary>
        public DiscountNode? discountNode { get; set; }
        ///<summary>
        ///List of discounts.
        ///</summary>
        public DiscountNodeConnection? discountNodes { get; set; }
        ///<summary>
        ///Returns a bulk code creation resource by ID.
        ///</summary>
        public DiscountRedeemCodeBulkCreation? discountRedeemCodeBulkCreation { get; set; }
        ///<summary>
        ///List of the shop's redeemed discount code saved searches.
        ///</summary>
        public SavedSearchConnection? discountRedeemCodeSavedSearches { get; set; }
        ///<summary>
        ///Returns dispute details based on ID.
        ///</summary>
        public ShopifyPaymentsDispute? dispute { get; set; }
        ///<summary>
        ///Returns dispute evidence details based on ID.
        ///</summary>
        public ShopifyPaymentsDisputeEvidence? disputeEvidence { get; set; }
        ///<summary>
        ///Lookup a Domain by ID.
        ///</summary>
        public Domain? domain { get; set; }
        ///<summary>
        ///Returns a DraftOrder resource by ID.
        ///</summary>
        public DraftOrder? draftOrder { get; set; }
        ///<summary>
        ///List of the shop's draft order saved searches.
        ///</summary>
        public SavedSearchConnection? draftOrderSavedSearches { get; set; }
        ///<summary>
        ///Returns a DraftOrderTag resource by ID.
        ///</summary>
        public DraftOrderTag? draftOrderTag { get; set; }
        ///<summary>
        ///List of saved draft orders.
        ///</summary>
        public DraftOrderConnection? draftOrders { get; set; }
        ///<summary>
        ///A list of the shop's file saved searches.
        ///</summary>
        public SavedSearchConnection? fileSavedSearches { get; set; }
        ///<summary>
        ///Returns a paginated list of files that have been uploaded to Shopify.
        ///</summary>
        public FileConnection? files { get; set; }
        ///<summary>
        ///Returns a Fulfillment resource by ID.
        ///</summary>
        public Fulfillment? fulfillment { get; set; }
        ///<summary>
        ///The fulfillment constraint rules that belong to a shop.
        ///</summary>
        public IEnumerable<FulfillmentConstraintRule>? fulfillmentConstraintRules { get; set; }
        ///<summary>
        ///Returns a Fulfillment order resource by ID.
        ///</summary>
        public FulfillmentOrder? fulfillmentOrder { get; set; }
        ///<summary>
        ///The paginated list of all fulfillment orders.
        ///The returned fulfillment orders are filtered according to the
        ///[fulfillment order access scopes](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder#api-access-scopes)
        ///granted to the app.
        ///
        ///Use this query to retrieve fulfillment orders assigned to merchant-managed locations,
        ///third-party fulfillment service locations, or all kinds of locations together.
        ///
        ///For fetching only the fulfillment orders assigned to the app's locations, use the
        ///[Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
        ///connection.
        ///</summary>
        public FulfillmentOrderConnection? fulfillmentOrders { get; set; }
        ///<summary>
        ///Returns a FulfillmentService resource by ID.
        ///</summary>
        public FulfillmentService? fulfillmentService { get; set; }
        ///<summary>
        ///Returns a gift card resource by ID.
        ///</summary>
        public GiftCard? giftCard { get; set; }
        ///<summary>
        ///Returns a list of gift cards.
        ///</summary>
        public GiftCardConnection? giftCards { get; set; }
        ///<summary>
        ///The total number of gift cards issued for the shop.
        ///</summary>
        public ulong? giftCardsCount { get; set; }
        ///<summary>
        ///Returns an
        ///[InventoryItem](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem)
        ///object by ID.
        ///</summary>
        public InventoryItem? inventoryItem { get; set; }
        ///<summary>
        ///Returns a list of inventory items.
        ///</summary>
        public InventoryItemConnection? inventoryItems { get; set; }
        ///<summary>
        ///Returns an
        ///[InventoryLevel](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryLevel)
        ///object by ID.
        ///</summary>
        public InventoryLevel? inventoryLevel { get; set; }
        ///<summary>
        ///General inventory properties for the shop.
        ///</summary>
        public InventoryProperties? inventoryProperties { get; set; }
        ///<summary>
        ///Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///Returns an inventory Location resource by ID.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///Returns a list of active inventory locations.
        ///</summary>
        public LocationConnection? locations { get; set; }

        ///<summary>
        ///Returns a list of all origin locations available for a delivery profile.
        ///</summary>
        [Obsolete("Use `locationsAvailableForDeliveryProfilesConnection` instead.")]
        public IEnumerable<Location>? locationsAvailableForDeliveryProfiles { get; set; }
        ///<summary>
        ///Returns a list of all origin locations available for a delivery profile.
        ///</summary>
        public LocationConnection? locationsAvailableForDeliveryProfilesConnection { get; set; }
        ///<summary>
        ///Returns a list of fulfillment orders that are on hold.
        ///</summary>
        public FulfillmentOrderConnection? manualHoldsFulfillmentOrders { get; set; }
        ///<summary>
        ///Returns a market resource by ID.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///Returns the applicable market for a customer based on where they are in the world.
        ///</summary>
        public Market? marketByGeography { get; set; }
        ///<summary>
        ///A resource that can have localized values for different markets.
        ///</summary>
        public MarketLocalizableResource? marketLocalizableResource { get; set; }
        ///<summary>
        ///Resources that can have localized values for different markets.
        ///</summary>
        public MarketLocalizableResourceConnection? marketLocalizableResources { get; set; }
        ///<summary>
        ///Resources that can have localized values for different markets.
        ///</summary>
        public MarketLocalizableResourceConnection? marketLocalizableResourcesByIds { get; set; }
        ///<summary>
        ///A list of marketing activities associated with the marketing app.
        ///</summary>
        public MarketingActivityConnection? marketingActivities { get; set; }
        ///<summary>
        ///Returns a MarketingActivity resource by ID.
        ///</summary>
        public MarketingActivity? marketingActivity { get; set; }
        ///<summary>
        ///Returns a MarketingEvent resource by ID.
        ///</summary>
        public MarketingEvent? marketingEvent { get; set; }
        ///<summary>
        ///A list of marketing events associated with the marketing app.
        ///</summary>
        public MarketingEventConnection? marketingEvents { get; set; }
        ///<summary>
        ///The markets configured for the shop.
        ///</summary>
        public MarketConnection? markets { get; set; }
        ///<summary>
        ///Returns a metafield definition by ID.
        ///</summary>
        public MetafieldDefinition? metafieldDefinition { get; set; }
        ///<summary>
        ///Each metafield definition has a type, which defines the type of information that it can store.
        ///This type is enforced across every instance of the resource that owns the metafield definition.
        ///
        ///Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
        ///</summary>
        public IEnumerable<MetafieldDefinitionType>? metafieldDefinitionTypes { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }

        ///<summary>
        ///List of the `MetafieldStorefrontVisibility` records.
        ///</summary>
        [Obsolete("This query will be removed in a future version. Use the `access.storefront` field for nodes inside the `metafieldDefinitions` query instead.")]
        public MetafieldStorefrontVisibilityConnection? metafieldStorefrontVisibilities { get; set; }

        ///<summary>
        ///Returns a `MetafieldStorefrontVisibility` record by ID. A `MetafieldStorefrontVisibility` record lists the
        ///metafields to make visible in the Storefront API.
        ///</summary>
        [Obsolete("This query will be removed in a future version. Use the `access.storefront` field inside the `metafieldDefinition` query instead.")]
        public MetafieldStorefrontVisibility? metafieldStorefrontVisibility { get; set; }
        ///<summary>
        ///Retrieves a metaobject by ID.
        ///</summary>
        public Metaobject? metaobject { get; set; }
        ///<summary>
        ///Retrieves a metaobject by handle.
        ///</summary>
        public Metaobject? metaobjectByHandle { get; set; }
        ///<summary>
        ///Retrieves a metaobject definition by ID.
        ///</summary>
        public MetaobjectDefinition? metaobjectDefinition { get; set; }
        ///<summary>
        ///Finds a metaobject definition by type.
        ///</summary>
        public MetaobjectDefinition? metaobjectDefinitionByType { get; set; }
        ///<summary>
        ///All metaobject definitions.
        ///</summary>
        public MetaobjectDefinitionConnection? metaobjectDefinitions { get; set; }
        ///<summary>
        ///All metaobjects for the shop.
        ///</summary>
        public MetaobjectConnection? metaobjects { get; set; }
        ///<summary>
        ///Returns a specific node (any object that implements the
        ///[Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
        ///interface) by ID, in accordance with the
        ///[Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
        ///This field is commonly used for refetching an object.
        ///</summary>
        public INode? node { get; set; }
        ///<summary>
        ///Returns the list of nodes (any objects that implement the
        ///[Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
        ///interface) with the given IDs, in accordance with the
        ///[Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
        ///</summary>
        public IEnumerable<INode>? nodes { get; set; }
        ///<summary>
        ///Returns an Order resource by ID.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///Returns a payment status by payment reference ID. Used to check the status of a deferred payment.
        ///</summary>
        public OrderPaymentStatus? orderPaymentStatus { get; set; }
        ///<summary>
        ///List of the shop's order saved searches.
        ///</summary>
        public SavedSearchConnection? orderSavedSearches { get; set; }
        ///<summary>
        ///Returns a list of orders placed.
        ///</summary>
        public OrderConnection? orders { get; set; }
        ///<summary>
        ///The payment customization.
        ///</summary>
        public PaymentCustomization? paymentCustomization { get; set; }
        ///<summary>
        ///The payment customizations.
        ///</summary>
        public PaymentCustomizationConnection? paymentCustomizations { get; set; }
        ///<summary>
        ///The list of payment terms templates eligible for all shops and users.
        ///</summary>
        public IEnumerable<PaymentTermsTemplate>? paymentTermsTemplates { get; set; }
        ///<summary>
        ///Returns a price list resource by ID.
        ///</summary>
        public PriceList? priceList { get; set; }
        ///<summary>
        ///All price lists for a shop.
        ///</summary>
        public PriceListConnection? priceLists { get; set; }

        ///<summary>
        ///Returns a code price rule resource by ID.
        ///</summary>
        [Obsolete("Use `codeDiscountNode` instead.")]
        public PriceRule? priceRule { get; set; }
        ///<summary>
        ///List of the shop's price rule saved searches.
        ///</summary>
        public SavedSearchConnection? priceRuleSavedSearches { get; set; }

        ///<summary>
        ///Returns a list of price rule resources that have at least one associated discount code.
        ///</summary>
        [Obsolete("Use `codeDiscountNodes` instead.")]
        public PriceRuleConnection? priceRules { get; set; }
        ///<summary>
        ///The primary market of the shop.
        ///</summary>
        public Market? primaryMarket { get; set; }

        ///<summary>
        ///Returns a private metafield by ID.
        ///Private metafields are accessible only by the application that created them.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///Returns a list of private metafields associated to a resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///Returns a Product resource by ID.
        ///</summary>
        public Product? product { get; set; }
        ///<summary>
        ///Return a product by its handle.
        ///</summary>
        public Product? productByHandle { get; set; }
        ///<summary>
        ///Returns the product duplicate job.
        ///</summary>
        public ProductDuplicateJob? productDuplicateJob { get; set; }
        ///<summary>
        ///Returns a ProductFeed resource by ID.
        ///</summary>
        public ProductFeed? productFeed { get; set; }
        ///<summary>
        ///The product feeds for the shop.
        ///</summary>
        public ProductFeedConnection? productFeeds { get; set; }
        ///<summary>
        ///Returns the product resource feedback for the currently authenticated app.
        ///</summary>
        public ProductResourceFeedback? productResourceFeedback { get; set; }
        ///<summary>
        ///Returns a list of the shop's product saved searches.
        ///</summary>
        public SavedSearchConnection? productSavedSearches { get; set; }
        ///<summary>
        ///Returns a ProductVariant resource by ID.
        ///</summary>
        public ProductVariant? productVariant { get; set; }
        ///<summary>
        ///List of the product variants.
        ///</summary>
        public ProductVariantConnection? productVariants { get; set; }
        ///<summary>
        ///List of products.
        ///</summary>
        public ProductConnection? products { get; set; }
        ///<summary>
        ///The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.
        ///</summary>
        public IEnumerable<ApiVersion>? publicApiVersions { get; set; }
        ///<summary>
        ///Lookup a publication by ID.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///List of publications.
        ///</summary>
        public PublicationConnection? publications { get; set; }
        ///<summary>
        ///Returns a Refund resource by ID.
        ///</summary>
        public Refund? refund { get; set; }
        ///<summary>
        ///Returns a Return resource by ID.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///Lookup a returnable fulfillment by ID.
        ///</summary>
        public ReturnableFulfillment? returnableFulfillment { get; set; }
        ///<summary>
        ///List of returnable fulfillments.
        ///</summary>
        public ReturnableFulfillmentConnection? returnableFulfillments { get; set; }
        ///<summary>
        ///Lookup a reverse delivery by ID.
        ///</summary>
        public ReverseDelivery? reverseDelivery { get; set; }
        ///<summary>
        ///Lookup a reverse fulfillment order by ID.
        ///</summary>
        public ReverseFulfillmentOrder? reverseFulfillmentOrder { get; set; }
        ///<summary>
        ///<div class="note"><h4>Theme app extensions</h4>
        ///  <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
        ///
        ///<div class="note"><h4>Script tag deprecation</h4>
        ///  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
        ///
        ///
        ///Lookup a script tag resource by ID.
        ///</summary>
        public ScriptTag? scriptTag { get; set; }
        ///<summary>
        ///<div class="note"><h4>Theme app extensions</h4>
        ///  <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
        ///
        ///<div class="note"><h4>Script tag deprecation</h4>
        ///  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
        ///
        ///
        ///A list of script tags.
        ///</summary>
        public ScriptTagConnection? scriptTags { get; set; }
        ///<summary>
        ///The Customer Segment.
        ///</summary>
        public Segment? segment { get; set; }
        ///<summary>
        ///The number of segments for a shop.
        ///</summary>
        public int? segmentCount { get; set; }
        ///<summary>
        ///A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.
        ///</summary>
        public SegmentFilterConnection? segmentFilterSuggestions { get; set; }
        ///<summary>
        ///A list of filters.
        ///</summary>
        public SegmentFilterConnection? segmentFilters { get; set; }
        ///<summary>
        ///A list of a shop's segment migrations.
        ///</summary>
        public SegmentMigrationConnection? segmentMigrations { get; set; }
        ///<summary>
        ///The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria.
        ///</summary>
        public SegmentValueConnection? segmentValueSuggestions { get; set; }
        ///<summary>
        ///A list of a shop's segments.
        ///</summary>
        public SegmentConnection? segments { get; set; }
        ///<summary>
        ///Returns a Selling Plan Group resource by ID.
        ///</summary>
        public SellingPlanGroup? sellingPlanGroup { get; set; }
        ///<summary>
        ///List Selling Plan Groups.
        ///</summary>
        public SellingPlanGroupConnection? sellingPlanGroups { get; set; }
        ///<summary>
        ///The server pixel configured by the app.
        ///</summary>
        public ServerPixel? serverPixel { get; set; }
        ///<summary>
        ///Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
        ///business and store management settings for the shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The shop's billing preferences.
        ///</summary>
        public ShopBillingPreferences? shopBillingPreferences { get; set; }
        ///<summary>
        ///A list of locales available on a shop.
        ///</summary>
        public IEnumerable<ShopLocale>? shopLocales { get; set; }
        ///<summary>
        ///The Shopify Function.
        ///</summary>
        public ShopifyFunction? shopifyFunction { get; set; }
        ///<summary>
        ///Returns the Shopify Functions for apps installed on the shop.
        ///</summary>
        public ShopifyFunctionConnection? shopifyFunctions { get; set; }
        ///<summary>
        ///Shopify Payments account information, including balances and payouts.
        ///</summary>
        public ShopifyPaymentsAccount? shopifyPaymentsAccount { get; set; }
        ///<summary>
        ///Returns the results of a ShopifyQL query. Refer to the [ShopifyQL documentation](https://shopify.dev/api/shopifyql) for more information.
        ///</summary>
        public IShopifyqlResponse? shopifyqlQuery { get; set; }
        ///<summary>
        ///The StaffMember resource, by ID.
        ///</summary>
        public StaffMember? staffMember { get; set; }
        ///<summary>
        ///Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.
        ///
        ///Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
        ///</summary>
        public StandardMetafieldDefinitionTemplateConnection? standardMetafieldDefinitionTemplates { get; set; }
        ///<summary>
        ///Returns a SubscriptionBillingAttempt by ID.
        ///</summary>
        public SubscriptionBillingAttempt? subscriptionBillingAttempt { get; set; }
        ///<summary>
        ///Returns subscription billing attempts on a store.
        ///</summary>
        public SubscriptionBillingAttemptConnection? subscriptionBillingAttempts { get; set; }
        ///<summary>
        ///Returns a subscription billing cycle found either by cycle index or date.
        ///</summary>
        public SubscriptionBillingCycle? subscriptionBillingCycle { get; set; }
        ///<summary>
        ///Returns subscription billing cycles for a contract ID.
        ///</summary>
        public SubscriptionBillingCycleConnection? subscriptionBillingCycles { get; set; }
        ///<summary>
        ///Returns a Subscription Contract resource by ID.
        ///</summary>
        public SubscriptionContract? subscriptionContract { get; set; }
        ///<summary>
        ///List Subscription Contracts.
        ///</summary>
        public SubscriptionContractConnection? subscriptionContracts { get; set; }
        ///<summary>
        ///Returns a Subscription Draft resource by ID.
        ///</summary>
        public SubscriptionDraft? subscriptionDraft { get; set; }
        ///<summary>
        ///Returns a list of TenderTransactions associated with the shop.
        ///</summary>
        public TenderTransactionConnection? tenderTransactions { get; set; }
        ///<summary>
        ///A resource that can have localized values for different languages.
        ///</summary>
        public TranslatableResource? translatableResource { get; set; }
        ///<summary>
        ///Resources that can have localized values for different languages.
        ///</summary>
        public TranslatableResourceConnection? translatableResources { get; set; }
        ///<summary>
        ///Resources that can have localized values for different languages.
        ///</summary>
        public TranslatableResourceConnection? translatableResourcesByIds { get; set; }
        ///<summary>
        ///Returns a redirect resource by ID.
        ///</summary>
        public UrlRedirect? urlRedirect { get; set; }
        ///<summary>
        ///Returns a redirect import resource by ID.
        ///</summary>
        public UrlRedirectImport? urlRedirectImport { get; set; }
        ///<summary>
        ///A list of the shop's URL redirect saved searches.
        ///</summary>
        public SavedSearchConnection? urlRedirectSavedSearches { get; set; }
        ///<summary>
        ///A list of redirects for a shop.
        ///</summary>
        public UrlRedirectConnection? urlRedirects { get; set; }
        ///<summary>
        ///Validation available on the shop.
        ///</summary>
        public Validation? validation { get; set; }
        ///<summary>
        ///Validations available on the shop.
        ///</summary>
        public ValidationConnection? validations { get; set; }
        ///<summary>
        ///The web pixel configured by the app.
        ///</summary>
        public WebPixel? webPixel { get; set; }
        ///<summary>
        ///Returns a webhook subscription by ID.
        ///</summary>
        public WebhookSubscription? webhookSubscription { get; set; }
        ///<summary>
        ///Returns a list of webhook subscriptions.
        ///</summary>
        public WebhookSubscriptionConnection? webhookSubscriptions { get; set; }
    }

    ///<summary>
    ///The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
    ///</summary>
    public class Refund : GraphQLObject<Refund>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The date and time when the refund was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A list of the refunded duties as part of this refund.
        ///</summary>
        public IEnumerable<RefundDuty>? duties { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The optional note associated with the refund.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The order associated with the refund.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The `RefundLineItem` resources attached to the refund.
        ///</summary>
        public RefundLineItemConnection? refundLineItems { get; set; }
        ///<summary>
        ///The return associated with the refund.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///The staff member who created the refund.
        ///</summary>
        public StaffMember? staffMember { get; set; }

        ///<summary>
        ///The total amount across all transactions for the refund.
        ///</summary>
        [Obsolete("Use `totalRefundedSet` instead.")]
        public MoneyV2? totalRefunded { get; set; }
        ///<summary>
        ///The total amount across all transactions for the refund, in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalRefundedSet { get; set; }
        ///<summary>
        ///The transactions associated with the refund.
        ///</summary>
        public OrderTransactionConnection? transactions { get; set; }
        ///<summary>
        ///The date and time when the refund was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An agreement between the merchant and customer to refund all or a portion of the order.
    ///</summary>
    public class RefundAgreement : GraphQLObject<RefundAgreement>, ISalesAgreement
    {
        ///<summary>
        ///The application that created the agreement.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The date and time at which the agreement occured.
        ///</summary>
        public DateTime? happenedAt { get; set; }
        ///<summary>
        ///The unique ID for the agreement.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The reason the agremeent was created.
        ///</summary>
        public OrderActionType? reason { get; set; }
        ///<summary>
        ///The refund associated with the agreement.
        ///</summary>
        public Refund? refund { get; set; }
        ///<summary>
        ///The sales associated with the agreement.
        ///</summary>
        public SaleConnection? sales { get; set; }
        ///<summary>
        ///The staff member associated with the agreement.
        ///</summary>
        public StaffMember? user { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Refunds.
    ///</summary>
    public class RefundConnection : GraphQLObject<RefundConnection>, IConnectionWithNodesAndEdges<RefundEdge, Refund>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<RefundEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in RefundEdge.
        ///</summary>
        public IEnumerable<Refund>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `refundCreate` mutation.
    ///</summary>
    public class RefundCreatePayload : GraphQLObject<RefundCreatePayload>
    {
        ///<summary>
        ///The order associated with the created refund.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The created refund.
        ///</summary>
        public Refund? refund { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a refunded duty.
    ///</summary>
    public class RefundDuty : GraphQLObject<RefundDuty>
    {
        ///<summary>
        ///The amount of a refunded duty in shop and presentment currencies.
        ///</summary>
        public MoneyBag? amountSet { get; set; }
        ///<summary>
        ///The duty associated with this refunded duty.
        ///</summary>
        public Duty? originalDuty { get; set; }
    }

    ///<summary>
    ///The type of refund to perform for a particular refund duty.
    ///</summary>
    public enum RefundDutyRefundType
    {
        ///<summary>
        ///The duty is proportionally refunded based on the quantity of the refunded line item.
        ///</summary>
        PROPORTIONAL,
        ///<summary>
        ///The duty is fully refunded.
        ///</summary>
        FULL,
    }

    ///<summary>
    ///An auto-generated type which holds one Refund and a cursor during pagination.
    ///</summary>
    public class RefundEdge : GraphQLObject<RefundEdge>, IEdge<Refund>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of RefundEdge.
        ///</summary>
        public Refund? node { get; set; }
    }

    ///<summary>
    ///A line item that's included in a refund.
    ///</summary>
    public class RefundLineItem : GraphQLObject<RefundLineItem>
    {
        ///<summary>
        ///The `LineItem` resource associated to the refunded line item.
        ///</summary>
        public LineItem? lineItem { get; set; }
        ///<summary>
        ///The inventory restock location.
        ///</summary>
        public Location? location { get; set; }

        ///<summary>
        ///The price of a refunded line item.
        ///</summary>
        [Obsolete("Use `priceSet` instead.")]
        public decimal? price { get; set; }
        ///<summary>
        ///The price of a refunded line item in shop and presentment currencies.
        ///</summary>
        public MoneyBag? priceSet { get; set; }
        ///<summary>
        ///The quantity of a refunded line item.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The type of restock for the refunded line item.
        ///</summary>
        public RefundLineItemRestockType? restockType { get; set; }
        ///<summary>
        ///Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
        ///</summary>
        public bool? restocked { get; set; }

        ///<summary>
        ///The subtotal price of a refunded line item.
        ///</summary>
        [Obsolete("Use `subtotalSet` instead.")]
        public decimal? subtotal { get; set; }
        ///<summary>
        ///The subtotal price of a refunded line item in shop and presentment currencies.
        ///</summary>
        public MoneyBag? subtotalSet { get; set; }

        ///<summary>
        ///The total tax charged on a refunded line item.
        ///</summary>
        [Obsolete("Use `totalTaxSet` instead.")]
        public decimal? totalTax { get; set; }
        ///<summary>
        ///The total tax charged on a refunded line item in shop and presentment currencies.
        ///</summary>
        public MoneyBag? totalTaxSet { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple RefundLineItems.
    ///</summary>
    public class RefundLineItemConnection : GraphQLObject<RefundLineItemConnection>, IConnectionWithNodesAndEdges<RefundLineItemEdge, RefundLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<RefundLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in RefundLineItemEdge.
        ///</summary>
        public IEnumerable<RefundLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one RefundLineItem and a cursor during pagination.
    ///</summary>
    public class RefundLineItemEdge : GraphQLObject<RefundLineItemEdge>, IEdge<RefundLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of RefundLineItemEdge.
        ///</summary>
        public RefundLineItem? node { get; set; }
    }

    ///<summary>
    ///The type of restock performed for a particular refund line item.
    ///</summary>
    public enum RefundLineItemRestockType
    {
        ///<summary>
        ///The refund line item was returned. Use this when restocking line items that were fulfilled.
        ///</summary>
        RETURN,
        ///<summary>
        ///The refund line item was canceled. Use this when restocking unfulfilled line items.
        ///</summary>
        CANCEL,
        ///<summary>
        ///Deprecated. The refund line item was restocked, without specifically beingidentified as a return or cancelation. This value is not accepted when creating new refunds.
        ///</summary>
        LEGACY_RESTOCK,
        ///<summary>
        ///Refund line item was not restocked.
        ///</summary>
        NO_RESTOCK,
    }

    ///<summary>
    ///An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
    ///They can optionally have a specific icon and be dismissed by merchants.
    ///</summary>
    public class ResourceAlert : GraphQLObject<ResourceAlert>
    {
        ///<summary>
        ///Buttons in the alert that link to related information.
        ///For example, _Edit variants_.
        ///</summary>
        public IEnumerable<ResourceAlertAction>? actions { get; set; }
        ///<summary>
        ///The secondary text in the alert that includes further information or instructions about how to solve a problem.
        ///</summary>
        public string? content { get; set; }
        ///<summary>
        ///Unique identifier that appears when an alert is manually closed by the merchant.
        ///Most alerts can't be manually closed.
        ///</summary>
        public string? dismissibleHandle { get; set; }
        ///<summary>
        ///An icon that's optionally displayed with the alert.
        ///</summary>
        public ResourceAlertIcon? icon { get; set; }
        ///<summary>
        ///Indication of how important the alert is.
        ///</summary>
        public ResourceAlertSeverity? severity { get; set; }
        ///<summary>
        ///The primary text in the alert that includes information or describes the problem.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///An action associated to a resource alert, such as editing variants.
    ///</summary>
    public class ResourceAlertAction : GraphQLObject<ResourceAlertAction>
    {
        ///<summary>
        ///Whether the action appears as a button or as a link.
        ///</summary>
        public bool? primary { get; set; }
        ///<summary>
        ///Resource for the action to show.
        ///</summary>
        public string? show { get; set; }
        ///<summary>
        ///The text for the button in the alert. For example, _Edit variants_.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The target URL that the button links to.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The available icons for resource alerts.
    ///</summary>
    public enum ResourceAlertIcon
    {
        ///<summary>
        ///A checkmark inside a circle.
        ///</summary>
        CHECKMARK_CIRCLE,
        ///<summary>
        ///A lowercase `i` inside a circle.
        ///</summary>
        INFORMATION_CIRCLE,
    }

    ///<summary>
    ///The possible severity levels for a resource alert.
    ///</summary>
    public enum ResourceAlertSeverity
    {
        ///<summary>
        ///Indicates a neutral alert. For example, an accepted dispute.
        ///</summary>
        DEFAULT,
        ///<summary>
        ///Indicates an informative alert. For example, an escalated dispute.
        ///</summary>
        INFO,
        ///<summary>
        ///Indicates an informative alert. For example, a new dispute.
        ///</summary>
        WARNING,
        ///<summary>
        ///Indicates a success alert. For example, a winning a dispute.
        ///</summary>
        SUCCESS,
        ///<summary>
        ///Indicates a critical alert. For example, a blocked app.
        ///</summary>
        CRITICAL,
        [Obsolete("`ERROR` severity is being deprecated in favour of `WARNING` or `CRITICAL` instead.")]
        ERROR,
    }

    ///<summary>
    ///Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
    ///</summary>
    public class ResourceFeedback : GraphQLObject<ResourceFeedback>
    {
        ///<summary>
        ///Feedback from an app about the steps a merchant needs to take to set up the app on their store.
        ///</summary>
        [Obsolete("Use `details` instead.")]
        public IEnumerable<AppFeedback>? appFeedback { get; set; }
        ///<summary>
        ///List of AppFeedback detailing issues regarding a resource.
        ///</summary>
        public IEnumerable<AppFeedback>? details { get; set; }
        ///<summary>
        ///Summary of resource feedback pertaining to the resource.
        ///</summary>
        public string? summary { get; set; }
    }

    ///<summary>
    ///The state of the resource feedback.
    ///</summary>
    public enum ResourceFeedbackState
    {
        ///<summary>
        ///No action required from merchant.
        ///</summary>
        ACCEPTED,
        ///<summary>
        ///The merchant needs to resolve an issue with the resource.
        ///</summary>
        REQUIRES_ACTION,
    }

    ///<summary>
    ///Represents a merchandising background operation interface.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AddAllProductsOperation), typeDiscriminator: "AddAllProductsOperation")]
    [JsonDerivedType(typeof(CatalogCsvOperation), typeDiscriminator: "CatalogCsvOperation")]
    [JsonDerivedType(typeof(PublicationResourceOperation), typeDiscriminator: "PublicationResourceOperation")]
    public interface IResourceOperation : IGraphQLObject
    {
        public AddAllProductsOperation? AsAddAllProductsOperation() => this as AddAllProductsOperation;
        public CatalogCsvOperation? AsCatalogCsvOperation() => this as CatalogCsvOperation;
        public PublicationResourceOperation? AsPublicationResourceOperation() => this as PublicationResourceOperation;
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; }
        ///<summary>
        ///The count of processed rows, summing imported, failed, and skipped rows.
        ///</summary>
        public int? processedRowCount { get; }
        ///<summary>
        ///Represents a rows objects within this background operation.
        ///</summary>
        public RowCount? rowCount { get; }
        ///<summary>
        ///The status of this operation.
        ///</summary>
        public ResourceOperationStatus? status { get; }
    }

    ///<summary>
    ///Represents the state of this catalog operation.
    ///</summary>
    public enum ResourceOperationStatus
    {
        ///<summary>
        ///Operation has been created.
        ///</summary>
        CREATED,
        ///<summary>
        ///Operation is currently running.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///Operation is complete.
        ///</summary>
        COMPLETE,
    }

    ///<summary>
    ///A resource publication represents information about the publication of a resource.
    ///An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.
    ///
    ///See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
    ///</summary>
    public class ResourcePublication : GraphQLObject<ResourcePublication>
    {
        ///<summary>
        ///The channel the resource publication is published to.
        ///</summary>
        [Obsolete("Use `publication` instead.")]
        public Channel? channel { get; set; }
        ///<summary>
        ///Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
        ///If false, then the resource publication is neither published nor scheduled to be published.
        ///</summary>
        public bool? isPublished { get; set; }
        ///<summary>
        ///The publication the resource publication is published to.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The date that the resource publication was or is going to be published to the publication.
        ///If the product isn't published, then this field returns an epoch timestamp.
        ///</summary>
        public DateTime? publishDate { get; set; }
        ///<summary>
        ///The resource published to the publication.
        ///</summary>
        public IPublishable? publishable { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ResourcePublications.
    ///</summary>
    public class ResourcePublicationConnection : GraphQLObject<ResourcePublicationConnection>, IConnectionWithNodesAndEdges<ResourcePublicationEdge, ResourcePublication>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ResourcePublicationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ResourcePublicationEdge.
        ///</summary>
        public IEnumerable<ResourcePublication>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ResourcePublication and a cursor during pagination.
    ///</summary>
    public class ResourcePublicationEdge : GraphQLObject<ResourcePublicationEdge>, IEdge<ResourcePublication>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ResourcePublicationEdge.
        ///</summary>
        public ResourcePublication? node { get; set; }
    }

    ///<summary>
    ///A resource publication represents information about the publication of a resource.
    ///Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be unpublished. It must either be published or scheduled to be published.
    ///
    ///See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
    ///</summary>
    public class ResourcePublicationV2 : GraphQLObject<ResourcePublicationV2>
    {
        ///<summary>
        ///Whether the resource publication is published. If true, then the resource publication is published to the publication.
        ///If false, then the resource publication is staged to be published to the publication.
        ///</summary>
        public bool? isPublished { get; set; }
        ///<summary>
        ///The publication the resource publication is published to.
        ///</summary>
        public Publication? publication { get; set; }
        ///<summary>
        ///The date that the resource publication was or is going to be published to the publication.
        ///</summary>
        public DateTime? publishDate { get; set; }
        ///<summary>
        ///The resource published to the publication.
        ///</summary>
        public IPublishable? publishable { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ResourcePublicationV2s.
    ///</summary>
    public class ResourcePublicationV2Connection : GraphQLObject<ResourcePublicationV2Connection>, IConnectionWithNodesAndEdges<ResourcePublicationV2Edge, ResourcePublicationV2>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ResourcePublicationV2Edge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ResourcePublicationV2Edge.
        ///</summary>
        public IEnumerable<ResourcePublicationV2>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
    ///</summary>
    public class ResourcePublicationV2Edge : GraphQLObject<ResourcePublicationV2Edge>, IEdge<ResourcePublicationV2>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ResourcePublicationV2Edge.
        ///</summary>
        public ResourcePublicationV2? node { get; set; }
    }

    ///<summary>
    ///Represents a return.
    ///</summary>
    public class Return : GraphQLObject<Return>, INode
    {
        ///<summary>
        ///Additional information about the declined return.
        ///</summary>
        public ReturnDecline? decline { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the return.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The order that the return belongs to.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The list of refunds associated with the return.
        ///</summary>
        public RefundConnection? refunds { get; set; }
        ///<summary>
        ///The return line items attached to the return.
        ///</summary>
        public ReturnLineItemConnection? returnLineItems { get; set; }
        ///<summary>
        ///The list of reverse fulfillment orders for the return.
        ///</summary>
        public ReverseFulfillmentOrderConnection? reverseFulfillmentOrders { get; set; }
        ///<summary>
        ///The status of the return.
        ///</summary>
        public ReturnStatus? status { get; set; }
        ///<summary>
        ///A suggested refund for the return.
        ///</summary>
        public SuggestedReturnRefund? suggestedRefund { get; set; }
        ///<summary>
        ///The sum of all return line item quantities for the return.
        ///</summary>
        public int? totalQuantity { get; set; }
    }

    ///<summary>
    ///Return type for `returnApproveRequest` mutation.
    ///</summary>
    public class ReturnApproveRequestPayload : GraphQLObject<ReturnApproveRequestPayload>
    {
        ///<summary>
        ///The approved return.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `returnCancel` mutation.
    ///</summary>
    public class ReturnCancelPayload : GraphQLObject<ReturnCancelPayload>
    {
        ///<summary>
        ///The canceled return.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `returnClose` mutation.
    ///</summary>
    public class ReturnClosePayload : GraphQLObject<ReturnClosePayload>
    {
        ///<summary>
        ///The closed return.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Returns.
    ///</summary>
    public class ReturnConnection : GraphQLObject<ReturnConnection>, IConnectionWithNodesAndEdges<ReturnEdge, Return>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ReturnEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ReturnEdge.
        ///</summary>
        public IEnumerable<Return>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `returnCreate` mutation.
    ///</summary>
    public class ReturnCreatePayload : GraphQLObject<ReturnCreatePayload>
    {
        ///<summary>
        ///The created return.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Additional information about why a merchant declined the customer's return request.
    ///</summary>
    public class ReturnDecline : GraphQLObject<ReturnDecline>
    {
        ///<summary>
        ///The notification message sent to the customer about their declined return request.
        ///Maximum length: 500 characters.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The reason the customer's return request was declined.
        ///</summary>
        public ReturnDeclineReason? reason { get; set; }
    }

    ///<summary>
    ///The reason why the merchant declined a customer's return request.
    ///</summary>
    public enum ReturnDeclineReason
    {
        ///<summary>
        ///The return period has ended.
        ///</summary>
        RETURN_PERIOD_ENDED,
        ///<summary>
        ///The return contains final sale items.
        ///</summary>
        FINAL_SALE,
        ///<summary>
        ///The return is declined for another reason.
        ///</summary>
        OTHER,
    }

    ///<summary>
    ///Return type for `returnDeclineRequest` mutation.
    ///</summary>
    public class ReturnDeclineRequestPayload : GraphQLObject<ReturnDeclineRequestPayload>
    {
        ///<summary>
        ///The declined return.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Return and a cursor during pagination.
    ///</summary>
    public class ReturnEdge : GraphQLObject<ReturnEdge>, IEdge<Return>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ReturnEdge.
        ///</summary>
        public Return? node { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ReturnUserError`.
    ///</summary>
    public enum ReturnErrorCode
    {
        ///<summary>
        ///Unexpected internal error happened.
        ///</summary>
        INTERNAL_ERROR,
        ///<summary>
        ///Too many arguments provided.
        ///</summary>
        TOO_MANY_ARGUMENTS,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value should be equal to the value allowed.
        ///</summary>
        EQUAL_TO,
        ///<summary>
        ///The input value should be greater than the minimum allowed value.
        ///</summary>
        GREATER_THAN,
        ///<summary>
        ///The input value should be greater than or equal to the minimum value allowed.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value should be less than the maximum value allowed.
        ///</summary>
        LESS_THAN,
        ///<summary>
        ///The input value should be less than or equal to the maximum value allowed.
        ///</summary>
        LESS_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value is not a number.
        ///</summary>
        NOT_A_NUMBER,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too big.
        ///</summary>
        TOO_BIG,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The input value is the wrong length.
        ///</summary>
        WRONG_LENGTH,
        ///<summary>
        ///The requested resource already exists.
        ///</summary>
        ALREADY_EXISTS,
        ///<summary>
        ///A requested resource could not be created.
        ///</summary>
        CREATION_FAILED,
        ///<summary>
        ///A required feature is not enabled.
        ///</summary>
        FEATURE_NOT_ENABLED,
        ///<summary>
        ///A resource was not in the correct state for the operation to succeed.
        ///</summary>
        INVALID_STATE,
        ///<summary>
        ///A requested notification could not be sent.
        ///</summary>
        NOTIFICATION_FAILED,
        ///<summary>
        ///A requested item is not editable.
        ///</summary>
        NOT_EDITABLE,
        ///<summary>
        ///A requested item could not be found.
        ///</summary>
        NOT_FOUND,
    }

    ///<summary>
    ///A return line item.
    ///</summary>
    public class ReturnLineItem : GraphQLObject<ReturnLineItem>, INode
    {
        ///<summary>
        ///A note from the customer that describes the item to be returned. Maximum length: 300 characters.
        ///</summary>
        public string? customerNote { get; set; }
        ///<summary>
        ///The fulfillment line item from which items are returned.
        ///</summary>
        public FulfillmentLineItem? fulfillmentLineItem { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The quantity being returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The quantity that can be refunded.
        ///</summary>
        public int? refundableQuantity { get; set; }
        ///<summary>
        ///The quantity that was refunded.
        ///</summary>
        public int? refundedQuantity { get; set; }
        ///<summary>
        ///The reason for returning the item.
        ///</summary>
        public ReturnReason? returnReason { get; set; }
        ///<summary>
        ///Additional information about the reason for the return. Maximum length: 255 characters.
        ///</summary>
        public string? returnReasonNote { get; set; }
        ///<summary>
        ///The total weight of the item.
        ///</summary>
        public Weight? totalWeight { get; set; }
        ///<summary>
        ///The total line price after all discounts on the line item, including both line item level discounts and code-based line item discounts, are applied.
        ///</summary>
        public MoneyBag? withCodeDiscountedTotalPriceSet { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ReturnLineItems.
    ///</summary>
    public class ReturnLineItemConnection : GraphQLObject<ReturnLineItemConnection>, IConnectionWithNodesAndEdges<ReturnLineItemEdge, ReturnLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ReturnLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ReturnLineItemEdge.
        ///</summary>
        public IEnumerable<ReturnLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ReturnLineItem and a cursor during pagination.
    ///</summary>
    public class ReturnLineItemEdge : GraphQLObject<ReturnLineItemEdge>, IEdge<ReturnLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ReturnLineItemEdge.
        ///</summary>
        public ReturnLineItem? node { get; set; }
    }

    ///<summary>
    ///The reason for returning the return line item.
    ///</summary>
    public enum ReturnReason
    {
        ///<summary>
        ///The item is returned because the size was too small.
        ///</summary>
        SIZE_TOO_SMALL,
        ///<summary>
        ///The item is returned because the size was too large.
        ///</summary>
        SIZE_TOO_LARGE,
        ///<summary>
        ///The item is returned because the customer changed their mind.
        ///</summary>
        UNWANTED,
        ///<summary>
        ///The item is returned because it was not as described.
        ///</summary>
        NOT_AS_DESCRIBED,
        ///<summary>
        ///The item is returned because the customer received the wrong one.
        ///</summary>
        WRONG_ITEM,
        ///<summary>
        ///The item is returned because it is damaged or defective.
        ///</summary>
        DEFECTIVE,
        ///<summary>
        ///The item is returned because the buyer did not like the style.
        ///</summary>
        STYLE,
        ///<summary>
        ///The item is returned because the buyer did not like the color.
        ///</summary>
        COLOR,
        ///<summary>
        ///The item is returned for another reason. For this value, a return reason note is also provided.
        ///</summary>
        OTHER,
        ///<summary>
        ///The item is returned because of an unknown reason.
        ///</summary>
        UNKNOWN,
    }

    ///<summary>
    ///Return type for `returnRefund` mutation.
    ///</summary>
    public class ReturnRefundPayload : GraphQLObject<ReturnRefundPayload>
    {
        ///<summary>
        ///The created refund.
        ///</summary>
        public Refund? refund { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `returnReopen` mutation.
    ///</summary>
    public class ReturnReopenPayload : GraphQLObject<ReturnReopenPayload>
    {
        ///<summary>
        ///The reopened return.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `returnRequest` mutation.
    ///</summary>
    public class ReturnRequestPayload : GraphQLObject<ReturnRequestPayload>
    {
        ///<summary>
        ///The requested return.
        ///</summary>
        public Return? @return { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The status of a return.
    ///</summary>
    public enum ReturnStatus
    {
        ///<summary>
        ///The return has been canceled.
        ///</summary>
        CANCELED,
        ///<summary>
        ///The return has been completed.
        ///</summary>
        CLOSED,
        ///<summary>
        ///The return is in progress.
        ///</summary>
        OPEN,
        ///<summary>
        ///The return was requested.
        ///</summary>
        REQUESTED,
        ///<summary>
        ///The return was declined.
        ///</summary>
        DECLINED,
    }

    ///<summary>
    ///An error that occurs during the execution of a return mutation.
    ///</summary>
    public class ReturnUserError : GraphQLObject<ReturnUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ReturnErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///A returnable fulfillment, which is an order that has been delivered
    ///and is eligible to be returned to the merchant.
    ///</summary>
    public class ReturnableFulfillment : GraphQLObject<ReturnableFulfillment>, INode
    {
        ///<summary>
        ///The fulfillment that the returnable fulfillment refers to.
        ///</summary>
        public Fulfillment? fulfillment { get; set; }
        ///<summary>
        ///The unique ID of the Returnable Fulfillment.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The list of returnable fulfillment line items.
        ///</summary>
        public ReturnableFulfillmentLineItemConnection? returnableFulfillmentLineItems { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ReturnableFulfillments.
    ///</summary>
    public class ReturnableFulfillmentConnection : GraphQLObject<ReturnableFulfillmentConnection>, IConnectionWithNodesAndEdges<ReturnableFulfillmentEdge, ReturnableFulfillment>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ReturnableFulfillmentEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ReturnableFulfillmentEdge.
        ///</summary>
        public IEnumerable<ReturnableFulfillment>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination.
    ///</summary>
    public class ReturnableFulfillmentEdge : GraphQLObject<ReturnableFulfillmentEdge>, IEdge<ReturnableFulfillment>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ReturnableFulfillmentEdge.
        ///</summary>
        public ReturnableFulfillment? node { get; set; }
    }

    ///<summary>
    ///A returnable fulfillment line item.
    ///</summary>
    public class ReturnableFulfillmentLineItem : GraphQLObject<ReturnableFulfillmentLineItem>
    {
        ///<summary>
        ///The fulfillment line item that can be returned.
        ///</summary>
        public FulfillmentLineItem? fulfillmentLineItem { get; set; }
        ///<summary>
        ///The quantity available to be returned.
        ///</summary>
        public int? quantity { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems.
    ///</summary>
    public class ReturnableFulfillmentLineItemConnection : GraphQLObject<ReturnableFulfillmentLineItemConnection>, IConnectionWithNodesAndEdges<ReturnableFulfillmentLineItemEdge, ReturnableFulfillmentLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ReturnableFulfillmentLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ReturnableFulfillmentLineItemEdge.
        ///</summary>
        public IEnumerable<ReturnableFulfillmentLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.
    ///</summary>
    public class ReturnableFulfillmentLineItemEdge : GraphQLObject<ReturnableFulfillmentLineItemEdge>, IEdge<ReturnableFulfillmentLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ReturnableFulfillmentLineItemEdge.
        ///</summary>
        public ReturnableFulfillmentLineItem? node { get; set; }
    }

    ///<summary>
    ///A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
    ///For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
    ///The reverse delivery contains the context of the items sent back, how they're being sent back
    ///(for example, a shipping label), and the current state of the delivery (tracking information).
    ///</summary>
    public class ReverseDelivery : GraphQLObject<ReverseDelivery>, INode
    {
        ///<summary>
        ///The deliverable associated with the reverse delivery.
        ///</summary>
        public IReverseDeliveryDeliverable? deliverable { get; set; }
        ///<summary>
        ///The ID of the reverse delivery.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The reverse delivery line items attached to the reverse delivery.
        ///</summary>
        public ReverseDeliveryLineItemConnection? reverseDeliveryLineItems { get; set; }
        ///<summary>
        ///The `ReverseFulfillmentOrder` associated with the reverse delivery.
        ///</summary>
        public ReverseFulfillmentOrder? reverseFulfillmentOrder { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ReverseDeliveries.
    ///</summary>
    public class ReverseDeliveryConnection : GraphQLObject<ReverseDeliveryConnection>, IConnectionWithNodesAndEdges<ReverseDeliveryEdge, ReverseDelivery>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ReverseDeliveryEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ReverseDeliveryEdge.
        ///</summary>
        public IEnumerable<ReverseDelivery>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `reverseDeliveryCreateWithShipping` mutation.
    ///</summary>
    public class ReverseDeliveryCreateWithShippingPayload : GraphQLObject<ReverseDeliveryCreateWithShippingPayload>
    {
        ///<summary>
        ///The created reverse delivery.
        ///</summary>
        public ReverseDelivery? reverseDelivery { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The delivery method and artifacts associated with a reverse delivery.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(ReverseDeliveryShippingDeliverable), typeDiscriminator: "ReverseDeliveryShippingDeliverable")]
    public interface IReverseDeliveryDeliverable : IGraphQLObject
    {
        public ReverseDeliveryShippingDeliverable? AsReverseDeliveryShippingDeliverable() => this as ReverseDeliveryShippingDeliverable;
        ///<summary>
        ///The return label attached to the reverse delivery.
        ///</summary>
        public ReverseDeliveryLabelV2? label { get; set; }
        ///<summary>
        ///The information to track the reverse delivery.
        ///</summary>
        public ReverseDeliveryTrackingV2? tracking { get; set; }
    }

    ///<summary>
    ///Return type for `reverseDeliveryDispose` mutation.
    ///</summary>
    public class ReverseDeliveryDisposePayload : GraphQLObject<ReverseDeliveryDisposePayload>
    {
        ///<summary>
        ///The disposed reverse delivery line items.
        ///</summary>
        public IEnumerable<ReverseDeliveryLineItem>? reverseDeliveryLineItems { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ReverseDelivery and a cursor during pagination.
    ///</summary>
    public class ReverseDeliveryEdge : GraphQLObject<ReverseDeliveryEdge>, IEdge<ReverseDelivery>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ReverseDeliveryEdge.
        ///</summary>
        public ReverseDelivery? node { get; set; }
    }

    ///<summary>
    ///The return label file information for a reverse delivery.
    ///</summary>
    public class ReverseDeliveryLabelV2 : GraphQLObject<ReverseDeliveryLabelV2>
    {
        ///<summary>
        ///The date and time when the reverse delivery label was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A public link that can be used to download the label image.
        ///</summary>
        public string? publicFileUrl { get; set; }
        ///<summary>
        ///The date and time when the reverse delivery label was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///The details about a reverse delivery line item.
    ///</summary>
    public class ReverseDeliveryLineItem : GraphQLObject<ReverseDeliveryLineItem>, INode
    {
        ///<summary>
        ///The dispositions of the item.
        ///</summary>
        public IEnumerable<ReverseFulfillmentOrderDisposition>? dispositions { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The expected number of units.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The corresponding reverse fulfillment order line item.
        ///</summary>
        public ReverseFulfillmentOrderLineItem? reverseFulfillmentOrderLineItem { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ReverseDeliveryLineItems.
    ///</summary>
    public class ReverseDeliveryLineItemConnection : GraphQLObject<ReverseDeliveryLineItemConnection>, IConnectionWithNodesAndEdges<ReverseDeliveryLineItemEdge, ReverseDeliveryLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ReverseDeliveryLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ReverseDeliveryLineItemEdge.
        ///</summary>
        public IEnumerable<ReverseDeliveryLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.
    ///</summary>
    public class ReverseDeliveryLineItemEdge : GraphQLObject<ReverseDeliveryLineItemEdge>, IEdge<ReverseDeliveryLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ReverseDeliveryLineItemEdge.
        ///</summary>
        public ReverseDeliveryLineItem? node { get; set; }
    }

    ///<summary>
    ///A reverse shipping deliverable that may include a label and tracking information.
    ///</summary>
    public class ReverseDeliveryShippingDeliverable : GraphQLObject<ReverseDeliveryShippingDeliverable>, IReverseDeliveryDeliverable
    {
        ///<summary>
        ///The return label attached to the reverse delivery.
        ///</summary>
        public ReverseDeliveryLabelV2? label { get; set; }
        ///<summary>
        ///The information to track the reverse delivery.
        ///</summary>
        public ReverseDeliveryTrackingV2? tracking { get; set; }
    }

    ///<summary>
    ///Return type for `reverseDeliveryShippingUpdate` mutation.
    ///</summary>
    public class ReverseDeliveryShippingUpdatePayload : GraphQLObject<ReverseDeliveryShippingUpdatePayload>
    {
        ///<summary>
        ///The updated reverse delivery.
        ///</summary>
        public ReverseDelivery? reverseDelivery { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents the information used to track a reverse delivery.
    ///</summary>
    public class ReverseDeliveryTrackingV2 : GraphQLObject<ReverseDeliveryTrackingV2>
    {
        ///<summary>
        ///The provider of the tracking information, in a human-readable format for display purposes.
        ///</summary>
        public string? carrierName { get; set; }
        ///<summary>
        ///The identifier used by the courier to identify the shipment.
        ///</summary>
        public string? number { get; set; }
        ///<summary>
        ///The URL to track a shipment.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///A group of one or more items in a return that will be processed at a fulfillment service.
    ///There can be more than one reverse fulfillment order for a return at a given location.
    ///</summary>
    public class ReverseFulfillmentOrder : GraphQLObject<ReverseFulfillmentOrder>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The list of reverse fulfillment order line items for the reverse fulfillment order.
        ///</summary>
        public ReverseFulfillmentOrderLineItemConnection? lineItems { get; set; }
        ///<summary>
        ///The order associated with the reverse fulfillment order.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The list of reverse deliveries for the reverse fulfillment order.
        ///</summary>
        public ReverseDeliveryConnection? reverseDeliveries { get; set; }
        ///<summary>
        ///The status of the reverse fulfillment order.
        ///</summary>
        public ReverseFulfillmentOrderStatus? status { get; set; }
        ///<summary>
        ///The current confirmation for the reverse fulfillment order from a third-party logistics service. 
        ///If no third-party service is involved, then this value is `nil`.
        ///</summary>
        public ReverseFulfillmentOrderThirdPartyConfirmation? thirdPartyConfirmation { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ReverseFulfillmentOrders.
    ///</summary>
    public class ReverseFulfillmentOrderConnection : GraphQLObject<ReverseFulfillmentOrderConnection>, IConnectionWithNodesAndEdges<ReverseFulfillmentOrderEdge, ReverseFulfillmentOrder>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ReverseFulfillmentOrderEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ReverseFulfillmentOrderEdge.
        ///</summary>
        public IEnumerable<ReverseFulfillmentOrder>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `reverseFulfillmentOrderDispose` mutation.
    ///</summary>
    public class ReverseFulfillmentOrderDisposePayload : GraphQLObject<ReverseFulfillmentOrderDisposePayload>
    {
        ///<summary>
        ///The disposed reverse fulfillment order line items.
        ///</summary>
        public IEnumerable<ReverseFulfillmentOrderLineItem>? reverseFulfillmentOrderLineItems { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ReturnUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The details of the arrangement of an item.
    ///</summary>
    public class ReverseFulfillmentOrderDisposition : GraphQLObject<ReverseFulfillmentOrderDisposition>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The location where the disposition occurred.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The number of disposed units.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The final arrangement of an item.
        ///</summary>
        public ReverseFulfillmentOrderDispositionType? type { get; set; }
    }

    ///<summary>
    ///The final arrangement of an item from a reverse fulfillment order.
    ///</summary>
    public enum ReverseFulfillmentOrderDispositionType
    {
        ///<summary>
        ///An item that was restocked.
        ///</summary>
        RESTOCKED,
        ///<summary>
        ///An item that requires further processing before being restocked or discarded.
        ///</summary>
        PROCESSING_REQUIRED,
        ///<summary>
        ///An item that wasn't restocked.
        ///</summary>
        NOT_RESTOCKED,
        ///<summary>
        ///An item that was expected but absent.
        ///</summary>
        MISSING,
    }

    ///<summary>
    ///An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.
    ///</summary>
    public class ReverseFulfillmentOrderEdge : GraphQLObject<ReverseFulfillmentOrderEdge>, IEdge<ReverseFulfillmentOrder>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ReverseFulfillmentOrderEdge.
        ///</summary>
        public ReverseFulfillmentOrder? node { get; set; }
    }

    ///<summary>
    ///The details about a reverse fulfillment order line item.
    ///</summary>
    public class ReverseFulfillmentOrderLineItem : GraphQLObject<ReverseFulfillmentOrderLineItem>, INode
    {
        ///<summary>
        ///The dispositions of the item.
        ///</summary>
        public IEnumerable<ReverseFulfillmentOrderDisposition>? dispositions { get; set; }
        ///<summary>
        ///The corresponding fulfillment line item for a reverse fulfillment order line item.
        ///</summary>
        public FulfillmentLineItem? fulfillmentLineItem { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The total number of units to be processed.
        ///</summary>
        public int? totalQuantity { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems.
    ///</summary>
    public class ReverseFulfillmentOrderLineItemConnection : GraphQLObject<ReverseFulfillmentOrderLineItemConnection>, IConnectionWithNodesAndEdges<ReverseFulfillmentOrderLineItemEdge, ReverseFulfillmentOrderLineItem>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ReverseFulfillmentOrderLineItemEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ReverseFulfillmentOrderLineItemEdge.
        ///</summary>
        public IEnumerable<ReverseFulfillmentOrderLineItem>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.
    ///</summary>
    public class ReverseFulfillmentOrderLineItemEdge : GraphQLObject<ReverseFulfillmentOrderLineItemEdge>, IEdge<ReverseFulfillmentOrderLineItem>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ReverseFulfillmentOrderLineItemEdge.
        ///</summary>
        public ReverseFulfillmentOrderLineItem? node { get; set; }
    }

    ///<summary>
    ///The status of a reverse fulfillment order.
    ///</summary>
    public enum ReverseFulfillmentOrderStatus
    {
        ///<summary>
        ///The reverse fulfillment order has been canceled.
        ///</summary>
        CANCELED,
        ///<summary>
        ///The reverse fulfillment order has been completed.
        ///</summary>
        CLOSED,
        ///<summary>
        ///The reverse fulfillment order is in progress.
        ///</summary>
        OPEN,
    }

    ///<summary>
    ///The third-party confirmation of a reverse fulfillment order.
    ///</summary>
    public class ReverseFulfillmentOrderThirdPartyConfirmation : GraphQLObject<ReverseFulfillmentOrderThirdPartyConfirmation>
    {
        ///<summary>
        ///The status of the reverse fulfillment order third-party confirmation.
        ///</summary>
        public ReverseFulfillmentOrderThirdPartyConfirmationStatus? status { get; set; }
    }

    ///<summary>
    ///The status of a reverse fulfillment order third-party confirmation.
    ///</summary>
    public enum ReverseFulfillmentOrderThirdPartyConfirmationStatus
    {
        ///<summary>
        ///The reverse fulfillment order was accepted by the fulfillment service.
        ///</summary>
        ACCEPTED,
        ///<summary>
        ///The reverse fulfillment order cancelation was accepted by the fulfillment service.
        ///</summary>
        CANCEL_ACCEPTED,
        ///<summary>
        ///The reverse fulfillment order cancelation was rejected by the fulfillment service.
        ///</summary>
        CANCEL_REJECTED,
        ///<summary>
        ///The reverse fulfillment order is awaiting acceptance by the fulfillment service.
        ///</summary>
        PENDING_ACCEPTANCE,
        ///<summary>
        ///The reverse fulfillment order is awaiting cancelation by the fulfillment service.
        ///</summary>
        PENDING_CANCELATION,
        ///<summary>
        ///The reverse fulfillment order was rejected by the fulfillment service.
        ///</summary>
        REJECTED,
    }

    ///<summary>
    ///A row count represents rows on background operation.
    ///</summary>
    public class RowCount : GraphQLObject<RowCount>
    {
        ///<summary>
        ///Estimated number of rows contained within this background operation.
        ///</summary>
        public int? count { get; set; }
        ///<summary>
        ///Whether the operation exceeds max number of reportable rows.
        ///</summary>
        public bool? exceedsMax { get; set; }
    }

    ///<summary>
    ///SEO information.
    ///</summary>
    public class SEO : GraphQLObject<SEO>
    {
        ///<summary>
        ///SEO Description.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///SEO Title.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///An individual sale record associated with a sales agreement. Every money value in an order's sales data is represented in the currency's smallest unit. When amounts are divided across multiple line items, such as taxes or order discounts, the amounts might not divide evenly across all of the line items on the order. To address this, the remaining currency units that couldn't be divided evenly are allocated one at a time, starting with the first line item, until they are all accounted for. In aggregate, the values sum up correctly. In isolation, one line item might have a different tax or discount amount than another line item of the same price, before taxes and discounts. This is because the amount could not be divided evenly across the items. The allocation of currency units across line items is immutable. After they are allocated, currency units are never reallocated or redistributed among the line items.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(AdditionalFeeSale), typeDiscriminator: "AdditionalFeeSale")]
    [JsonDerivedType(typeof(AdjustmentSale), typeDiscriminator: "AdjustmentSale")]
    [JsonDerivedType(typeof(DutySale), typeDiscriminator: "DutySale")]
    [JsonDerivedType(typeof(GiftCardSale), typeDiscriminator: "GiftCardSale")]
    [JsonDerivedType(typeof(ProductSale), typeDiscriminator: "ProductSale")]
    [JsonDerivedType(typeof(ShippingLineSale), typeDiscriminator: "ShippingLineSale")]
    [JsonDerivedType(typeof(TipSale), typeDiscriminator: "TipSale")]
    [JsonDerivedType(typeof(UnknownSale), typeDiscriminator: "UnknownSale")]
    public interface ISale : IGraphQLObject
    {
        public AdditionalFeeSale? AsAdditionalFeeSale() => this as AdditionalFeeSale;
        public AdjustmentSale? AsAdjustmentSale() => this as AdjustmentSale;
        public DutySale? AsDutySale() => this as DutySale;
        public GiftCardSale? AsGiftCardSale() => this as GiftCardSale;
        public ProductSale? AsProductSale() => this as ProductSale;
        public ShippingLineSale? AsShippingLineSale() => this as ShippingLineSale;
        public TipSale? AsTipSale() => this as TipSale;
        public UnknownSale? AsUnknownSale() => this as UnknownSale;
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; }
    }

    ///<summary>
    ///The possible order action types for a sale.
    ///</summary>
    public enum SaleActionType
    {
        ///<summary>
        ///A purchase or charge.
        ///</summary>
        ORDER,
        ///<summary>
        ///A removal or return.
        ///</summary>
        RETURN,
        ///<summary>
        ///A change to the price, taxes, or discounts for a prior purchase.
        ///</summary>
        UPDATE,
        ///<summary>
        ///An unknown order action. Represents new actions that may be added in future versions.
        ///</summary>
        UNKNOWN,
    }

    ///<summary>
    ///The additional fee details for a line item.
    ///</summary>
    public class SaleAdditionalFee : GraphQLObject<SaleAdditionalFee>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The name of the additional fee.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The price of the additional fee.
        ///</summary>
        public MoneyBag? price { get; set; }
        ///<summary>
        ///A list of taxes charged on the additional fee.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Sales.
    ///</summary>
    public class SaleConnection : GraphQLObject<SaleConnection>, IConnectionWithNodesAndEdges<SaleEdge, ISale>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SaleEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SaleEdge.
        ///</summary>
        public IEnumerable<ISale>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Sale and a cursor during pagination.
    ///</summary>
    public class SaleEdge : GraphQLObject<SaleEdge>, IEdge<ISale>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SaleEdge.
        ///</summary>
        public ISale? node { get; set; }
    }

    ///<summary>
    ///The possible line types for a sale record. One of the possible order line types for a sale is an adjustment. Sales adjustments occur when a refund is issued for a line item that is either more or less than the total value of the line item. Examples are restocking fees and goodwill payments. When this happens, Shopify produces a sales agreement with sale records for each line item that is returned or refunded and an additional sale record for the adjustment (for example, a restocking fee). The sales records for the returned or refunded items represent the reversal of the original line item sale value. The additional adjustment sale record represents the difference between the original total value of all line items that were refunded, and the actual amount refunded.
    ///</summary>
    public enum SaleLineType
    {
        ///<summary>
        ///A product purchased, returned or exchanged.
        ///</summary>
        PRODUCT,
        ///<summary>
        ///A tip added by the customer.
        ///</summary>
        TIP,
        ///<summary>
        ///A gift card.
        ///</summary>
        GIFT_CARD,
        ///<summary>
        ///A shipping cost.
        ///</summary>
        SHIPPING,
        ///<summary>
        ///A duty charge.
        ///</summary>
        DUTY,
        ///<summary>
        ///An additional fee.
        ///</summary>
        ADDITIONAL_FEE,
        ///<summary>
        ///An unknown sale line. Represents new types that may be added in future versions.
        ///</summary>
        UNKNOWN,
        ///<summary>
        ///A sale adjustment.
        ///</summary>
        ADJUSTMENT,
    }

    ///<summary>
    ///The tax allocated to a sale from a single tax line.
    ///</summary>
    public class SaleTax : GraphQLObject<SaleTax>
    {
        ///<summary>
        ///The portion of the total tax amount on the related sale that comes from the associated tax line.
        ///</summary>
        public MoneyBag? amount { get; set; }
        ///<summary>
        ///The unique ID for the sale tax.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The tax line associated with the sale.
        ///</summary>
        public TaxLine? taxLine { get; set; }
    }

    ///<summary>
    ///A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(OrderAgreement), typeDiscriminator: "OrderAgreement")]
    [JsonDerivedType(typeof(OrderEditAgreement), typeDiscriminator: "OrderEditAgreement")]
    [JsonDerivedType(typeof(RefundAgreement), typeDiscriminator: "RefundAgreement")]
    public interface ISalesAgreement : IGraphQLObject
    {
        public OrderAgreement? AsOrderAgreement() => this as OrderAgreement;
        public OrderEditAgreement? AsOrderEditAgreement() => this as OrderEditAgreement;
        public RefundAgreement? AsRefundAgreement() => this as RefundAgreement;
        ///<summary>
        ///The application that created the agreement.
        ///</summary>
        public App? app { get; }
        ///<summary>
        ///The date and time at which the agreement occured.
        ///</summary>
        public DateTime? happenedAt { get; }
        ///<summary>
        ///The unique ID for the agreement.
        ///</summary>
        public string? id { get; }
        ///<summary>
        ///The reason the agremeent was created.
        ///</summary>
        public OrderActionType? reason { get; }
        ///<summary>
        ///The sales associated with the agreement.
        ///</summary>
        public SaleConnection? sales { get; }
        ///<summary>
        ///The staff member associated with the agreement.
        ///</summary>
        public StaffMember? user { get; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SalesAgreements.
    ///</summary>
    public class SalesAgreementConnection : GraphQLObject<SalesAgreementConnection>, IConnectionWithNodesAndEdges<SalesAgreementEdge, ISalesAgreement>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SalesAgreementEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SalesAgreementEdge.
        ///</summary>
        public IEnumerable<ISalesAgreement>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SalesAgreement and a cursor during pagination.
    ///</summary>
    public class SalesAgreementEdge : GraphQLObject<SalesAgreementEdge>, IEdge<ISalesAgreement>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SalesAgreementEdge.
        ///</summary>
        public ISalesAgreement? node { get; set; }
    }

    ///<summary>
    ///A saved search is a representation of a search query saved in the admin.
    ///</summary>
    public class SavedSearch : GraphQLObject<SavedSearch>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The filters of a saved search.
        ///</summary>
        public IEnumerable<SearchFilter>? filters { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The name of a saved search.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The query string of a saved search. This includes search terms and filters.
        ///</summary>
        public string? query { get; set; }
        ///<summary>
        ///The type of resource this saved search is searching in.
        ///</summary>
        public SearchResultType? resourceType { get; set; }
        ///<summary>
        ///The search terms of a saved search.
        ///</summary>
        public string? searchTerms { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SavedSearches.
    ///</summary>
    public class SavedSearchConnection : GraphQLObject<SavedSearchConnection>, IConnectionWithNodesAndEdges<SavedSearchEdge, SavedSearch>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SavedSearchEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SavedSearchEdge.
        ///</summary>
        public IEnumerable<SavedSearch>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `savedSearchCreate` mutation.
    ///</summary>
    public class SavedSearchCreatePayload : GraphQLObject<SavedSearchCreatePayload>
    {
        ///<summary>
        ///The saved search that was created.
        ///</summary>
        public SavedSearch? savedSearch { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `savedSearchDelete` mutation.
    ///</summary>
    public class SavedSearchDeletePayload : GraphQLObject<SavedSearchDeletePayload>
    {
        ///<summary>
        ///The ID of the saved search that was deleted.
        ///</summary>
        public string? deletedSavedSearchId { get; set; }
        ///<summary>
        ///The shop of the saved search that was deleted.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SavedSearch and a cursor during pagination.
    ///</summary>
    public class SavedSearchEdge : GraphQLObject<SavedSearchEdge>, IEdge<SavedSearch>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SavedSearchEdge.
        ///</summary>
        public SavedSearch? node { get; set; }
    }

    ///<summary>
    ///Return type for `savedSearchUpdate` mutation.
    ///</summary>
    public class SavedSearchUpdatePayload : GraphQLObject<SavedSearchUpdatePayload>
    {
        ///<summary>
        ///The saved search that was updated.
        ///</summary>
        public SavedSearch? savedSearch { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the ScheduledChange query.
    ///</summary>
    public enum ScheduledChangeSortKeys
    {
        ///<summary>
        ///Sort by the `expected_at` value.
        ///</summary>
        EXPECTED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Script discount applications capture the intentions of a discount that
    ///was created by a Shopify Script for an order's line item or shipping line.
    ///
    ///Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
    ///</summary>
    public class ScriptDiscountApplication : GraphQLObject<ScriptDiscountApplication>, IDiscountApplication
    {
        ///<summary>
        ///The method by which the discount's value is applied to its entitled items.
        ///</summary>
        public DiscountApplicationAllocationMethod? allocationMethod { get; set; }

        ///<summary>
        ///The description of the application as defined by the Script.
        ///</summary>
        [Obsolete("Use `title` instead.")]
        public string? description { get; set; }
        ///<summary>
        ///An ordered index that can be used to identify the discount application and indicate the precedence
        ///of the discount application for calculations.
        ///</summary>
        public int? index { get; set; }
        ///<summary>
        ///How the discount amount is distributed on the discounted lines.
        ///</summary>
        public DiscountApplicationTargetSelection? targetSelection { get; set; }
        ///<summary>
        ///Whether the discount is applied on line items or shipping lines.
        ///</summary>
        public DiscountApplicationTargetType? targetType { get; set; }
        ///<summary>
        ///The title of the application as defined by the Script.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The value of the discount application.
        ///</summary>
        public IPricingValue? value { get; set; }
    }

    ///<summary>
    ///<div class="note"><h4>Theme app extensions</h4>
    ///  <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
    ///
    ///<div class="note"><h4>Script tag deprecation</h4>
    ///  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
    ///
    ///
    ///A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the **Order status** page of checkout.
    ///</summary>
    public class ScriptTag : GraphQLObject<ScriptTag>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///Whether the Shopify CDN can cache and serve the script tag.
        ///If `true`, then the script will be cached and served by the CDN.
        ///The cache expires 15 minutes after the script tag is successfully returned.
        ///If `false`, then the script will be served as is.
        ///</summary>
        public bool? cache { get; set; }
        ///<summary>
        ///The date and time when the script tag was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The page or pages on the online store that the script should be included.
        ///</summary>
        public ScriptTagDisplayScope? displayScope { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The URL to the remote script.
        ///</summary>
        public string? src { get; set; }
        ///<summary>
        ///The date and time when the script tag was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ScriptTags.
    ///</summary>
    public class ScriptTagConnection : GraphQLObject<ScriptTagConnection>, IConnectionWithNodesAndEdges<ScriptTagEdge, ScriptTag>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ScriptTagEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ScriptTagEdge.
        ///</summary>
        public IEnumerable<ScriptTag>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `scriptTagCreate` mutation.
    ///</summary>
    public class ScriptTagCreatePayload : GraphQLObject<ScriptTagCreatePayload>
    {
        ///<summary>
        ///The script tag that was created.
        ///</summary>
        public ScriptTag? scriptTag { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `scriptTagDelete` mutation.
    ///</summary>
    public class ScriptTagDeletePayload : GraphQLObject<ScriptTagDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted script tag.
        ///</summary>
        public string? deletedScriptTagId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The page or pages on the online store where the script should be included.
    ///</summary>
    public enum ScriptTagDisplayScope
    {
        ///<summary>
        ///Include the script on both the web storefront and the <b>Order status</b> page.
        ///</summary>
        ALL,
        ///<summary>
        ///Include the script only on the <b>Order status</b> page.
        ///</summary>
        ORDER_STATUS,
        ///<summary>
        ///Include the script only on the web storefront.
        ///</summary>
        ONLINE_STORE,
    }

    ///<summary>
    ///An auto-generated type which holds one ScriptTag and a cursor during pagination.
    ///</summary>
    public class ScriptTagEdge : GraphQLObject<ScriptTagEdge>, IEdge<ScriptTag>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ScriptTagEdge.
        ///</summary>
        public ScriptTag? node { get; set; }
    }

    ///<summary>
    ///Return type for `scriptTagUpdate` mutation.
    ///</summary>
    public class ScriptTagUpdatePayload : GraphQLObject<ScriptTagUpdatePayload>
    {
        ///<summary>
        ///The script tag that was updated.
        ///</summary>
        public ScriptTag? scriptTag { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A filter in a search query represented by a key value pair.
    ///</summary>
    public class SearchFilter : GraphQLObject<SearchFilter>
    {
        ///<summary>
        ///The key of the search filter.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The value of the search filter.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///A list of search filters along with their specific options in value and label pair for filtering.
    ///</summary>
    public class SearchFilterOptions : GraphQLObject<SearchFilterOptions>
    {
        ///<summary>
        ///A list of options that can be use to filter product availability.
        ///</summary>
        public IEnumerable<FilterOption>? productAvailability { get; set; }
    }

    ///<summary>
    ///Represents an individual result returned from a search.
    ///</summary>
    public class SearchResult : GraphQLObject<SearchResult>
    {
        ///<summary>
        ///Returns the search result description text.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///Returns the Image resource presented to accompany a search result.
        ///</summary>
        public Image? image { get; set; }
        ///<summary>
        ///Returns the ID of the resource returned in the search result.
        ///</summary>
        public INode? reference { get; set; }
        ///<summary>
        ///Returns the resource title.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///Returns the absolute URL to the resource in the search result.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The connection type for SearchResult.
    ///</summary>
    public class SearchResultConnection : GraphQLObject<SearchResultConnection>, IConnectionWithEdges<SearchResultEdge, SearchResult>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SearchResultEdge>? edges { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }

        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        [Obsolete("The provided information is not accurate.")]
        public int? resultsAfterCount { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SearchResult and a cursor during pagination.
    ///</summary>
    public class SearchResultEdge : GraphQLObject<SearchResultEdge>, IEdge<SearchResult>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SearchResultEdge.
        ///</summary>
        public SearchResult? node { get; set; }
    }

    ///<summary>
    ///Specifies the type of resources to be returned from a search.
    ///</summary>
    public enum SearchResultType
    {
        CUSTOMER,
        DRAFT_ORDER,
        PRODUCT,
        COLLECTION,
        ///<summary>
        ///A file.
        ///</summary>
        FILE,
        ONLINE_STORE_PAGE,
        ONLINE_STORE_BLOG,
        ONLINE_STORE_ARTICLE,
        ///<summary>
        ///A URL redirect.
        ///</summary>
        URL_REDIRECT,
        PRICE_RULE,
        ///<summary>
        ///A code discount redeem code.
        ///</summary>
        DISCOUNT_REDEEM_CODE,
        ORDER,
        ///<summary>
        ///A balance transaction.
        ///</summary>
        BALANCE_TRANSACTION,
    }

    ///<summary>
    ///A dynamic collection of customers based on specific criteria.
    ///</summary>
    public class Segment : GraphQLObject<Segment>, INode
    {
        ///<summary>
        ///The date and time when the segment was added to the store.
        ///</summary>
        public DateTime? creationDate { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The date and time when the segment was last updated.
        ///</summary>
        public DateTime? lastEditDate { get; set; }
        ///<summary>
        ///The name of the segment.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
        ///</summary>
        public string? query { get; set; }
    }

    ///<summary>
    ///A filter that takes a value that's associated with an object. For example, the `tags` field is associated with the [`Customer`](/api/admin-graphql/latest/objects/Customer) object.
    ///</summary>
    public class SegmentAssociationFilter : GraphQLObject<SegmentAssociationFilter>, ISegmentFilter
    {
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; set; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///The statistics of a given attribute.
    ///</summary>
    public class SegmentAttributeStatistics : GraphQLObject<SegmentAttributeStatistics>
    {
        ///<summary>
        ///The average of a given attribute.
        ///</summary>
        public float? average { get; set; }
        ///<summary>
        ///The sum of a given attribute.
        ///</summary>
        public float? sum { get; set; }
    }

    ///<summary>
    ///A filter with a Boolean value that's been added to a segment query.
    ///</summary>
    public class SegmentBooleanFilter : GraphQLObject<SegmentBooleanFilter>, ISegmentFilter
    {
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; set; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Segments.
    ///</summary>
    public class SegmentConnection : GraphQLObject<SegmentConnection>, IConnectionWithNodesAndEdges<SegmentEdge, Segment>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SegmentEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SegmentEdge.
        ///</summary>
        public IEnumerable<Segment>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `segmentCreate` mutation.
    ///</summary>
    public class SegmentCreatePayload : GraphQLObject<SegmentCreatePayload>
    {
        ///<summary>
        ///The newly created segment.
        ///</summary>
        public Segment? segment { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A filter with a date value that's been added to a segment query.
    ///</summary>
    public class SegmentDateFilter : GraphQLObject<SegmentDateFilter>, ISegmentFilter
    {
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; set; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///Return type for `segmentDelete` mutation.
    ///</summary>
    public class SegmentDeletePayload : GraphQLObject<SegmentDeletePayload>
    {
        ///<summary>
        ///ID of the deleted segment.
        ///</summary>
        public string? deletedSegmentId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Segment and a cursor during pagination.
    ///</summary>
    public class SegmentEdge : GraphQLObject<SegmentEdge>, IEdge<Segment>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SegmentEdge.
        ///</summary>
        public Segment? node { get; set; }
    }

    ///<summary>
    ///A filter with a set of possible values that's been added to a segment query.
    ///</summary>
    public class SegmentEnumFilter : GraphQLObject<SegmentEnumFilter>, ISegmentFilter
    {
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; set; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///A filter that's used to segment customers based on the date that an event occured. For example, the `product_bought` event filter allows you to segment customers based on what products they've bought.
    ///</summary>
    public class SegmentEventFilter : GraphQLObject<SegmentEventFilter>, ISegmentFilter
    {
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; set; }
        ///<summary>
        ///The parameters for an event segment filter.
        ///</summary>
        public IEnumerable<SegmentEventFilterParameter>? parameters { get; set; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; set; }
        ///<summary>
        ///The return value type for an event segment filter.
        ///</summary>
        public string? returnValueType { get; set; }
    }

    ///<summary>
    ///The parameters for an event segment filter.
    ///</summary>
    public class SegmentEventFilterParameter : GraphQLObject<SegmentEventFilterParameter>
    {
        ///<summary>
        ///Whether the parameter accepts a list of values.
        ///</summary>
        public bool? acceptsMultipleValues { get; set; }
        ///<summary>
        ///The localized description of the parameter.
        ///</summary>
        public string? localizedDescription { get; set; }
        ///<summary>
        ///The localized name of the parameter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether the parameter is optional.
        ///</summary>
        public bool? optional { get; set; }
        ///<summary>
        ///The type of the parameter.
        ///</summary>
        public string? parameterType { get; set; }
        ///<summary>
        ///The query name of the parameter.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///The filters used in segment queries associated with a shop.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SegmentAssociationFilter), typeDiscriminator: "SegmentAssociationFilter")]
    [JsonDerivedType(typeof(SegmentBooleanFilter), typeDiscriminator: "SegmentBooleanFilter")]
    [JsonDerivedType(typeof(SegmentDateFilter), typeDiscriminator: "SegmentDateFilter")]
    [JsonDerivedType(typeof(SegmentEnumFilter), typeDiscriminator: "SegmentEnumFilter")]
    [JsonDerivedType(typeof(SegmentEventFilter), typeDiscriminator: "SegmentEventFilter")]
    [JsonDerivedType(typeof(SegmentFloatFilter), typeDiscriminator: "SegmentFloatFilter")]
    [JsonDerivedType(typeof(SegmentIntegerFilter), typeDiscriminator: "SegmentIntegerFilter")]
    [JsonDerivedType(typeof(SegmentStringFilter), typeDiscriminator: "SegmentStringFilter")]
    public interface ISegmentFilter : IGraphQLObject
    {
        public SegmentAssociationFilter? AsSegmentAssociationFilter() => this as SegmentAssociationFilter;
        public SegmentBooleanFilter? AsSegmentBooleanFilter() => this as SegmentBooleanFilter;
        public SegmentDateFilter? AsSegmentDateFilter() => this as SegmentDateFilter;
        public SegmentEnumFilter? AsSegmentEnumFilter() => this as SegmentEnumFilter;
        public SegmentEventFilter? AsSegmentEventFilter() => this as SegmentEventFilter;
        public SegmentFloatFilter? AsSegmentFloatFilter() => this as SegmentFloatFilter;
        public SegmentIntegerFilter? AsSegmentIntegerFilter() => this as SegmentIntegerFilter;
        public SegmentStringFilter? AsSegmentStringFilter() => this as SegmentStringFilter;
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SegmentFilters.
    ///</summary>
    public class SegmentFilterConnection : GraphQLObject<SegmentFilterConnection>, IConnectionWithNodesAndEdges<SegmentFilterEdge, ISegmentFilter>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SegmentFilterEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SegmentFilterEdge.
        ///</summary>
        public IEnumerable<ISegmentFilter>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SegmentFilter and a cursor during pagination.
    ///</summary>
    public class SegmentFilterEdge : GraphQLObject<SegmentFilterEdge>, IEdge<ISegmentFilter>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SegmentFilterEdge.
        ///</summary>
        public ISegmentFilter? node { get; set; }
    }

    ///<summary>
    ///A filter with a double-precision, floating-point value that's been added to a segment query.
    ///</summary>
    public class SegmentFloatFilter : GraphQLObject<SegmentFloatFilter>, ISegmentFilter
    {
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; set; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///A filter with an integer that's been added to a segment query.
    ///</summary>
    public class SegmentIntegerFilter : GraphQLObject<SegmentIntegerFilter>, ISegmentFilter
    {
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; set; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///The response type for the `segmentMembership` object.
    ///</summary>
    public class SegmentMembership : GraphQLObject<SegmentMembership>
    {
        ///<summary>
        ///A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the `segmentId`.
        ///</summary>
        public bool? isMember { get; set; }
        ///<summary>
        ///A `segmentId` that's used for testing membership.
        ///</summary>
        public string? segmentId { get; set; }
    }

    ///<summary>
    ///A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships.
    ///</summary>
    public class SegmentMembershipResponse : GraphQLObject<SegmentMembershipResponse>
    {
        ///<summary>
        ///The membership status for the given list of segments.
        ///</summary>
        public IEnumerable<SegmentMembership>? memberships { get; set; }
    }

    ///<summary>
    ///A segment and its corresponding saved search. 
    ///For example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.
    ///</summary>
    public class SegmentMigration : GraphQLObject<SegmentMigration>
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The ID of the saved search.
        ///</summary>
        public string? savedSearchId { get; set; }
        ///<summary>
        ///The ID of the segment.
        ///</summary>
        public string? segmentId { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SegmentMigrations.
    ///</summary>
    public class SegmentMigrationConnection : GraphQLObject<SegmentMigrationConnection>, IConnectionWithNodesAndEdges<SegmentMigrationEdge, SegmentMigration>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SegmentMigrationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SegmentMigrationEdge.
        ///</summary>
        public IEnumerable<SegmentMigration>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SegmentMigration and a cursor during pagination.
    ///</summary>
    public class SegmentMigrationEdge : GraphQLObject<SegmentMigrationEdge>, IEdge<SegmentMigration>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SegmentMigrationEdge.
        ///</summary>
        public SegmentMigration? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the Segment query.
    ///</summary>
    public enum SegmentSortKeys
    {
        ///<summary>
        ///Sort by the `creation_date` value.
        ///</summary>
        CREATION_DATE,
        ///<summary>
        ///Sort by the `last_edit_date` value.
        ///</summary>
        LAST_EDIT_DATE,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The statistics of a given segment.
    ///</summary>
    public class SegmentStatistics : GraphQLObject<SegmentStatistics>
    {
        ///<summary>
        ///The statistics of a given attribute.
        ///</summary>
        public SegmentAttributeStatistics? attributeStatistics { get; set; }
    }

    ///<summary>
    ///A filter with a string that's been added to a segment query.
    ///</summary>
    public class SegmentStringFilter : GraphQLObject<SegmentStringFilter>, ISegmentFilter
    {
        ///<summary>
        ///The localized name of the filter.
        ///</summary>
        public string? localizedName { get; set; }
        ///<summary>
        ///Whether a file can have multiple values for a single customer.
        ///</summary>
        public bool? multiValue { get; set; }
        ///<summary>
        ///The query name of the filter.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///Return type for `segmentUpdate` mutation.
    ///</summary>
    public class SegmentUpdatePayload : GraphQLObject<SegmentUpdatePayload>
    {
        ///<summary>
        ///The updated segment.
        ///</summary>
        public Segment? segment { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A list of suggested values associated with an individual segment. A
    ///segment is a group of members, such as customers, that meet specific
    ///criteria.
    ///</summary>
    public class SegmentValue : GraphQLObject<SegmentValue>
    {
        ///<summary>
        ///The localized version of the value's name. This name is displayed to the merchant.
        ///</summary>
        public string? localizedValue { get; set; }
        ///<summary>
        ///The name of the query associated with the suggestion.
        ///</summary>
        public string? queryName { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SegmentValues.
    ///</summary>
    public class SegmentValueConnection : GraphQLObject<SegmentValueConnection>, IConnectionWithNodesAndEdges<SegmentValueEdge, SegmentValue>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SegmentValueEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SegmentValueEdge.
        ///</summary>
        public IEnumerable<SegmentValue>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SegmentValue and a cursor during pagination.
    ///</summary>
    public class SegmentValueEdge : GraphQLObject<SegmentValueEdge>, IEdge<SegmentValue>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SegmentValueEdge.
        ///</summary>
        public SegmentValue? node { get; set; }
    }

    ///<summary>
    ///Properties used by customers to select a product variant.
    ///Products can have multiple options, like different sizes or colors.
    ///</summary>
    public class SelectedOption : GraphQLObject<SelectedOption>
    {
        ///<summary>
        ///The product option’s name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The product option’s value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
    ///and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
    ///up these records if you need to restore them later.
    ///
    ///For more information on selling plans, refer to
    ///[*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
    ///</summary>
    public class SellingPlan : GraphQLObject<SellingPlan>, IHasPublishedTranslations, INode
    {
        ///<summary>
        ///A selling plan policy which describes the recurring billing details.
        ///</summary>
        public ISellingPlanBillingPolicy? billingPolicy { get; set; }
        ///<summary>
        ///The category used to classify the selling plan for reporting purposes.
        ///</summary>
        public SellingPlanCategory? category { get; set; }
        ///<summary>
        ///The date and time when the selling plan was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A selling plan policy which describes the delivery details.
        ///</summary>
        public ISellingPlanDeliveryPolicy? deliveryPolicy { get; set; }
        ///<summary>
        ///Buyer facing string which describes the selling plan commitment.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///When to reserve inventory for a selling plan.
        ///</summary>
        public SellingPlanInventoryPolicy? inventoryPolicy { get; set; }
        ///<summary>
        ///A customer-facing description of the selling plan.
        ///
        ///If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
        ///</summary>
        public IEnumerable<string>? options { get; set; }
        ///<summary>
        ///Relative position of the selling plan for display. A lower position will be displayed before a higher position.
        ///</summary>
        public int? position { get; set; }
        ///<summary>
        ///Selling plan pricing details.
        ///</summary>
        public IEnumerable<ISellingPlanPricingPolicy>? pricingPolicies { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
    }

    ///<summary>
    ///Represents a selling plan policy anchor.
    ///</summary>
    public class SellingPlanAnchor : GraphQLObject<SellingPlanAnchor>
    {
        ///<summary>
        ///The cutoff day for the anchor.
        ///
        ///If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
        ///the days of the week according to ISO 8601, where 1 is Monday.
        ///
        ///If `type` is MONTHDAY, then the value must be between 1-31.
        ///
        ///If `type` is YEARDAY, then the value must be `null`.
        ///</summary>
        public int? cutoffDay { get; set; }
        ///<summary>
        ///The day of the anchor.
        ///
        ///If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
        ///the days of the week according to ISO 8601, where 1 is Monday.
        ///
        ///If `type` isn't WEEKDAY, then the value must be between 1-31.
        ///</summary>
        public int? day { get; set; }
        ///<summary>
        ///The month of the anchor. If type is different than YEARDAY, then the value must
        ///be `null` or between 1-12.
        ///</summary>
        public int? month { get; set; }
        ///<summary>
        ///Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
        ///</summary>
        public SellingPlanAnchorType? type { get; set; }
    }

    ///<summary>
    ///Represents the anchor type.
    ///</summary>
    public enum SellingPlanAnchorType
    {
        ///<summary>
        ///Which day of the week, between 1-7.
        ///</summary>
        WEEKDAY,
        ///<summary>
        ///Which day of the month, between 1-31.
        ///</summary>
        MONTHDAY,
        ///<summary>
        ///Which days of the month and year, month between 1-12, and day between 1-31.
        ///</summary>
        YEARDAY,
    }

    ///<summary>
    ///Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
    ///three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
    ///policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
    ///We recommend backing up these records if you need to restore them later.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SellingPlanFixedBillingPolicy), typeDiscriminator: "SellingPlanFixedBillingPolicy")]
    [JsonDerivedType(typeof(SellingPlanRecurringBillingPolicy), typeDiscriminator: "SellingPlanRecurringBillingPolicy")]
    public interface ISellingPlanBillingPolicy : IGraphQLObject
    {
        public SellingPlanFixedBillingPolicy? AsSellingPlanFixedBillingPolicy() => this as SellingPlanFixedBillingPolicy;
        public SellingPlanRecurringBillingPolicy? AsSellingPlanRecurringBillingPolicy() => this as SellingPlanRecurringBillingPolicy;
    }

    ///<summary>
    ///The category of the selling plan. For the `OTHER` category,
    ///         you must fill out our [request form](https://docs.google.com/forms/d/e/1FAIpQLSeU18Xmw0Q61V8wdH-dfGafFqIBfRchQKUO8WAF3yJTvgyyZQ/viewform),
    ///         where we'll review your request for a new purchase option.
    ///</summary>
    public enum SellingPlanCategory
    {
        ///<summary>
        ///The selling plan is for anything not in one of the other categories.
        ///</summary>
        OTHER,
        ///<summary>
        ///The selling plan is for pre-orders.
        ///</summary>
        PRE_ORDER,
        ///<summary>
        ///The selling plan is for subscriptions.
        ///</summary>
        SUBSCRIPTION,
        ///<summary>
        ///The selling plan is for try before you buy purchases.
        ///</summary>
        TRY_BEFORE_YOU_BUY,
    }

    ///<summary>
    ///The amount charged at checkout when the full amount isn't charged at checkout.
    ///</summary>
    public class SellingPlanCheckoutCharge : GraphQLObject<SellingPlanCheckoutCharge>
    {
        ///<summary>
        ///The charge type for the checkout charge.
        ///</summary>
        public SellingPlanCheckoutChargeType? type { get; set; }
        ///<summary>
        ///The charge value for the checkout charge.
        ///</summary>
        public ISellingPlanCheckoutChargeValue? value { get; set; }
    }

    ///<summary>
    ///The percentage value of the price used for checkout charge.
    ///</summary>
    public class SellingPlanCheckoutChargePercentageValue : GraphQLObject<SellingPlanCheckoutChargePercentageValue>, ISellingPlanCheckoutChargeValue
    {
        ///<summary>
        ///The percentage value of the price used for checkout charge.
        ///</summary>
        public float? percentage { get; set; }
    }

    ///<summary>
    ///The checkout charge when the full amount isn't charged at checkout.
    ///</summary>
    public enum SellingPlanCheckoutChargeType
    {
        ///<summary>
        ///The checkout charge is a percentage of the product or variant price.
        ///</summary>
        PERCENTAGE,
        ///<summary>
        ///The checkout charge is a fixed price amount.
        ///</summary>
        PRICE,
    }

    ///<summary>
    ///The portion of the price to be charged at checkout.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(MoneyV2), typeDiscriminator: "MoneyV2")]
    [JsonDerivedType(typeof(SellingPlanCheckoutChargePercentageValue), typeDiscriminator: "SellingPlanCheckoutChargePercentageValue")]
    public interface ISellingPlanCheckoutChargeValue : IGraphQLObject
    {
        public MoneyV2? AsMoneyV2() => this as MoneyV2;
        public SellingPlanCheckoutChargePercentageValue? AsSellingPlanCheckoutChargePercentageValue() => this as SellingPlanCheckoutChargePercentageValue;
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SellingPlans.
    ///</summary>
    public class SellingPlanConnection : GraphQLObject<SellingPlanConnection>, IConnectionWithNodesAndEdges<SellingPlanEdge, SellingPlan>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SellingPlanEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SellingPlanEdge.
        ///</summary>
        public IEnumerable<SellingPlan>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
    ///every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
    ///pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
    ///We recommend backing up these records if you need to restore them later.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SellingPlanFixedDeliveryPolicy), typeDiscriminator: "SellingPlanFixedDeliveryPolicy")]
    [JsonDerivedType(typeof(SellingPlanRecurringDeliveryPolicy), typeDiscriminator: "SellingPlanRecurringDeliveryPolicy")]
    public interface ISellingPlanDeliveryPolicy : IGraphQLObject
    {
        public SellingPlanFixedDeliveryPolicy? AsSellingPlanFixedDeliveryPolicy() => this as SellingPlanFixedDeliveryPolicy;
        public SellingPlanRecurringDeliveryPolicy? AsSellingPlanRecurringDeliveryPolicy() => this as SellingPlanRecurringDeliveryPolicy;
        ///<summary>
        ///The specific anchor dates upon which the delivery interval calculations should be made.
        ///</summary>
        public IEnumerable<SellingPlanAnchor>? anchors { get; set; }
        ///<summary>
        ///A buffer period for orders to be included in next fulfillment anchor.
        ///</summary>
        public int? cutoff { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SellingPlan and a cursor during pagination.
    ///</summary>
    public class SellingPlanEdge : GraphQLObject<SellingPlanEdge>, IEdge<SellingPlan>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SellingPlanEdge.
        ///</summary>
        public SellingPlan? node { get; set; }
    }

    ///<summary>
    ///The fixed selling plan billing policy defines how much of the price of the product will be billed to customer
    ///at checkout. If there is an outstanding balance, it determines when it will be paid.
    ///</summary>
    public class SellingPlanFixedBillingPolicy : GraphQLObject<SellingPlanFixedBillingPolicy>, ISellingPlanBillingPolicy
    {
        ///<summary>
        ///The checkout charge when the full amount isn't charged at checkout.
        ///</summary>
        public SellingPlanCheckoutCharge? checkoutCharge { get; set; }
        ///<summary>
        ///The exact time when to capture the full payment.
        ///</summary>
        public DateTime? remainingBalanceChargeExactTime { get; set; }
        ///<summary>
        ///The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.
        ///</summary>
        public string? remainingBalanceChargeTimeAfterCheckout { get; set; }
        ///<summary>
        ///When to capture payment for amount due.
        ///</summary>
        public SellingPlanRemainingBalanceChargeTrigger? remainingBalanceChargeTrigger { get; set; }
    }

    ///<summary>
    ///Represents a fixed selling plan delivery policy.
    ///</summary>
    public class SellingPlanFixedDeliveryPolicy : GraphQLObject<SellingPlanFixedDeliveryPolicy>, ISellingPlanDeliveryPolicy
    {
        ///<summary>
        ///The specific anchor dates upon which the delivery interval calculations should be made.
        ///</summary>
        public IEnumerable<SellingPlanAnchor>? anchors { get; set; }
        ///<summary>
        ///A buffer period for orders to be included in next fulfillment anchor.
        ///</summary>
        public int? cutoff { get; set; }
        ///<summary>
        ///The date and time when the fulfillment should trigger.
        ///</summary>
        public DateTime? fulfillmentExactTime { get; set; }
        ///<summary>
        ///What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
        ///</summary>
        public SellingPlanFulfillmentTrigger? fulfillmentTrigger { get; set; }
        ///<summary>
        ///Whether the delivery policy is merchant or buyer-centric.
        ///Buyer-centric delivery policies state the time when the buyer will receive the goods.
        ///Merchant-centric delivery policies state the time when the fulfillment should be started.
        ///Currently, only merchant-centric delivery policies are supported.
        ///</summary>
        public SellingPlanFixedDeliveryPolicyIntent? intent { get; set; }
        ///<summary>
        ///The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
        ///</summary>
        public SellingPlanFixedDeliveryPolicyPreAnchorBehavior? preAnchorBehavior { get; set; }
    }

    ///<summary>
    ///Possible intentions of a Delivery Policy.
    ///</summary>
    public enum SellingPlanFixedDeliveryPolicyIntent
    {
        ///<summary>
        ///A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
        ///</summary>
        FULFILLMENT_BEGIN,
    }

    ///<summary>
    ///The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor.
    ///</summary>
    public enum SellingPlanFixedDeliveryPolicyPreAnchorBehavior
    {
        ///<summary>
        ///Orders placed can be fulfilled / delivered immediately. Orders placed inside a cutoff can be fulfilled / delivered at the next anchor.
        ///</summary>
        ASAP,
        ///<summary>
        ///Orders placed can be fulfilled / delivered at the next anchor date.
        ///Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
        ///delivered at the following anchor.
        ///</summary>
        NEXT,
    }

    ///<summary>
    ///Represents the pricing policy of a subscription or deferred purchase option selling plan.
    ///The selling plan fixed pricing policy works with the billing and delivery policy
    ///to determine the final price. Discounts are divided among fulfillments.
    ///For example, a subscription with a $10 discount and two deliveries will have a $5
    ///discount applied to each delivery.
    ///</summary>
    public class SellingPlanFixedPricingPolicy : GraphQLObject<SellingPlanFixedPricingPolicy>, ISellingPlanPricingPolicyBase, ISellingPlanPricingPolicy
    {
        ///<summary>
        ///The price adjustment type.
        ///</summary>
        public SellingPlanPricingPolicyAdjustmentType? adjustmentType { get; set; }
        ///<summary>
        ///The price adjustment value.
        ///</summary>
        public ISellingPlanPricingPolicyAdjustmentValue? adjustmentValue { get; set; }
        ///<summary>
        ///The date and time when the fixed selling plan pricing policy was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
    }

    ///<summary>
    ///Describes what triggers fulfillment.
    ///</summary>
    public enum SellingPlanFulfillmentTrigger
    {
        ///<summary>
        ///Use the anchor values to calculate fulfillment date.
        ///</summary>
        ANCHOR,
        ///<summary>
        ///As soon as possible.
        ///</summary>
        ASAP,
        ///<summary>
        ///At an exact time defined by the fulfillment_exact_time field.
        ///</summary>
        EXACT_TIME,
        ///<summary>
        ///Unknown. Usually to be determined in the future.
        ///</summary>
        UNKNOWN,
    }

    ///<summary>
    ///Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
    ///and associated records (selling plans and policies) are deleted 48 hours after a merchant
    ///uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
    ///</summary>
    public class SellingPlanGroup : GraphQLObject<SellingPlanGroup>, IHasPublishedTranslations, INode
    {
        ///<summary>
        ///The ID for app, exposed in Liquid and product JSON.
        ///</summary>
        public string? appId { get; set; }
        ///<summary>
        ///Whether the given product is directly associated to the selling plan group.
        ///</summary>
        public bool? appliesToProduct { get; set; }
        ///<summary>
        ///Whether the given product variant is directly associated to the selling plan group.
        ///</summary>
        public bool? appliesToProductVariant { get; set; }
        ///<summary>
        ///Whether any of the product variants of the given product are associated to the selling plan group.
        ///</summary>
        public bool? appliesToProductVariants { get; set; }
        ///<summary>
        ///The date and time when the selling plan group was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The merchant-facing description of the selling plan group.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The merchant-facing label of the selling plan group.
        ///</summary>
        public string? merchantCode { get; set; }
        ///<summary>
        ///The buyer-facing label of the selling plan group.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
        ///</summary>
        public IEnumerable<string>? options { get; set; }
        ///<summary>
        ///The relative position of the selling plan group for display.
        ///</summary>
        public int? position { get; set; }
        ///<summary>
        ///A count of products associated to the selling plan group.
        ///</summary>
        public int? productCount { get; set; }
        ///<summary>
        ///A count of product variants associated to the selling plan group.
        ///</summary>
        public int? productVariantCount { get; set; }
        ///<summary>
        ///Product variants associated to the selling plan group.
        ///</summary>
        public ProductVariantConnection? productVariants { get; set; }
        ///<summary>
        ///Products associated to the selling plan group.
        ///</summary>
        public ProductConnection? products { get; set; }
        ///<summary>
        ///Selling plans associated to the selling plan group.
        ///</summary>
        public SellingPlanConnection? sellingPlans { get; set; }
        ///<summary>
        ///A summary of the policies associated to the selling plan group.
        ///</summary>
        public string? summary { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
    }

    ///<summary>
    ///Return type for `sellingPlanGroupAddProductVariants` mutation.
    ///</summary>
    public class SellingPlanGroupAddProductVariantsPayload : GraphQLObject<SellingPlanGroupAddProductVariantsPayload>
    {
        ///<summary>
        ///The updated selling plan group.
        ///</summary>
        public SellingPlanGroup? sellingPlanGroup { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `sellingPlanGroupAddProducts` mutation.
    ///</summary>
    public class SellingPlanGroupAddProductsPayload : GraphQLObject<SellingPlanGroupAddProductsPayload>
    {
        ///<summary>
        ///The updated selling plan group.
        ///</summary>
        public SellingPlanGroup? sellingPlanGroup { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SellingPlanGroups.
    ///</summary>
    public class SellingPlanGroupConnection : GraphQLObject<SellingPlanGroupConnection>, IConnectionWithNodesAndEdges<SellingPlanGroupEdge, SellingPlanGroup>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SellingPlanGroupEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SellingPlanGroupEdge.
        ///</summary>
        public IEnumerable<SellingPlanGroup>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `sellingPlanGroupCreate` mutation.
    ///</summary>
    public class SellingPlanGroupCreatePayload : GraphQLObject<SellingPlanGroupCreatePayload>
    {
        ///<summary>
        ///The created selling plan group object.
        ///</summary>
        public SellingPlanGroup? sellingPlanGroup { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `sellingPlanGroupDelete` mutation.
    ///</summary>
    public class SellingPlanGroupDeletePayload : GraphQLObject<SellingPlanGroupDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted selling plan group object.
        ///</summary>
        public string? deletedSellingPlanGroupId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
    ///</summary>
    public class SellingPlanGroupEdge : GraphQLObject<SellingPlanGroupEdge>, IEdge<SellingPlanGroup>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SellingPlanGroupEdge.
        ///</summary>
        public SellingPlanGroup? node { get; set; }
    }

    ///<summary>
    ///Return type for `sellingPlanGroupRemoveProductVariants` mutation.
    ///</summary>
    public class SellingPlanGroupRemoveProductVariantsPayload : GraphQLObject<SellingPlanGroupRemoveProductVariantsPayload>
    {
        ///<summary>
        ///The removed product variant ids.
        ///</summary>
        public IEnumerable<string>? removedProductVariantIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `sellingPlanGroupRemoveProducts` mutation.
    ///</summary>
    public class SellingPlanGroupRemoveProductsPayload : GraphQLObject<SellingPlanGroupRemoveProductsPayload>
    {
        ///<summary>
        ///The removed product ids.
        ///</summary>
        public IEnumerable<string>? removedProductIds { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the SellingPlanGroup query.
    ///</summary>
    public enum SellingPlanGroupSortKeys
    {
        ///<summary>
        ///Sort by the `name` value.
        ///</summary>
        NAME,
        ///<summary>
        ///Sort by the `updated_at` value.
        ///</summary>
        UPDATED_AT,
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `sellingPlanGroupUpdate` mutation.
    ///</summary>
    public class SellingPlanGroupUpdatePayload : GraphQLObject<SellingPlanGroupUpdatePayload>
    {
        ///<summary>
        ///The IDs of the deleted Subscription Plans.
        ///</summary>
        public IEnumerable<string>? deletedSellingPlanIds { get; set; }
        ///<summary>
        ///The updated Selling Plan Group.
        ///</summary>
        public SellingPlanGroup? sellingPlanGroup { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SellingPlanGroupUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a selling plan group custom error.
    ///</summary>
    public class SellingPlanGroupUserError : GraphQLObject<SellingPlanGroupUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public SellingPlanGroupUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `SellingPlanGroupUserError`.
    ///</summary>
    public enum SellingPlanGroupUserErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value should be equal to the value allowed.
        ///</summary>
        EQUAL_TO,
        ///<summary>
        ///The input value should be greater than the minimum allowed value.
        ///</summary>
        GREATER_THAN,
        ///<summary>
        ///The input value should be greater than or equal to the minimum value allowed.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value should be less than the maximum value allowed.
        ///</summary>
        LESS_THAN,
        ///<summary>
        ///The input value should be less than or equal to the maximum value allowed.
        ///</summary>
        LESS_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value is not a number.
        ///</summary>
        NOT_A_NUMBER,
        ///<summary>
        ///The record with the ID used as the input value couldn't be found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value is too big.
        ///</summary>
        TOO_BIG,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
        ///<summary>
        ///The input value is the wrong length.
        ///</summary>
        WRONG_LENGTH,
        ///<summary>
        ///Exceeded the selling plan limit (31).
        ///</summary>
        SELLING_PLAN_COUNT_UPPER_BOUND,
        ///<summary>
        ///Must include at least one selling plan.
        ///</summary>
        SELLING_PLAN_COUNT_LOWER_BOUND,
        ///<summary>
        ///Selling plan's billing policy max cycles must be greater than min cycles.
        ///</summary>
        SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES,
        ///<summary>
        ///Selling plan's billing and delivery policies anchors must be equal.
        ///</summary>
        SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL,
        ///<summary>
        ///Selling plan's billing cycle must be a multiple of delivery cycle.
        ///</summary>
        SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE,
        ///<summary>
        ///Selling plan's pricing policies must contain one fixed pricing policy.
        ///</summary>
        SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY,
        ///<summary>
        ///Cannot define option2 on this selling plan as there's no label on the parent selling plan group.
        ///</summary>
        SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP,
        ///<summary>
        ///Cannot define option3 on this selling plan as there's no label on the parent selling plan group.
        ///</summary>
        SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP,
        ///<summary>
        ///Selling plan's option2 is required because option2 exists.
        ///</summary>
        SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP,
        ///<summary>
        ///Selling plan's option3 is required because option3 exists.
        ///</summary>
        SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP,
        ///<summary>
        ///Selling plans can't have more than 2 pricing policies.
        ///</summary>
        SELLING_PLAN_PRICING_POLICIES_LIMIT,
        ///<summary>
        ///The selling plan list provided contains 1 or more invalid IDs.
        ///</summary>
        RESOURCE_LIST_CONTAINS_INVALID_IDS,
        ///<summary>
        ///Product variant does not exist.
        ///</summary>
        PRODUCT_VARIANT_DOES_NOT_EXIST,
        ///<summary>
        ///Product does not exist.
        ///</summary>
        PRODUCT_DOES_NOT_EXIST,
        ///<summary>
        ///Selling plan group does not exist.
        ///</summary>
        GROUP_DOES_NOT_EXIST,
        ///<summary>
        ///Selling plan group could not be deleted.
        ///</summary>
        GROUP_COULD_NOT_BE_DELETED,
        ///<summary>
        ///Could not add the resource to the selling plan group.
        ///</summary>
        ERROR_ADDING_RESOURCE_TO_GROUP,
        ///<summary>
        ///Missing delivery policy.
        ///</summary>
        SELLING_PLAN_DELIVERY_POLICY_MISSING,
        ///<summary>
        ///Missing billing policy.
        ///</summary>
        SELLING_PLAN_BILLING_POLICY_MISSING,
        ///<summary>
        ///Selling plan does not exist.
        ///</summary>
        PLAN_DOES_NOT_EXIST,
        ///<summary>
        ///Selling plan ID must be specified to update.
        ///</summary>
        PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE,
        ///<summary>
        ///Only one billing policy type can be defined.
        ///</summary>
        ONLY_NEED_ONE_BILLING_POLICY_TYPE,
        ///<summary>
        ///Only one delivery policy type can be defined.
        ///</summary>
        ONLY_NEED_ONE_DELIVERY_POLICY_TYPE,
        ///<summary>
        ///Only one pricing policy type can be defined.
        ///</summary>
        ONLY_NEED_ONE_PRICING_POLICY_TYPE,
        ///<summary>
        ///Billing and delivery policy types must be the same.
        ///</summary>
        BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME,
        ///<summary>
        ///Only one pricing policy adjustment value type can be defined.
        ///</summary>
        ONLY_NEED_ONE_PRICING_POLICY_VALUE,
        ///<summary>
        ///Pricing policy's adjustment value and adjustment type must match.
        ///</summary>
        PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH,
        ///<summary>
        ///Cannot have multiple selling plans with the same name.
        ///</summary>
        SELLING_PLAN_DUPLICATE_NAME,
        ///<summary>
        ///Cannot have multiple selling plans with the same options.
        ///</summary>
        SELLING_PLAN_DUPLICATE_OPTIONS,
        ///<summary>
        ///A fixed selling plan can have at most one pricing policy.
        ///</summary>
        SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT,
        ///<summary>
        ///A fixed billing policy's remaining_balance_charge_exact_time can't be blank when the remaining_balance_charge_trigger is EXACT_TIME.
        ///</summary>
        REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED,
        ///<summary>
        ///A fixed billing policy's checkout charge value and type must match.
        ///</summary>
        CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH,
        ///<summary>
        ///A fixed billing policy's checkout charge can have at most one value.
        ///</summary>
        ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE,
        ///<summary>
        ///A fixed billing policy's remaining_balance_charge_exact_time must not be present when the remaining_balance_charge_trigger isn't EXACT_TIME.
        ///</summary>
        REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED,
        ///<summary>
        ///A fixed billing policy's remaining_balance_charge_time_after_checkout must be present and greater than zero when the remaining_balance_charge_trigger is TIME_AFTER_CHECKOUT.
        ///</summary>
        REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO,
        ///<summary>
        ///A fixed billing policy's remaining_balance_charge_trigger must be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is 100.
        ///</summary>
        REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT,
        ///<summary>
        ///A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is less than 100.
        ///</summary>
        REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE,
        ///<summary>
        ///A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PRICE.
        ///</summary>
        REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE,
        ///<summary>
        ///A fixed billing policy's fulfillment_exact_time can't be blank when the fulfillment_trigger is EXACT_TIME.
        ///</summary>
        FULFILLMENT_EXACT_TIME_REQUIRED,
        ///<summary>
        ///A fixed billing policy's fulfillment_exact_time must not be present when the fulfillment_trigger isn't EXACT_TIME.
        ///</summary>
        FULFILLMENT_EXACT_TIME_NOT_ALLOWED,
        ///<summary>
        ///A fixed delivery policy's anchors must not be present when the fulfillment_trigger isn't ANCHOR.
        ///</summary>
        SELLING_PLAN_ANCHORS_NOT_ALLOWED,
        ///<summary>
        ///A fixed delivery policy's anchors must be present when the fulfillment_trigger is ANCHOR.
        ///</summary>
        SELLING_PLAN_ANCHORS_REQUIRED,
        ///<summary>
        ///A selling plan can't have both fixed and recurring billing policies.
        ///</summary>
        ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING,
        ///<summary>
        ///A selling plan can't have both fixed and recurring delivery policies.
        ///</summary>
        ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY,
        ///<summary>
        ///Billing policy's interval is too large.
        ///</summary>
        BILLING_POLICY_INTERVAL_TOO_LARGE,
        ///<summary>
        ///Delivery policy's interval is too large.
        ///</summary>
        DELIVERY_POLICY_INTERVAL_TOO_LARGE,
    }

    ///<summary>
    ///Represents valid selling plan interval.
    ///</summary>
    public enum SellingPlanInterval
    {
        ///<summary>
        ///Day interval.
        ///</summary>
        DAY,
        ///<summary>
        ///Week interval.
        ///</summary>
        WEEK,
        ///<summary>
        ///Month interval.
        ///</summary>
        MONTH,
        ///<summary>
        ///Year interval.
        ///</summary>
        YEAR,
    }

    ///<summary>
    ///The selling plan inventory policy.
    ///</summary>
    public class SellingPlanInventoryPolicy : GraphQLObject<SellingPlanInventoryPolicy>
    {
        ///<summary>
        ///When to reserve inventory for the order.
        ///</summary>
        public SellingPlanReserve? reserve { get; set; }
    }

    ///<summary>
    ///Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
    ///for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
    ///associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
    ///hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
    ///to restore them later.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SellingPlanFixedPricingPolicy), typeDiscriminator: "SellingPlanFixedPricingPolicy")]
    [JsonDerivedType(typeof(SellingPlanRecurringPricingPolicy), typeDiscriminator: "SellingPlanRecurringPricingPolicy")]
    public interface ISellingPlanPricingPolicy : IGraphQLObject
    {
        public SellingPlanFixedPricingPolicy? AsSellingPlanFixedPricingPolicy() => this as SellingPlanFixedPricingPolicy;
        public SellingPlanRecurringPricingPolicy? AsSellingPlanRecurringPricingPolicy() => this as SellingPlanRecurringPricingPolicy;
        ///<summary>
        ///The price adjustment type.
        ///</summary>
        public SellingPlanPricingPolicyAdjustmentType? adjustmentType { get; set; }
        ///<summary>
        ///The price adjustment value.
        ///</summary>
        public ISellingPlanPricingPolicyAdjustmentValue? adjustmentValue { get; set; }
        ///<summary>
        ///The date and time when the fixed selling plan pricing policy was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
    }

    ///<summary>
    ///Represents a selling plan pricing policy adjustment type.
    ///</summary>
    public enum SellingPlanPricingPolicyAdjustmentType
    {
        ///<summary>
        ///Percentage off adjustment.
        ///</summary>
        PERCENTAGE,
        ///<summary>
        ///Fixed amount off adjustment.
        ///</summary>
        FIXED_AMOUNT,
        ///<summary>
        ///Price of the policy.
        ///</summary>
        PRICE,
    }

    ///<summary>
    ///Represents a selling plan pricing policy adjustment value type.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(MoneyV2), typeDiscriminator: "MoneyV2")]
    [JsonDerivedType(typeof(SellingPlanPricingPolicyPercentageValue), typeDiscriminator: "SellingPlanPricingPolicyPercentageValue")]
    public interface ISellingPlanPricingPolicyAdjustmentValue : IGraphQLObject
    {
        public MoneyV2? AsMoneyV2() => this as MoneyV2;
        public SellingPlanPricingPolicyPercentageValue? AsSellingPlanPricingPolicyPercentageValue() => this as SellingPlanPricingPolicyPercentageValue;
    }

    ///<summary>
    ///Represents selling plan pricing policy common fields.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SellingPlanFixedPricingPolicy), typeDiscriminator: "SellingPlanFixedPricingPolicy")]
    [JsonDerivedType(typeof(SellingPlanRecurringPricingPolicy), typeDiscriminator: "SellingPlanRecurringPricingPolicy")]
    public interface ISellingPlanPricingPolicyBase : IGraphQLObject
    {
        public SellingPlanFixedPricingPolicy? AsSellingPlanFixedPricingPolicy() => this as SellingPlanFixedPricingPolicy;
        public SellingPlanRecurringPricingPolicy? AsSellingPlanRecurringPricingPolicy() => this as SellingPlanRecurringPricingPolicy;
        ///<summary>
        ///The price adjustment type.
        ///</summary>
        public SellingPlanPricingPolicyAdjustmentType? adjustmentType { get; }
        ///<summary>
        ///The price adjustment value.
        ///</summary>
        public ISellingPlanPricingPolicyAdjustmentValue? adjustmentValue { get; }
    }

    ///<summary>
    ///The percentage value of a selling plan pricing policy percentage type.
    ///</summary>
    public class SellingPlanPricingPolicyPercentageValue : GraphQLObject<SellingPlanPricingPolicyPercentageValue>, ISellingPlanPricingPolicyAdjustmentValue
    {
        ///<summary>
        ///The percentage value.
        ///</summary>
        public float? percentage { get; set; }
    }

    ///<summary>
    ///Represents a recurring selling plan billing policy.
    ///</summary>
    public class SellingPlanRecurringBillingPolicy : GraphQLObject<SellingPlanRecurringBillingPolicy>, ISellingPlanBillingPolicy
    {
        ///<summary>
        ///Specific anchor dates upon which the billing interval calculations should be made.
        ///</summary>
        public IEnumerable<SellingPlanAnchor>? anchors { get; set; }
        ///<summary>
        ///The date and time when the selling plan billing policy was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The billing frequency, it can be either: day, week, month or year.
        ///</summary>
        public SellingPlanInterval? interval { get; set; }
        ///<summary>
        ///The number of intervals between billings.
        ///</summary>
        public int? intervalCount { get; set; }
        ///<summary>
        ///Maximum number of billing iterations.
        ///</summary>
        public int? maxCycles { get; set; }
        ///<summary>
        ///Minimum number of billing iterations.
        ///</summary>
        public int? minCycles { get; set; }
    }

    ///<summary>
    ///Represents a recurring selling plan delivery policy.
    ///</summary>
    public class SellingPlanRecurringDeliveryPolicy : GraphQLObject<SellingPlanRecurringDeliveryPolicy>, ISellingPlanDeliveryPolicy
    {
        ///<summary>
        ///The specific anchor dates upon which the delivery interval calculations should be made.
        ///</summary>
        public IEnumerable<SellingPlanAnchor>? anchors { get; set; }
        ///<summary>
        ///The date and time when the selling plan delivery policy was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///Number of days which represent a buffer period for orders to be included in a cycle.
        ///</summary>
        public int? cutoff { get; set; }
        ///<summary>
        ///Whether the delivery policy is merchant or buyer-centric.
        ///Buyer-centric delivery policies state the time when the buyer will receive the goods.
        ///Merchant-centric delivery policies state the time when the fulfillment should be started.
        ///Currently, only merchant-centric delivery policies are supported.
        ///</summary>
        public SellingPlanRecurringDeliveryPolicyIntent? intent { get; set; }
        ///<summary>
        ///The delivery frequency, it can be either: day, week, month or year.
        ///</summary>
        public SellingPlanInterval? interval { get; set; }
        ///<summary>
        ///The number of intervals between deliveries.
        ///</summary>
        public int? intervalCount { get; set; }
        ///<summary>
        ///The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
        ///</summary>
        public SellingPlanRecurringDeliveryPolicyPreAnchorBehavior? preAnchorBehavior { get; set; }
    }

    ///<summary>
    ///Whether the delivery policy is merchant or buyer-centric.
    ///</summary>
    public enum SellingPlanRecurringDeliveryPolicyIntent
    {
        ///<summary>
        ///A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
        ///</summary>
        FULFILLMENT_BEGIN,
    }

    ///<summary>
    ///The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
    ///</summary>
    public enum SellingPlanRecurringDeliveryPolicyPreAnchorBehavior
    {
        ///<summary>
        ///The orders placed can be fulfilled or delivered immediately. The orders placed inside a cutoff can be fulfilled or delivered at the next anchor.
        ///</summary>
        ASAP,
        ///<summary>
        ///The orders placed can be fulfilled or delivered at the next anchor date.
        ///The orders placed inside a cutoff will skip the next anchor and can be fulfilled or
        ///delivered at the following anchor.
        ///</summary>
        NEXT,
    }

    ///<summary>
    ///Represents a recurring selling plan pricing policy. It applies after the fixed pricing policy. By using the afterCycle parameter, you can specify the cycle when the recurring pricing policy comes into effect. Recurring pricing policies are not available for deferred purchase options.
    ///</summary>
    public class SellingPlanRecurringPricingPolicy : GraphQLObject<SellingPlanRecurringPricingPolicy>, ISellingPlanPricingPolicyBase, ISellingPlanPricingPolicy
    {
        ///<summary>
        ///The price adjustment type.
        ///</summary>
        public SellingPlanPricingPolicyAdjustmentType? adjustmentType { get; set; }
        ///<summary>
        ///The price adjustment value.
        ///</summary>
        public ISellingPlanPricingPolicyAdjustmentValue? adjustmentValue { get; set; }
        ///<summary>
        ///Cycle after which this pricing policy applies.
        ///</summary>
        public int? afterCycle { get; set; }
        ///<summary>
        ///The date and time when the recurring selling plan pricing policy was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
    }

    ///<summary>
    ///When to capture the payment for the remaining amount due.
    ///</summary>
    public enum SellingPlanRemainingBalanceChargeTrigger
    {
        ///<summary>
        ///When there's no remaining balance to be charged after checkout.
        ///</summary>
        NO_REMAINING_BALANCE,
        ///<summary>
        ///At an exact time defined by the remaining_balance_charge_exact_time field.
        ///</summary>
        EXACT_TIME,
        ///<summary>
        ///After the duration defined by the remaining_balance_charge_time_after_checkout field.
        ///</summary>
        TIME_AFTER_CHECKOUT,
    }

    ///<summary>
    ///When to reserve inventory for a selling plan.
    ///</summary>
    public enum SellingPlanReserve
    {
        ///<summary>
        ///Reserve inventory when order is fulfilled.
        ///</summary>
        ON_FULFILLMENT,
        ///<summary>
        ///Reserve inventory at time of sale.
        ///</summary>
        ON_SALE,
    }

    ///<summary>
    ///A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint.
    ///</summary>
    public class ServerPixel : GraphQLObject<ServerPixel>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The current state of this server pixel.
        ///</summary>
        public ServerPixelStatus? status { get; set; }
        ///<summary>
        ///Address of the EventBridge or PubSub endpoint.
        ///</summary>
        public string? webhookEndpointAddress { get; set; }
    }

    ///<summary>
    ///Return type for `serverPixelCreate` mutation.
    ///</summary>
    public class ServerPixelCreatePayload : GraphQLObject<ServerPixelCreatePayload>
    {
        ///<summary>
        ///The new server pixel.
        ///</summary>
        public ServerPixel? serverPixel { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ErrorsServerPixelUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `serverPixelDelete` mutation.
    ///</summary>
    public class ServerPixelDeletePayload : GraphQLObject<ServerPixelDeletePayload>
    {
        ///<summary>
        ///The ID of the server pixel that was deleted, if one was deleted.
        ///</summary>
        public string? deletedServerPixelId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ErrorsServerPixelUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The current state of a server pixel.
    ///</summary>
    public enum ServerPixelStatus
    {
        ///<summary>
        ///This server pixel is connected: it will stream customer events to the endpoint if it is configured properly.
        ///</summary>
        CONNECTED,
        ///<summary>
        ///This server pixel is disconnected and unconfigured: it does not stream events to the endpoint and no endpoint address had been added to the server pixel.
        ///</summary>
        DISCONNECTED_UNCONFIGURED,
        ///<summary>
        ///This server pixel is disconnected: it does not stream events to the endpoint and an endpoint address has been added to the server pixel.
        ///</summary>
        DISCONNECTED_CONFIGURED,
    }

    ///<summary>
    ///The class of the discount for combining purposes.
    ///</summary>
    public enum ShippingDiscountClass
    {
        ///<summary>
        ///Combined as a shipping discount.
        ///</summary>
        SHIPPING,
    }

    ///<summary>
    ///Represents the shipping details that the customer chose for their order.
    ///</summary>
    public class ShippingLine : GraphQLObject<ShippingLine>
    {
        ///<summary>
        ///A reference to the carrier service that provided the rate.
        ///Present when the rate was computed by a third-party carrier service.
        ///</summary>
        public string? carrierIdentifier { get; set; }
        ///<summary>
        ///A reference to the shipping method.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///Whether the shipping line is custom or not.
        ///</summary>
        public bool? custom { get; set; }
        ///<summary>
        ///The general classification of the delivery method.
        ///</summary>
        public string? deliveryCategory { get; set; }
        ///<summary>
        ///The discounts that have been allocated to the shipping line.
        ///</summary>
        public IEnumerable<DiscountAllocation>? discountAllocations { get; set; }

        ///<summary>
        ///The pre-tax shipping price with discounts applied.
        ///</summary>
        [Obsolete("Use `discountedPriceSet` instead.")]
        public MoneyV2? discountedPrice { get; set; }
        ///<summary>
        ///The pre-tax shipping price with discounts applied.
        ///</summary>
        public MoneyBag? discountedPriceSet { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }

        ///<summary>
        ///The pre-tax shipping price without any discounts applied.
        ///</summary>
        [Obsolete("Use `originalPriceSet` instead.")]
        public MoneyV2? originalPrice { get; set; }
        ///<summary>
        ///The pre-tax shipping price without any discounts applied.
        ///</summary>
        public MoneyBag? originalPriceSet { get; set; }
        ///<summary>
        ///The phone number at the shipping address.
        ///</summary>
        public string? phone { get; set; }

        ///<summary>
        ///Returns the price of the shipping line.
        ///</summary>
        [Obsolete("Use `originalPriceSet` instead.")]
        public decimal? price { get; set; }
        ///<summary>
        ///The fulfillment service requested for the shipping method.
        ///Present if the shipping method requires processing by a third party fulfillment service.
        ///</summary>
        public FulfillmentService? requestedFulfillmentService { get; set; }
        ///<summary>
        ///A unique identifier for the shipping rate. The format can change without notice and isn't meant to be shown to users.
        ///</summary>
        public string? shippingRateHandle { get; set; }
        ///<summary>
        ///Returns the rate source for the shipping line.
        ///</summary>
        public string? source { get; set; }
        ///<summary>
        ///The TaxLine objects connected to this shipping line.
        ///</summary>
        public IEnumerable<TaxLine>? taxLines { get; set; }
        ///<summary>
        ///Returns the title of the shipping line.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ShippingLines.
    ///</summary>
    public class ShippingLineConnection : GraphQLObject<ShippingLineConnection>, IConnectionWithNodesAndEdges<ShippingLineEdge, ShippingLine>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ShippingLineEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ShippingLineEdge.
        ///</summary>
        public IEnumerable<ShippingLine>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ShippingLine and a cursor during pagination.
    ///</summary>
    public class ShippingLineEdge : GraphQLObject<ShippingLineEdge>, IEdge<ShippingLine>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ShippingLineEdge.
        ///</summary>
        public ShippingLine? node { get; set; }
    }

    ///<summary>
    ///A sale associated with a shipping charge.
    ///</summary>
    public class ShippingLineSale : GraphQLObject<ShippingLineSale>, ISale
    {
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; set; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; set; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
        ///</summary>
        public ShippingLine? shippingLine { get; set; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; set; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; set; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; set; }
    }

    ///<summary>
    ///The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
    ///</summary>
    public class ShippingMethod : GraphQLObject<ShippingMethod>
    {
        ///<summary>
        ///A unique code associated with the rate. For example: `expedited_mail`
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///A description of the rate, which customers will see at checkout.
        ///For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
        ///</summary>
        public string? label { get; set; }
    }

    ///<summary>
    ///Return type for `shippingPackageDelete` mutation.
    ///</summary>
    public class ShippingPackageDeletePayload : GraphQLObject<ShippingPackageDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted shipping package.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `shippingPackageMakeDefault` mutation.
    ///</summary>
    public class ShippingPackageMakeDefaultPayload : GraphQLObject<ShippingPackageMakeDefaultPayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Type of a shipping package.
    ///</summary>
    public enum ShippingPackageType
    {
        ///<summary>
        ///A shipping box.
        ///</summary>
        BOX,
        ///<summary>
        ///A flat rate packaging supplied by a carrier.
        ///</summary>
        FLAT_RATE,
        ///<summary>
        ///An envelope.
        ///</summary>
        ENVELOPE,
        ///<summary>
        ///A soft-pack, bubble-wrap or vinyl envelope.
        ///</summary>
        SOFT_PACK,
    }

    ///<summary>
    ///Return type for `shippingPackageUpdate` mutation.
    ///</summary>
    public class ShippingPackageUpdatePayload : GraphQLObject<ShippingPackageUpdatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///A shipping rate is an additional cost added to the cost of the products that were ordered.
    ///</summary>
    public class ShippingRate : GraphQLObject<ShippingRate>
    {
        ///<summary>
        ///Human-readable unique identifier for this shipping rate.
        ///</summary>
        public string? handle { get; set; }
        ///<summary>
        ///The cost associated with the shipping rate.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///The name of the shipping rate.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///Represents the shipping costs refunded on the Refund.
    ///</summary>
    public class ShippingRefund : GraphQLObject<ShippingRefund>
    {
        ///<summary>
        ///The monetary value of the shipping fees to be refunded.
        ///</summary>
        [Obsolete("Use `amountSet` instead.")]
        public decimal? amount { get; set; }
        ///<summary>
        ///The monetary value of the shipping fees to be refunded in shop and presentment currencies.
        ///</summary>
        public MoneyBag? amountSet { get; set; }

        ///<summary>
        ///The maximum amount of shipping fees currently refundable.
        ///</summary>
        [Obsolete("Use `maximumRefundableSet` instead.")]
        public decimal? maximumRefundable { get; set; }
        ///<summary>
        ///The maximum amount of shipping fees currently refundable in shop and presentment currencies.
        ///</summary>
        public MoneyBag? maximumRefundableSet { get; set; }

        ///<summary>
        ///The monetary value of the tax allocated to shipping fees to be refunded.
        ///</summary>
        [Obsolete("Use `taxSet` instead.")]
        public decimal? tax { get; set; }
        ///<summary>
        ///The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
        ///</summary>
        public MoneyBag? taxSet { get; set; }
    }

    ///<summary>
    ///Represents a collection of general settings and information about the shop.
    ///</summary>
    public class Shop : GraphQLObject<Shop>, IHasMetafields, IHasPublishedTranslations, INode, IMetafieldReferencer
    {
        ///<summary>
        ///A list of the shop's active alert messages that appear in the Shopify admin.
        ///</summary>
        public IEnumerable<ShopAlert>? alerts { get; set; }
        ///<summary>
        ///A list of the shop's product categories. Limit: 1000 product categories.
        ///</summary>
        public IEnumerable<ProductCategory>? allProductCategories { get; set; }

        ///<summary>
        ///The token required to query the shop's reports or dashboards.
        ///</summary>
        [Obsolete("Not supported anymore.")]
        public string? analyticsToken { get; set; }
        ///<summary>
        ///The paginated list of fulfillment orders assigned to the shop locations owned by the app.
        ///
        ///Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
        ///managed by
        ///[fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
        ///that are registered by the app.
        ///One app (api_client) can host multiple fulfillment services on a shop.
        ///Each fulfillment service manages a dedicated location on a shop.
        ///Assigned fulfillment orders can have associated
        ///[fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
        ///or might currently not be requested to be fulfilled.
        ///
        ///The app must have `read_assigned_fulfillment_orders`
        ///[access scope](https://shopify.dev/docs/api/usage/access-scopes)
        ///to be able to retrieve fulfillment orders assigned to its locations.
        ///
        ///All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
        ///Perform filtering with the `assignmentStatus` argument
        ///to receive only fulfillment orders that have been requested to be fulfilled.
        ///</summary>
        public FulfillmentOrderConnection? assignedFulfillmentOrders { get; set; }
        ///<summary>
        ///The list of sales channels not currently installed on the shop.
        ///</summary>
        public AppConnection? availableChannelApps { get; set; }
        ///<summary>
        ///The shop's billing address information.
        ///</summary>
        public ShopAddress? billingAddress { get; set; }

        ///<summary>
        ///Exposes the number of channels.
        ///</summary>
        [Obsolete("Use `publicationCount` instead.")]
        public int? channelCount { get; set; }
        ///<summary>
        ///List of all channel definitions associated with a shop.
        ///</summary>
        public IEnumerable<AvailableChannelDefinitionsByChannel>? channelDefinitionsForInstalledChannels { get; set; }

        ///<summary>
        ///List of the shop's active sales channels.
        ///</summary>
        [Obsolete("Use `QueryRoot.channels` instead.")]
        public ChannelConnection? channels { get; set; }
        ///<summary>
        ///Specifies whether the shop supports checkouts via Checkout API.
        ///</summary>
        public bool? checkoutApiSupported { get; set; }

        ///<summary>
        ///Return a collection by its handle.
        ///</summary>
        [Obsolete("Use `QueryRoot.collectionByHandle` instead.")]
        public Collection? collectionByHandle { get; set; }

        ///<summary>
        ///List of the shop's collection saved searches.
        ///</summary>
        [Obsolete("Use `QueryRoot.collectionSavedSearches` instead.")]
        public SavedSearchConnection? collectionSavedSearches { get; set; }

        ///<summary>
        ///List of the shop's collections.
        ///</summary>
        [Obsolete("Use `QueryRoot.collections` instead.")]
        public CollectionConnection? collections { get; set; }
        ///<summary>
        ///The public-facing contact email address for the shop.
        ///Customers will use this email to communicate with the shop owner.
        ///</summary>
        public string? contactEmail { get; set; }
        ///<summary>
        ///Countries that have been defined in shipping zones for the shop.
        ///</summary>
        public CountriesInShippingZones? countriesInShippingZones { get; set; }
        ///<summary>
        ///The three letter code for the currency that the shop sells in.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
        ///<summary>
        ///How currencies are displayed on your store.
        ///</summary>
        public CurrencyFormats? currencyFormats { get; set; }
        ///<summary>
        ///The presentment currency settings for the shop excluding the shop's own currency.
        ///</summary>
        public CurrencySettingConnection? currencySettings { get; set; }
        ///<summary>
        ///Whether customer accounts are required, optional, or disabled for the shop.
        ///</summary>
        public ShopCustomerAccountsSetting? customerAccounts { get; set; }
        ///<summary>
        ///Information about the shop's customer accounts.
        ///</summary>
        public CustomerAccountsV2? customerAccountsV2 { get; set; }

        ///<summary>
        ///List of the shop's customer saved searches.
        ///</summary>
        [Obsolete("Use `QueryRoot.customerSavedSearches` instead.")]
        public SavedSearchConnection? customerSavedSearches { get; set; }
        ///<summary>
        ///A list of tags that have been added to customer accounts.
        ///</summary>
        public StringConnection? customerTags { get; set; }

        ///<summary>
        ///Customer accounts associated to the shop.
        ///</summary>
        [Obsolete("Use `QueryRoot.customers` instead.")]
        public CustomerConnection? customers { get; set; }
        ///<summary>
        ///The shop's meta description used in search engine results.
        ///</summary>
        public string? description { get; set; }

        ///<summary>
        ///The domains configured for the shop.
        ///</summary>
        [Obsolete("Use `domainsPaginated` instead.")]
        public IEnumerable<Domain>? domains { get; set; }

        ///<summary>
        ///List of the shop's draft order saved searches.
        ///</summary>
        [Obsolete("Use `QueryRoot.draftOrderSavedSearches` instead.")]
        public SavedSearchConnection? draftOrderSavedSearches { get; set; }
        ///<summary>
        ///A list of tags that have been added to draft orders.
        ///</summary>
        public StringConnection? draftOrderTags { get; set; }

        ///<summary>
        ///List of saved draft orders on the shop.
        ///</summary>
        [Obsolete("Use `QueryRoot.draftOrders` instead.")]
        public DraftOrderConnection? draftOrders { get; set; }
        ///<summary>
        ///The shop owner's email address.
        ///Shopify will use this email address to communicate with the shop owner.
        ///</summary>
        public string? email { get; set; }
        ///<summary>
        ///The presentment currencies enabled for the shop.
        ///</summary>
        public IEnumerable<CurrencyCode>? enabledPresentmentCurrencies { get; set; }
        ///<summary>
        ///The set of features enabled for the shop.
        ///</summary>
        public ShopFeatures? features { get; set; }

        ///<summary>
        ///The paginated list of merchant-managed and third-party fulfillment orders.
        ///</summary>
        [Obsolete("Use `QueryRoot.fulfillmentOrders` instead.")]
        public FulfillmentOrderConnection? fulfillmentOrders { get; set; }
        ///<summary>
        ///List of the shop's installed fulfillment services.
        ///</summary>
        public IEnumerable<FulfillmentService>? fulfillmentServices { get; set; }
        ///<summary>
        ///The shop's time zone as defined by the IANA.
        ///</summary>
        public string? ianaTimezone { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }

        ///<summary>
        ///List of the shop's inventory items.
        ///</summary>
        [Obsolete("Use `QueryRoot.inventoryItems` instead.")]
        public InventoryItemConnection? inventoryItems { get; set; }
        ///<summary>
        ///The number of pendings orders on the shop.
        ///Limited to a maximum of 10000.
        ///</summary>
        public LimitedPendingOrderCount? limitedPendingOrderCount { get; set; }

        ///<summary>
        ///List of active locations of the shop.
        ///</summary>
        [Obsolete("Use `QueryRoot.locations` instead.")]
        public LocationConnection? locations { get; set; }

        ///<summary>
        ///List of a shop's marketing events.
        ///</summary>
        [Obsolete("Use `QueryRoot.marketingEvents` instead.")]
        public MarketingEventConnection? marketingEvents { get; set; }
        ///<summary>
        ///The approval signals for a shop to support onboarding to channel apps.
        ///</summary>
        public MerchantApprovalSignals? merchantApprovalSignals { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }
        ///<summary>
        ///The shop's .myshopify.com domain name.
        ///</summary>
        public string? myshopifyDomain { get; set; }
        ///<summary>
        ///The shop's name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The shop's settings related to navigation.
        ///</summary>
        public IEnumerable<NavigationItem>? navigationSettings { get; set; }
        ///<summary>
        ///The prefix that appears before order numbers.
        ///</summary>
        public string? orderNumberFormatPrefix { get; set; }
        ///<summary>
        ///The suffix that appears after order numbers.
        ///</summary>
        public string? orderNumberFormatSuffix { get; set; }

        ///<summary>
        ///List of the shop's order saved searches.
        ///</summary>
        [Obsolete("Use `QueryRoot.orderSavedSearches` instead.")]
        public SavedSearchConnection? orderSavedSearches { get; set; }
        ///<summary>
        ///A list of tags that have been added to orders.
        ///</summary>
        public StringConnection? orderTags { get; set; }

        ///<summary>
        ///A list of the shop's orders.
        ///</summary>
        [Obsolete("Use `QueryRoot.orders` instead.")]
        public OrderConnection? orders { get; set; }
        ///<summary>
        ///The shop's settings related to payments.
        ///</summary>
        public PaymentSettings? paymentSettings { get; set; }

        ///<summary>
        ///Number of pending orders on the shop.
        ///</summary>
        [Obsolete("Use `limitedPendingOrderCount` instead.")]
        public int? pendingOrderCount { get; set; }
        ///<summary>
        ///The shop's billing plan.
        ///</summary>
        public ShopPlan? plan { get; set; }

        ///<summary>
        ///List of the shop's price rule saved searches.
        ///</summary>
        [Obsolete("Use `QueryRoot.priceRuleSavedSearches` instead.")]
        public SavedSearchConnection? priceRuleSavedSearches { get; set; }

        ///<summary>
        ///List of the shop’s price rules.
        ///</summary>
        [Obsolete("Use `QueryRoot.priceRules` instead.")]
        public PriceRuleConnection? priceRules { get; set; }
        ///<summary>
        ///The primary domain of the shop's online store.
        ///</summary>
        public Domain? primaryDomain { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }

        ///<summary>
        ///Return a product by its handle.
        ///</summary>
        [Obsolete("Use `QueryRoot.productByHandle` instead.")]
        public Product? productByHandle { get; set; }
        ///<summary>
        ///The list of all images of all products for the shop.
        ///</summary>
        public ImageConnection? productImages { get; set; }

        ///<summary>
        ///List of the shop's product saved searches.
        ///</summary>
        [Obsolete("Use `QueryRoot.productSavedSearches` instead.")]
        public SavedSearchConnection? productSavedSearches { get; set; }
        ///<summary>
        ///A list of tags that have been added to products.
        ///</summary>
        public StringConnection? productTags { get; set; }
        ///<summary>
        ///The list of types added to products.
        ///</summary>
        public StringConnection? productTypes { get; set; }

        ///<summary>
        ///List of the shop's product variants.
        ///</summary>
        [Obsolete("Use `QueryRoot.productVariants` instead.")]
        public ProductVariantConnection? productVariants { get; set; }
        ///<summary>
        ///The list of vendors added to products.
        ///</summary>
        public StringConnection? productVendors { get; set; }

        ///<summary>
        ///List of the shop's products.
        ///</summary>
        [Obsolete("Use `QueryRoot.products`.")]
        public ProductConnection? products { get; set; }
        ///<summary>
        ///The number of publications for the shop.
        ///</summary>
        public int? publicationCount { get; set; }
        ///<summary>
        ///The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed.
        ///</summary>
        public ShopResourceLimits? resourceLimits { get; set; }
        ///<summary>
        ///The URL of the rich text editor that can be used for mobile devices.
        ///</summary>
        public string? richTextEditorUrl { get; set; }
        ///<summary>
        ///Fetches a list of admin search results by a specified query.
        ///</summary>
        public SearchResultConnection? search { get; set; }
        ///<summary>
        ///The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
        ///</summary>
        public SearchFilterOptions? searchFilters { get; set; }
        ///<summary>
        ///Whether the shop has outstanding setup steps.
        ///</summary>
        public bool? setupRequired { get; set; }
        ///<summary>
        ///The list of countries that the shop ships to.
        ///</summary>
        public IEnumerable<CountryCode>? shipsToCountries { get; set; }
        ///<summary>
        ///The list of all legal policies associated with a shop.
        ///</summary>
        public IEnumerable<ShopPolicy>? shopPolicies { get; set; }
        ///<summary>
        ///The paginated list of the shop's staff members.
        ///</summary>
        public StaffMemberConnection? staffMembers { get; set; }
        ///<summary>
        ///The storefront access token of a private application. These are scoped per-application.
        ///</summary>
        public StorefrontAccessTokenConnection? storefrontAccessTokens { get; set; }

        ///<summary>
        ///The URL of the shop's storefront.
        ///</summary>
        [Obsolete("Use `url` instead.")]
        public string? storefrontUrl { get; set; }
        ///<summary>
        ///Whether the shop charges taxes for shipping.
        ///</summary>
        public bool? taxShipping { get; set; }
        ///<summary>
        ///Whether applicable taxes are included in the shop's product prices.
        ///</summary>
        public bool? taxesIncluded { get; set; }
        ///<summary>
        ///The shop's time zone abbreviation.
        ///</summary>
        public string? timezoneAbbreviation { get; set; }
        ///<summary>
        ///The shop's time zone offset.
        ///</summary>
        public string? timezoneOffset { get; set; }
        ///<summary>
        ///The shop's time zone offset expressed as a number of minutes.
        ///</summary>
        public int? timezoneOffsetMinutes { get; set; }
        ///<summary>
        ///Whether transactional SMS sent by Shopify have been disabled for a shop.
        ///</summary>
        public bool? transactionalSmsDisabled { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
        ///<summary>
        ///The shop's unit system for weights and measures.
        ///</summary>
        public UnitSystem? unitSystem { get; set; }
        ///<summary>
        ///Fetches a list of images uploaded to the shop by their IDs.
        ///</summary>
        public IEnumerable<Image>? uploadedImagesByIds { get; set; }
        ///<summary>
        ///The URL of the shop's online store.
        ///</summary>
        public string? url { get; set; }
        ///<summary>
        ///The shop's primary unit of weight for products and shipping.
        ///</summary>
        public WeightUnit? weightUnit { get; set; }
    }

    ///<summary>
    ///The shop's billing address.
    ///</summary>
    public class ShopAddress : GraphQLObject<ShopAddress>, INode
    {
        ///<summary>
        ///The first line of the address. Typically the street address or PO Box number.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the address. Typically the number of the apartment, suite, or unit.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The name of the city, district, village, or town.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The name of the company or organization.
        ///</summary>
        public string? company { get; set; }
        ///<summary>
        ///Whether the address coordinates are valid.
        ///</summary>
        public bool? coordinatesValidated { get; set; }
        ///<summary>
        ///The name of the country.
        ///</summary>
        public string? country { get; set; }

        ///<summary>
        ///The two-letter code for the country of the address.
        ///
        ///For example, US.
        ///</summary>
        [Obsolete("Use `countryCodeV2` instead.")]
        public string? countryCode { get; set; }
        ///<summary>
        ///The two-letter code for the country of the address.
        ///
        ///For example, US.
        ///</summary>
        public CountryCode? countryCodeV2 { get; set; }

        ///<summary>
        ///The first name.
        ///</summary>
        [Obsolete("Always null in this context.")]
        public string? firstName { get; set; }
        ///<summary>
        ///A formatted version of the address, customized by the provided arguments.
        ///</summary>
        public IEnumerable<string>? formatted { get; set; }
        ///<summary>
        ///A comma-separated list of the values for city, province, and country.
        ///</summary>
        public string? formattedArea { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }

        ///<summary>
        ///The last name.
        ///</summary>
        [Obsolete("Always null in this context.")]
        public string? lastName { get; set; }
        ///<summary>
        ///The latitude coordinate of the address.
        ///</summary>
        public float? latitude { get; set; }
        ///<summary>
        ///The longitude coordinate of the address.
        ///</summary>
        public float? longitude { get; set; }

        ///<summary>
        ///The full name, based on firstName and lastName.
        ///</summary>
        [Obsolete("Always null in this context.")]
        public string? name { get; set; }
        ///<summary>
        ///A phone number associated with the address.
        ///
        ///Formatted using E.164 standard. For example, _+16135551111_.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The region of the address, such as the province, state, or district.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The two-letter code for the region.
        ///
        ///For example, ON.
        ///</summary>
        public string? provinceCode { get; set; }
        ///<summary>
        ///The zip or postal code of the address.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.
    ///</summary>
    public class ShopAlert : GraphQLObject<ShopAlert>
    {
        ///<summary>
        ///The text for the button in the alert that links to related information. For example, _Add credit card_.
        ///</summary>
        public ShopAlertAction? action { get; set; }
        ///<summary>
        ///A description of the alert and further information, such as whether the merchant will be charged.
        ///</summary>
        public string? description { get; set; }
    }

    ///<summary>
    ///An action associated to a shop alert, such as adding a credit card.
    ///</summary>
    public class ShopAlertAction : GraphQLObject<ShopAlertAction>
    {
        ///<summary>
        ///The text for the button in the alert. For example, _Add credit card_.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The target URL that the button links to.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///Billing preferences for the shop.
    ///</summary>
    public class ShopBillingPreferences : GraphQLObject<ShopBillingPreferences>
    {
        ///<summary>
        ///The currency the shop uses to pay for apps and services.
        ///</summary>
        public CurrencyCode? currency { get; set; }
    }

    ///<summary>
    ///Possible branding of a shop.
    ///Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
    ///</summary>
    public enum ShopBranding
    {
        ///<summary>
        ///Shop has Shopify Gold branding.
        ///</summary>
        SHOPIFY_GOLD,
        ///<summary>
        ///Shop has Shopify Plus branding.
        ///</summary>
        SHOPIFY_PLUS,
        ///<summary>
        ///Shop has Rogers branding.
        ///</summary>
        ROGERS,
        ///<summary>
        ///Shop has Shopify branding.
        ///</summary>
        SHOPIFY,
    }

    ///<summary>
    ///Represents the shop's customer account requirement preference.
    ///</summary>
    public enum ShopCustomerAccountsSetting
    {
        REQUIRED,
        OPTIONAL,
        DISABLED,
    }

    ///<summary>
    ///Represents the feature set available to the shop.
    ///Most fields specify whether a feature is enabled for a shop, and some fields return information
    ///related to specific features.
    ///</summary>
    public class ShopFeatures : GraphQLObject<ShopFeatures>
    {
        ///<summary>
        ///Whether a shop has access to Avalara AvaTax.
        ///</summary>
        public bool? avalaraAvatax { get; set; }
        ///<summary>
        ///The branding of the shop, which influences its look and feel in the Shopify admin.
        ///</summary>
        public ShopBranding? branding { get; set; }
        ///<summary>
        ///Represents the Bundles feature configuration for the shop.
        ///</summary>
        public BundlesFeature? bundles { get; set; }
        ///<summary>
        ///Whether a shop's online store can have CAPTCHA protection.
        ///</summary>
        public bool? captcha { get; set; }
        ///<summary>
        ///Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
        ///</summary>
        public bool? captchaExternalDomains { get; set; }
        ///<summary>
        ///Represents the cart transform feature configuration for the shop.
        ///</summary>
        public CartTransformFeature? cartTransform { get; set; }

        ///<summary>
        ///Whether the delivery profiles functionality is enabled for this shop.
        ///</summary>
        [Obsolete("Delivery profiles are now 100% enabled across Shopify.")]
        public bool? deliveryProfiles { get; set; }
        ///<summary>
        ///Whether a shop has access to the Google Analytics dynamic remarketing feature.
        ///</summary>
        public bool? dynamicRemarketing { get; set; }
        ///<summary>
        ///Whether a shop can be migrated to use Shopify subscriptions.
        ///</summary>
        public bool? eligibleForSubscriptionMigration { get; set; }
        ///<summary>
        ///Whether a shop is configured properly to sell subscriptions.
        ///</summary>
        public bool? eligibleForSubscriptions { get; set; }
        ///<summary>
        ///Whether a shop can create gift cards.
        ///</summary>
        public bool? giftCards { get; set; }
        ///<summary>
        ///Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
        ///internationally.
        ///</summary>
        public bool? harmonizedSystemCode { get; set; }

        ///<summary>
        ///Whether a shop can enable international domains.
        ///</summary>
        [Obsolete("All shops have international domains through Shopify Markets.")]
        public bool? internationalDomains { get; set; }
        ///<summary>
        ///Whether a shop can enable international price overrides.
        ///</summary>
        public bool? internationalPriceOverrides { get; set; }
        ///<summary>
        ///Whether a shop can enable international price rules.
        ///</summary>
        public bool? internationalPriceRules { get; set; }
        ///<summary>
        ///Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
        ///</summary>
        public bool? legacySubscriptionGatewayEnabled { get; set; }
        ///<summary>
        ///Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
        ///or don't have a storefront.
        ///</summary>
        public bool? liveView { get; set; }

        ///<summary>
        ///Whether a shop has multi-location functionality.
        ///</summary>
        [Obsolete("All shops support multi-location inventory. Use `QueryRoot.locations` to determine whether shop has more than one location.")]
        public bool? multiLocation { get; set; }
        ///<summary>
        ///Whether a shop has access to the onboarding visual.
        ///</summary>
        public bool? onboardingVisual { get; set; }
        ///<summary>
        ///Whether a shop is configured to sell subscriptions with PayPal Express.
        ///</summary>
        public PaypalExpressSubscriptionsGatewayStatus? paypalExpressSubscriptionGatewayStatus { get; set; }
        ///<summary>
        ///Whether a shop has access to all reporting features.
        ///</summary>
        public bool? reports { get; set; }
        ///<summary>
        ///Whether a shop has ever had subscription products.
        ///</summary>
        public bool? sellsSubscriptions { get; set; }

        ///<summary>
        ///Whether the shop has a Shopify Plus subscription.
        ///</summary>
        [Obsolete("Use Shop.plan.shopifyPlus instead.")]
        public bool? shopifyPlus { get; set; }
        ///<summary>
        ///Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
        ///</summary>
        public bool? showMetrics { get; set; }
        ///<summary>
        ///Whether a shop has an online store.
        ///</summary>
        public bool? storefront { get; set; }
        ///<summary>
        ///Whether a shop is using Shopify Balance.
        ///</summary>
        public bool? usingShopifyBalance { get; set; }
    }

    ///<summary>
    ///A locale that's been enabled on a shop.
    ///</summary>
    public class ShopLocale : GraphQLObject<ShopLocale>
    {
        ///<summary>
        ///The locale ISO code.
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///The market web presences that use the locale.
        ///</summary>
        public IEnumerable<MarketWebPresence>? marketWebPresences { get; set; }
        ///<summary>
        ///The human-readable locale name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///Whether the locale is the default locale for the shop.
        ///</summary>
        public bool? primary { get; set; }
        ///<summary>
        ///Whether the locale is visible to buyers.
        ///</summary>
        public bool? published { get; set; }
    }

    ///<summary>
    ///Return type for `shopLocaleDisable` mutation.
    ///</summary>
    public class ShopLocaleDisablePayload : GraphQLObject<ShopLocaleDisablePayload>
    {
        ///<summary>
        ///ISO code of the locale that was deleted.
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `shopLocaleEnable` mutation.
    ///</summary>
    public class ShopLocaleEnablePayload : GraphQLObject<ShopLocaleEnablePayload>
    {
        ///<summary>
        ///ISO code of the locale that was enabled.
        ///</summary>
        public ShopLocale? shopLocale { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `shopLocaleUpdate` mutation.
    ///</summary>
    public class ShopLocaleUpdatePayload : GraphQLObject<ShopLocaleUpdatePayload>
    {
        ///<summary>
        ///The locale that was updated.
        ///</summary>
        public ShopLocale? shopLocale { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Shop Pay Installments payment details related to a transaction.
    ///</summary>
    public class ShopPayInstallmentsPaymentDetails : GraphQLObject<ShopPayInstallmentsPaymentDetails>, IBasePaymentDetails, IPaymentDetails
    {
        ///<summary>
        ///The name of payment method used by the buyer.
        ///</summary>
        public string? paymentMethodName { get; set; }
    }

    ///<summary>
    ///The billing plan of the shop.
    ///</summary>
    public class ShopPlan : GraphQLObject<ShopPlan>
    {
        ///<summary>
        ///The name of the shop's billing plan.
        ///</summary>
        public string? displayName { get; set; }
        ///<summary>
        ///Whether the shop is a partner development shop for testing purposes.
        ///</summary>
        public bool? partnerDevelopment { get; set; }
        ///<summary>
        ///Whether the shop has a Shopify Plus subscription.
        ///</summary>
        public bool? shopifyPlus { get; set; }
    }

    ///<summary>
    ///Policy that a merchant has configured for their store, such as their refund or privacy policy.
    ///</summary>
    public class ShopPolicy : GraphQLObject<ShopPolicy>, IHasPublishedTranslations, INode
    {
        ///<summary>
        ///The text of the policy. The maximum size is 512kb.
        ///</summary>
        public string? body { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The translations associated with the resource.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
        ///<summary>
        ///The shop policy type.
        ///</summary>
        public ShopPolicyType? type { get; set; }
        ///<summary>
        ///The public URL of the policy.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ShopPolicyUserError`.
    ///</summary>
    public enum ShopPolicyErrorCode
    {
        ///<summary>
        ///The input value is too big.
        ///</summary>
        TOO_BIG,
    }

    ///<summary>
    ///Available shop policy types.
    ///</summary>
    public enum ShopPolicyType
    {
        ///<summary>
        ///The refund policy.
        ///</summary>
        REFUND_POLICY,
        ///<summary>
        ///The shipping policy.
        ///</summary>
        SHIPPING_POLICY,
        ///<summary>
        ///The privacy policy.
        ///</summary>
        PRIVACY_POLICY,
        ///<summary>
        ///The terms of service.
        ///</summary>
        TERMS_OF_SERVICE,
        ///<summary>
        ///The terms of sale.
        ///</summary>
        TERMS_OF_SALE,
        ///<summary>
        ///The legal notice.
        ///</summary>
        LEGAL_NOTICE,
        ///<summary>
        ///The purchase options cancellation policy.
        ///</summary>
        SUBSCRIPTION_POLICY,
        ///<summary>
        ///The contact information.
        ///</summary>
        CONTACT_INFORMATION,
    }

    ///<summary>
    ///Return type for `shopPolicyUpdate` mutation.
    ///</summary>
    public class ShopPolicyUpdatePayload : GraphQLObject<ShopPolicyUpdatePayload>
    {
        ///<summary>
        ///The shop policy that has been updated.
        ///</summary>
        public ShopPolicy? shopPolicy { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ShopPolicyUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of a shop policy mutation.
    ///</summary>
    public class ShopPolicyUserError : GraphQLObject<ShopPolicyUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ShopPolicyErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Return type for `shopResourceFeedbackCreate` mutation.
    ///</summary>
    public class ShopResourceFeedbackCreatePayload : GraphQLObject<ShopResourceFeedbackCreatePayload>
    {
        ///<summary>
        ///The shop feedback that's created.
        ///</summary>
        public AppFeedback? feedback { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ShopResourceFeedbackCreateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `ShopResourceFeedbackCreate`.
    ///</summary>
    public class ShopResourceFeedbackCreateUserError : GraphQLObject<ShopResourceFeedbackCreateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ShopResourceFeedbackCreateUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ShopResourceFeedbackCreateUserError`.
    ///</summary>
    public enum ShopResourceFeedbackCreateUserErrorCode
    {
        ///<summary>
        ///The feedback for a later version of the resource was already accepted.
        ///</summary>
        OUTDATED_FEEDBACK,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
    }

    ///<summary>
    ///Resource limits of a shop.
    ///</summary>
    public class ShopResourceLimits : GraphQLObject<ShopResourceLimits>
    {
        ///<summary>
        ///Maximum number of locations allowed.
        ///</summary>
        public int? locationLimit { get; set; }
        ///<summary>
        ///Maximum number of product options allowed.
        ///</summary>
        public int? maxProductOptions { get; set; }
        ///<summary>
        ///The maximum number of variants allowed per product.
        ///</summary>
        public int? maxProductVariants { get; set; }
        ///<summary>
        ///Whether the shop has reached the limit of the number of URL redirects it can make for resources.
        ///</summary>
        public bool? redirectLimitReached { get; set; }
    }

    ///<summary>
    ///Possible sort of tags.
    ///</summary>
    public enum ShopTagSort
    {
        ///<summary>
        ///Alphabetical sort.
        ///</summary>
        ALPHABETICAL,
        ///<summary>
        ///Popularity sort.
        ///</summary>
        POPULAR,
    }

    ///<summary>
    ///A Shopify Function.
    ///</summary>
    public class ShopifyFunction : GraphQLObject<ShopifyFunction>
    {
        ///<summary>
        ///The API type of the Shopify Function.
        ///</summary>
        public string? apiType { get; set; }
        ///<summary>
        ///The API version of the Shopify Function.
        ///</summary>
        public string? apiVersion { get; set; }
        ///<summary>
        ///The app that owns the Shopify Function.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The App Bridge information for the Shopify Function.
        ///</summary>
        public FunctionsAppBridge? appBridge { get; set; }
        ///<summary>
        ///The client ID of the app that owns the Shopify Function.
        ///</summary>
        public string? appKey { get; set; }
        ///<summary>
        ///The description of the Shopify Function.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The ID of the Shopify Function.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The input query of the Shopify Function.
        ///</summary>
        public string? inputQuery { get; set; }
        ///<summary>
        ///The title of the Shopify Function.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///If the Shopify Function uses the creation UI in the Admin.
        ///</summary>
        public bool? useCreationUi { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ShopifyFunctions.
    ///</summary>
    public class ShopifyFunctionConnection : GraphQLObject<ShopifyFunctionConnection>, IConnectionWithNodesAndEdges<ShopifyFunctionEdge, ShopifyFunction>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ShopifyFunctionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ShopifyFunctionEdge.
        ///</summary>
        public IEnumerable<ShopifyFunction>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ShopifyFunction and a cursor during pagination.
    ///</summary>
    public class ShopifyFunctionEdge : GraphQLObject<ShopifyFunctionEdge>, IEdge<ShopifyFunction>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ShopifyFunctionEdge.
        ///</summary>
        public ShopifyFunction? node { get; set; }
    }

    ///<summary>
    ///Balance and payout information for a
    ///[Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
    ///account. Balance includes all balances for the currencies supported by the shop.
    ///You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
    ///</summary>
    public class ShopifyPaymentsAccount : GraphQLObject<ShopifyPaymentsAccount>, INode
    {
        ///<summary>
        ///Whether the Shopify Payments setup is completed.
        ///</summary>
        public bool? activated { get; set; }
        ///<summary>
        ///Current balances in all currencies for the account.
        ///</summary>
        public IEnumerable<MoneyV2>? balance { get; set; }
        ///<summary>
        ///A list of balance transactions associated with the shop.
        ///</summary>
        public ShopifyPaymentsBalanceTransactionConnection? balanceTransactions { get; set; }
        ///<summary>
        ///All bank accounts configured for the Shopify Payments account.
        ///</summary>
        public ShopifyPaymentsBankAccountConnection? bankAccounts { get; set; }

        ///<summary>
        ///The statement descriptor used for charges.
        ///
        ///The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
        ///</summary>
        [Obsolete("Use `chargeStatementDescriptors` instead.")]
        public string? chargeStatementDescriptor { get; set; }
        ///<summary>
        ///The statement descriptors used for charges.
        ///
        ///These descriptors appear on a customer's credit card or bank statement when they make a purchase.
        ///</summary>
        public IShopifyPaymentsChargeStatementDescriptor? chargeStatementDescriptors { get; set; }
        ///<summary>
        ///The Shopify Payments account country.
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The default payout currency for the Shopify Payments account.
        ///</summary>
        public CurrencyCode? defaultCurrency { get; set; }
        ///<summary>
        ///All disputes related to the Shopify Payments account.
        ///</summary>
        public ShopifyPaymentsDisputeConnection? disputes { get; set; }
        ///<summary>
        ///The fraud settings of the Shopify Payments account.
        ///</summary>
        public ShopifyPaymentsFraudSettings? fraudSettings { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The notifications settings for the account.
        ///</summary>
        public ShopifyPaymentsNotificationSettings? notificationSettings { get; set; }
        ///<summary>
        ///Whether the Shopify Payments account can be onboarded.
        ///</summary>
        public bool? onboardable { get; set; }
        ///<summary>
        ///The payout schedule for the account.
        ///</summary>
        public ShopifyPaymentsPayoutSchedule? payoutSchedule { get; set; }
        ///<summary>
        ///The descriptor used for payouts.
        ///
        ///The descriptor appears on a merchant's bank statement when they receive a payout.
        ///</summary>
        public string? payoutStatementDescriptor { get; set; }
        ///<summary>
        ///All current and previous payouts made between the account and the bank account.
        ///</summary>
        public ShopifyPaymentsPayoutConnection? payouts { get; set; }
        ///<summary>
        ///The permitted documents for identity verification.
        ///</summary>
        public IEnumerable<ShopifyPaymentsVerificationDocument>? permittedVerificationDocuments { get; set; }
        ///<summary>
        ///The verifications necessary for this account.
        ///</summary>
        public IEnumerable<ShopifyPaymentsVerification>? verifications { get; set; }
    }

    ///<summary>
    ///The adjustment order object.
    ///</summary>
    public class ShopifyPaymentsAdjustmentOrder : GraphQLObject<ShopifyPaymentsAdjustmentOrder>
    {
        ///<summary>
        ///The amount of the adjustment order.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///The link to the adjustment order.
        ///</summary>
        public string? link { get; set; }
        ///<summary>
        ///The name of the adjustment order.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///A transaction that contributes to a Shopify Payments account balance.
    ///</summary>
    public class ShopifyPaymentsBalanceTransaction : GraphQLObject<ShopifyPaymentsBalanceTransaction>, INode
    {
        ///<summary>
        ///The adjustment orders associated to the transaction.
        ///</summary>
        public IEnumerable<ShopifyPaymentsAdjustmentOrder>? adjustmentsOrders { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The net amount contributing to the merchant's balance.
        ///</summary>
        public MoneyV2? net { get; set; }
        ///<summary>
        ///The date and time when the balance transaction was processed.
        ///</summary>
        public DateTime? transactionDate { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ShopifyPaymentsBalanceTransactions.
    ///</summary>
    public class ShopifyPaymentsBalanceTransactionConnection : GraphQLObject<ShopifyPaymentsBalanceTransactionConnection>, IConnectionWithNodesAndEdges<ShopifyPaymentsBalanceTransactionEdge, ShopifyPaymentsBalanceTransaction>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ShopifyPaymentsBalanceTransactionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ShopifyPaymentsBalanceTransactionEdge.
        ///</summary>
        public IEnumerable<ShopifyPaymentsBalanceTransaction>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ShopifyPaymentsBalanceTransaction and a cursor during pagination.
    ///</summary>
    public class ShopifyPaymentsBalanceTransactionEdge : GraphQLObject<ShopifyPaymentsBalanceTransactionEdge>, IEdge<ShopifyPaymentsBalanceTransaction>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ShopifyPaymentsBalanceTransactionEdge.
        ///</summary>
        public ShopifyPaymentsBalanceTransaction? node { get; set; }
    }

    ///<summary>
    ///A bank account that can receive payouts.
    ///</summary>
    public class ShopifyPaymentsBankAccount : GraphQLObject<ShopifyPaymentsBankAccount>, INode
    {
        ///<summary>
        ///The account number of the bank account.
        ///</summary>
        public string? accountNumber { get; set; }
        ///<summary>
        ///The last digits of the account number (the rest is redacted).
        ///</summary>
        public string? accountNumberLastDigits { get; set; }
        ///<summary>
        ///The name of the bank.
        ///</summary>
        public string? bankName { get; set; }
        ///<summary>
        ///The country of the bank.
        ///</summary>
        public CountryCode? country { get; set; }
        ///<summary>
        ///The date that the bank account was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The currency of the bank account.
        ///</summary>
        public CurrencyCode? currency { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///All current and previous payouts made between the account and the bank account.
        ///</summary>
        public ShopifyPaymentsPayoutConnection? payouts { get; set; }
        ///<summary>
        ///The routing number of the bank account.
        ///</summary>
        public string? routingNumber { get; set; }
        ///<summary>
        ///The status of the bank account.
        ///</summary>
        public ShopifyPaymentsBankAccountStatus? status { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
    ///</summary>
    public class ShopifyPaymentsBankAccountConnection : GraphQLObject<ShopifyPaymentsBankAccountConnection>, IConnectionWithNodesAndEdges<ShopifyPaymentsBankAccountEdge, ShopifyPaymentsBankAccount>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ShopifyPaymentsBankAccountEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ShopifyPaymentsBankAccountEdge.
        ///</summary>
        public IEnumerable<ShopifyPaymentsBankAccount>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
    ///</summary>
    public class ShopifyPaymentsBankAccountEdge : GraphQLObject<ShopifyPaymentsBankAccountEdge>, IEdge<ShopifyPaymentsBankAccount>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ShopifyPaymentsBankAccountEdge.
        ///</summary>
        public ShopifyPaymentsBankAccount? node { get; set; }
    }

    ///<summary>
    ///The bank account status.
    ///</summary>
    public enum ShopifyPaymentsBankAccountStatus
    {
        ///<summary>
        ///A bank account that hasn't had any activity and that's not validated.
        ///</summary>
        NEW,
        ///<summary>
        ///It was determined that the bank account exists.
        ///</summary>
        VALIDATED,
        ///<summary>
        ///Bank account validation was successful.
        ///</summary>
        VERIFIED,
        ///<summary>
        ///A payout to the bank account failed.
        ///</summary>
        ERRORED,
    }

    ///<summary>
    ///The charge descriptors for a payments account.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(ShopifyPaymentsDefaultChargeStatementDescriptor), typeDiscriminator: "ShopifyPaymentsDefaultChargeStatementDescriptor")]
    [JsonDerivedType(typeof(ShopifyPaymentsJpChargeStatementDescriptor), typeDiscriminator: "ShopifyPaymentsJpChargeStatementDescriptor")]
    public interface IShopifyPaymentsChargeStatementDescriptor : IGraphQLObject
    {
        public ShopifyPaymentsDefaultChargeStatementDescriptor? AsShopifyPaymentsDefaultChargeStatementDescriptor() => this as ShopifyPaymentsDefaultChargeStatementDescriptor;
        public ShopifyPaymentsJpChargeStatementDescriptor? AsShopifyPaymentsJpChargeStatementDescriptor() => this as ShopifyPaymentsJpChargeStatementDescriptor;
        ///<summary>
        ///The default charge statement descriptor.
        ///</summary>
        public string? @default { get; }
        ///<summary>
        ///The prefix of the statement descriptor.
        ///</summary>
        public string? prefix { get; }
    }

    ///<summary>
    ///The charge descriptors for a payments account.
    ///</summary>
    public class ShopifyPaymentsDefaultChargeStatementDescriptor : GraphQLObject<ShopifyPaymentsDefaultChargeStatementDescriptor>, IShopifyPaymentsChargeStatementDescriptor
    {
        ///<summary>
        ///The default charge statement descriptor.
        ///</summary>
        public string? @default { get; set; }
        ///<summary>
        ///The prefix of the statement descriptor.
        ///</summary>
        public string? prefix { get; set; }
    }

    ///<summary>
    ///A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
    ///</summary>
    public class ShopifyPaymentsDispute : GraphQLObject<ShopifyPaymentsDispute>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The total amount disputed by the cardholder.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///The deadline for evidence submission.
        ///</summary>
        public DateOnly? evidenceDueBy { get; set; }
        ///<summary>
        ///The date when evidence was sent. Returns null if evidence hasn't yet been sent.
        ///</summary>
        public DateOnly? evidenceSentOn { get; set; }
        ///<summary>
        ///The date when this dispute was resolved. Returns null if the dispute isn't yet resolved.
        ///</summary>
        public DateOnly? finalizedOn { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The date when this dispute was initiated.
        ///</summary>
        public DateTime? initiatedAt { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The order that contains the charge that's under dispute.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The reason of the dispute.
        ///</summary>
        public ShopifyPaymentsDisputeReasonDetails? reasonDetails { get; set; }
        ///<summary>
        ///The current state of the dispute.
        ///</summary>
        public DisputeStatus? status { get; set; }
        ///<summary>
        ///Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
        ///</summary>
        public DisputeType? type { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
    ///</summary>
    public class ShopifyPaymentsDisputeConnection : GraphQLObject<ShopifyPaymentsDisputeConnection>, IConnectionWithNodesAndEdges<ShopifyPaymentsDisputeEdge, ShopifyPaymentsDispute>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ShopifyPaymentsDisputeEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ShopifyPaymentsDisputeEdge.
        ///</summary>
        public IEnumerable<ShopifyPaymentsDispute>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
    ///</summary>
    public class ShopifyPaymentsDisputeEdge : GraphQLObject<ShopifyPaymentsDisputeEdge>, IEdge<ShopifyPaymentsDispute>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ShopifyPaymentsDisputeEdge.
        ///</summary>
        public ShopifyPaymentsDispute? node { get; set; }
    }

    ///<summary>
    ///The evidence associated with the dispute.
    ///</summary>
    public class ShopifyPaymentsDisputeEvidence : GraphQLObject<ShopifyPaymentsDisputeEvidence>, INode
    {
        ///<summary>
        ///The activity logs associated with the dispute evidence.
        ///</summary>
        public string? accessActivityLog { get; set; }
        ///<summary>
        ///The billing address that's provided by the customer.
        ///</summary>
        public MailingAddress? billingAddress { get; set; }
        ///<summary>
        ///The cancellation policy disclosure associated with the dispute evidence.
        ///</summary>
        public string? cancellationPolicyDisclosure { get; set; }
        ///<summary>
        ///The cancellation policy file associated with the dispute evidence.
        ///</summary>
        public ShopifyPaymentsDisputeFileUpload? cancellationPolicyFile { get; set; }
        ///<summary>
        ///The cancellation rebuttal associated with the dispute evidence.
        ///</summary>
        public string? cancellationRebuttal { get; set; }
        ///<summary>
        ///The customer communication file associated with the dispute evidence.
        ///</summary>
        public ShopifyPaymentsDisputeFileUpload? customerCommunicationFile { get; set; }
        ///<summary>
        ///The customer's email address.
        ///</summary>
        public string? customerEmailAddress { get; set; }
        ///<summary>
        ///The customer's first name.
        ///</summary>
        public string? customerFirstName { get; set; }
        ///<summary>
        ///The customer's last name.
        ///</summary>
        public string? customerLastName { get; set; }
        ///<summary>
        ///The customer purchase ip for this dispute evidence.
        ///</summary>
        public string? customerPurchaseIp { get; set; }
        ///<summary>
        ///The dispute associated with the evidence.
        ///</summary>
        public ShopifyPaymentsDispute? dispute { get; set; }
        ///<summary>
        ///The file uploads associated with the dispute evidence.
        ///</summary>
        public IEnumerable<ShopifyPaymentsDisputeFileUpload>? disputeFileUploads { get; set; }
        ///<summary>
        ///The fulfillments associated with the dispute evidence.
        ///</summary>
        public IEnumerable<ShopifyPaymentsDisputeFulfillment>? fulfillments { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The product description for this dispute evidence.
        ///</summary>
        public string? productDescription { get; set; }
        ///<summary>
        ///The refund policy disclosure associated with the dispute evidence.
        ///</summary>
        public string? refundPolicyDisclosure { get; set; }
        ///<summary>
        ///The refund policy file associated with the dispute evidence.
        ///</summary>
        public ShopifyPaymentsDisputeFileUpload? refundPolicyFile { get; set; }
        ///<summary>
        ///The refund refusal explanation associated with dispute evidence.
        ///</summary>
        public string? refundRefusalExplanation { get; set; }
        ///<summary>
        ///The service documentation file associated with the dispute evidence.
        ///</summary>
        public ShopifyPaymentsDisputeFileUpload? serviceDocumentationFile { get; set; }
        ///<summary>
        ///The mailing address for shipping that's provided by the customer.
        ///</summary>
        public MailingAddress? shippingAddress { get; set; }
        ///<summary>
        ///The shipping documentation file associated with the dispute evidence.
        ///</summary>
        public ShopifyPaymentsDisputeFileUpload? shippingDocumentationFile { get; set; }
        ///<summary>
        ///Whether the dispute evidence is submitted.
        ///</summary>
        public bool? submitted { get; set; }
        ///<summary>
        ///The uncategorized file associated with the dispute evidence.
        ///</summary>
        public ShopifyPaymentsDisputeFileUpload? uncategorizedFile { get; set; }
        ///<summary>
        ///The uncategorized text for the dispute evidence.
        ///</summary>
        public string? uncategorizedText { get; set; }
    }

    ///<summary>
    ///The possible dispute evidence file types.
    ///</summary>
    public enum ShopifyPaymentsDisputeEvidenceFileType
    {
        ///<summary>
        ///Customer Communication File.
        ///</summary>
        CUSTOMER_COMMUNICATION_FILE,
        ///<summary>
        ///Refund Policy File.
        ///</summary>
        REFUND_POLICY_FILE,
        ///<summary>
        ///Cancellation Policy File.
        ///</summary>
        CANCELLATION_POLICY_FILE,
        ///<summary>
        ///Uncategorized File.
        ///</summary>
        UNCATEGORIZED_FILE,
        ///<summary>
        ///Shipping Documentation File.
        ///</summary>
        SHIPPING_DOCUMENTATION_FILE,
        ///<summary>
        ///Service Documentation File.
        ///</summary>
        SERVICE_DOCUMENTATION_FILE,
    }

    ///<summary>
    ///The file upload associated with the dispute evidence.
    ///</summary>
    public class ShopifyPaymentsDisputeFileUpload : GraphQLObject<ShopifyPaymentsDisputeFileUpload>, INode
    {
        ///<summary>
        ///The type of the file for the dispute evidence.
        ///</summary>
        public ShopifyPaymentsDisputeEvidenceFileType? disputeEvidenceType { get; set; }
        ///<summary>
        ///The file size.
        ///</summary>
        public int? fileSize { get; set; }
        ///<summary>
        ///The file type.
        ///</summary>
        public string? fileType { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The original file name.
        ///</summary>
        public string? originalFileName { get; set; }
        ///<summary>
        ///The URL for accessing the file.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The fulfillment associated with dispute evidence.
    ///</summary>
    public class ShopifyPaymentsDisputeFulfillment : GraphQLObject<ShopifyPaymentsDisputeFulfillment>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The shipping carrier for this fulfillment.
        ///</summary>
        public string? shippingCarrier { get; set; }
        ///<summary>
        ///The shipping date for this fulfillment.
        ///</summary>
        public DateOnly? shippingDate { get; set; }
        ///<summary>
        ///The shipping tracking number for this fulfillment.
        ///</summary>
        public string? shippingTrackingNumber { get; set; }
    }

    ///<summary>
    ///The reason for the dispute provided by the cardholder's bank.
    ///</summary>
    public enum ShopifyPaymentsDisputeReason
    {
        ///<summary>
        ///The cardholder claims that they didn’t authorize the payment.
        ///</summary>
        FRAUDULENT,
        ///<summary>
        ///The dispute is uncategorized, so you should contact the customer for additional details to find out why the payment was disputed.
        ///</summary>
        GENERAL,
        ///<summary>
        ///The customer doesn’t recognize the payment appearing on their card statement.
        ///</summary>
        UNRECOGNIZED,
        ///<summary>
        ///The customer claims they were charged multiple times for the same product or service.
        ///</summary>
        DUPLICATE,
        ///<summary>
        ///The customer claims that you continued to charge them after a subscription was canceled.
        ///</summary>
        SUBSCRIPTION_CANCELLED,
        ///<summary>
        ///The product or service was received but was defective, damaged, or not as described.
        ///</summary>
        PRODUCT_UNACCEPTABLE,
        ///<summary>
        ///The customer claims they did not receive the products or services purchased.
        ///</summary>
        PRODUCT_NOT_RECEIVED,
        ///<summary>
        ///The customer claims that the purchased product was returned or the transaction was otherwise canceled, but you haven't yet provided a refund or credit.
        ///</summary>
        CREDIT_NOT_PROCESSED,
        ///<summary>
        ///The customer account associated with the purchase is incorrect.
        ///</summary>
        INCORRECT_ACCOUNT_DETAILS,
        ///<summary>
        ///The customer's bank account has insufficient funds.
        ///</summary>
        INSUFFICIENT_FUNDS,
        ///<summary>
        ///The customer's bank can't process the charge.
        ///</summary>
        BANK_CANNOT_PROCESS,
        ///<summary>
        ///The customer's bank can't proceed with the debit since it hasn't been authorized.
        ///</summary>
        DEBIT_NOT_AUTHORIZED,
        ///<summary>
        ///The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed.
        ///</summary>
        CUSTOMER_INITIATED,
    }

    ///<summary>
    ///Details regarding a dispute reason.
    ///</summary>
    public class ShopifyPaymentsDisputeReasonDetails : GraphQLObject<ShopifyPaymentsDisputeReasonDetails>
    {
        ///<summary>
        ///The raw code provided by the payment network.
        ///</summary>
        public string? networkReasonCode { get; set; }
        ///<summary>
        ///The reason for the dispute provided by the cardholder's banks.
        ///</summary>
        public ShopifyPaymentsDisputeReason? reason { get; set; }
    }

    ///<summary>
    ///Presents all Shopify Payments information related to an extended authorization.
    ///</summary>
    public class ShopifyPaymentsExtendedAuthorization : GraphQLObject<ShopifyPaymentsExtendedAuthorization>
    {
        ///<summary>
        ///The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
        ///</summary>
        public DateTime? extendedAuthorizationExpiresAt { get; set; }
        ///<summary>
        ///The time after which capture will incur an additional fee.
        ///</summary>
        public DateTime? standardAuthorizationExpiresAt { get; set; }
    }

    ///<summary>
    ///The fraud settings of a payments account.
    ///</summary>
    public class ShopifyPaymentsFraudSettings : GraphQLObject<ShopifyPaymentsFraudSettings>
    {
        ///<summary>
        ///Decline a charge if there's an AVS failure.
        ///</summary>
        public bool? declineChargeOnAvsFailure { get; set; }
        ///<summary>
        ///Decline a charge if there's an CVC failure.
        ///</summary>
        public bool? declineChargeOnCvcFailure { get; set; }
    }

    ///<summary>
    ///The charge descriptors for a Japanese payments account.
    ///</summary>
    public class ShopifyPaymentsJpChargeStatementDescriptor : GraphQLObject<ShopifyPaymentsJpChargeStatementDescriptor>, IShopifyPaymentsChargeStatementDescriptor
    {
        ///<summary>
        ///The default charge statement descriptor.
        ///</summary>
        public string? @default { get; set; }
        ///<summary>
        ///The charge statement descriptor in kana.
        ///</summary>
        public string? kana { get; set; }
        ///<summary>
        ///The charge statement descriptor in kanji.
        ///</summary>
        public string? kanji { get; set; }
        ///<summary>
        ///The prefix of the statement descriptor.
        ///</summary>
        public string? prefix { get; set; }
    }

    ///<summary>
    ///The notification settings for the account.
    ///</summary>
    public class ShopifyPaymentsNotificationSettings : GraphQLObject<ShopifyPaymentsNotificationSettings>
    {
        ///<summary>
        ///Receive email notifications when new payouts are sent or payouts fail.
        ///</summary>
        public bool? payouts { get; set; }
    }

    ///<summary>
    ///Payouts represent the movement of money between a merchant's Shopify
    ///Payments balance and their bank account.
    ///</summary>
    public class ShopifyPaymentsPayout : GraphQLObject<ShopifyPaymentsPayout>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The bank account for the payout.
        ///</summary>
        public ShopifyPaymentsBankAccount? bankAccount { get; set; }

        ///<summary>
        ///The total amount and currency of the payout.
        ///</summary>
        [Obsolete("Use `net` instead.")]
        public MoneyV2? gross { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The exact time when the payout was issued. The payout only contains
        ///balance transactions that were available at this time.
        ///</summary>
        public DateTime? issuedAt { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The total amount and currency of the payout.
        ///</summary>
        public MoneyV2? net { get; set; }
        ///<summary>
        ///The transfer status of the payout.
        ///</summary>
        public ShopifyPaymentsPayoutStatus? status { get; set; }
        ///<summary>
        ///The summary of the payout.
        ///</summary>
        public ShopifyPaymentsPayoutSummary? summary { get; set; }
        ///<summary>
        ///The direction of the payout.
        ///</summary>
        public ShopifyPaymentsPayoutTransactionType? transactionType { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
    ///</summary>
    public class ShopifyPaymentsPayoutConnection : GraphQLObject<ShopifyPaymentsPayoutConnection>, IConnectionWithNodesAndEdges<ShopifyPaymentsPayoutEdge, ShopifyPaymentsPayout>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ShopifyPaymentsPayoutEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ShopifyPaymentsPayoutEdge.
        ///</summary>
        public IEnumerable<ShopifyPaymentsPayout>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
    ///</summary>
    public class ShopifyPaymentsPayoutEdge : GraphQLObject<ShopifyPaymentsPayoutEdge>, IEdge<ShopifyPaymentsPayout>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ShopifyPaymentsPayoutEdge.
        ///</summary>
        public ShopifyPaymentsPayout? node { get; set; }
    }

    ///<summary>
    ///The interval at which payouts are sent to the connected bank account.
    ///</summary>
    public enum ShopifyPaymentsPayoutInterval
    {
        ///<summary>
        ///Each business day.
        ///</summary>
        DAILY,
        ///<summary>
        ///Each week, on the day of week specified by weeklyAnchor.
        ///</summary>
        WEEKLY,
        ///<summary>
        ///Each month, on the day of month specified by monthlyAnchor.
        ///</summary>
        MONTHLY,
        ///<summary>
        ///Payouts will not be automatically made.
        ///</summary>
        MANUAL,
    }

    ///<summary>
    ///The payment schedule for a payments account.
    ///</summary>
    public class ShopifyPaymentsPayoutSchedule : GraphQLObject<ShopifyPaymentsPayoutSchedule>
    {
        ///<summary>
        ///The interval at which payouts are sent to the connected bank account.
        ///</summary>
        public ShopifyPaymentsPayoutInterval? interval { get; set; }
        ///<summary>
        ///The day of the month funds will be paid out.
        ///
        ///The value can be any day of the month from the 1st to the 31st.
        ///If the payment interval is set to monthly, this value will be used.
        ///Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
        ///</summary>
        public int? monthlyAnchor { get; set; }
        ///<summary>
        ///The day of the week funds will be paid out.
        ///
        ///The value can be any weekday from Monday to Friday.
        ///If the payment interval is set to weekly, this value will be used.
        ///</summary>
        public DayOfTheWeek? weeklyAnchor { get; set; }
    }

    ///<summary>
    ///The transfer status of the payout.
    ///</summary>
    public enum ShopifyPaymentsPayoutStatus
    {
        ///<summary>
        ///The payout has been created and had transactions assigned to it, but
        ///it has not yet been submitted to the bank.
        ///</summary>
        SCHEDULED,
        ///<summary>
        ///The payout has been submitted to the bank.
        ///</summary>
        IN_TRANSIT,
        ///<summary>
        ///The payout has been successfully deposited into the bank.
        ///</summary>
        PAID,
        ///<summary>
        ///The payout has been declined by the bank.
        ///</summary>
        FAILED,
        ///<summary>
        ///The payout has been canceled by Shopify.
        ///</summary>
        CANCELED,
    }

    ///<summary>
    ///Breakdown of the total fees and gross of each of the different types of transactions associated
    ///with the payout.
    ///</summary>
    public class ShopifyPaymentsPayoutSummary : GraphQLObject<ShopifyPaymentsPayoutSummary>
    {
        ///<summary>
        ///Total fees for all adjustments including disputes.
        ///</summary>
        public MoneyV2? adjustmentsFee { get; set; }
        ///<summary>
        ///Total gross amount for all adjustments including disputes.
        ///</summary>
        public MoneyV2? adjustmentsGross { get; set; }
        ///<summary>
        ///Total fees for all charges.
        ///</summary>
        public MoneyV2? chargesFee { get; set; }
        ///<summary>
        ///Total gross amount for all charges.
        ///</summary>
        public MoneyV2? chargesGross { get; set; }
        ///<summary>
        ///Total fees for all refunds.
        ///</summary>
        public MoneyV2? refundsFee { get; set; }
        ///<summary>
        ///Total gross amount for all refunds.
        ///</summary>
        public MoneyV2? refundsFeeGross { get; set; }
        ///<summary>
        ///Total fees for all reserved funds.
        ///</summary>
        public MoneyV2? reservedFundsFee { get; set; }
        ///<summary>
        ///Total gross amount for all reserved funds.
        ///</summary>
        public MoneyV2? reservedFundsGross { get; set; }
        ///<summary>
        ///Total fees for all retried payouts.
        ///</summary>
        public MoneyV2? retriedPayoutsFee { get; set; }
        ///<summary>
        ///Total gross amount for all retried payouts.
        ///</summary>
        public MoneyV2? retriedPayoutsGross { get; set; }
    }

    ///<summary>
    ///The possible transaction types for a payout.
    ///</summary>
    public enum ShopifyPaymentsPayoutTransactionType
    {
        ///<summary>
        ///The payout is a deposit.
        ///</summary>
        DEPOSIT,
        ///<summary>
        ///The payout is a withdrawal.
        ///</summary>
        WITHDRAWAL,
    }

    ///<summary>
    ///Presents all Shopify Payments specific information related to an order refund.
    ///</summary>
    public class ShopifyPaymentsRefundSet : GraphQLObject<ShopifyPaymentsRefundSet>
    {
        ///<summary>
        ///The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
        ///</summary>
        public string? acquirerReferenceNumber { get; set; }
    }

    ///<summary>
    ///Presents all Shopify Payments specific information related to an order transaction.
    ///</summary>
    public class ShopifyPaymentsTransactionSet : GraphQLObject<ShopifyPaymentsTransactionSet>
    {
        ///<summary>
        ///Contains all fields related to an extended authorization.
        ///</summary>
        public ShopifyPaymentsExtendedAuthorization? extendedAuthorizationSet { get; set; }
        ///<summary>
        ///Contains all fields related to a refund.
        ///</summary>
        public ShopifyPaymentsRefundSet? refundSet { get; set; }
    }

    ///<summary>
    ///Each subject (individual) of an account has a verification object giving
    /// information about the verification state.
    ///</summary>
    public class ShopifyPaymentsVerification : GraphQLObject<ShopifyPaymentsVerification>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The status of the verification.
        ///</summary>
        public ShopifyPaymentsVerificationStatus? status { get; set; }
        ///<summary>
        ///The subject/individual who has to be verified.
        ///</summary>
        public ShopifyPaymentsVerificationSubject? subject { get; set; }
    }

    ///<summary>
    ///A document which can be used to verify an individual.
    ///</summary>
    public class ShopifyPaymentsVerificationDocument : GraphQLObject<ShopifyPaymentsVerificationDocument>
    {
        ///<summary>
        ///True if the back side of the document is required.
        ///</summary>
        public bool? backRequired { get; set; }
        ///<summary>
        ///True if the front side of the document is required.
        ///</summary>
        public bool? frontRequired { get; set; }
        ///<summary>
        ///The type of the document which can be used for verification.
        ///</summary>
        public ShopifyPaymentsVerificationDocumentType? type { get; set; }
    }

    ///<summary>
    ///The types of possible verification documents.
    ///</summary>
    public enum ShopifyPaymentsVerificationDocumentType
    {
        ///<summary>
        ///The subject's driver's license.
        ///</summary>
        DRIVERS_LICENSE,
        ///<summary>
        ///A government's identification document of the subject.
        ///</summary>
        GOVERNMENT_IDENTIFICATION,
        ///<summary>
        ///The subject's passport.
        ///</summary>
        PASSPORT,
    }

    ///<summary>
    ///The status of a verification.
    ///</summary>
    public enum ShopifyPaymentsVerificationStatus
    {
        ///<summary>
        ///The verification has been verified.
        ///</summary>
        VERIFIED,
        ///<summary>
        ///The verification has not yet been verified.
        ///</summary>
        UNVERIFIED,
        ///<summary>
        ///The verification request has been submitted but a response has not yet been given.
        ///</summary>
        PENDING,
    }

    ///<summary>
    ///The verification subject represents an individual that has to be verified.
    ///</summary>
    public class ShopifyPaymentsVerificationSubject : GraphQLObject<ShopifyPaymentsVerificationSubject>
    {
        ///<summary>
        ///The family name of the individual to verify.
        ///</summary>
        public string? familyName { get; set; }
        ///<summary>
        ///The given name of the individual to verify.
        ///</summary>
        public string? givenName { get; set; }
    }

    ///<summary>
    ///The status of an order's eligibility for protection against fraudulent chargebacks by Shopify Protect.
    ///</summary>
    public enum ShopifyProtectEligibilityStatus
    {
        ///<summary>
        ///The eligibility of the order is pending and has not yet been determined.
        ///</summary>
        PENDING,
        ///<summary>
        ///The order is eligible for protection against fraudulent chargebacks.
        ///If an order is updated, the order's eligibility may change and protection could be removed.
        ///</summary>
        ELIGIBLE,
        ///<summary>
        ///The order isn't eligible for protection against fraudulent chargebacks.
        ///</summary>
        NOT_ELIGIBLE,
    }

    ///<summary>
    ///The eligibility details of an order's protection against fraudulent chargebacks by Shopify Protect.
    ///</summary>
    public class ShopifyProtectOrderEligibility : GraphQLObject<ShopifyProtectOrderEligibility>
    {
        ///<summary>
        ///The status of whether an order is eligible for protection against fraudulent chargebacks.
        ///</summary>
        public ShopifyProtectEligibilityStatus? status { get; set; }
    }

    ///<summary>
    ///A summary of Shopify Protect details for an order.
    ///</summary>
    public class ShopifyProtectOrderSummary : GraphQLObject<ShopifyProtectOrderSummary>
    {
        ///<summary>
        ///The eligibility details of an order's protection against fraudulent chargebacks.
        ///</summary>
        public ShopifyProtectOrderEligibility? eligibility { get; set; }
        ///<summary>
        ///The status of the order's protection against fraudulent chargebacks.
        ///</summary>
        public ShopifyProtectStatus? status { get; set; }
    }

    ///<summary>
    ///The status of an order's protection with Shopify Protect.
    ///</summary>
    public enum ShopifyProtectStatus
    {
        ///<summary>
        ///The protection for the order is pending and has not yet been determined.
        ///</summary>
        PENDING,
        ///<summary>
        ///The protection for the order is active and eligible for reimbursement against fraudulent chargebacks.
        ///If an order is updated, the order's eligibility may change and protection could become inactive.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The protection for an order isn't active because the order didn't meet eligibility requirements.
        ///</summary>
        INACTIVE,
        ///<summary>
        ///The order received a fraudulent chargeback and it was protected.
        ///</summary>
        PROTECTED,
        ///<summary>
        ///The order received a chargeback but the order wasn't protected because it didn't meet coverage requirements.
        ///</summary>
        NOT_PROTECTED,
    }

    ///<summary>
    ///A response to a ShopifyQL query.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(PolarisVizResponse), typeDiscriminator: "PolarisVizResponse")]
    [JsonDerivedType(typeof(TableResponse), typeDiscriminator: "TableResponse")]
    public interface IShopifyqlResponse : IGraphQLObject
    {
        public PolarisVizResponse? AsPolarisVizResponse() => this as PolarisVizResponse;
        public TableResponse? AsTableResponse() => this as TableResponse;
        ///<summary>
        ///A list of parse errors, if parsing fails.
        ///</summary>
        public IEnumerable<ParseError>? parseErrors { get; }
        ///<summary>
        ///The result in a tabular format with schema and row data.
        ///          To be used as a raw 2-dimensional response of the query.
        ///          It's always present even if query has a `VISUALIZE` keyword.
        ///</summary>
        public TableData? tableData { get; }
    }

    ///<summary>
    ///Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.
    ///</summary>
    public class StaffMember : GraphQLObject<StaffMember>, INode
    {
        ///<summary>
        ///Whether the staff member is active.
        ///</summary>
        public bool? active { get; set; }
        ///<summary>
        ///The image used as the staff member's avatar in the Shopify admin.
        ///</summary>
        public Image? avatar { get; set; }
        ///<summary>
        ///The staff member's email address.
        ///</summary>
        public string? email { get; set; }
        ///<summary>
        ///Whether the staff member's account exists.
        ///</summary>
        public bool? exists { get; set; }
        ///<summary>
        ///The staff member's first name.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The staff member's initials, if available.
        ///</summary>
        public IEnumerable<string>? initials { get; set; }
        ///<summary>
        ///Whether the staff member is the shop owner.
        ///</summary>
        public bool? isShopOwner { get; set; }
        ///<summary>
        ///The staff member's last name.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///The staff member's full name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The staff member's phone number.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The data used to customize the Shopify admin experience for the staff member.
        ///</summary>
        public StaffMemberPrivateData? privateData { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple StaffMembers.
    ///</summary>
    public class StaffMemberConnection : GraphQLObject<StaffMemberConnection>, IConnectionWithNodesAndEdges<StaffMemberEdge, StaffMember>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<StaffMemberEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in StaffMemberEdge.
        ///</summary>
        public IEnumerable<StaffMember>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image.
    ///</summary>
    public enum StaffMemberDefaultImage
    {
        ///<summary>
        ///Returns a default avatar image for the staff member.
        ///</summary>
        DEFAULT,
        ///<summary>
        ///Returns a transparent avatar image for the staff member.
        ///</summary>
        TRANSPARENT,
        ///<summary>
        ///Returns a URL that returns a 404 error if the image is not present.
        ///</summary>
        NOT_FOUND,
    }

    ///<summary>
    ///An auto-generated type which holds one StaffMember and a cursor during pagination.
    ///</summary>
    public class StaffMemberEdge : GraphQLObject<StaffMemberEdge>, IEdge<StaffMember>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of StaffMemberEdge.
        ///</summary>
        public StaffMember? node { get; set; }
    }

    ///<summary>
    ///Represents access permissions for a staff member.
    ///</summary>
    public enum StaffMemberPermission
    {
        ///<summary>
        ///The staff member can manage and install apps and channels.
        ///</summary>
        APPLICATIONS,
        ///<summary>
        ///The staff member can manage and install sales channels.
        ///</summary>
        CHANNELS,
        ///<summary>
        ///The staff member can view, create, update, and delete customers, and respond to customer messages in the Shopify Messaging API.
        ///</summary>
        CUSTOMERS,
        ///<summary>
        ///The staff member can view the Shopify Home page, which includes sales information and other shop data.
        ///</summary>
        DASHBOARD,
        ///<summary>
        ///The staff member can view, buy, and manage domains.
        ///</summary>
        DOMAINS,
        ///<summary>
        ///The staff member can create, update, and delete draft orders.
        ///</summary>
        DRAFT_ORDERS,
        ///<summary>
        ///The staff member can update orders.
        ///</summary>
        EDIT_ORDERS,
        ///<summary>
        ///The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions) with some exceptions, such as modifying the account billing or deleting staff accounts.
        ///</summary>
        [Obsolete("Use the list of the staff member's explicit permissions returned in the `StaffMember.permissions.userPermissions` field instead of `full` permission.")]
        FULL,
        ///<summary>
        ///The staff member can view, create, issue, and export gift cards to a CSV file.
        ///</summary>
        GIFT_CARDS,
        ///<summary>
        ///The staff member can view and modify links and navigation menus.
        ///</summary>
        LINKS,
        ///<summary>
        ///The staff member can create, update, and delete locations where inventory is stocked or managed.
        ///</summary>
        LOCATIONS,
        ///<summary>
        ///The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file.
        ///</summary>
        MARKETING,
        ///<summary>
        ///The staff member can view, create, and automate marketing campaigns.
        ///</summary>
        MARKETING_SECTION,
        ///<summary>
        ///The staff member can view, create, update, delete, and cancel orders, and receive order notifications. The staff member can still create draft orders without this permission.
        ///</summary>
        ORDERS,
        ///<summary>
        ///The staff member can view the Overview and Live view pages, which include sales information, and other shop and sales channels data.
        ///</summary>
        OVERVIEWS,
        ///<summary>
        ///The staff member can view, create, update, publish, and delete blog posts and pages.
        ///</summary>
        PAGES,
        ///<summary>
        ///The staff member can pay for an order by using a vaulted card.
        ///</summary>
        PAY_ORDERS_BY_VAULTED_CARD,
        ///<summary>
        ///The staff member can view the preferences and configuration of a shop.
        ///</summary>
        PREFERENCES,
        ///<summary>
        ///The staff member can view, create, import, and update products, collections, and inventory.
        ///</summary>
        PRODUCTS,
        ///<summary>
        ///The staff member can view and create all reports, which includes sales information and other shop data.
        ///</summary>
        REPORTS,
        ///<summary>
        ///The staff member can view, update, and publish themes.
        ///</summary>
        THEMES,
        ///<summary>
        ///The staff member can view and create translations.
        ///</summary>
        [Obsolete("Unused.")]
        TRANSLATIONS,
    }

    ///<summary>
    ///Represents the data used to customize the Shopify admin experience for a logged-in staff member.
    ///</summary>
    public class StaffMemberPrivateData : GraphQLObject<StaffMemberPrivateData>
    {
        ///<summary>
        ///The URL to the staff member's account settings page.
        ///</summary>
        public string? accountSettingsUrl { get; set; }
        ///<summary>
        ///The date and time when the staff member was created.
        ///</summary>
        public DateTime? createdAt { get; set; }

        ///<summary>
        ///Access permissions for the staff member.
        ///</summary>
        [Obsolete("Use StaffMember.permissions.userPermissions instead")]
        public IEnumerable<StaffMemberPermission>? permissions { get; set; }
    }

    ///<summary>
    ///Information about a staged upload target, which should be used to send a request to upload
    ///the file.
    ///
    ///For more information on the upload process, refer to
    ///[Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
    ///</summary>
    public class StagedMediaUploadTarget : GraphQLObject<StagedMediaUploadTarget>
    {
        ///<summary>
        ///Parameters needed to authenticate a request to upload the file.
        ///</summary>
        public IEnumerable<StagedUploadParameter>? parameters { get; set; }
        ///<summary>
        ///The URL to be passed as `originalSource` in
        ///[CreateMediaInput](https://shopify.dev/api/admin-graphql/latest/input-objects/CreateMediaInput)
        ///and [FileCreateInput](https://shopify.dev/api/admin-graphql/2022-04/input-objects/FileCreateInput)
        ///for the [productCreateMedia](https://shopify.dev/api/admin-graphql/2022-04/mutations/productCreateMedia)
        ///and [fileCreate](https://shopify.dev/api/admin-graphql/2022-04/mutations/fileCreate)
        ///mutations.
        ///</summary>
        public string? resourceUrl { get; set; }
        ///<summary>
        ///The URL to use when sending an request to upload the file. Should be used in conjunction with
        ///the parameters field.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///The possible HTTP methods that can be used when sending a request to upload a file using information from a
    ///[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget).
    ///</summary>
    public enum StagedUploadHttpMethodType
    {
        ///<summary>
        ///The POST HTTP method.
        ///</summary>
        POST,
        ///<summary>
        ///The PUT HTTP method.
        ///</summary>
        PUT,
    }

    ///<summary>
    ///The parameters required to authenticate a file upload request using a
    ///[StagedMediaUploadTarget's url field](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-stagedmediauploadtarget-url).
    ///
    ///For more information on the upload process, refer to
    ///[Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
    ///</summary>
    public class StagedUploadParameter : GraphQLObject<StagedUploadParameter>
    {
        ///<summary>
        ///The parameter's name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The parameter's value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Information about the staged target.
    ///
    ///Deprecated in favor of
    ///[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget),
    ///which is returned by the
    ///[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
    ///</summary>
    public class StagedUploadTarget : GraphQLObject<StagedUploadTarget>
    {
        ///<summary>
        ///The parameters of an image to be uploaded.
        ///</summary>
        public IEnumerable<ImageUploadParameter>? parameters { get; set; }
        ///<summary>
        ///The image URL.
        ///</summary>
        public string? url { get; set; }
    }

    ///<summary>
    ///Return type for `stagedUploadTargetGenerate` mutation.
    ///</summary>
    public class StagedUploadTargetGeneratePayload : GraphQLObject<StagedUploadTargetGeneratePayload>
    {
        ///<summary>
        ///The signed parameters that can be used to upload the asset.
        ///</summary>
        public IEnumerable<MutationsStagedUploadTargetGenerateUploadParameter>? parameters { get; set; }
        ///<summary>
        ///The signed URL where the asset can be uploaded.
        ///</summary>
        public string? url { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The resource type to receive.
    ///</summary>
    public enum StagedUploadTargetGenerateUploadResource
    {
        ///<summary>
        ///An image associated with a collection.
        ///
        ///For example, after uploading an image, you can use the
        ///[collectionUpdate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/collectionUpdate)
        ///to add the image to a collection.
        ///</summary>
        COLLECTION_IMAGE,
        ///<summary>
        ///Represents any file other than HTML.
        ///
        ///For example, after uploading the file, you can add the file to the
        ///[Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
        ///[fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
        ///</summary>
        FILE,
        ///<summary>
        ///An image.
        ///
        ///For example, after uploading an image, you can add the image to a product using the
        ///[productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
        ///or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
        ///[fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
        ///</summary>
        IMAGE,
        ///<summary>
        ///A Shopify hosted 3d model.
        ///
        ///For example, after uploading the 3d model, you can add the 3d model to a product using the
        ///[productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
        ///</summary>
        MODEL_3D,
        ///<summary>
        ///An image that's associated with a product.
        ///
        ///For example, after uploading the image, you can add the image to a product using the
        ///[productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
        ///</summary>
        PRODUCT_IMAGE,
        ///<summary>
        ///An image.
        ///
        ///For example, after uploading the image, you can add the image to the
        ///[Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
        ///[fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
        ///</summary>
        SHOP_IMAGE,
        ///<summary>
        ///A Shopify-hosted video.
        ///
        ///For example, after uploading the video, you can add the video to a product using the
        ///[productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
        ///or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
        ///[fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
        ///</summary>
        VIDEO,
        ///<summary>
        ///Represents bulk mutation variables.
        ///
        ///For example, bulk mutation variables can be used for bulk operations using the
        ///[bulkOperationRunMutation mutation](https://shopify.dev/api/admin-graphql/latest/mutations/bulkOperationRunMutation).
        ///</summary>
        BULK_MUTATION_VARIABLES,
        ///<summary>
        ///Represents a label associated with a return.
        ///
        ///For example, once uploaded, this resource can be used to [create a
        ///ReverseDelivery](https://shopify.dev/api/admin-graphql/unstable/mutations/reverseDeliveryCreateWithShipping).
        ///</summary>
        RETURN_LABEL,
        ///<summary>
        ///Represents a redirect CSV file.
        ///
        ///Example usage: This resource can be used for creating a
        ///[UrlRedirectImport](https://shopify.dev/api/admin-graphql/2022-04/objects/UrlRedirectImport)
        ///object for use in the
        ///[urlRedirectImportCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate).
        ///</summary>
        URL_REDIRECT_IMPORT,
    }

    ///<summary>
    ///Return type for `stagedUploadTargetsGenerate` mutation.
    ///</summary>
    public class StagedUploadTargetsGeneratePayload : GraphQLObject<StagedUploadTargetsGeneratePayload>
    {
        ///<summary>
        ///The staged upload targets that were generated.
        ///</summary>
        public IEnumerable<StagedUploadTarget>? urls { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `stagedUploadsCreate` mutation.
    ///</summary>
    public class StagedUploadsCreatePayload : GraphQLObject<StagedUploadsCreatePayload>
    {
        ///<summary>
        ///The staged upload targets that were generated.
        ///</summary>
        public IEnumerable<StagedMediaUploadTarget>? stagedTargets { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `standardMetafieldDefinitionEnable` mutation.
    ///</summary>
    public class StandardMetafieldDefinitionEnablePayload : GraphQLObject<StandardMetafieldDefinitionEnablePayload>
    {
        ///<summary>
        ///The metafield definition that was created.
        ///</summary>
        public MetafieldDefinition? createdDefinition { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<StandardMetafieldDefinitionEnableUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `StandardMetafieldDefinitionEnable`.
    ///</summary>
    public class StandardMetafieldDefinitionEnableUserError : GraphQLObject<StandardMetafieldDefinitionEnableUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public StandardMetafieldDefinitionEnableUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `StandardMetafieldDefinitionEnableUserError`.
    ///</summary>
    public enum StandardMetafieldDefinitionEnableUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The standard metafield definition template was not found.
        ///</summary>
        TEMPLATE_NOT_FOUND,
        ///<summary>
        ///The maximum number of definitions per owner type has been exceeded.
        ///</summary>
        LIMIT_EXCEEDED,
        ///<summary>
        ///The namespace and key is already in use for a set of your metafields.
        ///</summary>
        UNSTRUCTURED_ALREADY_EXISTS,
        ///<summary>
        ///The definition type is not eligible to be used as collection condition.
        ///</summary>
        TYPE_NOT_ALLOWED_FOR_CONDITIONS,
    }

    ///<summary>
    ///Standard metafield definition templates provide preset configurations to create metafield definitions.
    ///Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.
    ///
    ///Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
    ///</summary>
    public class StandardMetafieldDefinitionTemplate : GraphQLObject<StandardMetafieldDefinitionTemplate>, INode
    {
        ///<summary>
        ///The description of the standard metafield definition.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The key owned by the definition after the definition has been activated.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///The human-readable name for the standard metafield definition.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The namespace owned by the definition after the definition has been activated.
        ///</summary>
        public string? @namespace { get; set; }
        ///<summary>
        ///The list of resource types that the standard metafield definition can be applied to.
        ///</summary>
        public IEnumerable<MetafieldOwnerType>? ownerTypes { get; set; }
        ///<summary>
        ///The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores.
        ///</summary>
        public MetafieldDefinitionType? type { get; set; }
        ///<summary>
        ///The configured validations for the standard metafield definition.
        ///</summary>
        public IEnumerable<MetafieldDefinitionValidation>? validations { get; set; }
        ///<summary>
        ///Whether metafields for the definition are by default visible using the Storefront API.
        ///</summary>
        public bool? visibleToStorefrontApi { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates.
    ///</summary>
    public class StandardMetafieldDefinitionTemplateConnection : GraphQLObject<StandardMetafieldDefinitionTemplateConnection>, IConnectionWithNodesAndEdges<StandardMetafieldDefinitionTemplateEdge, StandardMetafieldDefinitionTemplate>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<StandardMetafieldDefinitionTemplateEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in StandardMetafieldDefinitionTemplateEdge.
        ///</summary>
        public IEnumerable<StandardMetafieldDefinitionTemplate>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.
    ///</summary>
    public class StandardMetafieldDefinitionTemplateEdge : GraphQLObject<StandardMetafieldDefinitionTemplateEdge>, IEdge<StandardMetafieldDefinitionTemplate>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of StandardMetafieldDefinitionTemplateEdge.
        ///</summary>
        public StandardMetafieldDefinitionTemplate? node { get; set; }
    }

    ///<summary>
    ///Return type for `standardMetaobjectDefinitionEnable` mutation.
    ///</summary>
    public class StandardMetaobjectDefinitionEnablePayload : GraphQLObject<StandardMetaobjectDefinitionEnablePayload>
    {
        ///<summary>
        ///The metaobject definition that was enabled using the standard template.
        ///</summary>
        public MetaobjectDefinition? metaobjectDefinition { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<MetaobjectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
    ///</summary>
    public class StandardizedProductType : GraphQLObject<StandardizedProductType>
    {
        ///<summary>
        ///The product taxonomy node associated with the standardized product type.
        ///</summary>
        public ProductTaxonomyNode? productTaxonomyNode { get; set; }
    }

    ///<summary>
    ///A token that's used to delegate unauthenticated access scopes to clients that need to access
    ///the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access
    ///tokens for each shop.
    ///</summary>
    public class StorefrontAccessToken : GraphQLObject<StorefrontAccessToken>, INode
    {
        ///<summary>
        ///List of permissions associated with the token.
        ///</summary>
        public IEnumerable<AccessScope>? accessScopes { get; set; }
        ///<summary>
        ///The issued public access token.
        ///</summary>
        public string? accessToken { get; set; }
        ///<summary>
        ///The date and time when the public access token was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///An arbitrary title for each token determined by the developer, used for reference         purposes.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The date and time when the storefront access token was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple StorefrontAccessTokens.
    ///</summary>
    public class StorefrontAccessTokenConnection : GraphQLObject<StorefrontAccessTokenConnection>, IConnectionWithNodesAndEdges<StorefrontAccessTokenEdge, StorefrontAccessToken>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<StorefrontAccessTokenEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in StorefrontAccessTokenEdge.
        ///</summary>
        public IEnumerable<StorefrontAccessToken>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `storefrontAccessTokenCreate` mutation.
    ///</summary>
    public class StorefrontAccessTokenCreatePayload : GraphQLObject<StorefrontAccessTokenCreatePayload>
    {
        ///<summary>
        ///The user's shop.
        ///</summary>
        public Shop? shop { get; set; }
        ///<summary>
        ///The storefront access token.
        ///</summary>
        public StorefrontAccessToken? storefrontAccessToken { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `storefrontAccessTokenDelete` mutation.
    ///</summary>
    public class StorefrontAccessTokenDeletePayload : GraphQLObject<StorefrontAccessTokenDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted storefront access token.
        ///</summary>
        public string? deletedStorefrontAccessTokenId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
    ///</summary>
    public class StorefrontAccessTokenEdge : GraphQLObject<StorefrontAccessTokenEdge>, IEdge<StorefrontAccessToken>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of StorefrontAccessTokenEdge.
        ///</summary>
        public StorefrontAccessToken? node { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through a list of Strings.
    ///</summary>
    public class StringConnection : GraphQLObject<StringConnection>, IConnectionWithEdges<StringEdge, string>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<StringEdge>? edges { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one String and a cursor during pagination.
    ///</summary>
    public class StringEdge : GraphQLObject<StringEdge>, IEdge<string>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of StringEdge.
        ///</summary>
        public string? node { get; set; }
    }

    ///<summary>
    ///Represents an applied code discount.
    ///</summary>
    public class SubscriptionAppliedCodeDiscount : GraphQLObject<SubscriptionAppliedCodeDiscount>, ISubscriptionDiscount
    {
        ///<summary>
        ///The unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The redeem code of the discount that applies on the subscription.
        ///</summary>
        public string? redeemCode { get; set; }
        ///<summary>
        ///The reason that the discount on the subscription draft is rejected.
        ///</summary>
        public SubscriptionDiscountRejectionReason? rejectionReason { get; set; }
    }

    ///<summary>
    ///A record of an execution of the subscription billing process. Billing attempts use
    ///idempotency keys to avoid duplicate order creation. A successful billing attempt
    ///will create an order.
    ///</summary>
    public class SubscriptionBillingAttempt : GraphQLObject<SubscriptionBillingAttempt>, INode
    {
        ///<summary>
        ///The date and time when the billing attempt was completed.
        ///</summary>
        public DateTime? completedAt { get; set; }
        ///<summary>
        ///The date and time when the billing attempt was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///A code corresponding to a payment error during processing.
        ///</summary>
        public SubscriptionBillingAttemptErrorCode? errorCode { get; set; }
        ///<summary>
        ///A message describing a payment error during processing.
        ///</summary>
        public string? errorMessage { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///A unique key generated by the client to avoid duplicate payments.
        ///</summary>
        public string? idempotencyKey { get; set; }
        ///<summary>
        ///The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
        ///</summary>
        public string? nextActionUrl { get; set; }
        ///<summary>
        ///The result of this billing attempt if completed successfully.
        ///</summary>
        public Order? order { get; set; }
        ///<summary>
        ///The date and time used to calculate fulfillment intervals for a billing attempt that
        ///successfully completed after the current anchor date. To prevent fulfillment from being
        ///pushed to the next anchor date, this field can override the billing attempt date.
        ///</summary>
        public DateTime? originTime { get; set; }
        ///<summary>
        ///Whether the billing attempt is still processing.
        ///</summary>
        public bool? ready { get; set; }
        ///<summary>
        ///The subscription contract.
        ///</summary>
        public SubscriptionContract? subscriptionContract { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
    ///</summary>
    public class SubscriptionBillingAttemptConnection : GraphQLObject<SubscriptionBillingAttemptConnection>, IConnectionWithNodesAndEdges<SubscriptionBillingAttemptEdge, SubscriptionBillingAttempt>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SubscriptionBillingAttemptEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SubscriptionBillingAttemptEdge.
        ///</summary>
        public IEnumerable<SubscriptionBillingAttempt>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionBillingAttemptCreate` mutation.
    ///</summary>
    public class SubscriptionBillingAttemptCreatePayload : GraphQLObject<SubscriptionBillingAttemptCreatePayload>
    {
        ///<summary>
        ///The subscription billing attempt.
        ///</summary>
        public SubscriptionBillingAttempt? subscriptionBillingAttempt { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<BillingAttemptUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
    ///</summary>
    public class SubscriptionBillingAttemptEdge : GraphQLObject<SubscriptionBillingAttemptEdge>, IEdge<SubscriptionBillingAttempt>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SubscriptionBillingAttemptEdge.
        ///</summary>
        public SubscriptionBillingAttempt? node { get; set; }
    }

    ///<summary>
    ///The possible error codes associated with making billing attempts. The error codes supplement the
    ///`error_message` to provide consistent results and help with dunning management.
    ///</summary>
    public enum SubscriptionBillingAttemptErrorCode
    {
        ///<summary>
        ///Payment method was not found.
        ///</summary>
        PAYMENT_METHOD_NOT_FOUND,
        ///<summary>
        ///Payment provider is not enabled.
        ///</summary>
        PAYMENT_PROVIDER_IS_NOT_ENABLED,
        ///<summary>
        ///Payment method is invalid. Please update or create a new payment method.
        ///</summary>
        INVALID_PAYMENT_METHOD,
        ///<summary>
        ///There was an unexpected error during the billing attempt.
        ///</summary>
        UNEXPECTED_ERROR,
        ///<summary>
        ///Payment method is expired.
        ///</summary>
        EXPIRED_PAYMENT_METHOD,
        ///<summary>
        ///Payment method was declined by processor.
        ///</summary>
        PAYMENT_METHOD_DECLINED,
        ///<summary>
        ///There was an error during the authentication.
        ///</summary>
        AUTHENTICATION_ERROR,
        ///<summary>
        ///Gateway is in test mode and attempted to bill a live payment method.
        ///</summary>
        TEST_MODE,
        ///<summary>
        ///Payment method was canceled by buyer.
        ///</summary>
        BUYER_CANCELED_PAYMENT_METHOD,
        ///<summary>
        ///Customer was not found.
        ///</summary>
        CUSTOMER_NOT_FOUND,
        ///<summary>
        ///Customer is invalid.
        ///</summary>
        CUSTOMER_INVALID,
        ///<summary>
        ///The shipping address is either missing or invalid.
        ///</summary>
        INVALID_SHIPPING_ADDRESS,
        ///<summary>
        ///The billing agreement ID or the transaction ID for the customer's payment method is invalid.
        ///</summary>
        INVALID_CUSTOMER_BILLING_AGREEMENT,
        ///<summary>
        ///A payment has already been made for this invoice.
        ///</summary>
        INVOICE_ALREADY_PAID,
        ///<summary>
        ///Payment method cannot be used with the current payment gateway test mode configuration.
        ///</summary>
        PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG,
        ///<summary>
        ///The amount is too small.
        ///</summary>
        AMOUNT_TOO_SMALL,
        ///<summary>
        ///No inventory location found or enabled.
        ///</summary>
        INVENTORY_ALLOCATIONS_NOT_FOUND,
        ///<summary>
        ///Transient error, try again later.
        ///</summary>
        TRANSIENT_ERROR,
    }

    ///<summary>
    ///The set of valid sort keys for the SubscriptionBillingAttempts query.
    ///</summary>
    public enum SubscriptionBillingAttemptsSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///A subscription billing cycle.
    ///</summary>
    public class SubscriptionBillingCycle : GraphQLObject<SubscriptionBillingCycle>
    {
        ///<summary>
        ///The date on which the billing attempt is expected to be made.
        ///</summary>
        public DateTime? billingAttemptExpectedDate { get; set; }
        ///<summary>
        ///The list of billing attempts associated with the billing cycle.
        ///</summary>
        public SubscriptionBillingAttemptConnection? billingAttempts { get; set; }
        ///<summary>
        ///The end date of the billing cycle.
        ///</summary>
        public DateTime? cycleEndAt { get; set; }
        ///<summary>
        ///The index of the billing cycle.
        ///</summary>
        public int? cycleIndex { get; set; }
        ///<summary>
        ///The start date of the billing cycle.
        ///</summary>
        public DateTime? cycleStartAt { get; set; }
        ///<summary>
        ///Whether this billing cycle was edited.
        ///</summary>
        public bool? edited { get; set; }
        ///<summary>
        ///The active edited contract for the billing cycle.
        ///</summary>
        public SubscriptionBillingCycleEditedContract? editedContract { get; set; }
        ///<summary>
        ///Whether this billing cycle was skipped.
        ///</summary>
        public bool? skipped { get; set; }
        ///<summary>
        ///The subscription contract that the billing cycle belongs to.
        ///</summary>
        public SubscriptionContract? sourceContract { get; set; }
        ///<summary>
        ///The status of the billing cycle.
        ///</summary>
        public SubscriptionBillingCycleBillingCycleStatus? status { get; set; }
    }

    ///<summary>
    ///The possible status values of a subscription billing cycle.
    ///</summary>
    public enum SubscriptionBillingCycleBillingCycleStatus
    {
        ///<summary>
        ///The billing cycle is billed.
        ///</summary>
        BILLED,
        ///<summary>
        ///The billing cycle hasn't been billed.
        ///</summary>
        UNBILLED,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SubscriptionBillingCycles.
    ///</summary>
    public class SubscriptionBillingCycleConnection : GraphQLObject<SubscriptionBillingCycleConnection>, IConnectionWithNodesAndEdges<SubscriptionBillingCycleEdge, SubscriptionBillingCycle>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycleEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SubscriptionBillingCycleEdge.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycle>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionBillingCycleContractDraftCommit` mutation.
    ///</summary>
    public class SubscriptionBillingCycleContractDraftCommitPayload : GraphQLObject<SubscriptionBillingCycleContractDraftCommitPayload>
    {
        ///<summary>
        ///The committed Subscription Billing Cycle Edited Contract object.
        ///</summary>
        public SubscriptionBillingCycleEditedContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionBillingCycleContractDraftConcatenate` mutation.
    ///</summary>
    public class SubscriptionBillingCycleContractDraftConcatenatePayload : GraphQLObject<SubscriptionBillingCycleContractDraftConcatenatePayload>
    {
        ///<summary>
        ///The Subscription Draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionBillingCycleContractEdit` mutation.
    ///</summary>
    public class SubscriptionBillingCycleContractEditPayload : GraphQLObject<SubscriptionBillingCycleContractEditPayload>
    {
        ///<summary>
        ///The draft subscription contract object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.
    ///</summary>
    public class SubscriptionBillingCycleEdge : GraphQLObject<SubscriptionBillingCycleEdge>, IEdge<SubscriptionBillingCycle>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SubscriptionBillingCycleEdge.
        ///</summary>
        public SubscriptionBillingCycle? node { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionBillingCycleEditDelete` mutation.
    ///</summary>
    public class SubscriptionBillingCycleEditDeletePayload : GraphQLObject<SubscriptionBillingCycleEditDeletePayload>
    {
        ///<summary>
        ///The list of updated billing cycles.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycle>? billingCycles { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycleUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a subscription contract with billing cycles.
    ///</summary>
    public class SubscriptionBillingCycleEditedContract : GraphQLObject<SubscriptionBillingCycleEditedContract>, ISubscriptionContractBase
    {
        ///<summary>
        ///The subscription app that the subscription contract is registered to.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The URL of the subscription contract page on the subscription app.
        ///</summary>
        public string? appAdminUrl { get; set; }
        ///<summary>
        ///The billing cycles that the edited contract belongs to.
        ///</summary>
        public SubscriptionBillingCycleConnection? billingCycles { get; set; }
        ///<summary>
        ///The date and time when the subscription contract was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The currency that's used for the subscription contract.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
        ///<summary>
        ///A list of the custom attributes to be added to the generated orders.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///The customer to whom the subscription contract belongs.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The customer payment method that's used for the subscription contract.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The delivery method for each billing of the subscription contract.
        ///</summary>
        public ISubscriptionDeliveryMethod? deliveryMethod { get; set; }
        ///<summary>
        ///The delivery price for each billing of the subscription contract.
        ///</summary>
        public MoneyV2? deliveryPrice { get; set; }
        ///<summary>
        ///The list of subscription discounts associated with the subscription contract.
        ///</summary>
        public SubscriptionManualDiscountConnection? discounts { get; set; }
        ///<summary>
        ///The number of lines associated with the subscription contract.
        ///</summary>
        public int? lineCount { get; set; }
        ///<summary>
        ///The list of subscription lines associated with the subscription contract.
        ///</summary>
        public SubscriptionLineConnection? lines { get; set; }
        ///<summary>
        ///The note field that will be applied to the generated orders.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///A list of the subscription contract's orders.
        ///</summary>
        public OrderConnection? orders { get; set; }
        ///<summary>
        ///The date and time when the subscription contract was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionBillingCycleEditsDelete` mutation.
    ///</summary>
    public class SubscriptionBillingCycleEditsDeletePayload : GraphQLObject<SubscriptionBillingCycleEditsDeletePayload>
    {
        ///<summary>
        ///The list of updated billing cycles.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycle>? billingCycles { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycleUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `SubscriptionBillingCycleUserError`.
    ///</summary>
    public enum SubscriptionBillingCycleErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///Can't find the billing cycle.
        ///</summary>
        CYCLE_NOT_FOUND,
        ///<summary>
        ///There's no contract or schedule edit associated with the targeted billing cycle(s).
        ///</summary>
        NO_CYCLE_EDITS,
        ///<summary>
        ///The index selector is invalid.
        ///</summary>
        INVALID_CYCLE_INDEX,
        ///<summary>
        ///The date selector is invalid.
        ///</summary>
        INVALID_DATE,
        ///<summary>
        ///Billing cycle schedule edit input provided is empty. Must take in parameters to modify schedule.
        ///</summary>
        EMPTY_BILLING_CYCLE_EDIT_SCHEDULE_INPUT,
        ///<summary>
        ///Billing date cannot be set on skipped billing cycle.
        ///</summary>
        BILLING_DATE_SET_ON_SKIPPED,
        ///<summary>
        ///Billing date of a cycle cannot be set to a value outside of its billing date range.
        ///</summary>
        OUT_OF_BOUNDS,
        ///<summary>
        ///Billing cycle selector cannot select upcoming billing cycle past limit.
        ///</summary>
        UPCOMING_CYCLE_LIMIT_EXCEEDED,
        ///<summary>
        ///Billing cycle selector cannot select billing cycle outside of index range.
        ///</summary>
        CYCLE_INDEX_OUT_OF_RANGE,
        ///<summary>
        ///Billing cycle selector cannot select billing cycle outside of start date range.
        ///</summary>
        CYCLE_START_DATE_OUT_OF_RANGE,
        ///<summary>
        ///Billing cycle has incomplete billing attempts in progress.
        ///</summary>
        INCOMPLETE_BILLING_ATTEMPTS,
    }

    ///<summary>
    ///The input fields for possible reasons for editing the billing cycle's schedule.
    ///</summary>
    public enum SubscriptionBillingCycleScheduleEditInputScheduleEditReason
    {
        ///<summary>
        ///Buyer initiated the schedule edit.
        ///</summary>
        BUYER_INITIATED,
        ///<summary>
        ///Merchant initiated the schedule edit.
        ///</summary>
        MERCHANT_INITIATED,
        ///<summary>
        ///Developer initiated the schedule edit.
        ///</summary>
        DEV_INITIATED,
    }

    ///<summary>
    ///Return type for `subscriptionBillingCycleScheduleEdit` mutation.
    ///</summary>
    public class SubscriptionBillingCycleScheduleEditPayload : GraphQLObject<SubscriptionBillingCycleScheduleEditPayload>
    {
        ///<summary>
        ///The updated billing cycle.
        ///</summary>
        public SubscriptionBillingCycle? billingCycle { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycleUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionBillingCycleSkip` mutation.
    ///</summary>
    public class SubscriptionBillingCycleSkipPayload : GraphQLObject<SubscriptionBillingCycleSkipPayload>
    {
        ///<summary>
        ///The updated billing cycle.
        ///</summary>
        public SubscriptionBillingCycle? billingCycle { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycleSkipUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `SubscriptionBillingCycleSkip`.
    ///</summary>
    public class SubscriptionBillingCycleSkipUserError : GraphQLObject<SubscriptionBillingCycleSkipUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public SubscriptionBillingCycleSkipUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `SubscriptionBillingCycleSkipUserError`.
    ///</summary>
    public enum SubscriptionBillingCycleSkipUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///Return type for `subscriptionBillingCycleUnskip` mutation.
    ///</summary>
    public class SubscriptionBillingCycleUnskipPayload : GraphQLObject<SubscriptionBillingCycleUnskipPayload>
    {
        ///<summary>
        ///The updated billing cycle.
        ///</summary>
        public SubscriptionBillingCycle? billingCycle { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionBillingCycleUnskipUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `SubscriptionBillingCycleUnskip`.
    ///</summary>
    public class SubscriptionBillingCycleUnskipUserError : GraphQLObject<SubscriptionBillingCycleUnskipUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public SubscriptionBillingCycleUnskipUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `SubscriptionBillingCycleUnskipUserError`.
    ///</summary>
    public enum SubscriptionBillingCycleUnskipUserErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///The possible errors for a subscription billing cycle.
    ///</summary>
    public class SubscriptionBillingCycleUserError : GraphQLObject<SubscriptionBillingCycleUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public SubscriptionBillingCycleErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the SubscriptionBillingCycles query.
    ///</summary>
    public enum SubscriptionBillingCyclesSortKeys
    {
        ///<summary>
        ///Sort by the `cycle_index` value.
        ///</summary>
        CYCLE_INDEX,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Select subscription billing cycles to be targeted.
    ///</summary>
    public enum SubscriptionBillingCyclesTargetSelection
    {
        ///<summary>
        ///Target all current and upcoming subscription billing cycles.
        ///</summary>
        ALL,
    }

    ///<summary>
    ///Represents a Subscription Billing Policy.
    ///</summary>
    public class SubscriptionBillingPolicy : GraphQLObject<SubscriptionBillingPolicy>
    {
        ///<summary>
        ///Specific anchor dates upon which the billing interval calculations should be made.
        ///</summary>
        public IEnumerable<SellingPlanAnchor>? anchors { get; set; }
        ///<summary>
        ///The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
        ///</summary>
        public SellingPlanInterval? interval { get; set; }
        ///<summary>
        ///The number of billing intervals between invoices.
        ///</summary>
        public int? intervalCount { get; set; }
        ///<summary>
        ///Maximum amount of cycles after which the subscription ends.
        ///</summary>
        public int? maxCycles { get; set; }
        ///<summary>
        ///Minimum amount of cycles required in the subscription.
        ///</summary>
        public int? minCycles { get; set; }
    }

    ///<summary>
    ///Represents a Subscription Contract.
    ///</summary>
    public class SubscriptionContract : GraphQLObject<SubscriptionContract>, INode, ISubscriptionContractBase
    {
        ///<summary>
        ///The subscription app that the subscription contract is registered to.
        ///</summary>
        public App? app { get; set; }
        ///<summary>
        ///The URL of the subscription contract page on the subscription app.
        ///</summary>
        public string? appAdminUrl { get; set; }
        ///<summary>
        ///The list of billing attempts associated with the subscription contract.
        ///</summary>
        public SubscriptionBillingAttemptConnection? billingAttempts { get; set; }
        ///<summary>
        ///The billing policy associated with the subscription contract.
        ///</summary>
        public SubscriptionBillingPolicy? billingPolicy { get; set; }
        ///<summary>
        ///The date and time when the subscription contract was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The currency that's used for the subscription contract.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
        ///<summary>
        ///A list of the custom attributes to be added to the generated orders.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///The customer to whom the subscription contract belongs.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The customer payment method that's used for the subscription contract.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The delivery method for each billing of the subscription contract.
        ///</summary>
        public ISubscriptionDeliveryMethod? deliveryMethod { get; set; }
        ///<summary>
        ///The delivery policy associated with the subscription contract.
        ///</summary>
        public SubscriptionDeliveryPolicy? deliveryPolicy { get; set; }
        ///<summary>
        ///The delivery price for each billing of the subscription contract.
        ///</summary>
        public MoneyV2? deliveryPrice { get; set; }
        ///<summary>
        ///The list of subscription discounts associated with the subscription contract.
        ///</summary>
        public SubscriptionManualDiscountConnection? discounts { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The current status of the last payment.
        ///</summary>
        public SubscriptionContractLastPaymentStatus? lastPaymentStatus { get; set; }
        ///<summary>
        ///The number of lines associated with the subscription contract.
        ///</summary>
        public int? lineCount { get; set; }
        ///<summary>
        ///The list of subscription lines associated with the subscription contract.
        ///</summary>
        public SubscriptionLineConnection? lines { get; set; }
        ///<summary>
        ///The next billing date for the subscription contract. This field is managed by the apps.
        ///        Alternatively you can utilize our
        ///        [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
        ///        which provide auto-computed billing dates and additional functionalities.
        ///</summary>
        public DateTime? nextBillingDate { get; set; }
        ///<summary>
        ///The note field that will be applied to the generated orders.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///A list of the subscription contract's orders.
        ///</summary>
        public OrderConnection? orders { get; set; }
        ///<summary>
        ///The order from which this contract originated.
        ///</summary>
        public Order? originOrder { get; set; }
        ///<summary>
        ///The revision id of the contract.
        ///</summary>
        public ulong? revisionId { get; set; }
        ///<summary>
        ///The current status of the subscription contract.
        ///</summary>
        public SubscriptionContractSubscriptionStatus? status { get; set; }
        ///<summary>
        ///The date and time when the subscription contract was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionContractActivate` mutation.
    ///</summary>
    public class SubscriptionContractActivatePayload : GraphQLObject<SubscriptionContractActivatePayload>
    {
        ///<summary>
        ///The new Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionContractStatusUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionContractAtomicCreate` mutation.
    ///</summary>
    public class SubscriptionContractAtomicCreatePayload : GraphQLObject<SubscriptionContractAtomicCreatePayload>
    {
        ///<summary>
        ///The new Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents subscription contract common fields.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SubscriptionBillingCycleEditedContract), typeDiscriminator: "SubscriptionBillingCycleEditedContract")]
    [JsonDerivedType(typeof(SubscriptionContract), typeDiscriminator: "SubscriptionContract")]
    public interface ISubscriptionContractBase : IGraphQLObject
    {
        public SubscriptionBillingCycleEditedContract? AsSubscriptionBillingCycleEditedContract() => this as SubscriptionBillingCycleEditedContract;
        public SubscriptionContract? AsSubscriptionContract() => this as SubscriptionContract;
        ///<summary>
        ///The subscription app that the subscription contract is registered to.
        ///</summary>
        public App? app { get; }
        ///<summary>
        ///The URL of the subscription contract page on the subscription app.
        ///</summary>
        public string? appAdminUrl { get; }
        ///<summary>
        ///The currency that's used for the subscription contract.
        ///</summary>
        public CurrencyCode? currencyCode { get; }
        ///<summary>
        ///A list of the custom attributes to be added to the generated orders.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; }
        ///<summary>
        ///The customer to whom the subscription contract belongs.
        ///</summary>
        public Customer? customer { get; }
        ///<summary>
        ///The customer payment method that's used for the subscription contract.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; }
        ///<summary>
        ///The delivery method for each billing of the subscription contract.
        ///</summary>
        public ISubscriptionDeliveryMethod? deliveryMethod { get; }
        ///<summary>
        ///The delivery price for each billing of the subscription contract.
        ///</summary>
        public MoneyV2? deliveryPrice { get; }
        ///<summary>
        ///The list of subscription discounts associated with the subscription contract.
        ///</summary>
        public SubscriptionManualDiscountConnection? discounts { get; }
        ///<summary>
        ///The number of lines associated with the subscription contract.
        ///</summary>
        public int? lineCount { get; }
        ///<summary>
        ///The list of subscription lines associated with the subscription contract.
        ///</summary>
        public SubscriptionLineConnection? lines { get; }
        ///<summary>
        ///The note field that will be applied to the generated orders.
        ///</summary>
        public string? note { get; }
        ///<summary>
        ///A list of the subscription contract's orders.
        ///</summary>
        public OrderConnection? orders { get; }
        ///<summary>
        ///The date and time when the subscription contract was updated.
        ///</summary>
        public DateTime? updatedAt { get; }
    }

    ///<summary>
    ///Return type for `subscriptionContractCancel` mutation.
    ///</summary>
    public class SubscriptionContractCancelPayload : GraphQLObject<SubscriptionContractCancelPayload>
    {
        ///<summary>
        ///The new Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionContractStatusUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SubscriptionContracts.
    ///</summary>
    public class SubscriptionContractConnection : GraphQLObject<SubscriptionContractConnection>, IConnectionWithNodesAndEdges<SubscriptionContractEdge, SubscriptionContract>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SubscriptionContractEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SubscriptionContractEdge.
        ///</summary>
        public IEnumerable<SubscriptionContract>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionContractCreate` mutation.
    ///</summary>
    public class SubscriptionContractCreatePayload : GraphQLObject<SubscriptionContractCreatePayload>
    {
        ///<summary>
        ///The Subscription Contract object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
    ///</summary>
    public class SubscriptionContractEdge : GraphQLObject<SubscriptionContractEdge>, IEdge<SubscriptionContract>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SubscriptionContractEdge.
        ///</summary>
        public SubscriptionContract? node { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `SubscriptionContractUserError`.
    ///</summary>
    public enum SubscriptionContractErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
    }

    ///<summary>
    ///Return type for `subscriptionContractExpire` mutation.
    ///</summary>
    public class SubscriptionContractExpirePayload : GraphQLObject<SubscriptionContractExpirePayload>
    {
        ///<summary>
        ///The new Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionContractStatusUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionContractFail` mutation.
    ///</summary>
    public class SubscriptionContractFailPayload : GraphQLObject<SubscriptionContractFailPayload>
    {
        ///<summary>
        ///The new Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionContractStatusUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///The possible status values of the last payment on a subscription contract.
    ///</summary>
    public enum SubscriptionContractLastPaymentStatus
    {
        ///<summary>
        ///Successful subscription billing attempt.
        ///</summary>
        SUCCEEDED,
        ///<summary>
        ///Failed subscription billing attempt.
        ///</summary>
        FAILED,
    }

    ///<summary>
    ///Return type for `subscriptionContractPause` mutation.
    ///</summary>
    public class SubscriptionContractPausePayload : GraphQLObject<SubscriptionContractPausePayload>
    {
        ///<summary>
        ///The new Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionContractStatusUpdateUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionContractProductChange` mutation.
    ///</summary>
    public class SubscriptionContractProductChangePayload : GraphQLObject<SubscriptionContractProductChangePayload>
    {
        ///<summary>
        ///The new Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The updated Subscription Line.
        ///</summary>
        public SubscriptionLine? lineUpdated { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionContractSetNextBillingDate` mutation.
    ///</summary>
    public class SubscriptionContractSetNextBillingDatePayload : GraphQLObject<SubscriptionContractSetNextBillingDatePayload>
    {
        ///<summary>
        ///The updated Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionContractUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `SubscriptionContractStatusUpdateUserError`.
    ///</summary>
    public enum SubscriptionContractStatusUpdateErrorCode
    {
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///Subscription contract status cannot be changed once terminated.
        ///</summary>
        CONTRACT_TERMINATED,
    }

    ///<summary>
    ///Represents a subscription contract status update error.
    ///</summary>
    public class SubscriptionContractStatusUpdateUserError : GraphQLObject<SubscriptionContractStatusUpdateUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public SubscriptionContractStatusUpdateErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///The possible status values of a subscription.
    ///</summary>
    public enum SubscriptionContractSubscriptionStatus
    {
        ///<summary>
        ///The contract is active and continuing per its policies.
        ///</summary>
        ACTIVE,
        ///<summary>
        ///The contract is temporarily paused and is expected to resume in the future.
        ///</summary>
        PAUSED,
        ///<summary>
        ///The contract was ended by an unplanned customer action.
        ///</summary>
        CANCELLED,
        ///<summary>
        ///The contract has ended per the expected circumstances. All billing and deliverycycles of the subscriptions were executed.
        ///</summary>
        EXPIRED,
        ///<summary>
        ///The contract ended because billing failed and no further billing attempts are expected.
        ///</summary>
        FAILED,
    }

    ///<summary>
    ///Return type for `subscriptionContractUpdate` mutation.
    ///</summary>
    public class SubscriptionContractUpdatePayload : GraphQLObject<SubscriptionContractUpdatePayload>
    {
        ///<summary>
        ///The Subscription Contract object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a Subscription Contract error.
    ///</summary>
    public class SubscriptionContractUserError : GraphQLObject<SubscriptionContractUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public SubscriptionContractErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Represents a Subscription Line Pricing Cycle Adjustment.
    ///</summary>
    public class SubscriptionCyclePriceAdjustment : GraphQLObject<SubscriptionCyclePriceAdjustment>
    {
        ///<summary>
        ///Price adjustment type.
        ///</summary>
        public SellingPlanPricingPolicyAdjustmentType? adjustmentType { get; set; }
        ///<summary>
        ///Price adjustment value.
        ///</summary>
        public ISellingPlanPricingPolicyAdjustmentValue? adjustmentValue { get; set; }
        ///<summary>
        ///The number of cycles required before this pricing policy applies.
        ///</summary>
        public int? afterCycle { get; set; }
        ///<summary>
        ///The computed price after the adjustments applied.
        ///</summary>
        public MoneyV2? computedPrice { get; set; }
    }

    ///<summary>
    ///Describes the delivery method to use to get the physical goods to the customer.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SubscriptionDeliveryMethodLocalDelivery), typeDiscriminator: "SubscriptionDeliveryMethodLocalDelivery")]
    [JsonDerivedType(typeof(SubscriptionDeliveryMethodPickup), typeDiscriminator: "SubscriptionDeliveryMethodPickup")]
    [JsonDerivedType(typeof(SubscriptionDeliveryMethodShipping), typeDiscriminator: "SubscriptionDeliveryMethodShipping")]
    public interface ISubscriptionDeliveryMethod : IGraphQLObject
    {
        public SubscriptionDeliveryMethodLocalDelivery? AsSubscriptionDeliveryMethodLocalDelivery() => this as SubscriptionDeliveryMethodLocalDelivery;
        public SubscriptionDeliveryMethodPickup? AsSubscriptionDeliveryMethodPickup() => this as SubscriptionDeliveryMethodPickup;
        public SubscriptionDeliveryMethodShipping? AsSubscriptionDeliveryMethodShipping() => this as SubscriptionDeliveryMethodShipping;
    }

    ///<summary>
    ///A subscription delivery method for local delivery.
    ///The other subscription delivery methods can be found in the `SubscriptionDeliveryMethod` union type.
    ///</summary>
    public class SubscriptionDeliveryMethodLocalDelivery : GraphQLObject<SubscriptionDeliveryMethodLocalDelivery>, ISubscriptionDeliveryMethod
    {
        ///<summary>
        ///The address to deliver to.
        ///</summary>
        public SubscriptionMailingAddress? address { get; set; }
        ///<summary>
        ///The details of the local delivery method to use.
        ///</summary>
        public SubscriptionDeliveryMethodLocalDeliveryOption? localDeliveryOption { get; set; }
    }

    ///<summary>
    ///The selected delivery option on a subscription contract.
    ///</summary>
    public class SubscriptionDeliveryMethodLocalDeliveryOption : GraphQLObject<SubscriptionDeliveryMethodLocalDeliveryOption>
    {
        ///<summary>
        ///A custom reference to the delivery method for use with automations.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The details displayed to the customer to describe the local delivery option.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The delivery instructions that the customer can provide to the merchant.
        ///</summary>
        public string? instructions { get; set; }
        ///<summary>
        ///The phone number that the customer provided to the merchant.
        ///Formatted using E.164 standard. For example, `+16135551111`.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The presentment title of the local delivery option.
        ///</summary>
        public string? presentmentTitle { get; set; }
        ///<summary>
        ///The title of the local delivery option.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///A delivery method with a pickup option.
    ///</summary>
    public class SubscriptionDeliveryMethodPickup : GraphQLObject<SubscriptionDeliveryMethodPickup>, ISubscriptionDeliveryMethod
    {
        ///<summary>
        ///The details of the pickup delivery method to use.
        ///</summary>
        public SubscriptionDeliveryMethodPickupOption? pickupOption { get; set; }
    }

    ///<summary>
    ///Represents the selected pickup option on a subscription contract.
    ///</summary>
    public class SubscriptionDeliveryMethodPickupOption : GraphQLObject<SubscriptionDeliveryMethodPickupOption>
    {
        ///<summary>
        ///A custom reference to the delivery method for use with automations.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The details displayed to the customer to describe the pickup option.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The location where the customer will pickup the merchandise.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///The presentment title of the pickup option.
        ///</summary>
        public string? presentmentTitle { get; set; }
        ///<summary>
        ///The title of the pickup option.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///Represents a shipping delivery method: a mailing address and a shipping option.
    ///</summary>
    public class SubscriptionDeliveryMethodShipping : GraphQLObject<SubscriptionDeliveryMethodShipping>, ISubscriptionDeliveryMethod
    {
        ///<summary>
        ///The address to ship to.
        ///</summary>
        public SubscriptionMailingAddress? address { get; set; }
        ///<summary>
        ///The details of the shipping method to use.
        ///</summary>
        public SubscriptionDeliveryMethodShippingOption? shippingOption { get; set; }
    }

    ///<summary>
    ///Represents the selected shipping option on a subscription contract.
    ///</summary>
    public class SubscriptionDeliveryMethodShippingOption : GraphQLObject<SubscriptionDeliveryMethodShippingOption>
    {
        ///<summary>
        ///The carrier service that's providing this shipping option.
        ///This field isn't currently supported and returns null.
        ///</summary>
        [Obsolete("This field has never been implemented.")]
        public DeliveryCarrierService? carrierService { get; set; }
        ///<summary>
        ///The code of the shipping option.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The description of the shipping option.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The presentment title of the shipping option.
        ///</summary>
        public string? presentmentTitle { get; set; }
        ///<summary>
        ///The title of the shipping option.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///The delivery option for a subscription contract.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SubscriptionLocalDeliveryOption), typeDiscriminator: "SubscriptionLocalDeliveryOption")]
    [JsonDerivedType(typeof(SubscriptionPickupOption), typeDiscriminator: "SubscriptionPickupOption")]
    [JsonDerivedType(typeof(SubscriptionShippingOption), typeDiscriminator: "SubscriptionShippingOption")]
    public interface ISubscriptionDeliveryOption : IGraphQLObject
    {
        public SubscriptionLocalDeliveryOption? AsSubscriptionLocalDeliveryOption() => this as SubscriptionLocalDeliveryOption;
        public SubscriptionPickupOption? AsSubscriptionPickupOption() => this as SubscriptionPickupOption;
        public SubscriptionShippingOption? AsSubscriptionShippingOption() => this as SubscriptionShippingOption;
        ///<summary>
        ///The code of the local delivery option.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The description of the local delivery option.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///Whether a phone number is required for the local delivery option.
        ///</summary>
        public bool? phoneRequired { get; set; }
        ///<summary>
        ///The presentment title of the local delivery option.
        ///</summary>
        public string? presentmentTitle { get; set; }
        ///<summary>
        ///The price of the local delivery option.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///The title of the local delivery option.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///The result of the query to fetch delivery options for the subscription contract.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SubscriptionDeliveryOptionResultFailure), typeDiscriminator: "SubscriptionDeliveryOptionResultFailure")]
    [JsonDerivedType(typeof(SubscriptionDeliveryOptionResultSuccess), typeDiscriminator: "SubscriptionDeliveryOptionResultSuccess")]
    public interface ISubscriptionDeliveryOptionResult : IGraphQLObject
    {
        public SubscriptionDeliveryOptionResultFailure? AsSubscriptionDeliveryOptionResultFailure() => this as SubscriptionDeliveryOptionResultFailure;
        public SubscriptionDeliveryOptionResultSuccess? AsSubscriptionDeliveryOptionResultSuccess() => this as SubscriptionDeliveryOptionResultSuccess;
    }

    ///<summary>
    ///A failure to find the available delivery options for a subscription contract.
    ///</summary>
    public class SubscriptionDeliveryOptionResultFailure : GraphQLObject<SubscriptionDeliveryOptionResultFailure>, ISubscriptionDeliveryOptionResult
    {
        ///<summary>
        ///The reason for the failure.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///The delivery option for a subscription contract.
    ///</summary>
    public class SubscriptionDeliveryOptionResultSuccess : GraphQLObject<SubscriptionDeliveryOptionResultSuccess>, ISubscriptionDeliveryOptionResult
    {
        ///<summary>
        ///The available delivery options.
        ///</summary>
        public IEnumerable<ISubscriptionDeliveryOption>? deliveryOptions { get; set; }
    }

    ///<summary>
    ///Represents a Subscription Delivery Policy.
    ///</summary>
    public class SubscriptionDeliveryPolicy : GraphQLObject<SubscriptionDeliveryPolicy>
    {
        ///<summary>
        ///The specific anchor dates upon which the delivery interval calculations should be made.
        ///</summary>
        public IEnumerable<SellingPlanAnchor>? anchors { get; set; }
        ///<summary>
        ///The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
        ///</summary>
        public SellingPlanInterval? interval { get; set; }
        ///<summary>
        ///The number of delivery intervals between deliveries.
        ///</summary>
        public int? intervalCount { get; set; }
    }

    ///<summary>
    ///Subscription draft discount types.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SubscriptionAppliedCodeDiscount), typeDiscriminator: "SubscriptionAppliedCodeDiscount")]
    [JsonDerivedType(typeof(SubscriptionManualDiscount), typeDiscriminator: "SubscriptionManualDiscount")]
    public interface ISubscriptionDiscount : IGraphQLObject
    {
        public SubscriptionAppliedCodeDiscount? AsSubscriptionAppliedCodeDiscount() => this as SubscriptionAppliedCodeDiscount;
        public SubscriptionManualDiscount? AsSubscriptionManualDiscount() => this as SubscriptionManualDiscount;
        ///<summary>
        ///The unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The reason that the discount on the subscription draft is rejected.
        ///</summary>
        public SubscriptionDiscountRejectionReason? rejectionReason { get; set; }
    }

    ///<summary>
    ///Represents what a particular discount reduces from a line price.
    ///</summary>
    public class SubscriptionDiscountAllocation : GraphQLObject<SubscriptionDiscountAllocation>
    {
        ///<summary>
        ///Allocation amount.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///Discount that created the allocation.
        ///</summary>
        public ISubscriptionDiscount? discount { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SubscriptionDiscounts.
    ///</summary>
    public class SubscriptionDiscountConnection : GraphQLObject<SubscriptionDiscountConnection>, IConnectionWithNodesAndEdges<SubscriptionDiscountEdge, ISubscriptionDiscount>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SubscriptionDiscountEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SubscriptionDiscountEdge.
        ///</summary>
        public IEnumerable<ISubscriptionDiscount>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
    ///</summary>
    public class SubscriptionDiscountEdge : GraphQLObject<SubscriptionDiscountEdge>, IEdge<ISubscriptionDiscount>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SubscriptionDiscountEdge.
        ///</summary>
        public ISubscriptionDiscount? node { get; set; }
    }

    ///<summary>
    ///Represents the subscription lines the discount applies on.
    ///</summary>
    public class SubscriptionDiscountEntitledLines : GraphQLObject<SubscriptionDiscountEntitledLines>
    {
        ///<summary>
        ///Specify whether the subscription discount will apply on all subscription lines.
        ///</summary>
        public bool? all { get; set; }
        ///<summary>
        ///The list of subscription lines associated with the subscription discount.
        ///</summary>
        public SubscriptionLineConnection? lines { get; set; }
    }

    ///<summary>
    ///The value of the discount and how it will be applied.
    ///</summary>
    public class SubscriptionDiscountFixedAmountValue : GraphQLObject<SubscriptionDiscountFixedAmountValue>, ISubscriptionDiscountValue
    {
        ///<summary>
        ///The fixed amount value of the discount.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///Whether the amount is applied per item.
        ///</summary>
        public bool? appliesOnEachItem { get; set; }
    }

    ///<summary>
    ///The percentage value of the discount.
    ///</summary>
    public class SubscriptionDiscountPercentageValue : GraphQLObject<SubscriptionDiscountPercentageValue>, ISubscriptionDiscountValue
    {
        ///<summary>
        ///The percentage value of the discount.
        ///</summary>
        public int? percentage { get; set; }
    }

    ///<summary>
    ///The reason a discount on a subscription draft was rejected.
    ///</summary>
    public enum SubscriptionDiscountRejectionReason
    {
        ///<summary>
        ///Discount code is not found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///Discount does not apply to any of the given line items.
        ///</summary>
        NO_ENTITLED_LINE_ITEMS,
        ///<summary>
        ///Quantity of items does not qualify for the discount.
        ///</summary>
        QUANTITY_NOT_IN_RANGE,
        ///<summary>
        ///Purchase amount of items does not qualify for the discount.
        ///</summary>
        PURCHASE_NOT_IN_RANGE,
        ///<summary>
        ///Given customer does not qualify for the discount.
        ///</summary>
        CUSTOMER_NOT_ELIGIBLE,
        ///<summary>
        ///Discount usage limit has been reached.
        ///</summary>
        USAGE_LIMIT_REACHED,
        ///<summary>
        ///Customer usage limit has been reached.
        ///</summary>
        CUSTOMER_USAGE_LIMIT_REACHED,
        ///<summary>
        ///Discount is inactive.
        ///</summary>
        CURRENTLY_INACTIVE,
        ///<summary>
        ///No applicable shipping lines.
        ///</summary>
        NO_ENTITLED_SHIPPING_LINES,
        ///<summary>
        ///Purchase type does not qualify for the discount.
        ///</summary>
        INCOMPATIBLE_PURCHASE_TYPE,
        ///<summary>
        ///Internal error during discount code validation.
        ///</summary>
        INTERNAL_ERROR,
    }

    ///<summary>
    ///The value of the discount and how it will be applied.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SubscriptionDiscountFixedAmountValue), typeDiscriminator: "SubscriptionDiscountFixedAmountValue")]
    [JsonDerivedType(typeof(SubscriptionDiscountPercentageValue), typeDiscriminator: "SubscriptionDiscountPercentageValue")]
    public interface ISubscriptionDiscountValue : IGraphQLObject
    {
        public SubscriptionDiscountFixedAmountValue? AsSubscriptionDiscountFixedAmountValue() => this as SubscriptionDiscountFixedAmountValue;
        public SubscriptionDiscountPercentageValue? AsSubscriptionDiscountPercentageValue() => this as SubscriptionDiscountPercentageValue;
    }

    ///<summary>
    ///Represents a Subscription Draft.
    ///</summary>
    public class SubscriptionDraft : GraphQLObject<SubscriptionDraft>, INode
    {
        ///<summary>
        ///The billing cycle that the subscription contract will be associated with.
        ///</summary>
        public SubscriptionBillingCycle? billingCycle { get; set; }
        ///<summary>
        ///The billing policy for the subscription contract.
        ///</summary>
        public SubscriptionBillingPolicy? billingPolicy { get; set; }
        ///<summary>
        ///The billing cycles of the contracts that will be concatenated to the subscription contract.
        ///</summary>
        public SubscriptionBillingCycleConnection? concatenatedBillingCycles { get; set; }
        ///<summary>
        ///The currency used for the subscription contract.
        ///</summary>
        public CurrencyCode? currencyCode { get; set; }
        ///<summary>
        ///A list of the custom attributes to be added to the generated orders.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///The customer to whom the subscription contract belongs.
        ///</summary>
        public Customer? customer { get; set; }
        ///<summary>
        ///The customer payment method used for the subscription contract.
        ///</summary>
        public CustomerPaymentMethod? customerPaymentMethod { get; set; }
        ///<summary>
        ///The delivery method for each billing of the subscription contract.
        ///</summary>
        public ISubscriptionDeliveryMethod? deliveryMethod { get; set; }
        ///<summary>
        ///The available delivery options for a given delivery address. Returns `null` for pending requests.
        ///</summary>
        public ISubscriptionDeliveryOptionResult? deliveryOptions { get; set; }
        ///<summary>
        ///The delivery policy for the subscription contract.
        ///</summary>
        public SubscriptionDeliveryPolicy? deliveryPolicy { get; set; }
        ///<summary>
        ///The delivery price for each billing the subscription contract.
        ///</summary>
        public MoneyV2? deliveryPrice { get; set; }
        ///<summary>
        ///The list of subscription discounts which will be associated with the subscription contract.
        ///</summary>
        public SubscriptionDiscountConnection? discounts { get; set; }
        ///<summary>
        ///The list of subscription discounts to be added to the subscription contract.
        ///</summary>
        public SubscriptionDiscountConnection? discountsAdded { get; set; }
        ///<summary>
        ///The list of subscription discounts to be removed from the subscription contract.
        ///</summary>
        public SubscriptionDiscountConnection? discountsRemoved { get; set; }
        ///<summary>
        ///The list of subscription discounts to be updated on the subscription contract.
        ///</summary>
        public SubscriptionDiscountConnection? discountsUpdated { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The list of subscription lines which will be associated with the subscription contract.
        ///</summary>
        public SubscriptionLineConnection? lines { get; set; }
        ///<summary>
        ///The list of subscription lines to be added to the subscription contract.
        ///</summary>
        public SubscriptionLineConnection? linesAdded { get; set; }
        ///<summary>
        ///The list of subscription lines to be removed from the subscription contract.
        ///</summary>
        public SubscriptionLineConnection? linesRemoved { get; set; }
        ///<summary>
        ///The next billing date for the subscription contract.
        ///</summary>
        public DateTime? nextBillingDate { get; set; }
        ///<summary>
        ///The note field that will be applied to the generated orders.
        ///</summary>
        public string? note { get; set; }
        ///<summary>
        ///The original subscription contract.
        ///</summary>
        public SubscriptionContract? originalContract { get; set; }

        ///<summary>
        ///Available Shipping Options for a given delivery address. Returns NULL for pending requests.
        ///</summary>
        [Obsolete("Use `deliveryOptions` instead.")]
        public ISubscriptionShippingOptionResult? shippingOptions { get; set; }
        ///<summary>
        ///The current status of the subscription contract.
        ///</summary>
        public SubscriptionContractSubscriptionStatus? status { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftCommit` mutation.
    ///</summary>
    public class SubscriptionDraftCommitPayload : GraphQLObject<SubscriptionDraftCommitPayload>
    {
        ///<summary>
        ///The updated Subscription Contract object.
        ///</summary>
        public SubscriptionContract? contract { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftDiscountAdd` mutation.
    ///</summary>
    public class SubscriptionDraftDiscountAddPayload : GraphQLObject<SubscriptionDraftDiscountAddPayload>
    {
        ///<summary>
        ///The added Subscription Discount.
        ///</summary>
        public SubscriptionManualDiscount? discountAdded { get; set; }
        ///<summary>
        ///The Subscription Contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftDiscountCodeApply` mutation.
    ///</summary>
    public class SubscriptionDraftDiscountCodeApplyPayload : GraphQLObject<SubscriptionDraftDiscountCodeApplyPayload>
    {
        ///<summary>
        ///The added subscription discount.
        ///</summary>
        public SubscriptionAppliedCodeDiscount? appliedDiscount { get; set; }
        ///<summary>
        ///The subscription contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftDiscountRemove` mutation.
    ///</summary>
    public class SubscriptionDraftDiscountRemovePayload : GraphQLObject<SubscriptionDraftDiscountRemovePayload>
    {
        ///<summary>
        ///The removed subscription draft discount.
        ///</summary>
        public ISubscriptionDiscount? discountRemoved { get; set; }
        ///<summary>
        ///The subscription contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftDiscountUpdate` mutation.
    ///</summary>
    public class SubscriptionDraftDiscountUpdatePayload : GraphQLObject<SubscriptionDraftDiscountUpdatePayload>
    {
        ///<summary>
        ///The updated Subscription Discount.
        ///</summary>
        public SubscriptionManualDiscount? discountUpdated { get; set; }
        ///<summary>
        ///The Subscription Contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `SubscriptionDraftUserError`.
    ///</summary>
    public enum SubscriptionDraftErrorCode
    {
        ///<summary>
        ///This line has already been removed.
        ///</summary>
        ALREADY_REMOVED,
        ///<summary>
        ///Input value is not present.
        ///</summary>
        PRESENCE,
        ///<summary>
        ///Subscription draft has been already committed.
        ///</summary>
        COMMITTED,
        ///<summary>
        ///Value is not in range.
        ///</summary>
        NOT_IN_RANGE,
        ///<summary>
        ///The value is not an integer.
        ///</summary>
        NOT_AN_INTEGER,
        ///<summary>
        ///The maximum number of cycles must be greater than the minimum.
        ///</summary>
        SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES,
        ///<summary>
        ///The delivery policy interval must be a multiple of the billing policy interval.
        ///</summary>
        DELIVERY_MUST_BE_MULTIPLE_OF_BILLING,
        ///<summary>
        ///Next billing date is invalid.
        ///</summary>
        INVALID_BILLING_DATE,
        ///<summary>
        ///Note length is too long.
        ///</summary>
        INVALID_NOTE_LENGTH,
        ///<summary>
        ///Must have at least one line.
        ///</summary>
        INVALID_LINES,
        ///<summary>
        ///Discount must have at least one entitled line.
        ///</summary>
        NO_ENTITLED_LINES,
        ///<summary>
        ///The customer doesn't exist.
        ///</summary>
        CUSTOMER_DOES_NOT_EXIST,
        ///<summary>
        ///The payment method customer must be the same as the contract customer.
        ///</summary>
        CUSTOMER_MISMATCH,
        ///<summary>
        ///The delivery method can't be blank if any lines require shipping.
        ///</summary>
        DELIVERY_METHOD_REQUIRED,
        ///<summary>
        ///The local delivery options must be set for local delivery.
        ///</summary>
        MISSING_LOCAL_DELIVERY_OPTIONS,
        ///<summary>
        ///The after cycle attribute must be unique between cycle discounts.
        ///</summary>
        CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE,
        ///<summary>
        ///The adjustment value must the same type as the adjustment type.
        ///</summary>
        INVALID_ADJUSTMENT_TYPE,
        ///<summary>
        ///The adjustment value must be either fixed_value or percentage.
        ///</summary>
        INVALID_ADJUSTMENT_VALUE,
        ///<summary>
        ///Another operation updated the contract concurrently as the commit was in progress.
        ///</summary>
        STALE_CONTRACT,
        ///<summary>
        ///Currency is not enabled.
        ///</summary>
        CURRENCY_NOT_ENABLED,
        ///<summary>
        ///Cannot update a subscription contract with a current or upcoming billing cycle contract edit.
        ///</summary>
        HAS_FUTURE_EDITS,
        ///<summary>
        ///Cannot commit a billing cycle contract draft with this mutation. Please use SubscriptionBillingCycleContractDraftCommit.
        ///</summary>
        BILLING_CYCLE_PRESENT,
        ///<summary>
        ///Cannot commit a contract draft with this mutation. Please use SubscriptionDraftCommit.
        ///</summary>
        BILLING_CYCLE_ABSENT,
        ///<summary>
        ///Delivery policy cannot be updated for billing cycle contract drafts.
        ///</summary>
        BILLING_CYCLE_CONTRACT_DRAFT_DELIVERY_POLICY_INVALID,
        ///<summary>
        ///Billing policy cannot be updated for billing cycle contract drafts.
        ///</summary>
        BILLING_CYCLE_CONTRACT_DRAFT_BILLING_POLICY_INVALID,
        ///<summary>
        ///Contract draft must be a billing cycle contract draft for contract concatenation.
        ///</summary>
        CONCATENATION_BILLING_CYCLE_CONTRACT_DRAFT_REQUIRED,
        ///<summary>
        ///Concatenated contracts cannot contain duplicate subscription contracts.
        ///</summary>
        DUPLICATE_CONCATENATED_CONTRACTS,
        ///<summary>
        ///Billing cycle selector cannot select upcoming billing cycle past limit.
        ///</summary>
        UPCOMING_CYCLE_LIMIT_EXCEEDED,
        ///<summary>
        ///Billing cycle selector cannot select billing cycle outside of index range.
        ///</summary>
        CYCLE_INDEX_OUT_OF_RANGE,
        ///<summary>
        ///Billing cycle selector cannot select billing cycle outside of start date range.
        ///</summary>
        CYCLE_START_DATE_OUT_OF_RANGE,
        ///<summary>
        ///Billing cycle selector requires exactly one of index or date to be provided.
        ///</summary>
        CYCLE_SELECTOR_VALIDATE_ONE_OF,
        ///<summary>
        ///Maximum number of concatenated contracts on a billing cycle contract draft exceeded.
        ///</summary>
        EXCEEDED_MAX_CONCATENATED_CONTRACTS,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value should be greater than the minimum allowed value.
        ///</summary>
        GREATER_THAN,
        ///<summary>
        ///The input value should be greater than or equal to the minimum value allowed.
        ///</summary>
        GREATER_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value should be less than the maximum value allowed.
        ///</summary>
        LESS_THAN,
        ///<summary>
        ///The input value should be less than or equal to the maximum value allowed.
        ///</summary>
        LESS_THAN_OR_EQUAL_TO,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
    }

    ///<summary>
    ///Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation.
    ///</summary>
    public class SubscriptionDraftFreeShippingDiscountAddPayload : GraphQLObject<SubscriptionDraftFreeShippingDiscountAddPayload>
    {
        ///<summary>
        ///The added subscription free shipping discount.
        ///</summary>
        public SubscriptionManualDiscount? discountAdded { get; set; }
        ///<summary>
        ///The subscription contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation.
    ///</summary>
    public class SubscriptionDraftFreeShippingDiscountUpdatePayload : GraphQLObject<SubscriptionDraftFreeShippingDiscountUpdatePayload>
    {
        ///<summary>
        ///The updated Subscription Discount.
        ///</summary>
        public SubscriptionManualDiscount? discountUpdated { get; set; }
        ///<summary>
        ///The Subscription Contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftLineAdd` mutation.
    ///</summary>
    public class SubscriptionDraftLineAddPayload : GraphQLObject<SubscriptionDraftLineAddPayload>
    {
        ///<summary>
        ///The Subscription Contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The added Subscription Line.
        ///</summary>
        public SubscriptionLine? lineAdded { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftLineRemove` mutation.
    ///</summary>
    public class SubscriptionDraftLineRemovePayload : GraphQLObject<SubscriptionDraftLineRemovePayload>
    {
        ///<summary>
        ///The list of updated subscription discounts impacted by the removed line.
        ///</summary>
        public IEnumerable<SubscriptionManualDiscount>? discountsUpdated { get; set; }
        ///<summary>
        ///The Subscription Contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The removed Subscription Line.
        ///</summary>
        public SubscriptionLine? lineRemoved { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftLineUpdate` mutation.
    ///</summary>
    public class SubscriptionDraftLineUpdatePayload : GraphQLObject<SubscriptionDraftLineUpdatePayload>
    {
        ///<summary>
        ///The Subscription Contract draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The updated Subscription Line.
        ///</summary>
        public SubscriptionLine? lineUpdated { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `subscriptionDraftUpdate` mutation.
    ///</summary>
    public class SubscriptionDraftUpdatePayload : GraphQLObject<SubscriptionDraftUpdatePayload>
    {
        ///<summary>
        ///The Subscription Draft object.
        ///</summary>
        public SubscriptionDraft? draft { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<SubscriptionDraftUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a Subscription Draft error.
    ///</summary>
    public class SubscriptionDraftUserError : GraphQLObject<SubscriptionDraftUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public SubscriptionDraftErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Represents a Subscription Line.
    ///</summary>
    public class SubscriptionLine : GraphQLObject<SubscriptionLine>
    {
        ///<summary>
        ///The price per unit for the subscription line in the contract's currency.
        ///</summary>
        public MoneyV2? currentPrice { get; set; }
        ///<summary>
        ///List of custom attributes associated to the line item.
        ///</summary>
        public IEnumerable<Attribute>? customAttributes { get; set; }
        ///<summary>
        ///Discount allocations.
        ///</summary>
        public IEnumerable<SubscriptionDiscountAllocation>? discountAllocations { get; set; }
        ///<summary>
        ///The unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Total line price including all discounts.
        ///</summary>
        public MoneyV2? lineDiscountedPrice { get; set; }
        ///<summary>
        ///Describe the price changes of the line over time.
        ///</summary>
        public SubscriptionPricingPolicy? pricingPolicy { get; set; }
        ///<summary>
        ///The product ID associated with the subscription line.
        ///</summary>
        public string? productId { get; set; }
        ///<summary>
        ///The quantity of the unit selected for the subscription line.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///Whether physical shipping is required for the variant.
        ///</summary>
        public bool? requiresShipping { get; set; }
        ///<summary>
        ///The selling plan ID associated to the line.
        ///
        ///Indicates which selling plan was used to create this
        ///contract line initially. The selling plan ID is also used to
        ///find the associated delivery profile.
        ///
        ///The subscription contract, subscription line, or selling plan might have
        ///changed. As a result, the selling plan's attributes might not
        ///match the information on the contract.
        ///</summary>
        public string? sellingPlanId { get; set; }
        ///<summary>
        ///The selling plan name associated to the line. This name describes
        ///the order line items created from this subscription line
        ///for both merchants and customers.
        ///
        ///The value can be different from the selling plan's name, because both
        ///the selling plan's name and the subscription line's selling_plan_name
        ///attribute can be updated independently.
        ///</summary>
        public string? sellingPlanName { get; set; }
        ///<summary>
        ///Variant SKU number of the item associated with the subscription line.
        ///</summary>
        public string? sku { get; set; }
        ///<summary>
        ///Whether the variant is taxable.
        ///</summary>
        public bool? taxable { get; set; }
        ///<summary>
        ///Product title of the item associated with the subscription line.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The product variant ID associated with the subscription line.
        ///</summary>
        public string? variantId { get; set; }
        ///<summary>
        ///The image associated with the line item's variant or product.
        ///</summary>
        public Image? variantImage { get; set; }
        ///<summary>
        ///Product variant title of the item associated with the subscription line.
        ///</summary>
        public string? variantTitle { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SubscriptionLines.
    ///</summary>
    public class SubscriptionLineConnection : GraphQLObject<SubscriptionLineConnection>, IConnectionWithNodesAndEdges<SubscriptionLineEdge, SubscriptionLine>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SubscriptionLineEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SubscriptionLineEdge.
        ///</summary>
        public IEnumerable<SubscriptionLine>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
    ///</summary>
    public class SubscriptionLineEdge : GraphQLObject<SubscriptionLineEdge>, IEdge<SubscriptionLine>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SubscriptionLineEdge.
        ///</summary>
        public SubscriptionLine? node { get; set; }
    }

    ///<summary>
    ///A local delivery option for a subscription contract.
    ///</summary>
    public class SubscriptionLocalDeliveryOption : GraphQLObject<SubscriptionLocalDeliveryOption>, ISubscriptionDeliveryOption
    {
        ///<summary>
        ///The code of the local delivery option.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The description of the local delivery option.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///Whether a phone number is required for the local delivery option.
        ///</summary>
        public bool? phoneRequired { get; set; }
        ///<summary>
        ///The presentment title of the local delivery option.
        ///</summary>
        public string? presentmentTitle { get; set; }
        ///<summary>
        ///The price of the local delivery option.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///The title of the local delivery option.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///Represents a Mailing Address on a Subscription.
    ///</summary>
    public class SubscriptionMailingAddress : GraphQLObject<SubscriptionMailingAddress>
    {
        ///<summary>
        ///The first line of the address. Typically the street address or PO Box number.
        ///</summary>
        public string? address1 { get; set; }
        ///<summary>
        ///The second line of the address. Typically the number of the apartment, suite, or unit.
        ///</summary>
        public string? address2 { get; set; }
        ///<summary>
        ///The name of the city, district, village, or town.
        ///</summary>
        public string? city { get; set; }
        ///<summary>
        ///The name of the customer's company or organization.
        ///</summary>
        public string? company { get; set; }
        ///<summary>
        ///The name of the country.
        ///</summary>
        public string? country { get; set; }
        ///<summary>
        ///The two-letter code for the country of the address.
        ///
        ///For example, US.
        ///</summary>
        public CountryCode? countryCode { get; set; }
        ///<summary>
        ///The first name of the customer.
        ///</summary>
        public string? firstName { get; set; }
        ///<summary>
        ///The last name of the customer.
        ///</summary>
        public string? lastName { get; set; }
        ///<summary>
        ///The full name of the customer, based on firstName and lastName.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
        ///</summary>
        public string? phone { get; set; }
        ///<summary>
        ///The region of the address, such as the province, state, or district.
        ///</summary>
        public string? province { get; set; }
        ///<summary>
        ///The two-letter code for the region.
        ///
        ///For example, ON.
        ///</summary>
        public string? provinceCode { get; set; }
        ///<summary>
        ///The zip or postal code of the address.
        ///</summary>
        public string? zip { get; set; }
    }

    ///<summary>
    ///Custom subscription discount.
    ///</summary>
    public class SubscriptionManualDiscount : GraphQLObject<SubscriptionManualDiscount>, ISubscriptionDiscount
    {
        ///<summary>
        ///Entitled line items used to apply the subscription discount on.
        ///</summary>
        public SubscriptionDiscountEntitledLines? entitledLines { get; set; }
        ///<summary>
        ///The unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The maximum number of times the subscription discount will be applied on orders.
        ///</summary>
        public int? recurringCycleLimit { get; set; }
        ///<summary>
        ///The reason that the discount on the subscription draft is rejected.
        ///</summary>
        public SubscriptionDiscountRejectionReason? rejectionReason { get; set; }
        ///<summary>
        ///Type of line the discount applies on.
        ///</summary>
        public DiscountTargetType? targetType { get; set; }
        ///<summary>
        ///The title associated with the subscription discount.
        ///</summary>
        public string? title { get; set; }
        ///<summary>
        ///The type of the subscription discount.
        ///</summary>
        public DiscountType? type { get; set; }
        ///<summary>
        ///The number of times the discount was applied.
        ///</summary>
        public int? usageCount { get; set; }
        ///<summary>
        ///The value of the subscription discount.
        ///</summary>
        public ISubscriptionDiscountValue? value { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
    ///</summary>
    public class SubscriptionManualDiscountConnection : GraphQLObject<SubscriptionManualDiscountConnection>, IConnectionWithNodesAndEdges<SubscriptionManualDiscountEdge, SubscriptionManualDiscount>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<SubscriptionManualDiscountEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in SubscriptionManualDiscountEdge.
        ///</summary>
        public IEnumerable<SubscriptionManualDiscount>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
    ///</summary>
    public class SubscriptionManualDiscountEdge : GraphQLObject<SubscriptionManualDiscountEdge>, IEdge<SubscriptionManualDiscount>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of SubscriptionManualDiscountEdge.
        ///</summary>
        public SubscriptionManualDiscount? node { get; set; }
    }

    ///<summary>
    ///A pickup option to deliver a subscription contract.
    ///</summary>
    public class SubscriptionPickupOption : GraphQLObject<SubscriptionPickupOption>, ISubscriptionDeliveryOption
    {
        ///<summary>
        ///The code of the pickup option.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The description of the pickup option.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///The pickup location.
        ///</summary>
        public Location? location { get; set; }
        ///<summary>
        ///Whether a phone number is required for the pickup option.
        ///</summary>
        public bool? phoneRequired { get; set; }
        ///<summary>
        ///The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".).
        ///</summary>
        public string? pickupTime { get; set; }
        ///<summary>
        ///The presentment title of the pickup option.
        ///</summary>
        public string? presentmentTitle { get; set; }
        ///<summary>
        ///The price of the pickup option.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///The title of the pickup option.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///Represents a Subscription Line Pricing Policy.
    ///</summary>
    public class SubscriptionPricingPolicy : GraphQLObject<SubscriptionPricingPolicy>
    {
        ///<summary>
        ///The base price per unit for the subscription line in the contract's currency.
        ///</summary>
        public MoneyV2? basePrice { get; set; }
        ///<summary>
        ///The adjustments per cycle for the subscription line.
        ///</summary>
        public IEnumerable<SubscriptionCyclePriceAdjustment>? cycleDiscounts { get; set; }
    }

    ///<summary>
    ///A shipping option to deliver a subscription contract.
    ///</summary>
    public class SubscriptionShippingOption : GraphQLObject<SubscriptionShippingOption>, ISubscriptionDeliveryOption
    {
        ///<summary>
        ///The carrier service that's providing this shipping option.
        ///This field isn't currently supported and returns null.
        ///</summary>
        [Obsolete("This field has never been implemented.")]
        public DeliveryCarrierService? carrierService { get; set; }
        ///<summary>
        ///The code of the shipping option.
        ///</summary>
        public string? code { get; set; }
        ///<summary>
        ///The description of the shipping option.
        ///</summary>
        public string? description { get; set; }
        ///<summary>
        ///If a phone number is required for the shipping option.
        ///</summary>
        public bool? phoneRequired { get; set; }
        ///<summary>
        ///The presentment title of the shipping option.
        ///</summary>
        public string? presentmentTitle { get; set; }
        ///<summary>
        ///The price of the shipping option.
        ///</summary>
        public MoneyV2? price { get; set; }
        ///<summary>
        ///The title of the shipping option.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///The result of the query to fetch shipping options for the subscription contract.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(SubscriptionShippingOptionResultFailure), typeDiscriminator: "SubscriptionShippingOptionResultFailure")]
    [JsonDerivedType(typeof(SubscriptionShippingOptionResultSuccess), typeDiscriminator: "SubscriptionShippingOptionResultSuccess")]
    public interface ISubscriptionShippingOptionResult : IGraphQLObject
    {
        public SubscriptionShippingOptionResultFailure? AsSubscriptionShippingOptionResultFailure() => this as SubscriptionShippingOptionResultFailure;
        public SubscriptionShippingOptionResultSuccess? AsSubscriptionShippingOptionResultSuccess() => this as SubscriptionShippingOptionResultSuccess;
    }

    ///<summary>
    ///Failure determining available shipping options for delivery of a subscription contract.
    ///</summary>
    public class SubscriptionShippingOptionResultFailure : GraphQLObject<SubscriptionShippingOptionResultFailure>, ISubscriptionShippingOptionResult
    {
        ///<summary>
        ///Failure reason.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///A shipping option for delivery of a subscription contract.
    ///</summary>
    public class SubscriptionShippingOptionResultSuccess : GraphQLObject<SubscriptionShippingOptionResultSuccess>, ISubscriptionShippingOptionResult
    {
        ///<summary>
        ///Available shipping options.
        ///</summary>
        public IEnumerable<SubscriptionShippingOption>? shippingOptions { get; set; }
    }

    ///<summary>
    ///A suggested transaction. Suggested transaction are usually used in the context of refunds
    ///and exchanges.
    ///</summary>
    public class SuggestedOrderTransaction : GraphQLObject<SuggestedOrderTransaction>
    {
        ///<summary>
        ///The masked account number associated with the payment method.
        ///</summary>
        public string? accountNumber { get; set; }

        ///<summary>
        ///The amount of the transaction.
        ///</summary>
        [Obsolete("Use `amountSet` instead.")]
        public decimal? amount { get; set; }
        ///<summary>
        ///The amount and currency of the suggested order transaction in shop and presentment currencies.
        ///</summary>
        public MoneyBag? amountSet { get; set; }
        ///<summary>
        ///The human-readable payment gateway name suggested to process the transaction.
        ///</summary>
        public string? formattedGateway { get; set; }
        ///<summary>
        ///The suggested payment gateway used to process the transaction.
        ///</summary>
        public string? gateway { get; set; }
        ///<summary>
        ///Specifies the kind of the suggested order transaction.
        ///</summary>
        public SuggestedOrderTransactionKind? kind { get; set; }

        ///<summary>
        ///Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
        ///</summary>
        [Obsolete("Use `maximumRefundableSet` instead.")]
        public decimal? maximumRefundable { get; set; }
        ///<summary>
        ///Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
        ///</summary>
        public MoneyBag? maximumRefundableSet { get; set; }
        ///<summary>
        ///The associated parent transaction, for example the authorization of a capture.
        ///</summary>
        public OrderTransaction? parentTransaction { get; set; }
        ///<summary>
        ///The associated payment details related to the transaction.
        ///</summary>
        public IPaymentDetails? paymentDetails { get; set; }
    }

    ///<summary>
    ///Specifies the kind of the suggested order transaction.
    ///</summary>
    public enum SuggestedOrderTransactionKind
    {
        ///<summary>
        ///A suggested refund transaction for an order.
        ///</summary>
        SUGGESTED_REFUND,
    }

    ///<summary>
    ///Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
    ///</summary>
    public class SuggestedRefund : GraphQLObject<SuggestedRefund>
    {
        ///<summary>
        ///The total monetary value to be refunded.
        ///</summary>
        [Obsolete("Use `amountSet` instead.")]
        public decimal? amount { get; set; }
        ///<summary>
        ///The total monetary value to be refunded in shop and presentment currencies.
        ///</summary>
        public MoneyBag? amountSet { get; set; }
        ///<summary>
        ///The sum of all the discounted prices of the line items being refunded.
        ///</summary>
        public MoneyBag? discountedSubtotalSet { get; set; }

        ///<summary>
        ///The total monetary value available to refund.
        ///</summary>
        [Obsolete("Use `maximumRefundableSet` instead.")]
        public decimal? maximumRefundable { get; set; }
        ///<summary>
        ///The total monetary value available to refund in shop and presentment currencies.
        ///</summary>
        public MoneyBag? maximumRefundableSet { get; set; }
        ///<summary>
        ///A list of duties to be refunded from the order.
        ///</summary>
        public IEnumerable<RefundDuty>? refundDuties { get; set; }
        ///<summary>
        ///A list of line items to be refunded, along with restock instructions.
        ///</summary>
        public IEnumerable<RefundLineItem>? refundLineItems { get; set; }
        ///<summary>
        ///The shipping costs to be refunded from the order.
        ///</summary>
        public ShippingRefund? shipping { get; set; }

        ///<summary>
        ///The sum of all the prices of the line items being refunded.
        ///</summary>
        [Obsolete("Use `subtotalSet` instead.")]
        public decimal? subtotal { get; set; }
        ///<summary>
        ///The sum of all the prices of the line items being refunded in shop and presentment currencies.
        ///</summary>
        public MoneyBag? subtotalSet { get; set; }
        ///<summary>
        ///A list of suggested order transactions.
        ///</summary>
        public IEnumerable<SuggestedOrderTransaction>? suggestedTransactions { get; set; }
        ///<summary>
        ///The total cart discount amount that was applied to all line items in this refund.
        ///</summary>
        public MoneyBag? totalCartDiscountAmountSet { get; set; }
        ///<summary>
        ///The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
        ///</summary>
        public MoneyBag? totalDutiesSet { get; set; }
        ///<summary>
        ///The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
        ///</summary>
        public MoneyBag? totalTaxSet { get; set; }

        ///<summary>
        ///The sum of the taxes being refunded from the order. The value must be positive.
        ///</summary>
        [Obsolete("Use `totalTaxSet` instead.")]
        public decimal? totalTaxes { get; set; }
    }

    ///<summary>
    ///Represents a return refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund for the return.
    ///</summary>
    public class SuggestedReturnRefund : GraphQLObject<SuggestedReturnRefund>
    {
        ///<summary>
        ///The total monetary value to be refunded in shop and presentment currencies.
        ///</summary>
        public MoneyBag? amount { get; set; }
        ///<summary>
        ///The sum of all the discounted prices of the line items being refunded.
        ///</summary>
        public MoneyBag? discountedSubtotal { get; set; }
        ///<summary>
        ///The total monetary value available to refund in shop and presentment currencies.
        ///</summary>
        public MoneyBag? maximumRefundable { get; set; }
        ///<summary>
        ///A list of duties to be refunded from the order.
        ///</summary>
        public IEnumerable<RefundDuty>? refundDuties { get; set; }
        ///<summary>
        ///The shipping costs to be refunded from the order.
        ///</summary>
        public ShippingRefund? shipping { get; set; }
        ///<summary>
        ///The sum of all the prices of the line items being refunded in shop and presentment currencies.
        ///</summary>
        public MoneyBag? subtotal { get; set; }
        ///<summary>
        ///A list of suggested order transactions.
        ///</summary>
        public IEnumerable<SuggestedOrderTransaction>? suggestedTransactions { get; set; }
        ///<summary>
        ///The total cart discount amount that was applied to all line items in this refund.
        ///</summary>
        public MoneyBag? totalCartDiscountAmount { get; set; }
        ///<summary>
        ///The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
        ///</summary>
        public MoneyBag? totalDuties { get; set; }
        ///<summary>
        ///The sum of the taxes being refunded in shop and presentment currencies. The value must be positive.
        ///</summary>
        public MoneyBag? totalTax { get; set; }
    }

    ///<summary>
    ///The result in a tabular format with schema information and formatted and unformatted row data.
    ///</summary>
    public class TableData : GraphQLObject<TableData>
    {
        ///<summary>
        ///The data table columns.
        ///</summary>
        public IEnumerable<TableDataColumn>? columns { get; set; }
        ///<summary>
        ///The formatted data values.
        ///</summary>
        public IEnumerable<IEnumerable<string>>? rowData { get; set; }
        ///<summary>
        ///The unformatted data values.
        ///</summary>
        public string? unformattedData { get; set; }
    }

    ///<summary>
    ///A nested array representation of the data. An index in an array represents a row number.
    ///</summary>
    public class TableDataColumn : GraphQLObject<TableDataColumn>
    {
        ///<summary>
        ///For comparison columns, indicates the column to compare to.
        ///</summary>
        public string? comparedTo { get; set; }
        ///<summary>
        ///The data type of the column value.
        ///</summary>
        public string? dataType { get; set; }
        ///<summary>
        ///The display name of the column in the data model.
        ///</summary>
        public string? displayName { get; set; }
        ///<summary>
        ///The name of the column in the data model.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///The default table response structure for a ShopifyQL query.
    ///</summary>
    public class TableResponse : GraphQLObject<TableResponse>, IShopifyqlResponse
    {
        ///<summary>
        ///A list of parse errors, if parsing fails.
        ///</summary>
        public IEnumerable<ParseError>? parseErrors { get; set; }
        ///<summary>
        ///The result in a tabular format with schema and row data.
        ///</summary>
        public TableData? tableData { get; set; }
    }

    ///<summary>
    ///Return type for `tagsAdd` mutation.
    ///</summary>
    public class TagsAddPayload : GraphQLObject<TagsAddPayload>
    {
        ///<summary>
        ///The object that was updated.
        ///</summary>
        public INode? node { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `tagsRemove` mutation.
    ///</summary>
    public class TagsRemovePayload : GraphQLObject<TagsRemovePayload>
    {
        ///<summary>
        ///The object that was updated.
        ///</summary>
        public INode? node { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Tax app configuration of a merchant.
    ///</summary>
    public class TaxAppConfiguration : GraphQLObject<TaxAppConfiguration>
    {
        ///<summary>
        ///State of the tax app configuration.
        ///</summary>
        public TaxPartnerState? state { get; set; }
    }

    ///<summary>
    ///Return type for `taxAppConfigure` mutation.
    ///</summary>
    public class TaxAppConfigurePayload : GraphQLObject<TaxAppConfigurePayload>
    {
        ///<summary>
        ///The updated tax app configuration.
        ///</summary>
        public TaxAppConfiguration? taxAppConfiguration { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<TaxAppConfigureUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `TaxAppConfigure`.
    ///</summary>
    public class TaxAppConfigureUserError : GraphQLObject<TaxAppConfigureUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public TaxAppConfigureUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `TaxAppConfigureUserError`.
    ///</summary>
    public enum TaxAppConfigureUserErrorCode
    {
        ///<summary>
        ///Unable to find the tax partner record.
        ///</summary>
        TAX_PARTNER_NOT_FOUND,
        ///<summary>
        ///Unable to update tax partner state.
        ///</summary>
        TAX_PARTNER_STATE_UPDATE_FAILED,
        ///<summary>
        ///Unable to update already active tax partner.
        ///</summary>
        TAX_PARTNER_ALREADY_ACTIVE,
    }

    ///<summary>
    ///Available customer tax exemptions.
    ///</summary>
    public enum TaxExemption
    {
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
        ///</summary>
        CA_STATUS_CARD_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
        ///</summary>
        CA_BC_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
        ///</summary>
        CA_MB_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
        ///</summary>
        CA_SK_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
        ///</summary>
        CA_DIPLOMAT_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
        ///</summary>
        CA_BC_COMMERCIAL_FISHERY_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
        ///</summary>
        CA_MB_COMMERCIAL_FISHERY_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
        ///</summary>
        CA_NS_COMMERCIAL_FISHERY_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
        ///</summary>
        CA_PE_COMMERCIAL_FISHERY_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
        ///</summary>
        CA_SK_COMMERCIAL_FISHERY_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
        ///</summary>
        CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
        ///</summary>
        CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
        ///</summary>
        CA_BC_SUB_CONTRACTOR_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
        ///</summary>
        CA_SK_SUB_CONTRACTOR_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
        ///</summary>
        CA_BC_CONTRACTOR_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
        ///</summary>
        CA_SK_CONTRACTOR_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
        ///</summary>
        CA_ON_PURCHASE_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
        ///</summary>
        CA_MB_FARMER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
        ///</summary>
        CA_NS_FARMER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
        ///</summary>
        CA_SK_FARMER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country.
        ///</summary>
        EU_REVERSE_CHARGE_EXEMPTION_RULE,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama.
        ///</summary>
        US_AL_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska.
        ///</summary>
        US_AK_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona.
        ///</summary>
        US_AZ_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas.
        ///</summary>
        US_AR_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California.
        ///</summary>
        US_CA_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado.
        ///</summary>
        US_CO_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut.
        ///</summary>
        US_CT_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware.
        ///</summary>
        US_DE_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida.
        ///</summary>
        US_FL_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia.
        ///</summary>
        US_GA_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii.
        ///</summary>
        US_HI_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho.
        ///</summary>
        US_ID_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois.
        ///</summary>
        US_IL_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana.
        ///</summary>
        US_IN_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa.
        ///</summary>
        US_IA_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas.
        ///</summary>
        US_KS_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky.
        ///</summary>
        US_KY_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana.
        ///</summary>
        US_LA_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine.
        ///</summary>
        US_ME_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland.
        ///</summary>
        US_MD_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts.
        ///</summary>
        US_MA_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan.
        ///</summary>
        US_MI_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota.
        ///</summary>
        US_MN_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi.
        ///</summary>
        US_MS_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri.
        ///</summary>
        US_MO_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana.
        ///</summary>
        US_MT_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska.
        ///</summary>
        US_NE_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada.
        ///</summary>
        US_NV_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire.
        ///</summary>
        US_NH_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey.
        ///</summary>
        US_NJ_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico.
        ///</summary>
        US_NM_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York.
        ///</summary>
        US_NY_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina.
        ///</summary>
        US_NC_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota.
        ///</summary>
        US_ND_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio.
        ///</summary>
        US_OH_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma.
        ///</summary>
        US_OK_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon.
        ///</summary>
        US_OR_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania.
        ///</summary>
        US_PA_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island.
        ///</summary>
        US_RI_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina.
        ///</summary>
        US_SC_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota.
        ///</summary>
        US_SD_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee.
        ///</summary>
        US_TN_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas.
        ///</summary>
        US_TX_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah.
        ///</summary>
        US_UT_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont.
        ///</summary>
        US_VT_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia.
        ///</summary>
        US_VA_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington.
        ///</summary>
        US_WA_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia.
        ///</summary>
        US_WV_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin.
        ///</summary>
        US_WI_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming.
        ///</summary>
        US_WY_RESELLER_EXEMPTION,
        ///<summary>
        ///This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC.
        ///</summary>
        US_DC_RESELLER_EXEMPTION,
    }

    ///<summary>
    ///Represents a single tax applied to the associated line item.
    ///</summary>
    public class TaxLine : GraphQLObject<TaxLine>
    {
        ///<summary>
        ///Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.
        ///</summary>
        public bool? channelLiable { get; set; }

        ///<summary>
        ///The amount of tax, in shop currency, after discounts and before returns.
        ///</summary>
        [Obsolete("Use `priceSet` instead.")]
        public decimal? price { get; set; }
        ///<summary>
        ///The amount of tax, in shop and presentment currencies, after discounts and before returns.
        ///</summary>
        public MoneyBag? priceSet { get; set; }
        ///<summary>
        ///The proportion of the line item price that the tax represents as a decimal.
        ///</summary>
        public float? rate { get; set; }
        ///<summary>
        ///The proportion of the line item price that the tax represents as a percentage.
        ///</summary>
        public float? ratePercentage { get; set; }
        ///<summary>
        ///The name of the tax.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///State of the tax app configuration.
    ///</summary>
    public enum TaxPartnerState
    {
        ///<summary>
        ///App is not configured.
        ///</summary>
        PENDING,
        ///<summary>
        ///App is configured, but not used for tax calculations.
        ///</summary>
        READY,
        ///<summary>
        ///App is configured and to be used for tax calculations.
        ///</summary>
        ACTIVE,
    }

    ///<summary>
    ///A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
    ///represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
    ///for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
    ///</summary>
    public class TenderTransaction : GraphQLObject<TenderTransaction>, INode
    {
        ///<summary>
        ///The amount and currency of the tender transaction.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Information about the payment method used for the transaction.
        ///</summary>
        public string? paymentMethod { get; set; }
        ///<summary>
        ///Date and time when the transaction was processed.
        ///</summary>
        public DateTime? processedAt { get; set; }
        ///<summary>
        ///The remote gateway reference associated with the tender transaction.
        ///</summary>
        public string? remoteReference { get; set; }
        ///<summary>
        ///Whether the transaction is a test transaction.
        ///</summary>
        public bool? test { get; set; }
        ///<summary>
        ///Information about the payment instrument used for the transaction.
        ///</summary>
        public ITenderTransactionDetails? transactionDetails { get; set; }
        ///<summary>
        ///The staff member who performed the transaction.
        ///</summary>
        public StaffMember? user { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple TenderTransactions.
    ///</summary>
    public class TenderTransactionConnection : GraphQLObject<TenderTransactionConnection>, IConnectionWithNodesAndEdges<TenderTransactionEdge, TenderTransaction>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<TenderTransactionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in TenderTransactionEdge.
        ///</summary>
        public IEnumerable<TenderTransaction>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Information about the credit card used for this transaction.
    ///</summary>
    public class TenderTransactionCreditCardDetails : GraphQLObject<TenderTransactionCreditCardDetails>, ITenderTransactionDetails
    {
        ///<summary>
        ///The name of the company that issued the customer's credit card. Example: `Visa`.
        ///</summary>
        public string? creditCardCompany { get; set; }
        ///<summary>
        ///The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
        ///</summary>
        public string? creditCardNumber { get; set; }
    }

    ///<summary>
    ///Information about the payment instrument used for this transaction.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(TenderTransactionCreditCardDetails), typeDiscriminator: "TenderTransactionCreditCardDetails")]
    public interface ITenderTransactionDetails : IGraphQLObject
    {
        public TenderTransactionCreditCardDetails? AsTenderTransactionCreditCardDetails() => this as TenderTransactionCreditCardDetails;
        ///<summary>
        ///The name of the company that issued the customer's credit card. Example: `Visa`.
        ///</summary>
        public string? creditCardCompany { get; set; }
        ///<summary>
        ///The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
        ///</summary>
        public string? creditCardNumber { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one TenderTransaction and a cursor during pagination.
    ///</summary>
    public class TenderTransactionEdge : GraphQLObject<TenderTransactionEdge>, IEdge<TenderTransaction>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of TenderTransactionEdge.
        ///</summary>
        public TenderTransaction? node { get; set; }
    }

    ///<summary>
    ///A sale associated with a tip.
    ///</summary>
    public class TipSale : GraphQLObject<TipSale>, ISale
    {
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; set; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The line item for the associated sale.
        ///</summary>
        public LineItem? lineItem { get; set; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; set; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; set; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; set; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; set; }
    }

    ///<summary>
    ///Transaction fee related to an order transaction.
    ///</summary>
    public class TransactionFee : GraphQLObject<TransactionFee>, INode
    {
        ///<summary>
        ///Amount of the fee.
        ///</summary>
        public MoneyV2? amount { get; set; }
        ///<summary>
        ///Flat rate charge for a transaction.
        ///</summary>
        public MoneyV2? flatFee { get; set; }
        ///<summary>
        ///Name of the credit card flat fee.
        ///</summary>
        public string? flatFeeName { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Percentage charge.
        ///</summary>
        public decimal? rate { get; set; }
        ///<summary>
        ///Name of the credit card rate.
        ///</summary>
        public string? rateName { get; set; }
        ///<summary>
        ///Tax amount charged on the fee.
        ///</summary>
        public MoneyV2? taxAmount { get; set; }
        ///<summary>
        ///Name of the type of fee.
        ///</summary>
        public string? type { get; set; }
    }

    ///<summary>
    ///Translatable content of a resource's field.
    ///</summary>
    public class TranslatableContent : GraphQLObject<TranslatableContent>
    {
        ///<summary>
        ///Hash digest representation of the content value.
        ///</summary>
        public string? digest { get; set; }
        ///<summary>
        ///The resource field that's being translated.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///Locale of the content.
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///Type of the translatable content.
        ///</summary>
        public LocalizableContentType? type { get; set; }
        ///<summary>
        ///Content value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///A resource that has translatable fields.
    ///</summary>
    public class TranslatableResource : GraphQLObject<TranslatableResource>
    {
        ///<summary>
        ///GID of the resource.
        ///</summary>
        public string? resourceId { get; set; }
        ///<summary>
        ///Translatable content.
        ///</summary>
        public IEnumerable<TranslatableContent>? translatableContent { get; set; }
        ///<summary>
        ///Translatable content translations.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple TranslatableResources.
    ///</summary>
    public class TranslatableResourceConnection : GraphQLObject<TranslatableResourceConnection>, IConnectionWithNodesAndEdges<TranslatableResourceEdge, TranslatableResource>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<TranslatableResourceEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in TranslatableResourceEdge.
        ///</summary>
        public IEnumerable<TranslatableResource>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one TranslatableResource and a cursor during pagination.
    ///</summary>
    public class TranslatableResourceEdge : GraphQLObject<TranslatableResourceEdge>, IEdge<TranslatableResource>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of TranslatableResourceEdge.
        ///</summary>
        public TranslatableResource? node { get; set; }
    }

    ///<summary>
    ///Specifies the type of resources that are translatable.
    ///</summary>
    public enum TranslatableResourceType
    {
        ///<summary>
        ///A product collection. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
        ///</summary>
        COLLECTION,
        ///<summary>
        ///The delivery method definition. For example, "Standard", or "Expedited". Translatable fields: `name`.
        ///</summary>
        DELIVERY_METHOD_DEFINITION,
        ///<summary>
        ///An email template. Translatable fields: `title`, `body_html`.
        ///</summary>
        EMAIL_TEMPLATE,
        ///<summary>
        ///A filter. Translatable fields: `label`.
        ///</summary>
        FILTER,
        ///<summary>
        ///A link to direct users. Translatable fields: `title`.
        ///</summary>
        LINK,
        ///<summary>
        ///A Metafield. Translatable fields: `value`.
        ///</summary>
        METAFIELD,
        ///<summary>
        ///A Metaobject. Translatable fields are determined by the Metaobject type.
        ///</summary>
        METAOBJECT,
        ///<summary>
        ///An online store article. Translatable fields: `title`, `body_html`, `summary_html`, `handle`, `meta_title`, `meta_description`.
        ///</summary>
        ONLINE_STORE_ARTICLE,
        ///<summary>
        ///An online store blog. Translatable fields: `title`, `handle`, `meta_title`, `meta_description`.
        ///</summary>
        ONLINE_STORE_BLOG,
        ///<summary>
        ///A category of links. Translatable fields: `title`.
        ///</summary>
        ONLINE_STORE_MENU,
        ///<summary>
        ///An online store page. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
        ///</summary>
        ONLINE_STORE_PAGE,
        ///<summary>
        ///An online store theme. Translatable fields: `dynamic keys based on theme data`.
        ///</summary>
        ONLINE_STORE_THEME,
        ///<summary>
        ///A packing slip template. Translatable fields: `body`.
        ///</summary>
        PACKING_SLIP_TEMPLATE,
        ///<summary>
        ///A payment gateway. Translatable fields: `name`.
        ///</summary>
        PAYMENT_GATEWAY,
        ///<summary>
        ///An online store product. Translatable fields: `title`, `body_html`, `handle`, `product_type`, `meta_title`, `meta_description`.
        ///</summary>
        PRODUCT,
        ///<summary>
        ///An online store custom product property name. For example, "Size", "Color", or "Material".
        ///        Translatable fields: `name`.
        ///</summary>
        PRODUCT_OPTION,
        ///<summary>
        ///An online store product variant. Translatable fields: `option1`, `option2`, `option3`.
        ///</summary>
        PRODUCT_VARIANT,
        ///<summary>
        ///A selling plan. Translatable fields:`name`, `option1`, `option2`, `option3`, `description`.
        ///</summary>
        SELLING_PLAN,
        ///<summary>
        ///A selling plan group. Translatable fields: `name`, `option1`, `option2`, `option3`.
        ///</summary>
        SELLING_PLAN_GROUP,
        ///<summary>
        ///A shop. Translatable fields: `meta_title`, `meta_description`.
        ///</summary>
        SHOP,
        ///<summary>
        ///A shop policy. Translatable fields: `body`.
        ///</summary>
        SHOP_POLICY,
    }

    ///<summary>
    ///Translation of a field of a resource.
    ///</summary>
    public class Translation : GraphQLObject<Translation>
    {
        ///<summary>
        ///On the resource that this translation belongs to, the reference to the value being translated.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///ISO code of the translation locale.
        ///</summary>
        public string? locale { get; set; }
        ///<summary>
        ///The market that the translation is specific to. Null value means the translation is available in all markets.
        ///</summary>
        public Market? market { get; set; }
        ///<summary>
        ///Whether the original content has changed since this translation was updated.
        ///</summary>
        public bool? outdated { get; set; }
        ///<summary>
        ///The date and time when the translation was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
        ///<summary>
        ///Translation value.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `TranslationUserError`.
    ///</summary>
    public enum TranslationErrorCode
    {
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value is invalid.
        ///</summary>
        INVALID,
        ///<summary>
        ///Resource does not exist.
        ///</summary>
        RESOURCE_NOT_FOUND,
        ///<summary>
        ///Resource is not translatable.
        ///</summary>
        RESOURCE_NOT_TRANSLATABLE,
        ///<summary>
        ///Too many translation keys for the resource.
        ///</summary>
        TOO_MANY_KEYS_FOR_RESOURCE,
        ///<summary>
        ///Translation key is invalid.
        ///</summary>
        INVALID_KEY_FOR_MODEL,
        ///<summary>
        ///Translation value is invalid.
        ///</summary>
        FAILS_RESOURCE_VALIDATION,
        ///<summary>
        ///Translatable content is invalid.
        ///</summary>
        INVALID_TRANSLATABLE_CONTENT,
        ///<summary>
        ///Market localizable content is invalid.
        ///</summary>
        INVALID_MARKET_LOCALIZABLE_CONTENT,
        ///<summary>
        ///Locale is invalid for the shop.
        ///</summary>
        INVALID_LOCALE_FOR_SHOP,
        ///<summary>
        ///Locale language code is invalid.
        ///</summary>
        INVALID_CODE,
        ///<summary>
        ///Locale code format is invalid.
        ///</summary>
        INVALID_FORMAT,
        ///<summary>
        ///The shop isn't allowed to operate on market custom content.
        ///</summary>
        MARKET_CUSTOM_CONTENT_NOT_ALLOWED,
        ///<summary>
        ///The market corresponding to the `marketId` argument doesn't exist.
        ///</summary>
        MARKET_DOES_NOT_EXIST,
        ///<summary>
        ///The market override locale creation failed.
        ///</summary>
        MARKET_LOCALE_CREATION_FAILED,
        ///<summary>
        ///The specified resource can't be customized for a market.
        ///</summary>
        RESOURCE_NOT_MARKET_CUSTOMIZABLE,
        ///<summary>
        ///The locale is missing on the market corresponding to the `marketId` argument.
        ///</summary>
        INVALID_LOCALE_FOR_MARKET,
        ///<summary>
        ///The handle is already taken for this resource.
        ///</summary>
        INVALID_VALUE_FOR_HANDLE_TRANSLATION,
    }

    ///<summary>
    ///Represents an error that happens during the execution of a translation mutation.
    ///</summary>
    public class TranslationUserError : GraphQLObject<TranslationUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public TranslationErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Return type for `translationsRegister` mutation.
    ///</summary>
    public class TranslationsRegisterPayload : GraphQLObject<TranslationsRegisterPayload>
    {
        ///<summary>
        ///The translations that were created or updated.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<TranslationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `translationsRemove` mutation.
    ///</summary>
    public class TranslationsRemovePayload : GraphQLObject<TranslationsRemovePayload>
    {
        ///<summary>
        ///The translations that were deleted.
        ///</summary>
        public IEnumerable<Translation>? translations { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<TranslationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents a typed custom attribute.
    ///</summary>
    public class TypedAttribute : GraphQLObject<TypedAttribute>
    {
        ///<summary>
        ///Key or name of the attribute.
        ///</summary>
        public string? key { get; set; }
        ///<summary>
        ///Value of the attribute.
        ///</summary>
        public string? value { get; set; }
    }

    ///<summary>
    ///Represents a set of UTM parameters.
    ///</summary>
    public class UTMParameters : GraphQLObject<UTMParameters>
    {
        ///<summary>
        ///The name of a marketing campaign.
        ///</summary>
        public string? campaign { get; set; }
        ///<summary>
        ///Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
        ///</summary>
        public string? content { get; set; }
        ///<summary>
        ///The medium of a marketing campaign, such as a banner or email newsletter.
        ///</summary>
        public string? medium { get; set; }
        ///<summary>
        ///The source of traffic to the merchant's store, such as Google or an email newsletter.
        ///</summary>
        public string? source { get; set; }
        ///<summary>
        ///Paid search terms used by a marketing campaign.
        ///</summary>
        public string? term { get; set; }
    }

    ///<summary>
    ///Systems of weights and measures.
    ///</summary>
    public enum UnitSystem
    {
        ///<summary>
        ///Imperial system of weights and measures.
        ///</summary>
        IMPERIAL_SYSTEM,
        ///<summary>
        ///Metric system of weights and measures.
        ///</summary>
        METRIC_SYSTEM,
    }

    ///<summary>
    ///This is represents new sale types that have been added in future API versions. You may update to a more recent API version to receive additional details about this sale.
    ///</summary>
    public class UnknownSale : GraphQLObject<UnknownSale>, ISale
    {
        ///<summary>
        ///The type of order action that the sale represents.
        ///</summary>
        public SaleActionType? actionType { get; set; }
        ///<summary>
        ///The unique ID for the sale.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The line type assocated with the sale.
        ///</summary>
        public SaleLineType? lineType { get; set; }
        ///<summary>
        ///The number of units either ordered or intended to be returned.
        ///</summary>
        public int? quantity { get; set; }
        ///<summary>
        ///All individual taxes associated with the sale.
        ///</summary>
        public IEnumerable<SaleTax>? taxes { get; set; }
        ///<summary>
        ///The total sale amount after taxes and discounts.
        ///</summary>
        public MoneyBag? totalAmount { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale after taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountAfterTaxes { get; set; }
        ///<summary>
        ///The total discounts allocated to the sale before taxes.
        ///</summary>
        public MoneyBag? totalDiscountAmountBeforeTaxes { get; set; }
        ///<summary>
        ///The total amount of taxes for the sale.
        ///</summary>
        public MoneyBag? totalTaxAmount { get; set; }
    }

    ///<summary>
    ///The URL redirect for the online store.
    ///</summary>
    public class UrlRedirect : GraphQLObject<UrlRedirect>, INode
    {
        ///<summary>
        ///The ID of the URL redirect.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
        ///</summary>
        public string? path { get; set; }
        ///<summary>
        ///The target location where the user will be redirected to.
        ///</summary>
        public string? target { get; set; }
    }

    ///<summary>
    ///Return type for `urlRedirectBulkDeleteAll` mutation.
    ///</summary>
    public class UrlRedirectBulkDeleteAllPayload : GraphQLObject<UrlRedirectBulkDeleteAllPayload>
    {
        ///<summary>
        ///The asynchronous job removing the redirects.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `urlRedirectBulkDeleteByIds` mutation.
    ///</summary>
    public class UrlRedirectBulkDeleteByIdsPayload : GraphQLObject<UrlRedirectBulkDeleteByIdsPayload>
    {
        ///<summary>
        ///The asynchronous job removing the redirects.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UrlRedirectBulkDeleteByIdsUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`.
    ///</summary>
    public class UrlRedirectBulkDeleteByIdsUserError : GraphQLObject<UrlRedirectBulkDeleteByIdsUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public UrlRedirectBulkDeleteByIdsUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `UrlRedirectBulkDeleteByIdsUserError`.
    ///</summary>
    public enum UrlRedirectBulkDeleteByIdsUserErrorCode
    {
        ///<summary>
        ///You must pass one or more [`URLRedirect`](
        ///            https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
        ///          ) object IDs.
        ///</summary>
        IDS_EMPTY,
    }

    ///<summary>
    ///Return type for `urlRedirectBulkDeleteBySavedSearch` mutation.
    ///</summary>
    public class UrlRedirectBulkDeleteBySavedSearchPayload : GraphQLObject<UrlRedirectBulkDeleteBySavedSearchPayload>
    {
        ///<summary>
        ///The asynchronous job removing the redirects.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UrlRedirectBulkDeleteBySavedSearchUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`.
    ///</summary>
    public class UrlRedirectBulkDeleteBySavedSearchUserError : GraphQLObject<UrlRedirectBulkDeleteBySavedSearchUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public UrlRedirectBulkDeleteBySavedSearchUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `UrlRedirectBulkDeleteBySavedSearchUserError`.
    ///</summary>
    public enum UrlRedirectBulkDeleteBySavedSearchUserErrorCode
    {
        ///<summary>
        ///Saved search not found.
        ///</summary>
        SAVED_SEARCH_NOT_FOUND,
        ///<summary>
        ///The saved search's query cannot match all entries or be empty.
        ///</summary>
        INVALID_SAVED_SEARCH_QUERY,
    }

    ///<summary>
    ///Return type for `urlRedirectBulkDeleteBySearch` mutation.
    ///</summary>
    public class UrlRedirectBulkDeleteBySearchPayload : GraphQLObject<UrlRedirectBulkDeleteBySearchPayload>
    {
        ///<summary>
        ///The asynchronous job removing the redirects.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UrlRedirectBulkDeleteBySearchUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`.
    ///</summary>
    public class UrlRedirectBulkDeleteBySearchUserError : GraphQLObject<UrlRedirectBulkDeleteBySearchUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public UrlRedirectBulkDeleteBySearchUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `UrlRedirectBulkDeleteBySearchUserError`.
    ///</summary>
    public enum UrlRedirectBulkDeleteBySearchUserErrorCode
    {
        ///<summary>
        ///Invalid search string.
        ///</summary>
        INVALID_SEARCH_ARGUMENT,
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple UrlRedirects.
    ///</summary>
    public class UrlRedirectConnection : GraphQLObject<UrlRedirectConnection>, IConnectionWithNodesAndEdges<UrlRedirectEdge, UrlRedirect>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<UrlRedirectEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in UrlRedirectEdge.
        ///</summary>
        public IEnumerable<UrlRedirect>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `urlRedirectCreate` mutation.
    ///</summary>
    public class UrlRedirectCreatePayload : GraphQLObject<UrlRedirectCreatePayload>
    {
        ///<summary>
        ///The created redirect.
        ///</summary>
        public UrlRedirect? urlRedirect { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UrlRedirectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `urlRedirectDelete` mutation.
    ///</summary>
    public class UrlRedirectDeletePayload : GraphQLObject<UrlRedirectDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted redirect.
        ///</summary>
        public string? deletedUrlRedirectId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UrlRedirectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one UrlRedirect and a cursor during pagination.
    ///</summary>
    public class UrlRedirectEdge : GraphQLObject<UrlRedirectEdge>, IEdge<UrlRedirect>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of UrlRedirectEdge.
        ///</summary>
        public UrlRedirect? node { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `UrlRedirectUserError`.
    ///</summary>
    public enum UrlRedirectErrorCode
    {
        ///<summary>
        ///Redirect does not exist.
        ///</summary>
        DOES_NOT_EXIST,
        ///<summary>
        ///Redirect could not be created.
        ///</summary>
        CREATE_FAILED,
        ///<summary>
        ///Redirect could not be updated.
        ///</summary>
        UPDATE_FAILED,
        ///<summary>
        ///Redirect could not be deleted.
        ///</summary>
        DELETE_FAILED,
    }

    ///<summary>
    ///A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
    ///into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.
    ///
    ///For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
    ///</summary>
    public class UrlRedirectImport : GraphQLObject<UrlRedirectImport>, INode
    {
        ///<summary>
        ///The number of rows in the file.
        ///</summary>
        public int? count { get; set; }
        ///<summary>
        ///The number of redirects created from the import.
        ///</summary>
        public int? createdCount { get; set; }
        ///<summary>
        ///The number of redirects that failed to be imported.
        ///</summary>
        public int? failedCount { get; set; }
        ///<summary>
        ///Whether the import is finished.
        ///</summary>
        public bool? finished { get; set; }
        ///<summary>
        ///The date and time when the import finished.
        ///</summary>
        public DateTime? finishedAt { get; set; }
        ///<summary>
        ///The ID of the `UrlRedirectImport` object.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///A list of up to three previews of the URL redirects to be imported.
        ///</summary>
        public IEnumerable<UrlRedirectImportPreview>? previewRedirects { get; set; }
        ///<summary>
        ///The number of redirects updated during the import.
        ///</summary>
        public int? updatedCount { get; set; }
    }

    ///<summary>
    ///Return type for `urlRedirectImportCreate` mutation.
    ///</summary>
    public class UrlRedirectImportCreatePayload : GraphQLObject<UrlRedirectImportCreatePayload>
    {
        ///<summary>
        ///The created `URLRedirectImport` object.
        ///</summary>
        public UrlRedirectImport? urlRedirectImport { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UrlRedirectImportUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `UrlRedirectImportUserError`.
    ///</summary>
    public enum UrlRedirectImportErrorCode
    {
        ///<summary>
        ///CSV file does not exist at given URL.
        ///</summary>
        [Obsolete("This error code is never returned")]
        FILE_DOES_NOT_EXIST,
        ///<summary>
        ///URL redirect import not found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///The import has already completed.
        ///</summary>
        ALREADY_IMPORTED,
        ///<summary>
        ///The import is already in progress.
        ///</summary>
        IN_PROGRESS,
    }

    ///<summary>
    ///A preview of a URL redirect import row.
    ///</summary>
    public class UrlRedirectImportPreview : GraphQLObject<UrlRedirectImportPreview>
    {
        ///<summary>
        ///The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
        ///</summary>
        public string? path { get; set; }
        ///<summary>
        ///The target location where the user will be redirected to.
        ///</summary>
        public string? target { get; set; }
    }

    ///<summary>
    ///Return type for `urlRedirectImportSubmit` mutation.
    ///</summary>
    public class UrlRedirectImportSubmitPayload : GraphQLObject<UrlRedirectImportSubmitPayload>
    {
        ///<summary>
        ///The asynchronous job importing the redirects.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UrlRedirectImportUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents an error that happens during execution of a redirect import mutation.
    ///</summary>
    public class UrlRedirectImportUserError : GraphQLObject<UrlRedirectImportUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public UrlRedirectImportErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the UrlRedirect query.
    ///</summary>
    public enum UrlRedirectSortKeys
    {
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
        ///<summary>
        ///Sort by the `path` value.
        ///</summary>
        PATH,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
    }

    ///<summary>
    ///Return type for `urlRedirectUpdate` mutation.
    ///</summary>
    public class UrlRedirectUpdatePayload : GraphQLObject<UrlRedirectUpdatePayload>
    {
        ///<summary>
        ///Returns the updated URL redirect.
        ///</summary>
        public UrlRedirect? urlRedirect { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UrlRedirectUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Represents an error that happens during execution of a redirect mutation.
    ///</summary>
    public class UrlRedirectUserError : GraphQLObject<UrlRedirectUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public UrlRedirectErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Represents an error in the input of a mutation.
    ///</summary>
    public class UserError : GraphQLObject<UserError>, IDisplayableError
    {
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///A checkout server side validation installed on the shop.
    ///</summary>
    public class Validation : GraphQLObject<Validation>, IHasMetafieldDefinitions, IHasMetafields, INode
    {
        ///<summary>
        ///Whether the validation should block on failures other than expected violations.
        ///</summary>
        public bool? blockOnFailure { get; set; }
        ///<summary>
        ///Whether the validation is enabled on the merchant checkout.
        ///</summary>
        public bool? enabled { get; set; }
        ///<summary>
        ///The error history on the most recent version of the validation function.
        ///</summary>
        public FunctionsErrorHistory? errorHistory { get; set; }
        ///<summary>
        ///Global ID for the validation.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///Returns a metafield by namespace and key that belongs to the resource.
        ///</summary>
        public Metafield? metafield { get; set; }
        ///<summary>
        ///List of metafield definitions.
        ///</summary>
        public MetafieldDefinitionConnection? metafieldDefinitions { get; set; }
        ///<summary>
        ///List of metafields that belong to the resource.
        ///</summary>
        public MetafieldConnection? metafields { get; set; }

        ///<summary>
        ///Returns a private metafield by namespace and key that belongs to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafield? privateMetafield { get; set; }

        ///<summary>
        ///List of private metafields that belong to the resource.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public PrivateMetafieldConnection? privateMetafields { get; set; }
        ///<summary>
        ///The Shopify Function implementing the validation.
        ///</summary>
        public ShopifyFunction? shopifyFunction { get; set; }
        ///<summary>
        ///The merchant-facing validation name.
        ///</summary>
        public string? title { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple Validations.
    ///</summary>
    public class ValidationConnection : GraphQLObject<ValidationConnection>, IConnectionWithNodesAndEdges<ValidationEdge, Validation>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<ValidationEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in ValidationEdge.
        ///</summary>
        public IEnumerable<Validation>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `validationCreate` mutation.
    ///</summary>
    public class ValidationCreatePayload : GraphQLObject<ValidationCreatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ValidationUserError>? userErrors { get; set; }
        ///<summary>
        ///The created validation.
        ///</summary>
        public Validation? validation { get; set; }
    }

    ///<summary>
    ///Return type for `validationDelete` mutation.
    ///</summary>
    public class ValidationDeletePayload : GraphQLObject<ValidationDeletePayload>
    {
        ///<summary>
        ///Returns the deleted validation ID.
        ///</summary>
        public string? deletedId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ValidationUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one Validation and a cursor during pagination.
    ///</summary>
    public class ValidationEdge : GraphQLObject<ValidationEdge>, IEdge<Validation>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of ValidationEdge.
        ///</summary>
        public Validation? node { get; set; }
    }

    ///<summary>
    ///The set of valid sort keys for the Validation query.
    ///</summary>
    public enum ValidationSortKeys
    {
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///Return type for `validationUpdate` mutation.
    ///</summary>
    public class ValidationUpdatePayload : GraphQLObject<ValidationUpdatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ValidationUserError>? userErrors { get; set; }
        ///<summary>
        ///The updated validation.
        ///</summary>
        public Validation? validation { get; set; }
    }

    ///<summary>
    ///An error that occurs during the execution of a validation mutation.
    ///</summary>
    public class ValidationUserError : GraphQLObject<ValidationUserError>, IDisplayableError
    {
        ///<summary>
        ///The error code.
        ///</summary>
        public ValidationUserErrorCode? code { get; set; }
        ///<summary>
        ///The path to the input field that caused the error.
        ///</summary>
        public IEnumerable<string>? field { get; set; }
        ///<summary>
        ///The error message.
        ///</summary>
        public string? message { get; set; }
    }

    ///<summary>
    ///Possible error codes that can be returned by `ValidationUserError`.
    ///</summary>
    public enum ValidationUserErrorCode
    {
        ///<summary>
        ///Validation not found.
        ///</summary>
        NOT_FOUND,
        ///<summary>
        ///Function not found.
        ///</summary>
        FUNCTION_NOT_FOUND,
        ///<summary>
        ///Shop must be on a Shopify Plus plan to activate functions from a custom app.
        ///</summary>
        CUSTOM_APP_FUNCTION_NOT_ELIGIBLE,
        ///<summary>
        ///Function does not implement the required interface for this cart & checkout validation.
        ///</summary>
        FUNCTION_DOES_NOT_IMPLEMENT,
        ///<summary>
        ///Only unlisted apps can be used for this cart & checkout validation.
        ///</summary>
        PUBLIC_APP_NOT_ALLOWED,
        ///<summary>
        ///Function is pending deletion.
        ///</summary>
        FUNCTION_PENDING_DELETION,
        ///<summary>
        ///The type is invalid.
        ///</summary>
        INVALID_TYPE,
        ///<summary>
        ///The value is invalid for the metafield type or for the definition options.
        ///</summary>
        INVALID_VALUE,
        ///<summary>
        ///ApiPermission metafields can only be created or updated by the app owner.
        ///</summary>
        APP_NOT_AUTHORIZED,
        ///<summary>
        ///Unstructured reserved namespace.
        ///</summary>
        UNSTRUCTURED_RESERVED_NAMESPACE,
        ///<summary>
        ///Owner type can't be used in this mutation.
        ///</summary>
        DISALLOWED_OWNER_TYPE,
        ///<summary>
        ///The input value isn't included in the list.
        ///</summary>
        INCLUSION,
        ///<summary>
        ///The input value is already taken.
        ///</summary>
        TAKEN,
        ///<summary>
        ///The input value needs to be blank.
        ///</summary>
        PRESENT,
        ///<summary>
        ///The input value is blank.
        ///</summary>
        BLANK,
        ///<summary>
        ///The input value is too long.
        ///</summary>
        TOO_LONG,
        ///<summary>
        ///The input value is too short.
        ///</summary>
        TOO_SHORT,
    }

    ///<summary>
    ///Represents a credit card payment instrument.
    ///</summary>
    public class VaultCreditCard : GraphQLObject<VaultCreditCard>, IPaymentInstrument
    {
        ///<summary>
        ///The billing address of the card.
        ///</summary>
        public CustomerCreditCardBillingAddress? billingAddress { get; set; }
        ///<summary>
        ///The brand for the card.
        ///</summary>
        public string? brand { get; set; }
        ///<summary>
        ///Whether the card has been expired.
        ///</summary>
        public bool? expired { get; set; }
        ///<summary>
        ///The expiry month of the card.
        ///</summary>
        public int? expiryMonth { get; set; }
        ///<summary>
        ///The expiry year of the card.
        ///</summary>
        public int? expiryYear { get; set; }
        ///<summary>
        ///The last four digits for the card.
        ///</summary>
        public string? lastDigits { get; set; }
        ///<summary>
        ///The name of the card holder.
        ///</summary>
        public string? name { get; set; }
    }

    ///<summary>
    ///Represents a paypal billing agreement payment instrument.
    ///</summary>
    public class VaultPaypalBillingAgreement : GraphQLObject<VaultPaypalBillingAgreement>, IPaymentInstrument
    {
        ///<summary>
        ///Whether the paypal billing agreement is inactive.
        ///</summary>
        public bool? inactive { get; set; }
        ///<summary>
        ///The paypal account name.
        ///</summary>
        public string? name { get; set; }
        ///<summary>
        ///The paypal account email address.
        ///</summary>
        public string? paypalAccountEmail { get; set; }
    }

    ///<summary>
    ///Representation of 3d vectors and points. It can represent
    ///either the coordinates of a point in space, a direction, or
    ///size. Presented as an object with three floating-point values.
    ///</summary>
    public class Vector3 : GraphQLObject<Vector3>
    {
        ///<summary>
        ///The x coordinate of Vector3.
        ///</summary>
        public float? x { get; set; }
        ///<summary>
        ///The y coordinate of Vector3.
        ///</summary>
        public float? y { get; set; }
        ///<summary>
        ///The z coordinate of Vector3.
        ///</summary>
        public float? z { get; set; }
    }

    ///<summary>
    ///Represents a Shopify hosted video.
    ///</summary>
    public class Video : GraphQLObject<Video>, IFile, IMedia, INode, IMetafieldReference
    {
        ///<summary>
        ///A word or phrase to share the nature or contents of a media.
        ///</summary>
        public string? alt { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The video's duration in milliseconds. This value is `null` unless the video's status field is
        ///[READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
        ///</summary>
        public int? duration { get; set; }
        ///<summary>
        ///Any errors that have occurred on the file.
        ///</summary>
        public IEnumerable<FileError>? fileErrors { get; set; }
        ///<summary>
        ///The status of the file.
        ///</summary>
        public FileStatus? fileStatus { get; set; }
        ///<summary>
        ///The video's filename.
        ///</summary>
        public string? filename { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The media content type.
        ///</summary>
        public MediaContentType? mediaContentType { get; set; }
        ///<summary>
        ///Any errors which have occurred on the media.
        ///</summary>
        public IEnumerable<MediaError>? mediaErrors { get; set; }
        ///<summary>
        ///The warnings attached to the media.
        ///</summary>
        public IEnumerable<MediaWarning>? mediaWarnings { get; set; }
        ///<summary>
        ///The video's original source. This value is `null` unless the video's status field is
        ///[READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
        ///</summary>
        public VideoSource? originalSource { get; set; }
        ///<summary>
        ///The preview image for the media.
        ///</summary>
        public MediaPreviewImage? preview { get; set; }
        ///<summary>
        ///The video's sources. This value is empty unless the video's status field is
        ///[READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
        ///</summary>
        public IEnumerable<VideoSource>? sources { get; set; }
        ///<summary>
        ///Current status of the media.
        ///</summary>
        public MediaStatus? status { get; set; }
        ///<summary>
        ///The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///Represents a source for a Shopify hosted video.
    ///
    ///Types of sources include the original video, lower resolution versions of the original video,
    ///and an m3u8 playlist file.
    ///
    ///Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
    ///of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
    ///</summary>
    public class VideoSource : GraphQLObject<VideoSource>
    {
        ///<summary>
        ///The video source's file size in bytes.
        ///</summary>
        public int? fileSize { get; set; }
        ///<summary>
        ///The video source's file format extension.
        ///</summary>
        public string? format { get; set; }
        ///<summary>
        ///The video source's height.
        ///</summary>
        public int? height { get; set; }
        ///<summary>
        ///The video source's MIME type.
        ///</summary>
        public string? mimeType { get; set; }
        ///<summary>
        ///The video source's URL.
        ///</summary>
        public string? url { get; set; }
        ///<summary>
        ///The video source's width.
        ///</summary>
        public int? width { get; set; }
    }

    ///<summary>
    ///A type of visualization.
    ///</summary>
    public enum VisualizationType
    {
        ///<summary>
        ///Line Chart.
        ///</summary>
        LINE,
        ///<summary>
        ///Bar Chart.
        ///</summary>
        BAR,
    }

    ///<summary>
    ///A web pixel settings.
    ///</summary>
    public class WebPixel : GraphQLObject<WebPixel>, INode
    {
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///The settings JSON object for the web pixel.
        ///</summary>
        public string? settings { get; set; }
    }

    ///<summary>
    ///Return type for `webPixelCreate` mutation.
    ///</summary>
    public class WebPixelCreatePayload : GraphQLObject<WebPixelCreatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ErrorsWebPixelUserError>? userErrors { get; set; }
        ///<summary>
        ///The created web pixel settings.
        ///</summary>
        public WebPixel? webPixel { get; set; }
    }

    ///<summary>
    ///Return type for `webPixelDelete` mutation.
    ///</summary>
    public class WebPixelDeletePayload : GraphQLObject<WebPixelDeletePayload>
    {
        ///<summary>
        ///The ID of the web pixel settings that was deleted.
        ///</summary>
        public string? deletedWebPixelId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ErrorsWebPixelUserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `webPixelUpdate` mutation.
    ///</summary>
    public class WebPixelUpdatePayload : GraphQLObject<WebPixelUpdatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<ErrorsWebPixelUserError>? userErrors { get; set; }
        ///<summary>
        ///The updated web pixel settings.
        ///</summary>
        public WebPixel? webPixel { get; set; }
    }

    ///<summary>
    ///An Amazon EventBridge partner event source to which webhook subscriptions publish events.
    ///</summary>
    public class WebhookEventBridgeEndpoint : GraphQLObject<WebhookEventBridgeEndpoint>, IWebhookSubscriptionEndpoint
    {
        ///<summary>
        ///The ARN of this EventBridge partner event source.
        ///</summary>
        public string? arn { get; set; }
    }

    ///<summary>
    ///An HTTPS endpoint to which webhook subscriptions send POST requests.
    ///</summary>
    public class WebhookHttpEndpoint : GraphQLObject<WebhookHttpEndpoint>, IWebhookSubscriptionEndpoint
    {
        ///<summary>
        ///The URL to which the webhooks events are sent.
        ///</summary>
        public string? callbackUrl { get; set; }
    }

    ///<summary>
    ///A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
    ///</summary>
    public class WebhookPubSubEndpoint : GraphQLObject<WebhookPubSubEndpoint>, IWebhookSubscriptionEndpoint
    {
        ///<summary>
        ///The Google Cloud Pub/Sub project ID.
        ///</summary>
        public string? pubSubProject { get; set; }
        ///<summary>
        ///The Google Cloud Pub/Sub topic ID.
        ///</summary>
        public string? pubSubTopic { get; set; }
    }

    ///<summary>
    ///A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
    ///It describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.
    ///When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
    ///Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
    ///</summary>
    public class WebhookSubscription : GraphQLObject<WebhookSubscription>, ILegacyInteroperability, INode
    {
        ///<summary>
        ///The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription.
        ///</summary>
        public ApiVersion? apiVersion { get; set; }

        ///<summary>
        ///The destination URI to which the webhook subscription will send a message when an event occurs.
        ///</summary>
        [Obsolete("Use `endpoint` instead.")]
        public string? callbackUrl { get; set; }
        ///<summary>
        ///The date and time when the webhook subscription was created.
        ///</summary>
        public DateTime? createdAt { get; set; }
        ///<summary>
        ///The endpoint to which the webhook subscription will send events.
        ///</summary>
        public IWebhookSubscriptionEndpoint? endpoint { get; set; }
        ///<summary>
        ///The format in which the webhook subscription should send the data.
        ///</summary>
        public WebhookSubscriptionFormat? format { get; set; }
        ///<summary>
        ///A globally-unique ID.
        ///</summary>
        public string? id { get; set; }
        ///<summary>
        ///An optional array of top-level resource fields that should be serialized and sent in the webhook message. If null, then all fields will be sent.
        ///</summary>
        public IEnumerable<string>? includeFields { get; set; }
        ///<summary>
        ///The ID of the corresponding resource in the REST Admin API.
        ///</summary>
        public ulong? legacyResourceId { get; set; }
        ///<summary>
        ///The list of namespaces for any metafields that should be included in the webhook subscription.
        ///</summary>
        public IEnumerable<string>? metafieldNamespaces { get; set; }

        ///<summary>
        ///The list of namespaces for private metafields that should be included in the webhook subscription.
        ///</summary>
        [Obsolete("Metafields created using a reserved namespace are private by default. See our guide for\n[migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).")]
        public IEnumerable<string>? privateMetafieldNamespaces { get; set; }
        ///<summary>
        ///An additional constraint to refine the type of event that triggers the webhook. Only supported on certain topics. See our guide to [sub-topics](https://shopify.dev/docs/apps/webhooks/sub-topics) for more.
        ///</summary>
        public string? subTopic { get; set; }
        ///<summary>
        ///The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains.
        ///</summary>
        public WebhookSubscriptionTopic? topic { get; set; }
        ///<summary>
        ///The date and time when the webhook subscription was updated.
        ///</summary>
        public DateTime? updatedAt { get; set; }
    }

    ///<summary>
    ///An auto-generated type for paginating through multiple WebhookSubscriptions.
    ///</summary>
    public class WebhookSubscriptionConnection : GraphQLObject<WebhookSubscriptionConnection>, IConnectionWithNodesAndEdges<WebhookSubscriptionEdge, WebhookSubscription>
    {
        ///<summary>
        ///A list of edges.
        ///</summary>
        public IEnumerable<WebhookSubscriptionEdge>? edges { get; set; }
        ///<summary>
        ///A list of the nodes contained in WebhookSubscriptionEdge.
        ///</summary>
        public IEnumerable<WebhookSubscription>? nodes { get; set; }
        ///<summary>
        ///Information to aid in pagination.
        ///</summary>
        public PageInfo? pageInfo { get; set; }
    }

    ///<summary>
    ///Return type for `webhookSubscriptionCreate` mutation.
    ///</summary>
    public class WebhookSubscriptionCreatePayload : GraphQLObject<WebhookSubscriptionCreatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
        ///<summary>
        ///The webhook subscription that was created.
        ///</summary>
        public WebhookSubscription? webhookSubscription { get; set; }
    }

    ///<summary>
    ///Return type for `webhookSubscriptionDelete` mutation.
    ///</summary>
    public class WebhookSubscriptionDeletePayload : GraphQLObject<WebhookSubscriptionDeletePayload>
    {
        ///<summary>
        ///The ID of the deleted webhook subscription.
        ///</summary>
        public string? deletedWebhookSubscriptionId { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///An auto-generated type which holds one WebhookSubscription and a cursor during pagination.
    ///</summary>
    public class WebhookSubscriptionEdge : GraphQLObject<WebhookSubscriptionEdge>, IEdge<WebhookSubscription>
    {
        ///<summary>
        ///A cursor for use in pagination.
        ///</summary>
        public string? cursor { get; set; }
        ///<summary>
        ///The item at the end of WebhookSubscriptionEdge.
        ///</summary>
        public WebhookSubscription? node { get; set; }
    }

    ///<summary>
    ///An endpoint to which webhook subscriptions send webhooks events.
    ///</summary>
    [JsonPolymorphic(TypeDiscriminatorPropertyName = "__typename")]
    [JsonDerivedType(typeof(WebhookEventBridgeEndpoint), typeDiscriminator: "WebhookEventBridgeEndpoint")]
    [JsonDerivedType(typeof(WebhookHttpEndpoint), typeDiscriminator: "WebhookHttpEndpoint")]
    [JsonDerivedType(typeof(WebhookPubSubEndpoint), typeDiscriminator: "WebhookPubSubEndpoint")]
    public interface IWebhookSubscriptionEndpoint : IGraphQLObject
    {
        public WebhookEventBridgeEndpoint? AsWebhookEventBridgeEndpoint() => this as WebhookEventBridgeEndpoint;
        public WebhookHttpEndpoint? AsWebhookHttpEndpoint() => this as WebhookHttpEndpoint;
        public WebhookPubSubEndpoint? AsWebhookPubSubEndpoint() => this as WebhookPubSubEndpoint;
    }

    ///<summary>
    ///The supported formats for webhook subscriptions.
    ///</summary>
    public enum WebhookSubscriptionFormat
    {
        JSON,
        XML,
    }

    ///<summary>
    ///The set of valid sort keys for the WebhookSubscription query.
    ///</summary>
    public enum WebhookSubscriptionSortKeys
    {
        ///<summary>
        ///Sort by the `created_at` value.
        ///</summary>
        CREATED_AT,
        ///<summary>
        ///Sort by the `id` value.
        ///</summary>
        ID,
        ///<summary>
        ///Sort by relevance to the search terms when the `query` parameter is specified on the connection.
        ///Don't use this sort key when no search query is specified.
        ///</summary>
        RELEVANCE,
    }

    ///<summary>
    ///The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
    ///notifications about particular events in a shop.
    ///
    ///You don't create webhook subscriptions to
    ///[mandatory webhooks](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks).
    ///Instead, you configure mandatory webhooks in your Partner Dashboard as part of your app setup.
    ///</summary>
    public enum WebhookSubscriptionTopic
    {
        ///<summary>
        ///The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app.
        ///</summary>
        APP_UNINSTALLED,
        ///<summary>
        ///The webhook topic for `carts/create` events. Occurs when a cart is created in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are created in a custom storefront. Requires the `read_orders` scope.
        ///</summary>
        CARTS_CREATE,
        ///<summary>
        ///The webhook topic for `carts/update` events. Occurs when a cart is updated in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are updated in a custom storefront. Requires the `read_orders` scope.
        ///</summary>
        CARTS_UPDATE,
        ///<summary>
        ///The webhook topic for `channels/delete` events. Occurs whenever a channel is deleted. Requires the `read_publications` scope.
        ///</summary>
        CHANNELS_DELETE,
        ///<summary>
        ///The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope.
        ///</summary>
        CHECKOUTS_CREATE,
        ///<summary>
        ///The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope.
        ///</summary>
        CHECKOUTS_DELETE,
        ///<summary>
        ///The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope.
        ///</summary>
        CHECKOUTS_UPDATE,
        ///<summary>
        ///The webhook topic for `customer_payment_methods/create` events. Occurs whenever a customer payment method is created. Requires the `read_customer_payment_methods` scope.
        ///</summary>
        CUSTOMER_PAYMENT_METHODS_CREATE,
        ///<summary>
        ///The webhook topic for `customer_payment_methods/update` events. Occurs whenever a customer payment method is updated. Requires the `read_customer_payment_methods` scope.
        ///</summary>
        CUSTOMER_PAYMENT_METHODS_UPDATE,
        ///<summary>
        ///The webhook topic for `customer_payment_methods/revoke` events. Occurs whenever a customer payment method is revoked. Requires the `read_customer_payment_methods` scope.
        ///</summary>
        CUSTOMER_PAYMENT_METHODS_REVOKE,
        ///<summary>
        ///The webhook topic for `collection_listings/add` events. Occurs whenever a collection listing is added. Requires the `read_product_listings` scope.
        ///</summary>
        COLLECTION_LISTINGS_ADD,
        ///<summary>
        ///The webhook topic for `collection_listings/remove` events. Occurs whenever a collection listing is removed. Requires the `read_product_listings` scope.
        ///</summary>
        COLLECTION_LISTINGS_REMOVE,
        ///<summary>
        ///The webhook topic for `collection_listings/update` events. Occurs whenever a collection listing is updated. Requires the `read_product_listings` scope.
        ///</summary>
        COLLECTION_LISTINGS_UPDATE,
        ///<summary>
        ///The webhook topic for `collection_publications/create` events. Occurs whenever a collection publication listing is created. Requires the `read_publications` scope.
        ///</summary>
        COLLECTION_PUBLICATIONS_CREATE,
        ///<summary>
        ///The webhook topic for `collection_publications/delete` events. Occurs whenever a collection publication listing is deleted. Requires the `read_publications` scope.
        ///</summary>
        COLLECTION_PUBLICATIONS_DELETE,
        ///<summary>
        ///The webhook topic for `collection_publications/update` events. Occurs whenever a collection publication listing is updated. Requires the `read_publications` scope.
        ///</summary>
        COLLECTION_PUBLICATIONS_UPDATE,
        ///<summary>
        ///The webhook topic for `collections/create` events. Occurs whenever a collection is created. Requires the `read_products` scope.
        ///</summary>
        COLLECTIONS_CREATE,
        ///<summary>
        ///The webhook topic for `collections/delete` events. Occurs whenever a collection is deleted. Requires the `read_products` scope.
        ///</summary>
        COLLECTIONS_DELETE,
        ///<summary>
        ///The webhook topic for `collections/update` events. Occurs whenever a collection is updated, including whenever products are added or removed from the collection. Occurs once if multiple products are added or removed from a collection at the same time. Requires the `read_products` scope.
        ///</summary>
        COLLECTIONS_UPDATE,
        ///<summary>
        ///The webhook topic for `customer_groups/create` events. Occurs whenever a customer saved search is created. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMER_GROUPS_CREATE,
        ///<summary>
        ///The webhook topic for `customer_groups/delete` events. Occurs whenever a customer saved search is deleted. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMER_GROUPS_DELETE,
        ///<summary>
        ///The webhook topic for `customer_groups/update` events. Occurs whenever a customer saved search is updated. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMER_GROUPS_UPDATE,
        ///<summary>
        ///The webhook topic for `customers/create` events. Occurs whenever a customer is created. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMERS_CREATE,
        ///<summary>
        ///The webhook topic for `customers/delete` events. Occurs whenever a customer is deleted. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMERS_DELETE,
        ///<summary>
        ///The webhook topic for `customers/disable` events. Occurs whenever a customer account is disabled. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMERS_DISABLE,
        ///<summary>
        ///The webhook topic for `customers/enable` events. Occurs whenever a customer account is enabled. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMERS_ENABLE,
        ///<summary>
        ///The webhook topic for `customers/update` events. Occurs whenever a customer is updated. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMERS_UPDATE,
        ///<summary>
        ///The webhook topic for `customers_marketing_consent/update` events. Occurs whenever a customer's SMS marketing consent is updated. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMERS_MARKETING_CONSENT_UPDATE,
        ///<summary>
        ///The webhook topic for `customer.tags_added` events. Triggers when tags are added to a customer. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMER_TAGS_ADDED,
        ///<summary>
        ///The webhook topic for `customer.tags_removed` events. Triggers when tags are removed from a customer. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMER_TAGS_REMOVED,
        ///<summary>
        ///The webhook topic for `customers_email_marketing_consent/update` events. Occurs whenever a customer's email marketing consent is updated. Requires the `read_customers` scope.
        ///</summary>
        CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE,
        ///<summary>
        ///The webhook topic for `disputes/create` events. Occurs whenever a dispute is created. Requires the `read_shopify_payments_disputes` scope.
        ///</summary>
        DISPUTES_CREATE,
        ///<summary>
        ///The webhook topic for `disputes/update` events. Occurs whenever a dispute is updated. Requires the `read_shopify_payments_disputes` scope.
        ///</summary>
        DISPUTES_UPDATE,
        ///<summary>
        ///The webhook topic for `draft_orders/create` events. Occurs whenever a draft order is created. Requires the `read_draft_orders` scope.
        ///</summary>
        DRAFT_ORDERS_CREATE,
        ///<summary>
        ///The webhook topic for `draft_orders/delete` events. Occurs whenever a draft order is deleted. Requires the `read_draft_orders` scope.
        ///</summary>
        DRAFT_ORDERS_DELETE,
        ///<summary>
        ///The webhook topic for `draft_orders/update` events. Occurs whenever a draft order is updated. Requires the `read_draft_orders` scope.
        ///</summary>
        DRAFT_ORDERS_UPDATE,
        ///<summary>
        ///The webhook topic for `fulfillment_events/create` events. Occurs whenever a fulfillment event is created. Requires the `read_fulfillments` scope.
        ///</summary>
        FULFILLMENT_EVENTS_CREATE,
        ///<summary>
        ///The webhook topic for `fulfillment_events/delete` events. Occurs whenever a fulfillment event is deleted. Requires the `read_fulfillments` scope.
        ///</summary>
        FULFILLMENT_EVENTS_DELETE,
        ///<summary>
        ///The webhook topic for `fulfillments/create` events. Occurs whenever a fulfillment is created. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.
        ///</summary>
        FULFILLMENTS_CREATE,
        ///<summary>
        ///The webhook topic for `fulfillments/update` events. Occurs whenever a fulfillment is updated. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.
        ///</summary>
        FULFILLMENTS_UPDATE,
        ///<summary>
        ///The webhook topic for `attributed_sessions/first` events. Occurs whenever an order with a "first" attributed session is attributed. Requires the `read_marketing_events` scope.
        ///</summary>
        ATTRIBUTED_SESSIONS_FIRST,
        ///<summary>
        ///The webhook topic for `attributed_sessions/last` events. Occurs whenever an order with a "last" attributed session is attributed. Requires the `read_marketing_events` scope.
        ///</summary>
        ATTRIBUTED_SESSIONS_LAST,
        ///<summary>
        ///The webhook topic for `order_transactions/create` events. Occurs when a order transaction is created or when it's status is updated. Only occurs for transactions with a status of success, failure or error. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
        ///</summary>
        ORDER_TRANSACTIONS_CREATE,
        ///<summary>
        ///The webhook topic for `orders/cancelled` events. Occurs whenever an order is cancelled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
        ///</summary>
        ORDERS_CANCELLED,
        ///<summary>
        ///The webhook topic for `orders/create` events. Occurs whenever an order is created. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
        ///</summary>
        ORDERS_CREATE,
        ///<summary>
        ///The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope.
        ///</summary>
        ORDERS_DELETE,
        ///<summary>
        ///The webhook topic for `orders/edited` events. Occurs whenever an order is edited. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
        ///</summary>
        ORDERS_EDITED,
        ///<summary>
        ///The webhook topic for `orders/fulfilled` events. Occurs whenever an order is fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
        ///</summary>
        ORDERS_FULFILLED,
        ///<summary>
        ///The webhook topic for `orders/paid` events. Occurs whenever an order is paid. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
        ///</summary>
        ORDERS_PAID,
        ///<summary>
        ///The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an order is partially fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
        ///</summary>
        ORDERS_PARTIALLY_FULFILLED,
        ///<summary>
        ///The webhook topic for `orders/updated` events. Occurs whenever an order is updated. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
        ///</summary>
        ORDERS_UPDATED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/moved` events. Occurs whenever the location which is assigned to fulfill one or more fulfillment order line items is changed.
        ///
        ///* `original_fulfillment_order` - The final state of the original fulfillment order.
        ///* `moved_fulfillment_order` - The fulfillment order which now contains the re-assigned line items.
        ///* `source_location` - The original location which was assigned to fulfill the line items (available as of the `2023-04` API version).
        ///* `destination_location_id` - The ID of the location which is now responsible for fulfilling the line items.
        ///
        ///**Note:** The [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
        ///of the `original_fulfillment_order` might be changed by the move operation.
        ///If you need to determine the originally assigned location, then you should refer to the `source_location`.
        ///
        ///[Learn more about moving line items](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fulfillmentOrderMove).
        /// Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_MOVED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/hold_released` events. Occurs whenever a fulfillment order hold is released. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_HOLD_RELEASED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/scheduled_fulfillment_order_ready` events. Occurs whenever a fulfillment order which was scheduled becomes due. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/order_routing_complete` events. Occurs when an order has finished being routed and it's fulfillment orders assigned to a fulfillment service's location. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_buyer_membership_orders.
        ///</summary>
        FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/cancelled` events. Occurs when a fulfillment order is cancelled. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_CANCELLED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/fulfillment_service_failed_to_complete` events. Occurs when a fulfillment service intends to close an in_progress fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/fulfillment_request_rejected` events. Occurs when a 3PL rejects a fulfillment request that was sent by a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/cancellation_request_submitted` events. Occurs when a merchant requests a fulfillment request to be cancelled after that request was approved by a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/cancellation_request_accepted` events. Occurs when a 3PL accepts a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/cancellation_request_rejected` events. Occurs when a 3PL rejects a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/fulfillment_request_submitted` events. Occurs when a merchant submits a fulfillment request to a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_buyer_membership_orders.
        ///</summary>
        FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/fulfillment_request_accepted` events. Occurs when a fulfillment service accepts a request to fulfill a fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/line_items_prepared_for_local_delivery` events. Occurs whenever a fulfillment order's line items are prepared for local delivery. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/placed_on_hold` events. Occurs when a fulfillment order is placed on hold. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_PLACED_ON_HOLD,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/merged` events. Occurs when multiple fulfillment orders are merged into a single fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_MERGED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/split` events. Occurs when a fulfillment order is split into multiple fulfillment orders. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_SPLIT,
        ///<summary>
        ///The webhook topic for `product_listings/add` events. Occurs whenever an active product is listed on a channel. Requires the `read_product_listings` scope.
        ///</summary>
        PRODUCT_LISTINGS_ADD,
        ///<summary>
        ///The webhook topic for `product_listings/remove` events. Occurs whenever a product listing is removed from the channel. Requires the `read_product_listings` scope.
        ///</summary>
        PRODUCT_LISTINGS_REMOVE,
        ///<summary>
        ///The webhook topic for `product_listings/update` events. Occurs whenever a product publication is updated. Requires the `read_product_listings` scope.
        ///</summary>
        PRODUCT_LISTINGS_UPDATE,
        ///<summary>
        ///The webhook topic for `scheduled_product_listings/add` events. Occurs whenever a product is scheduled to be published. Requires the `read_product_listings` scope.
        ///</summary>
        SCHEDULED_PRODUCT_LISTINGS_ADD,
        ///<summary>
        ///The webhook topic for `scheduled_product_listings/update` events. Occurs whenever a product's scheduled availability date changes. Requires the `read_product_listings` scope.
        ///</summary>
        SCHEDULED_PRODUCT_LISTINGS_UPDATE,
        ///<summary>
        ///The webhook topic for `scheduled_product_listings/remove` events. Occurs whenever a product is no longer scheduled to be published. Requires the `read_product_listings` scope.
        ///</summary>
        SCHEDULED_PRODUCT_LISTINGS_REMOVE,
        ///<summary>
        ///The webhook topic for `product_publications/create` events. Occurs whenever a product publication for an active product is created, or whenever an existing product publication is published. Requires the `read_publications` scope.
        ///</summary>
        PRODUCT_PUBLICATIONS_CREATE,
        ///<summary>
        ///The webhook topic for `product_publications/delete` events. Occurs whenever a product publication for an active product is removed, or whenever an existing product publication is unpublished. Requires the `read_publications` scope.
        ///</summary>
        PRODUCT_PUBLICATIONS_DELETE,
        ///<summary>
        ///The webhook topic for `product_publications/update` events. Occurs whenever a product publication is updated. Requires the `read_publications` scope.
        ///</summary>
        PRODUCT_PUBLICATIONS_UPDATE,
        ///<summary>
        ///The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope.
        ///</summary>
        PRODUCTS_CREATE,
        ///<summary>
        ///The webhook topic for `products/delete` events. Occurs whenever a product is deleted. Requires the `read_products` scope.
        ///</summary>
        PRODUCTS_DELETE,
        ///<summary>
        ///The webhook topic for `products/update` events. Occurs whenever a product is updated, or whenever a product is ordered, or whenever a variant is added, removed, or updated. Requires the `read_products` scope.
        ///</summary>
        PRODUCTS_UPDATE,
        ///<summary>
        ///The webhook topic for `refunds/create` events. Occurs whenever a new refund is created without errors on an order, independent from the movement of money. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
        ///</summary>
        REFUNDS_CREATE,
        ///<summary>
        ///The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope.
        ///</summary>
        SEGMENTS_CREATE,
        ///<summary>
        ///The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope.
        ///</summary>
        SEGMENTS_DELETE,
        ///<summary>
        ///The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope.
        ///</summary>
        SEGMENTS_UPDATE,
        ///<summary>
        ///The webhook topic for `shipping_addresses/create` events. Occurs whenever a shipping address is created. Requires the `read_shipping` scope.
        ///</summary>
        SHIPPING_ADDRESSES_CREATE,
        ///<summary>
        ///The webhook topic for `shipping_addresses/update` events. Occurs whenever a shipping address is updated. Requires the `read_shipping` scope.
        ///</summary>
        SHIPPING_ADDRESSES_UPDATE,
        ///<summary>
        ///The webhook topic for `shop/update` events. Occurs whenever a shop is updated.
        ///</summary>
        SHOP_UPDATE,
        ///<summary>
        ///The webhook topic for `tax_partners/update` events. Occurs whenever a tax partner is created or updated. Requires the `read_taxes` scope.
        ///</summary>
        TAX_PARTNERS_UPDATE,
        ///<summary>
        ///The webhook topic for `tax_services/create` events. Occurs whenever a tax service is created. Requires the `read_taxes` scope.
        ///</summary>
        TAX_SERVICES_CREATE,
        ///<summary>
        ///The webhook topic for `tax_services/update` events. Occurs whenver a tax service is updated. Requires the `read_taxes` scope.
        ///</summary>
        TAX_SERVICES_UPDATE,
        ///<summary>
        ///The webhook topic for `themes/create` events. Occurs whenever a theme is created. Does not occur when theme files are created. Requires the `read_themes` scope.
        ///</summary>
        THEMES_CREATE,
        ///<summary>
        ///The webhook topic for `themes/delete` events. Occurs whenever a theme is deleted. Does not occur when theme files are deleted. Requires the `read_themes` scope.
        ///</summary>
        THEMES_DELETE,
        ///<summary>
        ///The webhook topic for `themes/publish` events. Occurs whenever a theme with the main or mobile (deprecated) role is published. Requires the `read_themes` scope.
        ///</summary>
        THEMES_PUBLISH,
        ///<summary>
        ///The webhook topic for `themes/update` events. Occurs whenever a theme is updated. Does not occur when theme files are updated. Requires the `read_themes` scope.
        ///</summary>
        THEMES_UPDATE,
        ///<summary>
        ///The webhook topic for `variants/in_stock` events. Occurs whenever a variant becomes in stock. Requires the `read_products` scope.
        ///</summary>
        VARIANTS_IN_STOCK,
        ///<summary>
        ///The webhook topic for `variants/out_of_stock` events. Occurs whenever a variant becomes out of stock. Requires the `read_products` scope.
        ///</summary>
        VARIANTS_OUT_OF_STOCK,
        ///<summary>
        ///The webhook topic for `inventory_levels/connect` events. Occurs whenever an inventory level is connected. Requires the `read_inventory` scope.
        ///</summary>
        INVENTORY_LEVELS_CONNECT,
        ///<summary>
        ///The webhook topic for `inventory_levels/update` events. Occurs whenever an inventory level is updated. Requires the `read_inventory` scope.
        ///</summary>
        INVENTORY_LEVELS_UPDATE,
        ///<summary>
        ///The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an inventory level is disconnected. Requires the `read_inventory` scope.
        ///</summary>
        INVENTORY_LEVELS_DISCONNECT,
        ///<summary>
        ///The webhook topic for `inventory_items/create` events. Occurs whenever an inventory item is created. Requires the `read_inventory` scope.
        ///</summary>
        INVENTORY_ITEMS_CREATE,
        ///<summary>
        ///The webhook topic for `inventory_items/update` events. Occurs whenever an inventory item is updated. Requires the `read_inventory` scope.
        ///</summary>
        INVENTORY_ITEMS_UPDATE,
        ///<summary>
        ///The webhook topic for `inventory_items/delete` events. Occurs whenever an inventory item is deleted. Requires the `read_inventory` scope.
        ///</summary>
        INVENTORY_ITEMS_DELETE,
        ///<summary>
        ///The webhook topic for `locations/activate` events. Occurs whenever a deactivated location is re-activated. Requires the `read_locations` scope.
        ///</summary>
        LOCATIONS_ACTIVATE,
        ///<summary>
        ///The webhook topic for `locations/deactivate` events. Occurs whenever a location is deactivated. Requires the `read_locations` scope.
        ///</summary>
        LOCATIONS_DEACTIVATE,
        ///<summary>
        ///The webhook topic for `locations/create` events. Occurs whenever a location is created. Requires the `read_locations` scope.
        ///</summary>
        LOCATIONS_CREATE,
        ///<summary>
        ///The webhook topic for `locations/update` events. Occurs whenever a location is updated. Requires the `read_locations` scope.
        ///</summary>
        LOCATIONS_UPDATE,
        ///<summary>
        ///The webhook topic for `locations/delete` events. Occurs whenever a location is deleted. Requires the `read_locations` scope.
        ///</summary>
        LOCATIONS_DELETE,
        ///<summary>
        ///The webhook topic for `tender_transactions/create` events. Occurs when a tender transaction is created. Requires the `read_orders` scope.
        ///</summary>
        TENDER_TRANSACTIONS_CREATE,
        ///<summary>
        ///The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated.
        ///</summary>
        APP_PURCHASES_ONE_TIME_UPDATE,
        ///<summary>
        ///The webhook topic for `app_subscriptions/approaching_capped_amount` events. Occurs when the balance used on an app subscription crosses 90% of the capped amount.
        ///</summary>
        APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT,
        ///<summary>
        ///The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated.
        ///</summary>
        APP_SUBSCRIPTIONS_UPDATE,
        ///<summary>
        ///The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope.
        ///</summary>
        LOCALES_CREATE,
        ///<summary>
        ///The webhook topic for `locales/update` events. Occurs whenever a shop locale is updated, such as published or unpublished Requires the `read_locales` scope.
        ///</summary>
        LOCALES_UPDATE,
        ///<summary>
        ///The webhook topic for `domains/create` events. Occurs whenever a domain is created.
        ///</summary>
        DOMAINS_CREATE,
        ///<summary>
        ///The webhook topic for `domains/update` events. Occurs whenever a domain is updated.
        ///</summary>
        DOMAINS_UPDATE,
        ///<summary>
        ///The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed.
        ///</summary>
        DOMAINS_DESTROY,
        ///<summary>
        ///The webhook topic for `subscription_contracts/create` events. Occurs whenever a subscription contract is created. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_CONTRACTS_CREATE,
        ///<summary>
        ///The webhook topic for `subscription_contracts/update` events. Occurs whenever a subscription contract is updated. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_CONTRACTS_UPDATE,
        ///<summary>
        ///The webhook topic for `subscription_billing_cycle_edits/create` events. Occurs whenever a subscription contract billing cycle is edited. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE,
        ///<summary>
        ///The webhook topic for `subscription_billing_cycle_edits/update` events. Occurs whenever a subscription contract billing cycle edit is updated. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE,
        ///<summary>
        ///The webhook topic for `subscription_billing_cycle_edits/delete` events. Occurs whenever a subscription contract billing cycle edit is deleted. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE,
        ///<summary>
        ///The webhook topic for `profiles/create` events. Occurs whenever a delivery profile is created Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
        ///</summary>
        PROFILES_CREATE,
        ///<summary>
        ///The webhook topic for `profiles/update` events. Occurs whenever a delivery profile is updated Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
        ///</summary>
        PROFILES_UPDATE,
        ///<summary>
        ///The webhook topic for `profiles/delete` events. Occurs whenever a delivery profile is deleted Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
        ///</summary>
        PROFILES_DELETE,
        ///<summary>
        ///The webhook topic for `subscription_billing_attempts/success` events. Occurs whenever a subscription billing attempt succeeds. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS,
        ///<summary>
        ///The webhook topic for `subscription_billing_attempts/failure` events. Occurs whenever a subscription billing attempt fails. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE,
        ///<summary>
        ///The webhook topic for `subscription_billing_attempts/challenged` events. Occurs when the financial instutition challenges the subscripttion billing attempt charge as per 3D Secure. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED,
        ///<summary>
        ///The webhook topic for `returns/cancel` events. Occurs whenever a return is canceled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
        ///</summary>
        RETURNS_CANCEL,
        ///<summary>
        ///The webhook topic for `returns/close` events. Occurs whenever a return is closed. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
        ///</summary>
        RETURNS_CLOSE,
        ///<summary>
        ///The webhook topic for `returns/reopen` events. Occurs whenever a closed return is reopened. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
        ///</summary>
        RETURNS_REOPEN,
        ///<summary>
        ///The webhook topic for `returns/request` events. Occurs whenever a return is requested. This means `Return.status` is `REQUESTED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
        ///</summary>
        RETURNS_REQUEST,
        ///<summary>
        ///The webhook topic for `returns/approve` events. Occurs whenever a return is approved. This means `Return.status` is `OPEN`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
        ///</summary>
        RETURNS_APPROVE,
        ///<summary>
        ///The webhook topic for `returns/decline` events. Occurs whenever a return is declined. This means `Return.status` is `DECLINED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
        ///</summary>
        RETURNS_DECLINE,
        ///<summary>
        ///The webhook topic for `reverse_deliveries/attach_deliverable` events. Occurs whenever a deliverable is attached to a reverse delivery.
        ///This occurs when a reverse delivery is created or updated with delivery metadata.
        ///Metadata includes the delivery method, label, and tracking information associated with a reverse delivery.
        /// Requires at least one of the following scopes: read_returns, read_marketplace_returns.
        ///</summary>
        REVERSE_DELIVERIES_ATTACH_DELIVERABLE,
        ///<summary>
        ///The webhook topic for `reverse_fulfillment_orders/dispose` events. Occurs whenever a disposition is made on a reverse fulfillment order.
        ///This includes dispositions made on reverse deliveries that are associated with the reverse fulfillment order.
        /// Requires at least one of the following scopes: read_returns, read_marketplace_returns.
        ///</summary>
        REVERSE_FULFILLMENT_ORDERS_DISPOSE,
        ///<summary>
        ///The webhook topic for `payment_terms/create` events. Occurs whenever payment terms are created. Requires the `read_payment_terms` scope.
        ///</summary>
        PAYMENT_TERMS_CREATE,
        ///<summary>
        ///The webhook topic for `payment_terms/delete` events. Occurs whenever payment terms are deleted. Requires the `read_payment_terms` scope.
        ///</summary>
        PAYMENT_TERMS_DELETE,
        ///<summary>
        ///The webhook topic for `payment_terms/update` events. Occurs whenever payment terms are updated. Requires the `read_payment_terms` scope.
        ///</summary>
        PAYMENT_TERMS_UPDATE,
        ///<summary>
        ///The webhook topic for `payment_schedules/due` events. Occurs whenever payment schedules are due. Requires the `read_payment_terms` scope.
        ///</summary>
        PAYMENT_SCHEDULES_DUE,
        ///<summary>
        ///The webhook topic for `selling_plan_groups/create` events. Notifies when a SellingPlanGroup is created. Requires the `read_products` scope.
        ///</summary>
        SELLING_PLAN_GROUPS_CREATE,
        ///<summary>
        ///The webhook topic for `selling_plan_groups/update` events. Notifies when a SellingPlanGroup is updated. Requires the `read_products` scope.
        ///</summary>
        SELLING_PLAN_GROUPS_UPDATE,
        ///<summary>
        ///The webhook topic for `selling_plan_groups/delete` events. Notifies when a SellingPlanGroup is deleted. Requires the `read_products` scope.
        ///</summary>
        SELLING_PLAN_GROUPS_DELETE,
        ///<summary>
        ///The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes.
        ///</summary>
        BULK_OPERATIONS_FINISH,
        ///<summary>
        ///The webhook topic for `product_feeds/create` events. Triggers when product feed is created Requires the `read_product_listings` scope.
        ///</summary>
        PRODUCT_FEEDS_CREATE,
        ///<summary>
        ///The webhook topic for `product_feeds/update` events. Triggers when product feed is updated Requires the `read_product_listings` scope.
        ///</summary>
        PRODUCT_FEEDS_UPDATE,
        ///<summary>
        ///The webhook topic for `product_feeds/incremental_sync` events. Occurs whenever a product publication is created, updated or removed for a product feed Requires the `read_product_listings` scope.
        ///</summary>
        PRODUCT_FEEDS_INCREMENTAL_SYNC,
        ///<summary>
        ///The webhook topic for `product_feeds/full_sync` events. Triggers when a full sync for a product feed is performed Requires the `read_product_listings` scope.
        ///</summary>
        PRODUCT_FEEDS_FULL_SYNC,
        ///<summary>
        ///The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope.
        ///</summary>
        MARKETS_CREATE,
        ///<summary>
        ///The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope.
        ///</summary>
        MARKETS_UPDATE,
        ///<summary>
        ///The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope.
        ///</summary>
        MARKETS_DELETE,
        ///<summary>
        ///The webhook topic for `orders/shopify_protect_eligibility_changed` events. Occurs whenever Shopify Protect's eligibility for an order is changed. Requires the `read_orders` scope.
        ///</summary>
        ORDERS_SHOPIFY_PROTECT_ELIGIBILITY_CHANGED,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/rescheduled` events. Triggers when a fulfillment order is rescheduled.
        ///
        ///Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
        ///If the fulfillment order is merged then the resulting fulfillment order will be indicated in the webhook body.
        ///Otherwise it will be the original fulfillment order with an updated `fulfill_at` datetime.
        /// Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_RESCHEDULED,
        ///<summary>
        ///The webhook topic for `publications/delete` events. Occurs whenever a publication is deleted. Requires the `read_publications` scope.
        ///</summary>
        PUBLICATIONS_DELETE,
        ///<summary>
        ///The webhook topic for `audit_events/admin_api_activity` events. Triggers for each auditable Admin API request. This topic is limited to one active subscription per Plus store and requires the use of Google Cloud Pub/Sub or AWS EventBridge. Requires the `read_audit_events` scope.
        ///</summary>
        AUDIT_EVENTS_ADMIN_API_ACTIVITY,
        ///<summary>
        ///The webhook topic for `fulfillment_orders/line_items_prepared_for_pickup` events. Triggers when one or more of the line items for a fulfillment order are prepared for pickup Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
        ///</summary>
        FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP,
        ///<summary>
        ///The webhook topic for `companies/create` events. Occurs whenever a company is created. Requires the `read_customers` scope.
        ///</summary>
        COMPANIES_CREATE,
        ///<summary>
        ///The webhook topic for `companies/update` events. Occurs whenever a company is updated. Requires the `read_customers` scope.
        ///</summary>
        COMPANIES_UPDATE,
        ///<summary>
        ///The webhook topic for `companies/delete` events. Occurs whenever a company is deleted. Requires the `read_customers` scope.
        ///</summary>
        COMPANIES_DELETE,
        ///<summary>
        ///The webhook topic for `company_locations/create` events. Occurs whenever a company location is created. Requires the `read_customers` scope.
        ///</summary>
        COMPANY_LOCATIONS_CREATE,
        ///<summary>
        ///The webhook topic for `company_locations/update` events. Occurs whenever a company location is updated. Requires the `read_customers` scope.
        ///</summary>
        COMPANY_LOCATIONS_UPDATE,
        ///<summary>
        ///The webhook topic for `company_locations/delete` events. Occurs whenever a company location is deleted. Requires the `read_customers` scope.
        ///</summary>
        COMPANY_LOCATIONS_DELETE,
        ///<summary>
        ///The webhook topic for `company_contacts/create` events. Occurs whenever a company contact is created. Requires the `read_customers` scope.
        ///</summary>
        COMPANY_CONTACTS_CREATE,
        ///<summary>
        ///The webhook topic for `company_contacts/update` events. Occurs whenever a company contact is updated. Requires the `read_customers` scope.
        ///</summary>
        COMPANY_CONTACTS_UPDATE,
        ///<summary>
        ///The webhook topic for `company_contacts/delete` events. Occurs whenever a company contact is deleted. Requires the `read_customers` scope.
        ///</summary>
        COMPANY_CONTACTS_DELETE,
        ///<summary>
        ///The webhook topic for `customers/merge` events. Triggers when two customers are merged Requires the `read_customer_merge` scope.
        ///</summary>
        CUSTOMERS_MERGE,
        ///<summary>
        ///The webhook topic for `company_contact_roles/assign` events. Occurs whenever a role is assigned to a contact at a location. Requires the `read_customers` scope.
        ///</summary>
        COMPANY_CONTACT_ROLES_ASSIGN,
        ///<summary>
        ///The webhook topic for `company_contact_roles/revoke` events. Occurs whenever a role is revoked from a contact at a location. Requires the `read_customers` scope.
        ///</summary>
        COMPANY_CONTACT_ROLES_REVOKE,
        ///<summary>
        ///The webhook topic for `subscription_contracts/activate` events. Occurs when a subscription contract is activated. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_CONTRACTS_ACTIVATE,
        ///<summary>
        ///The webhook topic for `subscription_contracts/pause` events. Occurs when a subscription contract is paused. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_CONTRACTS_PAUSE,
        ///<summary>
        ///The webhook topic for `subscription_contracts/cancel` events. Occurs when a subscription contract is canceled. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_CONTRACTS_CANCEL,
        ///<summary>
        ///The webhook topic for `subscription_contracts/fail` events. Occurs when a subscription contract is failed. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_CONTRACTS_FAIL,
        ///<summary>
        ///The webhook topic for `subscription_contracts/expire` events. Occurs when a subscription contract expires. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_CONTRACTS_EXPIRE,
        ///<summary>
        ///The webhook topic for `subscription_billing_cycles/skip` events. Occurs whenever a subscription contract billing cycle is skipped. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_BILLING_CYCLES_SKIP,
        ///<summary>
        ///The webhook topic for `subscription_billing_cycles/unskip` events. Occurs whenever a subscription contract billing cycle is unskipped. Requires the `read_own_subscription_contracts` scope.
        ///</summary>
        SUBSCRIPTION_BILLING_CYCLES_UNSKIP,
        ///<summary>
        ///The webhook topic for `metaobjects/create` events. Occurs when a metaobject is created. Requires the `read_metaobjects` scope.
        ///</summary>
        METAOBJECTS_CREATE,
        ///<summary>
        ///The webhook topic for `metaobjects/update` events. Occurs when a metaobject is updated. Requires the `read_metaobjects` scope.
        ///</summary>
        METAOBJECTS_UPDATE,
        ///<summary>
        ///The webhook topic for `metaobjects/delete` events. Occurs when a metaobject is deleted. Requires the `read_metaobjects` scope.
        ///</summary>
        METAOBJECTS_DELETE,
        ///<summary>
        ///The webhook topic for `discounts/create` events. Occurs whenever a discount is created. Requires the `read_discounts` scope.
        ///</summary>
        DISCOUNTS_CREATE,
        ///<summary>
        ///The webhook topic for `discounts/update` events. Occurs whenever a discount is updated. Requires the `read_discounts` scope.
        ///</summary>
        DISCOUNTS_UPDATE,
        ///<summary>
        ///The webhook topic for `discounts/delete` events. Occurs whenever a discount is deleted. Requires the `read_discounts` scope.
        ///</summary>
        DISCOUNTS_DELETE,
        ///<summary>
        ///The webhook topic for `discounts/redeemcode_added` events. Occurs whenever a redeem code is added to a code discount. Requires the `read_discounts` scope.
        ///</summary>
        DISCOUNTS_REDEEMCODE_ADDED,
        ///<summary>
        ///The webhook topic for `discounts/redeemcode_removed` events. Occurs whenever a redeem code on a code discount is deleted. Requires the `read_discounts` scope.
        ///</summary>
        DISCOUNTS_REDEEMCODE_REMOVED,
    }

    ///<summary>
    ///Return type for `webhookSubscriptionUpdate` mutation.
    ///</summary>
    public class WebhookSubscriptionUpdatePayload : GraphQLObject<WebhookSubscriptionUpdatePayload>
    {
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
        ///<summary>
        ///The webhook subscription that was updated.
        ///</summary>
        public WebhookSubscription? webhookSubscription { get; set; }
    }

    ///<summary>
    ///A weight, which includes a numeric value and a unit of measurement.
    ///</summary>
    public class Weight : GraphQLObject<Weight>, IDeliveryConditionCriteria
    {
        ///<summary>
        ///The unit of measurement for `value`.
        ///</summary>
        public WeightUnit? unit { get; set; }
        ///<summary>
        ///The weight value using the unit system specified with `unit`.
        ///</summary>
        public float? value { get; set; }
    }

    ///<summary>
    ///Units of measurement for weight.
    ///</summary>
    public enum WeightUnit
    {
        ///<summary>
        ///1 kilogram equals 1000 grams.
        ///</summary>
        KILOGRAMS,
        ///<summary>
        ///Metric system unit of mass.
        ///</summary>
        GRAMS,
        ///<summary>
        ///1 pound equals 16 ounces.
        ///</summary>
        POUNDS,
        ///<summary>
        ///Imperial system unit of mass.
        ///</summary>
        OUNCES,
    }

    ///<summary>
    ///A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
    ///
    ///In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
    ///</summary>
    public class __Directive : GraphQLObject<__Directive>
    {
        public IEnumerable<__InputValue>? args { get; set; }
        public string? description { get; set; }
        public bool? isRepeatable { get; set; }
        public IEnumerable<__DirectiveLocation>? locations { get; set; }
        public string? name { get; set; }

        [Obsolete("Use `locations`.")]
        public bool? onField { get; set; }

        [Obsolete("Use `locations`.")]
        public bool? onFragment { get; set; }

        [Obsolete("Use `locations`.")]
        public bool? onOperation { get; set; }
    }

    ///<summary>
    ///A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
    ///</summary>
    public enum __DirectiveLocation
    {
        ///<summary>
        ///Location adjacent to a query operation.
        ///</summary>
        QUERY,
        ///<summary>
        ///Location adjacent to a mutation operation.
        ///</summary>
        MUTATION,
        ///<summary>
        ///Location adjacent to a subscription operation.
        ///</summary>
        SUBSCRIPTION,
        ///<summary>
        ///Location adjacent to a field.
        ///</summary>
        FIELD,
        ///<summary>
        ///Location adjacent to a fragment definition.
        ///</summary>
        FRAGMENT_DEFINITION,
        ///<summary>
        ///Location adjacent to a fragment spread.
        ///</summary>
        FRAGMENT_SPREAD,
        ///<summary>
        ///Location adjacent to an inline fragment.
        ///</summary>
        INLINE_FRAGMENT,
        ///<summary>
        ///Location adjacent to a schema definition.
        ///</summary>
        SCHEMA,
        ///<summary>
        ///Location adjacent to a scalar definition.
        ///</summary>
        SCALAR,
        ///<summary>
        ///Location adjacent to an object type definition.
        ///</summary>
        OBJECT,
        ///<summary>
        ///Location adjacent to a field definition.
        ///</summary>
        FIELD_DEFINITION,
        ///<summary>
        ///Location adjacent to an argument definition.
        ///</summary>
        ARGUMENT_DEFINITION,
        ///<summary>
        ///Location adjacent to an interface definition.
        ///</summary>
        INTERFACE,
        ///<summary>
        ///Location adjacent to a union definition.
        ///</summary>
        UNION,
        ///<summary>
        ///Location adjacent to an enum definition.
        ///</summary>
        ENUM,
        ///<summary>
        ///Location adjacent to an enum value definition.
        ///</summary>
        ENUM_VALUE,
        ///<summary>
        ///Location adjacent to an input object type definition.
        ///</summary>
        INPUT_OBJECT,
        ///<summary>
        ///Location adjacent to an input object field definition.
        ///</summary>
        INPUT_FIELD_DEFINITION,
        ///<summary>
        ///Location adjacent to a variable definition.
        ///</summary>
        VARIABLE_DEFINITION,
    }

    ///<summary>
    ///One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
    ///</summary>
    public class __EnumValue : GraphQLObject<__EnumValue>
    {
        public string? deprecationReason { get; set; }
        public string? description { get; set; }
        public bool? isDeprecated { get; set; }
        public bool? isPrivatelyDocumented { get; set; }
        public string? name { get; set; }
    }

    ///<summary>
    ///Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
    ///</summary>
    public class __Field : GraphQLObject<__Field>
    {
        public bool? accessRestricted { get; set; }
        public string? accessRestrictedReason { get; set; }
        public IEnumerable<__InputValue>? args { get; set; }
        public string? deprecationReason { get; set; }
        public string? description { get; set; }
        public bool? isDeprecated { get; set; }
        public bool? isPrivatelyDocumented { get; set; }
        public bool? isProtected { get; set; }
        public string? name { get; set; }
        public string? protectedContent { get; set; }
        public string? protectedSubject { get; set; }
        public string? requiredAccess { get; set; }
        public __Type? type { get; set; }
    }

    ///<summary>
    ///Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
    ///</summary>
    public class __InputValue : GraphQLObject<__InputValue>
    {
        ///<summary>
        ///A GraphQL-formatted string representing the default value for this input value.
        ///</summary>
        public string? defaultValue { get; set; }
        public string? deprecationReason { get; set; }
        public string? description { get; set; }
        public IEnumerable<string>? gidTypes { get; set; }
        public bool? isDeprecated { get; set; }
        public string? name { get; set; }
        public __Type? type { get; set; }
    }

    ///<summary>
    ///A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
    ///</summary>
    public class __Schema : GraphQLObject<__Schema>
    {
        public string? description { get; set; }
        ///<summary>
        ///A list of all directives supported by this server.
        ///</summary>
        public IEnumerable<__Directive>? directives { get; set; }
        ///<summary>
        ///If this server supports mutation, the type that mutation operations will be rooted at.
        ///</summary>
        public __Type? mutationType { get; set; }
        ///<summary>
        ///The type that query operations will be rooted at.
        ///</summary>
        public __Type? queryType { get; set; }
        ///<summary>
        ///If this server support subscription, the type that subscription operations will be rooted at.
        ///</summary>
        public __Type? subscriptionType { get; set; }
        ///<summary>
        ///A list of all types supported by this server.
        ///</summary>
        public IEnumerable<__Type>? types { get; set; }
    }

    ///<summary>
    ///The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
    ///
    ///Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
    ///</summary>
    public class __Type : GraphQLObject<__Type>
    {
        public bool? accessRestricted { get; set; }
        public string? accessRestrictedReason { get; set; }
        public string? componentName { get; set; }
        public string? description { get; set; }
        public IEnumerable<__EnumValue>? enumValues { get; set; }
        public IEnumerable<__Field>? fields { get; set; }
        public IEnumerable<__InputValue>? inputFields { get; set; }
        public IEnumerable<__Type>? interfaces { get; set; }
        public bool? isOneOf { get; set; }
        public bool? isPrivatelyDocumented { get; set; }
        public bool? isProtected { get; set; }
        public __TypeKind? kind { get; set; }
        public string? name { get; set; }
        public __Type? ofType { get; set; }
        public IEnumerable<__Type>? possibleTypes { get; set; }
        public string? protectedSubject { get; set; }
        public string? requiredAccess { get; set; }
        public string? specifiedByURL { get; set; }
    }

    ///<summary>
    ///An enum describing what kind of type a given `__Type` is.
    ///</summary>
    public enum __TypeKind
    {
        ///<summary>
        ///Indicates this type is a scalar.
        ///</summary>
        SCALAR,
        ///<summary>
        ///Indicates this type is an object. `fields` and `interfaces` are valid fields.
        ///</summary>
        OBJECT,
        ///<summary>
        ///Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
        ///</summary>
        INTERFACE,
        ///<summary>
        ///Indicates this type is a union. `possibleTypes` is a valid field.
        ///</summary>
        UNION,
        ///<summary>
        ///Indicates this type is an enum. `enumValues` is a valid field.
        ///</summary>
        ENUM,
        ///<summary>
        ///Indicates this type is an input object. `inputFields` is a valid field.
        ///</summary>
        INPUT_OBJECT,
        ///<summary>
        ///Indicates this type is a list. `ofType` is a valid field.
        ///</summary>
        LIST,
        ///<summary>
        ///Indicates this type is a non-null. `ofType` is a valid field.
        ///</summary>
        NON_NULL,
    }

    ///<summary>
    ///Return type for `deliveryProfileCreate` mutation.
    ///</summary>
    public class deliveryProfileCreatePayload : GraphQLObject<deliveryProfileCreatePayload>
    {
        ///<summary>
        ///The delivery profile that was created.
        ///</summary>
        public DeliveryProfile? profile { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `deliveryProfileRemove` mutation.
    ///</summary>
    public class deliveryProfileRemovePayload : GraphQLObject<deliveryProfileRemovePayload>
    {
        ///<summary>
        ///The delivery profile deletion job triggered by the mutation.
        ///</summary>
        public Job? job { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }

    ///<summary>
    ///Return type for `deliveryProfileUpdate` mutation.
    ///</summary>
    public class deliveryProfileUpdatePayload : GraphQLObject<deliveryProfileUpdatePayload>
    {
        ///<summary>
        ///The delivery profile that was updated.
        ///</summary>
        public DeliveryProfile? profile { get; set; }
        ///<summary>
        ///The list of errors that occurred from executing the mutation.
        ///</summary>
        public IEnumerable<UserError>? userErrors { get; set; }
    }
}
#endif
