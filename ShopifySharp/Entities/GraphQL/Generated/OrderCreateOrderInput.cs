#nullable enable
namespace ShopifySharp.GraphQL;
using System;
using System.Text.Json.Serialization;
using System.Collections.Generic;

/// <summary>
/// The input fields for creating an order.
/// </summary>
public record OrderCreateOrderInput : GraphQLInputObject<OrderCreateOrderInput>
{
    /// <summary>
    /// The mailing address associated with the payment method. This address is an optional field that won't be
    ///                available on orders that don't require a payment method.
    ///               > Note:
    ///               > If a customer is provided, this field or `shipping_address` (which has precedence) will be set as the
    ///               > customer's default address. Additionally, if the provided customer is new or hasn't created an order yet
    ///               > then their name will be set to the first/last name from this address (if provided).
    /// </summary>
    [JsonPropertyName("billingAddress")]
    public MailingAddressInput? billingAddress { get; set; } = null;

    /// <summary>
    /// Whether the customer consented to receive email updates from the shop.
    /// </summary>
    [JsonPropertyName("buyerAcceptsMarketing")]
    public bool? buyerAcceptsMarketing { get; set; } = null;

    /// <summary>
    /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
    /// when the order was closed. Returns null if the order isn't closed.
    /// </summary>
    [JsonPropertyName("closedAt")]
#if NETSTANDARD2_0
	[System.Text.Json.DateOnlyConverter]
#endif
    public DateTime? closedAt { get; set; } = null;

    /// <summary>
    /// The ID of the purchasing company's location for the order.
    /// </summary>
    [JsonPropertyName("companyLocationId")]
    public string? companyLocationId { get; set; } = null;

    /// <summary>
    /// The shop-facing currency for the order. If not specified, then the shop's default currency is used.
    /// </summary>
    [JsonPropertyName("currency")]
    public CurrencyCode? currency { get; set; } = null;

    /// <summary>
    /// A list of extra information that's added to the order. Appears in the
    /// **Additional details** section of an order details page.
    /// </summary>
    [JsonPropertyName("customAttributes")]
    public ICollection<OrderCreateCustomAttributeInput>? customAttributes { get; set; } = null;

    /// <summary>
    /// The customer to associate to the order.
    /// </summary>
    [JsonPropertyName("customer")]
    public OrderCreateCustomerInput? customer { get; set; } = null;

    /// <summary>
    /// A discount code applied to the order.
    /// </summary>
    [JsonPropertyName("discountCode")]
    public OrderCreateDiscountCodeInput? discountCode { get; set; } = null;

    /// <summary>
    /// A new customer email address for the order.
    ///               > Note:
    ///               > If a customer is provided, and no email is provided, the customer's email will be set to this field.
    /// </summary>
    [JsonPropertyName("email")]
    public string? email { get; set; } = null;

    /// <summary>
    /// The financial status of the order. If not specified, then this will be derived
    /// through the given transactions. Note that it's possible to specify a status
    /// that doesn't match the given transactions and it will persist, but if an
    /// operation later occurs on the order, the status may then be recalculated to
    /// match the current state of transactions.
    /// </summary>
    [JsonPropertyName("financialStatus")]
    public OrderCreateFinancialStatus? financialStatus { get; set; } = null;

    /// <summary>
    /// The fulfillment to create for the order. This will apply to all line items.
    /// </summary>
    [JsonPropertyName("fulfillment")]
    public OrderCreateFulfillmentInput? fulfillment { get; set; } = null;

    /// <summary>
    /// The fulfillment status of the order. Will default to `unfulfilled` if not included.
    /// </summary>
    [JsonPropertyName("fulfillmentStatus")]
    public OrderCreateFulfillmentStatus? fulfillmentStatus { get; set; } = null;

    /// <summary>
    /// The line items to create for the order.
    /// </summary>
    [JsonPropertyName("lineItems")]
    public ICollection<OrderCreateLineItemInput>? lineItems { get; set; } = null;

    /// <summary>
    /// A list of metafields to add to the order.
    /// </summary>
    [JsonPropertyName("metafields")]
    public ICollection<MetafieldInput>? metafields { get; set; } = null;

    /// <summary>
    /// The order name, generated by combining the `order_number` property with the
    /// order prefix and suffix that are set in the merchant's [general
    /// settings](https://www.shopify.com/admin/settings/general). This is different
    /// from the `id` property, which is the ID of the order used by the API. This
    /// field can also be set by the API to be any string value.
    /// </summary>
    [JsonPropertyName("name")]
    public string? name { get; set; } = null;

    /// <summary>
    /// The new contents for the note associated with the order.
    /// </summary>
    [JsonPropertyName("note")]
    public string? note { get; set; } = null;

    /// <summary>
    /// A new customer phone number for the order.
    /// </summary>
    [JsonPropertyName("phone")]
    public string? phone { get; set; } = null;

    /// <summary>
    /// The purchase order number associated to this order.
    /// </summary>
    [JsonPropertyName("poNumber")]
    public string? poNumber { get; set; } = null;

    /// <summary>
    /// The presentment currency that was used to display prices to the customer. This
    /// must be specified if any presentment currencies are used in the order.
    /// </summary>
    [JsonPropertyName("presentmentCurrency")]
    public CurrencyCode? presentmentCurrency { get; set; } = null;

    /// <summary>
    /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
    /// when an order was processed. This value is the date that appears on your
    /// orders and that's used in the analytic reports. If you're importing orders
    /// from an app or another platform, then you can set processed_at to a date and
    /// time in the past to match when the original order was created.
    /// </summary>
    [JsonPropertyName("processedAt")]
#if NETSTANDARD2_0
	[System.Text.Json.DateOnlyConverter]
#endif
    public DateTime? processedAt { get; set; } = null;

    /// <summary>
    /// The website where the customer clicked a link to the shop.
    /// </summary>
    [JsonPropertyName("referringSite")]
    public string? referringSite { get; set; } = null;

    /// <summary>
    /// The mailing address to where the order will be shipped.
    ///               > Note:
    ///               > If a customer is provided, this field (which has precedence) or `billing_address` will be set as the
    ///               > customer's default address. Additionally, if the provided customer doesn't have a first or last name
    ///               > then it will be set to the first/last name from this address (if provided).
    /// </summary>
    [JsonPropertyName("shippingAddress")]
    public MailingAddressInput? shippingAddress { get; set; } = null;

    /// <summary>
    /// An array of objects, each of which details a shipping method used.
    /// </summary>
    [JsonPropertyName("shippingLines")]
    public ICollection<OrderCreateShippingLineInput>? shippingLines { get; set; } = null;

    /// <summary>
    /// The ID of the order placed on the originating platform. This value doesn't
    /// correspond to the Shopify ID that's generated from a completed draft.
    /// </summary>
    [JsonPropertyName("sourceIdentifier")]
    public string? sourceIdentifier { get; set; } = null;

    /// <summary>
    /// The source of the checkout. To use this field for sales attribution, you must
    /// register the channels that your app is managing. You can register the channels
    /// that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
    /// After you've submited your request, you need to wait for your request to be
    /// processed by Shopify. You can find a list of your channels in the Partner
    /// Dashboard, in your app's Marketplace extension. You can specify a handle as
    /// the source_name value in your request.
    /// </summary>
    [JsonPropertyName("sourceName")]
    public string? sourceName { get; set; } = null;

    /// <summary>
    /// A valid URL to the original order on the originating surface. This URL is
    /// displayed to merchants on the Order Details page. If the URL is invalid, then
    /// it won't be displayed.
    /// </summary>
    [JsonPropertyName("sourceUrl")]
    public string? sourceUrl { get; set; } = null;

    /// <summary>
    /// A comma separated list of tags that have been added to the draft order.
    /// </summary>
    [JsonPropertyName("tags")]
    public ICollection<string>? tags { get; set; } = null;

    /// <summary>
    /// Whether taxes are included in the order subtotal.
    /// </summary>
    [JsonPropertyName("taxesIncluded")]
    public bool? taxesIncluded { get; set; } = null;

    /// <summary>
    /// An array of tax line objects, each of which details a tax applicable to the
    /// order. When creating an order through the API, tax lines can be specified on
    /// the order or the line items but not both. Tax lines specified on the order are
    /// split across the _taxable_ line items in the created order.
    /// </summary>
    [JsonPropertyName("taxLines")]
    public ICollection<OrderCreateTaxLineInput>? taxLines { get; set; } = null;

    /// <summary>
    /// Whether this is a test order.
    /// </summary>
    [JsonPropertyName("test")]
    public bool? test { get; set; } = null;

    /// <summary>
    /// The payment transactions to create for the order.
    /// </summary>
    [JsonPropertyName("transactions")]
    public ICollection<OrderCreateOrderTransactionInput>? transactions { get; set; } = null;

    /// <summary>
    /// The ID of the user logged into Shopify POS who processed the order, if applicable.
    /// </summary>
    [JsonPropertyName("userId")]
    public string? userId { get; set; } = null;
}