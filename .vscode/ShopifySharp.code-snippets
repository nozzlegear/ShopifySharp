{
        "Setup ShopifySharp Test": {
            "prefix": "test-shopifysharp",
            "body": [
                "using System;",
                "using System.Collections.Generic;",
                "using System.Linq;",
                "using System.Net;",
                "using System.Threading.Tasks;",
                "using Xunit;",
                "",
                "namespace ShopifySharp.Tests",
                "{",
                "\t[Trait(\"Category\", \"$1\")]",
                "\tpublic class $1_Tests : IClassFixture<$1_Tests_Fixture>",
                "\t{",
                "\t\tprivate $1_Tests_Fixture Fixture { get; }",
                "",
                "\t\tpublic $1_Tests($1_Tests_Fixture fixture)",
                "\t\t{",
                "\t\t\tthis.Fixture = fixture;",
                "\t\t}",
                "",
                "\t\t[Fact]",
                "\t\tpublic async Task Counts_$1s()",
                "\t\t{",
                "\t\t\tvar count = await Fixture.Service.CountAsync();",
                "",
                "\t\t\tAssert.True(count > 0);",
                "\t\t}",
                "",
                "\t\t[Fact]",
                "\t\tpublic async Task Lists_$1s()",
                "\t\t{",
                "\t\t\tvar list = await Fixture.Service.ListAsync();",
                "",
                "\t\t\tAssert.True(list.Count() > 0);",
                "\t\t}",
                "",
                "\t\t[Fact]",
                "\t\tpublic async Task Deletes_$1s()",
                "\t\t{",
                "\t\t\tvar created = await Fixture.Create(true);",
                "\t\t\tbool threw = false;",
                "",
                "\t\t\ttry",
                "\t\t\t{",
                "\t\t\t\tawait Fixture.Service.DeleteAsync(created.Id.Value);",
                "\t\t\t}",
                "\t\t\tcatch (ShopifyException ex)",
                "\t\t\t{",
                "\t\t\t\tConsole.WriteLine($\"{nameof(Deletes_$1s)} failed. {ex.Message}\");",
                "",
                "\t\t\t\tthrew = true;",
                "\t\t\t}",
                "",
                "\t\t\tAssert.False(threw);",
                "\t\t}",
                "",
                "\t\t[Fact]",
                "\t\tpublic async Task Gets_$1s()",
                "\t\t{",
                "\t\t\tvar obj = await Fixture.Service.GetAsync(Fixture.Created.First().Id.Value);",
                "",
                "\t\t\tAssert.NotNull(obj);",
                "\t\t\tAssert.True(obj.Id.HasValue);",
                "\t\t}",
                "",
                "\t\t[Fact]",
                "\t\tpublic async Task Creates_$1s()",
                "\t\t{",
                "\t\t\tvar obj = await Fixture.Create();",
                "",
                "\t\t\tAssert.NotNull(obj);",
                "\t\t\tAssert.True(obj.Id.HasValue);",
                "\t\t}",
                "",
                "\t\t[Fact]",
                "\t\tpublic async Task Updates_$1s()",
                "\t\t{",
                "\t\t\tstring newValue = \"New Value\";",
                "\t\t\tvar created = await Fixture.Create();",
                "\t\t\tlong id = created.Id.Value;",
                "\t\t\t",
                "\t\t\tcreated.Value = newValue;",
                "\t\t\tcreated.Id = null;",
                "\t\t\t",
                "\t\t\tvar updated = await Fixture.Service.UpdateAsync(id, created);",
                "",
                "\t\t\t// Reset the id so the Fixture can properly delete this object.",
                "\t\t\tcreated.Id = id;",
                "",
                "\t\t\tAssert.Equal(newValue, updated.Value);   ",
                "\t\t}",
                "\t}",
                "",
                "\tpublic class $1_Tests_Fixture: IAsyncLifetime",
                "\t{",
                "\t\tpublic $1Service Service => new $1Service(Utils.MyShopifyUrl, Utils.AccessToken);",
                "",
                "\t\tpublic List<$1> Created { get; } = new List<$1>();",
                "",
                "\t\tpublic async Task InitializeAsync()",
                "\t\t{",
                "\t\t\t// Create one for count, list, get, etc. tests.",
                "\t\t\tawait Create();",
                "\t\t}",
                "",
                "\t\tpublic async Task DisposeAsync()",
                "\t\t{",
                "\t\t\tforeach (var obj in Created)",
                "\t\t\t{",
                "\t\t\t\ttry",
                "\t\t\t\t{",
                "\t\t\t\t\tawait Service.DeleteAsync(obj.Id.Value);",
                "\t\t\t\t}",
                "\t\t\t\tcatch (ShopifyException ex)",
                "\t\t\t\t{",
                "\t\t\t\t\tif (ex.HttpStatusCode != HttpStatusCode.NotFound)",
                "\t\t\t\t\t{",
                "\t\t\t\t\t\tConsole.WriteLine($\"Failed to delete created $1 with id {obj.Id.Value}. {ex.Message}\");",
                "\t\t\t\t\t}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "",
                "\t\t/// <summary>",
                "\t\t/// Convenience function for running tests. Creates an object and automatically adds it to the queue for deleting after tests finish.",
                "\t\t/// </summary>",
                "\t\tpublic async Task<$1> Create(bool skipAddToCreateList = false)",
                "\t\t{",
                "\t\t\tvar obj = await Service.CreateAsync(new $1()",
                "\t\t\t{",
                "\t\t\t\t$0",
                "\t\t\t});",
                "",
                "\t\t\tif (! skipAddToCreateList)",
                "\t\t\t{",
                "\t\t\t\tCreated.Add(obj);",
                "\t\t\t}",
                "",
                "\t\t\treturn obj;",
                "\t\t}",
                "\t}",
                "}"
            ],
            "description": "Creates an xunit test class for ShopifySharp."
        }
    }