using System;
using System.IO;
using Microsoft.CodeAnalysis;

namespace ShopifySharp.SourceGenerators.Internal;

[Generator]
public class GraphIdSourceGenerator : ISourceGenerator
{
    private const string GraphIdsFileName = "GraphIds.txt";

    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization required for this generator.
    }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var file in context.AdditionalFiles)
        {
            if (Path.GetFileName(file.Path) != GraphIdsFileName)
                return;

            var text = file.GetText();
            if (text is null || text.Lines.Count == 0)
                throw new Exception(GraphIdsFileName + " was empty.");

            foreach (var line in text.Lines)
            {
                var className = line.ToString().Trim();
                if (className is null or "")
                    continue;

                // Each line is a json tuple: [Graph entity name, graph entity id]
                // var className = lineStr.Remove(0, 2);
                // className = className.Substring(0, className.Length - 2);

                var source =
                    //lang=cs
                    $$"""
                      // <auto-generated/>
                      using System.Text.Json.Serialization;
                      using System.Text.RegularExpressions;
                      using ShopifySharp.Infrastructure;
                      using ShopifySharp.Converters.SystemTextJson;

                      namespace ShopifySharp.Identifiers;

                      [JsonConverter(typeof(ShopifyGraphIdJsonConverter<{{className}}Id>))]
                      public readonly record struct {{className}}Id: IShopifyGraphId
                      {
                          public string ResourceType { get; } = "{{className}}";
                          public string GraphId { get; }
                          public long RestId { get; }
                      
                          public {{className}}Id(string graphId)
                          {
                               GraphId = graphId;
                               RestId = Parse(graphId);
                          }
                      
                          public {{className}}Id(long restId)
                          {
                              RestId = restId;
                              GraphId = Format(restId, ResourceType);
                          }
                      
                          public static string Format(long restId, string resourceType) =>
                              $"gid://shopify/{resourceType}/{restId}";
                      
                          private static long Parse(string graphId)
                          {
                              return ShopifyGraphIdUtil.Parse(graphId);
                          }
                      
                          #if NETSTANDARD2_0
                          public override string ToString() => GraphId;
                          #endif
                      
                          public bool Equals({{className}}Id? other) => GraphId == other?.GraphId;
                      }
                      """;

                // Add the source code to the compilation.
                var fileName = $"{className}Id.g.cs";
                context.AddSource(fileName, source);
            }
        }
    }
}
